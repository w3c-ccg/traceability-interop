{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4a250036-324f-40ad-915e-2198741928c4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "83c6ba71-afe7-46e3-a34b-97c13a13e4fa",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4b8aac7-171f-4f84-a165-851adb2541dd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "09e3f4a1-fbdb-4f6e-8e9e-c5f1cf014fda"
                }
              }
            ]
          },
          {
            "id": "79d8eda3-582d-4c29-99db-a957e344c184",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d39efd40-8716-4c70-ba63-3af13097966d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "69b00910-7b67-480a-9b11-92dcb4971251"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "81d7eb2f-b4cf-4b21-8fdf-9c7d176cc8e5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3495bc7d-074f-4a14-a3a1-d9c71d0e7cbc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f7d5e34f-5cd3-44c5-a7cc-b0519c9ad5fc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95c3b3a3-04fd-4c1f-9cbf-f1d8b5d09aed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a2a58ad-1298-4092-8be8-ea09c51fa773"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "581c8732-cc73-489d-be3a-e7c43895607a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c00a2f43-ae0f-4df7-b09f-b586e738f802"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b89c95a5-6fed-468d-939c-802772207a7c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "82a906c0-ea50-4613-9033-80a0d85b81a6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74d53a36-00c0-49f5-bdb8-92a395101386",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "93510148-20f2-4455-a278-c29a64132534"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b1efd3e-07ff-4fd0-bb0a-0b29e8797c2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3b2c47e-19e6-4bb4-a3e8-2ae2090c7b8e"
            }
          }
        ]
      },
      {
        "id": "e1c0d10a-6af3-4fab-a628-e43c303bbebe",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3340a818-6d24-48dc-acea-8c7f102841bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3743e45-d183-44c9-8a9e-fe329801e292",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "58fee8d2-8cc3-4b00-a36d-ddf3f3c1a6c6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b48ee5-ac65-40c2-8e86-1a89cead5eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95b4fc0e-6374-4818-90f8-29104d8c9716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fc35b7-f907-4436-89dd-4bba9bd15865",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc8d3fb-29cf-4e14-827c-1a48fb11f873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32d2aa75-8647-417d-b694-dfe11ef46d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b07323-d6e6-4b7f-88ad-b2885eb4ecbd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d0d3d2-006c-4624-abad-011ae304ca52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e19729a4-3dd0-4e1e-aaff-62be0dd00c73"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6d2928e8-010a-4e0e-82d0-bf09f9c9c893",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77e69c47-f1e2-458d-92d4-2319c71ca8e1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b0b507-fc1e-423b-af51-ffa9f2c14c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5fadca0-2292-4381-a349-08c61b872a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978e9139-4bf1-4b42-a500-b507f5d3e56d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb12cd7-f4bc-46d9-908f-c4d974d064df"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "47e12f44-0c5e-4754-a16f-8835e76cb111",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f784864-d8b3-4b04-8610-6589fcbe8d31",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ad804b0-6255-4fa2-b173-1db9bdbb2915",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d41549b3-3a37-4e94-abad-f4540318a284"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc6396b6-27d2-4a24-8050-1951310158cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "81965124-730a-44f6-9903-aeda266fe75b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "888e0d31-50ef-4c34-a14c-b66b0bd7cb99",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6b8ef2b-acce-466e-8ea0-4bfc24c0feb8"
            }
          }
        ]
      },
      {
        "id": "f8566636-9276-469a-bec8-0a88b4105008",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f5eaa1ca-0b66-4344-acc8-8acbe83eaa1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "28a6b52b-0838-4704-a678-da1e679d7689",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "aa6e2981-25be-4aec-ad19-f188a2eb9b49",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfed824-98f5-4ce3-87ec-cfec3fb5816a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7bb0d35-6a65-4007-979f-44992ad19b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65564879-8832-48e2-8d8d-55bda6e6aa5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e47993e-d3b0-4dce-9c3e-affa0891dff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f940a502-1815-412e-a6bc-d6887053d5f6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dc8da2-c103-4c01-bd3c-4b5327c977b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe0d8e6-3f89-4725-be2e-874c994f7ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f31ee2d-ad79-45d8-a2b4-ce0a2469e959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1823bd9-ebe0-41c1-8c99-6130998d69fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65fc10f7-4e69-4dc5-90f0-83ae7864686a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531b3897-1eb7-4846-8519-2d3d8bcf6e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a761ff66-1140-4b74-bc5d-2681ae4e2730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370561be-8b14-4fd4-a1ea-317efe42ea80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "809cda58-00d2-4bff-8144-7d18b5ef59e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f26f85-1b28-422a-a2ef-d8df0b45a435",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d0b047-c461-45d4-9494-632c3f4321cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78aa8a4-bfc0-440c-96ab-b4e2c5ba0a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb7567f-dac8-4fd6-828e-38592e3c81db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "644e2b53-a187-43ee-8869-00006ac1e9ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9261b4c-9bf7-4ff3-81b3-149954769760",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301ffbc8-0159-4b27-a059-2141aa02ef42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c29ada44-0b63-4203-afbb-1e123799fc8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f772596-580d-49cf-9057-48eb660fa757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "818e846b-b292-4c44-bf62-f303c9aaca9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb32e2fd-330b-458e-a017-c3cdbbffff4b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e23592e-7bb1-4354-8eb4-38a727fd3eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab10be85-72b9-4001-ac11-b3d12dce6c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6f356d-6348-40e8-9929-689d7bf8de9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "349c3d2c-b717-4103-9ad2-cb8888dac65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e3cb58-e050-429d-a7b4-8f3a67b8c481",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643c20c8-7fd0-447d-8991-009ebebee915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760da805-f9ca-42ea-a3b9-ec4367ce12a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af200a19-3857-46ca-bf81-a96b81ac5ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31bd70a7-5e2d-428f-84d1-eaa1703484e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9503e77-1102-4824-8c43-539c5846c497",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c780b7c-79b7-4a39-937a-4d608f7756a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5029756f-cbc3-4f7b-a5c1-b67a7e7561a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e673c66-5841-4255-ba39-cb48d9883140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11ce952b-db6a-479a-b509-398bd3916e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e57d90-463b-425b-b8c5-ccaf2115c818",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1627aa9-f926-4421-8b1f-37e0322ea7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a0c87f-b12c-457b-aab0-aa0d4d14a212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3758f0c8-417c-4247-86b7-b4ef94eec4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a360c791-ce38-4529-849a-ada1bed659f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3417a9-ead5-45a2-8789-e8c78c93a573",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438619b9-c0f4-4471-aa15-df32a6fe23fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2580456-c68e-4dae-83f6-0c2ea849fe90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9aa89a8-3232-46d0-a0b3-d6be18614bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1130fe42-f888-4b7c-9225-67015028749e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6704662d-40e8-49a3-b27f-165592941d27",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92477680-80ec-4ba3-9a29-b4c8d437e3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231588be-55c0-48fc-9e0e-6704434f3757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529bc9e9-cca0-4ce2-8429-4561d78c1e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0736d5a0-3c0a-4e57-a819-c7c8ebf36254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49fae8ab-3546-4775-9eb0-94b2f8266b79",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab8bc50-f2be-47bb-a52a-3ea1a5c722c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a8d429-fc37-4bdd-b009-de9a7002903c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4334d51e-1825-400f-b5ec-9f15a60fa2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5950e81b-4142-4bbb-bc59-16057a163d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21e1bfc-3bb5-4fa5-a298-f7eff510e090",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eaf1f3e-ea81-4ef0-b550-b8850e31c4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1850475-51c4-4747-8fe4-d8804302c4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8d6bb2-8d89-4dbc-9b01-0eae9a19913f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "444cd343-e535-4aab-8bad-19aefde794fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01de11d-885f-496e-aff7-c2cc2adf259f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0664ae-ce18-406b-97e5-375ba5e77a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32bbd85-5bf1-40b4-b343-ad84fc8f9d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b88779b-4631-4d01-89d1-716af60152c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2526148b-afee-432f-a737-d2b0db6b7057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721b9f50-a78b-40a6-93c0-74ee629af564",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dddcc0e-29c0-44dd-b507-2fcb7498604e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7345e2e-d967-4670-b107-07fe201a471b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47959cf8-6281-4cea-8ac3-547d32e01726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "baca83bd-7d92-4d00-bcaa-0bb7c775655d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d07ed84-f538-456b-927e-54bc6668e577",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3c2178-a4dc-4b13-a54d-54887de765a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3aa938-6fdc-4501-9568-91c3288df92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cf4f6f-99c4-4362-90d1-5148313b361c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34aeea54-e291-4bc0-a604-b89e643d8cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b23e35-1a67-4a77-8213-bc58b162e849",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf13f985-0575-40f2-a22a-f9619e0369ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e77d68-19f5-4992-b9f7-9189ae64dba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87be3502-72b0-4167-b08c-e8c383aeb841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f363941-5b82-495f-bc74-b745ee1c807c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811ab568-269e-496d-914c-5f722ba63afe",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e771a3ce-c8d3-475c-bf64-5688e1dad7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c89a35-b110-47c6-a56e-d4b5bbcc9355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8f0a21-c2bd-4e6d-82da-229c26e66850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc9d78a5-c36a-4c1b-9462-c4fcf8daa1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacf4b59-01c7-4c34-91dd-d4328a7fcaa7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73137135-cc52-45d7-bf3a-b79352df9787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c13ede-ef3a-463c-b461-3bcac2b3873a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a120680-0f19-42dd-aaf0-797e00e8582f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7828c48e-ac4b-4062-a597-b37c3e037674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f36778-29cb-4522-a754-540f656bb8eb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84350c2b-a930-4089-99e7-eb91685c892f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f4e2db-b890-43fe-8c9d-a9821d30b74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef5c8b6-9263-4053-bfb0-aa76b9e849fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "035ee075-3d19-4a01-9a89-0d1d62926fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c778439f-17b4-4536-874c-0aff1edee2c6",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6aa80b-8095-43db-ac7e-e70f507f2fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95e48ac-791b-4ea2-9092-ad25862f0cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd45c21-b43b-48ba-96f7-00873a1f5ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b68a7306-13df-424c-a13d-5323f5f6841c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17e4322-1826-45e4-bf62-abdb7a521ded",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5200bf1-bb84-4e32-84b1-65f9bf66c6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5d0261-9502-4bd4-b717-af8952389d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898e9a23-d2e8-4f2b-bb1a-427175c79fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "721b8b5e-c9b9-406d-84a7-8cc52dc00ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebed67ab-7a15-4c8d-aaf7-2084bdc60db5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad47b62-6fef-4191-b667-a3c494f2c483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea336456-1f66-49cf-bdd6-9c061692760b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4daa76b8-48ea-423f-92cf-274a915b2f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2fd5732-5541-4e53-b8e2-50b1d3f999a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def32c07-23b3-4805-971a-e8153d40b0b8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7cf151-67d5-4902-8655-0b32689bf202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edcbf365-2ca7-4938-aca1-dba32b44a05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0940eb-1c54-4d6d-833f-a705fc67c55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "99051cb1-27b4-4bef-87f1-2d827672b78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b33d03-df5b-4e73-97c8-9b63dc922039",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe0fdb4-8611-4a6e-97ee-3f4c391e83f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4558fbf-0f78-46b1-862a-a529cca71936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3de3777-8fc8-40c2-b60c-2d924a566f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ec2ed7-9941-41b3-95bc-6f4d4f979ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb839a8-9f23-4c4a-aca5-54acee1f44be",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36edbe2e-8acb-4f27-aebc-5e88a39fea1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6895e2f2-28bf-49b1-b51c-4661205957d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d290e1f-0c8e-4fa4-a637-8811027b1ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "200baf4d-e6f8-47c5-86b3-aa78b9ae1883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf34e9c-6931-4ce4-bb77-296edbea6d36",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3983ac5-30be-4bd9-b276-ecf2c422889b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f067cf-5373-4fca-88d1-4acaa956173e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23cd100-2585-420f-ba5b-a532a11d3f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "50746dcd-eeac-4455-aa76-4bbe974227ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1766b03-6dcb-41bb-a516-b469139ea204",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feeba750-b370-4d33-9a91-51d3b7812fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80eb202f-c45f-44a1-acb2-641d7773496b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b28066-4dd3-40bb-80b4-6e63f4378adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dfe93a7-ac53-44b3-b73e-f9db6933f07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a64bcd-8d41-4d04-9669-4f3f28db8eac",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452524d1-5dea-4373-866f-7fb0798c67fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944d2f66-1498-4a5f-b56f-3bc1f2de0e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280fad9e-2706-4e58-ad15-82dc34ea0ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4be28c-62bd-45f8-87a4-b64d7ec2d75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7127c47-a653-4703-b7d5-a58ff0134e5f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51748f8-aa2d-46be-a1cb-0e5d5bbb5419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d57b3d6-0f1a-44bd-bed2-232348c4c953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3d3577-62d2-420c-a763-c0846def9984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "494af858-f1c4-4eb5-81d8-161930c35d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f94831a-6d8d-46f7-b750-d5788dbe37c4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e45c74-8e25-402f-9db1-264549388521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f270ddf-2b0f-4479-84b3-e368bce3b2df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65f5ed3-86ca-470f-983f-cb95a1dca22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2367ef-19ac-489b-b306-bd80b49afc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860a0c0d-a4d3-400d-957a-0c5d54fdab92",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276ed1c7-db6c-4222-8395-4045bd8820d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b482cd12-a5d0-4332-a12c-e0bf2fabb7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048aef20-e1e3-4ee1-9a0b-e087fb84e480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c65020a8-7c4a-40bd-86a1-47c26d3221d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1069ff01-b0d9-4569-b7f3-273c72b713ff",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4561d511-0de0-4647-8edb-55fe4d63383e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55f6294-77f0-430f-88ea-17e8b46cd01a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2e9ab2-de00-4e1b-b543-483fdf23d321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf67eb8d-4a33-4036-9dc4-7e8bdd7616f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f52b9f-e382-4022-9f3a-fd07c3cb75ec",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a6bc8d-aefa-40ab-ac5f-4a0c2c80a5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf918b01-4c71-486d-84c7-a91784573d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeac3985-6fff-4fdf-8a02-7bd5530602d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64e62bc1-fdd1-4cc7-9234-d2edaf2a0695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef169539-f6c5-4ffc-bd8f-ffaf793f3a9b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc3a665-2b64-499f-acd5-cfbda948c7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "349ed745-c54f-4828-8d8d-47b7bfd6058d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b9a4aa-b3e4-4720-ae9e-da4c9ce8e039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "71487566-2fdc-4902-bcf0-302c2aad029f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635ad837-2be7-4c9c-bb40-9ba589ceb725",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8e3fdc-f8e8-43de-8696-48b0716e47dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb06a7c9-3622-4403-8795-f3e778e4f0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168063c8-f5f1-4993-96a1-0843c85e5000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c0df112-6cb4-405f-9a29-94b3efba0b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95123456-3906-4f77-b0a5-0e2fee9f8b59",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66c5c31-9529-4f29-9635-104f92f6220a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d9d84f5-8966-4566-879f-7d5d61c89f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7749969a-a8fd-48d8-89ed-0db35dc4addf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59736ad5-1405-4c36-bb91-0ad9d119ffb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0214ef08-0002-489c-ad5f-cf84b136cb6b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5fed64-eada-4989-8494-929d6aaaa052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec36375-f469-487c-802d-00b0ebdcaf4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc70adf-6638-4e6a-8a58-4d5a876bbb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3d6e5dc-b065-4505-84f8-98728a23ed41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d029584-d334-4437-a7ae-97250c671d77",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc78bff-467d-4eb6-801f-6ada2f47596c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca79fca5-03a7-4656-951f-8961ed279060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b659a79-f058-4203-a86d-5cd3962934e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a68717-e76b-4ae1-bd85-cd8a8e36482a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c936a1-7ddd-48dd-b1f4-37bb506c1483",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b4006e-570b-475d-863a-7fe7a50d7004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e27042a-49ad-471d-9da5-3dad13fc6949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc30e40-6eea-4760-8910-5ce64808a8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6830074-fce3-43b6-a694-5f23f6d55884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ce3790-c432-4439-bdbe-565726819b69",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbc8fb8-aa4c-48c6-a68e-656b63614624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ed59a6-e5e3-4da0-b0fb-5633dc1ce174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0684bdd1-565d-4411-8f8d-40e25f1ba3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8edc2fe4-3ce5-4dba-9601-f67d5c92739f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368d4eb4-a868-4b23-9433-e4767a71d84a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c82dbd-260c-40c4-a601-e3cafeb24a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "537a64d7-7bb5-42d3-b07d-e6be2d168182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8f0819-7402-4e61-acfa-7f09ebe58f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a643ec-3ad2-4710-b523-d76e8e223d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a43641-1fcf-451f-9bf0-ab9f172540d8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaacd33-ce49-4795-8d6a-e06d203ea441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019baec2-dbb2-415e-ba99-e0c1d7e9de1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91fc52b-9b2a-4262-9d8f-6b41f196a966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "29901260-5350-4d36-bc07-271f41bd73bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de8bdd5-9c29-41c4-9bc2-6cafe9895e88",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a955e434-5630-4d47-8786-3c6bf1776168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728404b4-9441-4998-8f77-353e22dc7b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887b9a66-1f8e-444a-8429-076a422b5858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb950811-ef0e-4c4a-b1b5-96e86bb154e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b971ca52-eb8d-4426-aba5-11be07bd53aa",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c9c468-0ca2-48fc-a68a-21a7908614c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1ff802-a704-422a-9cb0-1a1475300da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69694d96-d6ff-4f47-ab62-4228b6f57366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c4b92b7-a45f-4528-bfad-8d3fc2c5bb00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5add67-be8d-4ce7-90d6-91bddd0b0ace",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f308988-3c62-4c0c-b0a8-8fc1ad8e008d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7dae786-c413-4b7d-8002-050f803d3e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c725c4-7d86-41bf-9177-b71921537d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "351c5c40-1f91-46ac-a3b6-c105013059c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5733a05-c7b5-466d-8df2-29986428702e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cc9a33-a3e7-43b8-b5d4-996f132a8bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7109a4a-1757-4f3f-92ce-e169ce4a2383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b78406-727d-412c-81ab-78c0d975b631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd642893-567f-4db7-bfef-4082914c512c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c389ba04-2597-45a8-a516-1c866816da77",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38284259-86fa-4503-9773-702f63a34e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4990e1-239f-4be4-a7ac-5a02f87db997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54774ca8-a49d-446e-9fa5-8bf44482b0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a278063-8ced-41ae-9c5e-dbf108a95fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d9c51b-2337-4d35-a823-92a45e6fca11",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1134547-be7a-4903-a0c6-dffbe5904b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594e84c2-205c-48fe-9ccd-bf0eed7bcb1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae6956b-1587-4fcb-b57c-d83811de6d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "caa77077-9639-44d7-bc9d-d4d63230d907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67b2704-1ed7-4207-8586-df5160a55f76",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8993b2-877e-45dd-8b0c-0d150421770b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba3a6a3-8d07-47b9-97e9-a3807d8b3e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d4cbc3-3e8d-4a7f-975b-f0293790e47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce7cca29-8504-41bc-b85e-b8d01a3323c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffa8dda-1d8b-47f1-bdde-691d50113a47",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc1bfe1-2773-4312-8dd3-d19bdfe05d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a543a06-cc34-4b51-867d-90696c4bb9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc7b318-1d5a-4e4c-8563-84dbdbf7551f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8094a8-dc8e-4f4d-8f89-387c1665625a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d94417-8b1c-4b89-b295-73d6d3e5d300",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092f6def-8c40-4ee2-968c-158668f776fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c4d12c-7119-4fb8-b47f-9911031cd7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80399a55-e3a7-4a03-ab16-394b097d24ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "df927784-3807-43e8-9320-c6e0af7316d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1fb5f4-aa84-4e8c-8a46-6c51aa3b2c68",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e1e2e6-705d-4749-b525-ed890402a8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab79564-a5bb-48bc-85bb-d82eb3f71083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cabfd4-3ab4-4c2f-b881-80d4cb5c18bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17ca2a61-2756-4647-8a37-93e652f89c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6507e2f-5bfd-4b67-ae7a-deb22e7c56c2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4802fa99-fec1-40c4-ae19-1389f59cd1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4808224-0ade-49ed-95dd-e901266384de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a10e2a-b3c3-488d-863d-11dc0a7fea9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa7336d-c448-4beb-a848-dc0783868083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663f1446-de39-4d33-acb3-88196565ddee",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43108113-29ad-42cd-ab44-03f99c189549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2d2de6-30fb-4b0f-9a8f-5b438bfebaef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb510559-3ea9-461f-b123-b234a1cae51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39d16d7f-42f3-4553-9c10-31544131b831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0474a886-0e56-4f15-8828-5dab8cfee808",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59258a86-fd49-489c-93e7-06d1eb0f3427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86de610-3686-4da3-a2ec-b8b934cd06a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81386d5-ff6f-432a-9544-d9d00017ee9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "37677204-618d-471d-91ab-08fd0ba8d722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f35914-562f-4991-a6ca-4983610b3f3b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10994fc6-7dbb-46e9-b594-558aa1d345de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3b0450-c3ab-48c0-8597-dfc04284cfc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec04e51c-69d4-4250-bb47-f643173ededf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6aa858e-facf-408a-8a51-b896c0ce0912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a148c6f0-ee62-4fdc-a5af-1ec0c4cfcae8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1466184b-f44a-49bc-91d2-b1abdf4d6ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc539d4c-4bf0-4757-a43d-2d6f31a4cd6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92eb960-e4dc-4f73-9ff7-4563a76b0f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5aaa187d-b120-4f02-86f2-5f7a8c7a087a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0699da09-8c89-4e8f-b9bf-2b7e32684f1c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc0309d-5e45-4fd9-b01d-e780fe26d02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef95930-7a45-4f02-aa5c-be35deaaa8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff7e76a-a186-4753-96f0-9ae3f0db7561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "df0db6ef-73a0-446a-a907-dbe6b0f495dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3890fd-0325-4434-a3cb-73dbae8b6a23",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c965b81a-28d6-4713-aa48-be6b6de73de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91bf2924-1407-4537-a5c4-3006e67770da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d3e5dd-aa2c-4564-9103-2767d8ce40b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "de216cd3-e553-44a0-846c-ca24d2a5e616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd408bdc-3903-43ab-8956-c4bf8a91c183",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4b8126-4032-4f60-8bb7-336bad941ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87294b80-a9c4-4851-b4f2-c08fc3e13f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5810c88-ec63-46c4-a9a3-6dfac4d728dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b776ce-6f1b-4bf6-a9ab-e3d25f241413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12559ab-5436-4bc8-b6dd-e3d837aa0e38",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693d8193-9295-4719-b282-5415658610b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fbf57e3-a98d-4119-be88-021db3583c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58742d8-962c-41ed-9782-870eb2ea90fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fac8001f-ac8f-47f3-81ff-45b05611e980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef39d05a-c836-4150-8a2d-efb6bb03924d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b790fec7-38fc-42fc-bc9e-c4db002b75ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b08746-d266-4647-978d-6aeb4200f332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f32a725-4aac-49da-9593-0fbeb6d1f205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9ece8c-8e8b-44dc-8504-60bc5fc7749e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21123b03-764e-4032-9f84-44907370d7bf",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba6f084-d510-45f4-b5ab-59439ac4a561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae464c05-38c0-4bba-ac4f-959688872a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1b4cc4-2a92-48f5-b5d2-878dafbec513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f16490c4-5990-4b05-aa92-499e7b10782e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b92360a-0336-45d7-8f32-10fc56df5399",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c82264-d256-4f32-aeff-4a7a2f6e7a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5785a925-ab9d-47b0-8ce8-0674fe97bb24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce48a41b-951e-4727-a5e5-1d65c61fb2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bddb796c-d9f5-4194-864f-31d75fe80926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1d8842-0bb7-42a4-ad53-0ed68b6760a8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282307f1-cb6a-428f-a6d8-7a8af02c1c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c524bee-0e9f-4030-aaed-9e33a16ee71d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eba3b10-8981-4c7d-8ff2-e9a247185674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e52a641-f281-45d3-9ac6-deaf5f883eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4605a3-cc99-48b7-8caf-2ac1ee309c1f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90536d64-42cd-4745-bcdc-91ad48c35adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36049b27-cfd7-400b-a8af-ecb67c1d1299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564825e5-08a5-4fcc-818e-4ae1e763f46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67253514-474e-4cff-9f97-04ab040ca647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b7e55d-bdde-4325-acea-6f19b828b678",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f36fca-0bb5-4f82-b68f-3e4cf9f4d669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e621667c-7af2-40d6-aa51-d0f5826de7cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45cf0aa-cc23-4eeb-94b0-b700f786dfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "25b684d4-d909-4e8c-8e11-e4f485a48d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623141ef-8223-4a19-80e4-78b6eb407dd9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3fc8fd-a597-44fc-8e77-6cf89e73f6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a51fc9-088a-42dc-9aca-611f24ac79b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153cafa6-2b0c-4565-b370-2b6a06a8a3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "807ecb0f-3c3d-4955-b981-bbfd40ad170d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf104ef-cbbf-4e5f-bca5-50620b886bf5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92435498-611e-496b-ae47-88cc53dda143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113188d1-05d6-45ae-b923-72c793c59435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20416254-602f-43c0-b5d0-906abc87b33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f71cd471-b19e-4ccc-8afa-48f8c9264bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636ffc32-92e1-44d9-aa1a-058f62e87f13",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e7799c-dc47-44b4-90b1-cb3bf79cd44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8668cd80-abc9-4e61-8631-34732d57f09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01843e84-fa85-4e4d-bea8-63f48edc52e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee5bae28-fdf3-406d-9038-4b43fa9aa16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be100801-4c8b-4214-ac0f-48d14316e48f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a37de5-0530-4db5-b854-45258e2dfeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdfb933-cba0-4498-adb0-ff87e49765db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c030c019-e840-4b2d-96c4-96aa98a93d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c159e1e-2c1d-4548-876d-742706b63579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d4732a-bb03-45aa-8969-7a611a58966d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e01880e-4b02-4ade-8697-140cef31eac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ac1987-6dc0-4317-8a28-f66bb8154d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cda170e-896e-4604-bfcb-128c97f261a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "573f42e0-c7dc-4447-bcd0-343c6da03f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aba68f4-57dd-42a0-88b9-4820a499c500",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2649d77b-87f4-41fa-9915-59a075b4e9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e38d5d-925a-4985-933d-dc6907b6d772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7777217-dd96-4fae-a15d-90f1f34bce61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4874cdc6-4c7a-42df-b988-04829282768f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b9a037-22c0-4e89-b872-f095f85123fb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8cbde7-52e2-4172-94e5-bc1c513f1b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca58e65-63f2-44fc-9cbf-923b51055be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24c3695-29e9-44d5-909f-93d0cedbb87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3402377-d2ef-46ef-8a3d-eb8d75f0e254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0328426-fdf6-4a87-a63a-175bf6ae7102",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee41474-75e9-40bc-bd68-877676b66604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21472f3e-5f48-40a1-b629-f8f743c0edd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fc70b2-2376-4e96-a080-b3379fb42b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5761454-81cd-49cf-8714-e8a585be8708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116402b3-958f-4a6d-b281-78716f7ed763",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796d6c9e-992a-458c-81df-e516a08d0ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93054b08-692f-41d8-9ca7-78134f90f0fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91239c9f-96e1-4de3-bd8e-2b35f76f8315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "769afc94-8a7c-456a-b305-27f4459ad54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ea51f1-1486-414d-926a-2fb3893bf4ec",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c886b7ba-c58a-45f5-85d8-db205288c365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53287351-f42d-424e-938d-a1920ee981c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c95311a-f0dc-4f3f-af01-041aa94272cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d62f036-2d79-448b-9258-8f0899f5cd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f14b52b-5b1e-4db5-8569-ab77240a4ffc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6cce44-d010-4ae7-afa0-2d00b78b093f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86848137-aea1-44e9-90b8-c66ad4fe8bb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ca3321-697c-4306-9e88-1776eb1c23a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8818bd1-af4c-4fe1-8e5c-91ae9acafc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1074a14-c36d-45ce-9a22-52fbd1234637",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4edf307-126f-47ba-8ff1-e33a6f6ddf7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2076989d-4c6c-4beb-9c52-294d85bf4b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67a8ca3-1d0d-4dd5-aa39-281807c195f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1dcffdd-319b-4292-9a7e-b0fb8cca7038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fd34dd-a3f4-40a7-b1dc-521b3a6e2bca",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb0a1f7-bce4-444b-8f90-4f48bec51dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1438cf7-6a30-4f8b-b8a6-f34d5eb32140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6fbd57-99c8-4366-977e-f8454251fdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5faf1b3d-53f5-4c6e-9e47-7f737f294273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef565c6-6dcb-4088-a087-683880254a7f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882f7815-e4c0-4c38-9abf-ba285ac0dd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "692590a0-602e-4c87-84d5-b39bb02d5968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa02836-5978-4640-9a1a-8a98cd02fccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c115bf-8147-4843-a4f3-0df45eef827f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62ff333-b70c-4e62-89b0-5d61ffa9583f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1593e26b-6922-4d60-ab78-4efbc2e545f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c68c4a7-6f9f-476a-b5fd-6a6ad120e7d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2642d011-b436-43ad-bbd8-75cdee93178a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f91a621-b0ed-456a-b9eb-5b17f5863598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f570861-e9f0-4e20-bfcc-d3bc5a484e71",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da73e161-f416-4af0-8d29-aef6b3f45cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46f999d-df70-42a3-83d1-7b8552a74821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e707714-2a2a-419d-ab5d-25d9d188580d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7f16203-352c-4b5f-87ac-871802786308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba78e3d4-95f7-44da-922d-6f6481b9a4c6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8012ff99-d3f2-4ac6-bb14-f4f170f94d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d5064b-b865-4fda-b435-d60936439b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73785d24-fd2e-4750-8078-dcc28cd5ad94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a0680f-bf7e-428a-bc4b-1d81fc175ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b349b9ed-3f2e-4426-a216-39c81eb2eff8",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e063c7-d525-483d-8e73-d81e8e176283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8adafc0-cd3b-426f-8e09-28dca37bcbc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1684a2-93ca-47ac-98da-aeda256d3042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d71c6c47-e4be-405f-8774-de9bacf4a2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bac3d73-22ba-4bd5-af90-aa45beb121c5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068744fd-f6e0-44e2-8446-a2a76ecb24d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8f72a6-5c4a-45cd-95cc-67ea543152be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571d0497-c33f-4e9e-9e04-f41c8a8072f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "76135a7d-d9e9-45e9-b53d-2adb5287bb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17566435-dad0-4fc7-aae5-135c63068dcb",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe0c3b0-86f8-4e9f-b9c9-0457e230bc9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc39ace3-cc68-46c5-96cd-04fcf112128f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af128ca0-743f-412d-8635-23ef792c605b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aed21ac-0404-4ca1-8f6f-ac2193a62e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f959557b-4672-40ef-b4e0-c1ae431d00ed",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89567078-5470-4a2e-ae78-e079f1eb5d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18685f5-ec33-43e5-95ea-f1e68466e3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c3d18c-51c1-424b-bd58-c5bd975893a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "803f0033-e3c7-451a-a620-e8e7014b2c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da45bb12-c161-4c40-a828-fb3972a5d82e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9037d92e-816c-45e5-b733-adb582dcf0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5db472a-dbd2-41ac-a4ab-c9ffada15727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f316863-afe0-46fd-8b41-a875c9d1e657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0c6c24-b7d6-427c-bc04-0c3d2f075fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2e1e72-daa4-412e-a7a7-404f3dd40574",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e5361c-4790-49f9-8168-ff6fea3886b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85180359-c771-48a9-a464-b7ae79146336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148d7a92-437d-4c1f-922d-d3774cf463e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae675818-1c48-4619-832a-492b94ba4624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8501cde-7ded-4392-bb20-4f964d7d3504",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f80670-f830-4fb7-954a-a65911a48a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ed8057e1-f25b-47e5-b59f-17f0484fb47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2155006-5dc2-41ac-9510-c613bc9f75e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "60c35a30-35a4-476a-aa11-c864f80fa26d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3f99b77e-0ffc-4a89-b2f5-43ef36a5dba3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06e86b76-3229-4957-89ab-e9de32550721",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4483ba80-0756-49fa-9b24-0d3659f80dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9e4a7a7-6ca5-4e9f-a494-ab297e87cc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b1b116-df36-4127-bb94-7be57184cbfb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef9179bb-5c58-4c63-85a8-57253ac389a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f5a7e98-39d5-46ad-9421-14fbf1f2a0a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83d8a108-17b5-4979-a3db-3637e05cd3ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e999c149-1c1d-43b6-a5b7-f43a9440833d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f87656b-6421-4cfa-a732-9cd1a94e77b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6a07c90-54f3-4422-b18b-02a634d61ae1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a28d1cd6-8bcb-49a5-a9b5-13a505ba8fa9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9cde8cc1-6ea5-4922-ad68-f914c2963c03",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c21aafb-2beb-45b4-a146-17fc561b445f"
                }
              }
            ]
          },
          {
            "id": "c355482f-73a6-470a-912d-07fe606fd425",
            "name": "Positive Testing",
            "item": [
              {
                "id": "57a8152d-0b76-47e3-89b5-466d7d4e1b4a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a34cbace-15a6-4b72-a9e2-c17e67ca7efb",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3800d0-5753-416b-9b9a-fb60dd1bb8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5e5cfd5f-a18b-48b5-9ee6-da146005f8ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403567bd-ece6-43fa-9742-92970041bcc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591460cc-269e-45e7-a69a-af5fad2e9ed1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dbba6e8c-5a38-48f6-afd3-a867b93e70c7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8b41b08-1b23-4f69-889f-e39cb6d95ad6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1117cc26-83ab-4601-a816-b7ba92338637"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04050b61-6f78-431c-8b61-a3aca15e3935",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "be4972b5-dae0-4839-acdf-fd8c4786b740"
                    }
                  }
                ]
              },
              {
                "id": "d4bfcea1-6fca-40d9-9220-89a1ae627912",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa552b9d-a8b6-434a-8ea2-9fbfcf5745dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08debb00-c2bd-40e1-9c73-38f6e270262f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13646ba1-c662-4abd-9787-4d13ef1b9dcb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "335f60da-d286-4e7b-8ba7-aa091e4b89f0"
                    }
                  }
                ]
              },
              {
                "id": "b351c458-141d-4492-93f0-825e5af669dd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edd9bd5c-284a-4e82-b6f3-3048fc6e8457",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41d912aa-191f-4b0c-9c44-3f03067650dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ba4c4f7-32ad-4d58-af18-094f4def3da9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "655d47b8-a912-4530-bbcb-7f7f6238c88a"
                    }
                  }
                ]
              },
              {
                "id": "012b4232-2f21-48d8-932d-bffe1a090b4b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79f60916-721a-4306-962f-4f38ee8041ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1ca7c94-b75d-4f37-a917-14af1b033422"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b73103e0-94cd-4f6d-bd09-dbc8a67a129b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ea3181d4-2bb0-4650-90c0-a810b178d397"
                    }
                  }
                ]
              },
              {
                "id": "6de914c2-e74b-41df-acfd-ce788e9030f2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ed2267b-86d9-4b07-8899-f4c234e90df6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ddbcc27f-2795-4d97-a412-360f74cc1d7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21cff1d3-f7a4-4379-b092-05fe0ee94351",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1687356e-b471-427d-ad16-cd6744246a84"
                    }
                  }
                ]
              },
              {
                "id": "9a1edb7b-9d30-4c11-9764-2b7d0208d187",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2c4b431-ee00-4ec1-95d3-4fcffc53021a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9199ffd-affd-461f-8283-4244f54edc0f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13b03fb7-d4a8-4085-b7da-86ca984882f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "734551ab-3f13-4cf7-ae7b-d45027e652d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "71d2d119-863b-4879-9969-62cd26ccd5fc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e83f43e-c0b4-4ded-9e22-0c6014a3794a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2fcfc2d7-ec86-445b-925c-2d5c09223d15",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "919fe511-066f-4287-9da7-8637375b836e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "614c9b2f-342a-4049-adb4-7cc5d4868f5e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "720ab736-bf4d-4000-8279-e66fa1ddc4e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c509bf9-68b5-40e8-a66a-5f6a21649a79",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba1f539f-fdb0-482c-b9bd-19a664cfe4ff"
            }
          }
        ]
      },
      {
        "id": "39cadfb7-aec0-437b-be0f-84883b7032e4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "868ebc87-3038-47b1-9029-ffb575d2c09c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "756a26fb-11ca-468e-bcc2-afc169768a04",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "082389d6-7cab-4d3b-97c7-7f982ae9af19",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2994ed0d-2457-4f9e-b3fe-9b8bfbe2e8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a029c74-5619-4955-9650-ac458cf928d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206afe64-8e79-4650-8f3e-2ce0d6cb72ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d817cc6-3d6a-48be-ac03-44a4f8cbecb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434a30f3-f4c0-4840-a7c0-270a54f62510",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23976dd5-e825-4de8-a0b4-0c1d9f2ea1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cca91f-c2dd-4462-8534-d3ed8c8e5dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b2754d-c235-454b-9e68-6eff790ac280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe06248-a5f0-4006-871c-da7f66d1e89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f472322-1724-4c71-a1db-49eb2c812f8e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7988ab79-8f1e-43c1-8d1d-5a4d2bb1d7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858a3c14-0f68-490a-b4fe-1c09de83bbd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50353ff6-a7b4-4be2-94ed-685021fff3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b8747b3-11e5-4d74-85ff-5c7cc7ae5bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787c1ece-13a6-46eb-a2e8-c991d20fcae5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae78d98-2032-4d06-8849-8c662fc260f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1988c9-895c-4965-b3a7-1896788fc804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0498d8b-573f-4c03-8624-8949d53319a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0efe16f8-b62f-43ae-8cfa-8055210eeccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06251c78-0877-4461-aa50-3a020abfc693",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae0781e-5ec9-416a-b5a4-86f53fc7cc9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a41aad-41d0-4ab4-a848-bbdf0b58b630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3742d656-988b-4fe5-b463-8b015c52565e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dec0c486-8977-402b-92b4-6c6621bd12e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31156f6e-1abc-4629-9817-b5ed6bf3bfd2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a853604-99b5-49f1-9b5f-e11ddc57f133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4e7f7a-bf1d-4615-88d4-6dfc0571b756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ad2fd5-c38f-48bd-a417-50da470740ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed762d44-65a0-4689-a484-ccbe4b5e5b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddbb0e0-9976-41cd-9dbe-03f836a5ad7f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92690c7-d8c0-46fc-a073-aefa2102abee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61358da4-86bd-4fa6-bfce-56d1ee1ea614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec92d6c2-a0dd-46f5-a62a-9f7f0181ff16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bf3d002-9232-4c08-a28c-5b8abbf33154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bebfe4a-0e55-4dd3-a1b6-ed8ebff15218",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a5cc92-605a-405c-8983-0e2648bfdf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb6dee9-74a3-40e8-83d9-0229743b702d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395c942a-6593-44d8-93c9-d430efef2dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f408c743-570d-424b-8b93-2ab858b97cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952a1042-a36a-449f-af2c-4e89f740de92",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad5cc90-266a-4cf7-bda6-894b0f33a318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ebc803-794b-433c-9f7d-83b62b0d2694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83afa0c-fb99-476a-b472-e06bf0ab6f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbddef3-b841-4a61-9a1f-2127ee5bad2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbe9d65-de97-407b-a616-db761d6e6950",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c68f5bf-c52d-4aec-8dea-95988fede619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2eca55-f70a-4ed9-b1bb-edb3dc7c19ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71b12d6-b6bf-48a9-bbf5-7b476fdb3530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c43e9459-3f8a-4f71-9ae8-b656bb0d7831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af5d433-7a9b-43e0-ab11-3bddb38bbab4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130f51de-2c92-41a2-b508-26cc45461904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06397da-68a3-4ca2-b79b-ae8f7537a461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c39838-022d-4609-92e2-239bdf8b7904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6aadc74a-941b-4822-b2ba-68e8118ce8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e283581-9996-40e5-92ad-fc6105fbb301",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddce7895-a2a9-49f8-abcc-5a5bf07bfa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddd2f3a-e27c-4873-9333-9be1ea2af0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555e3434-d9b9-44ce-aec5-4ad53ea8e385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1625507a-3c3c-42f0-a176-5b58c4717f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a332f4-5683-4fae-8cbd-ea411505abda",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1e53fa-daff-4e0d-bc78-a053fff0770b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8f9fb5-b950-414e-a67d-dc87b20be739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9597fbf7-406b-470e-b25f-e4d5b00b31e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f527c02-6fc7-46e6-8a14-6ea13a97a4b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b9f029-3e84-4b64-babc-b9e8814e6947",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467f7335-bde5-4aff-9784-d9e5c43a8b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4bfe3b-cca5-487f-9829-94a304b87787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e089283-056b-4610-b4f3-41f4f20d6c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f6b6a3a-079f-4bbd-8ef3-aca9326e22e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c3fd36-d40e-488f-8c91-b06bf2dd4aec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7ca2df-c432-48e7-8db0-83af00bb27a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef61b28-4733-4623-848d-85861234b7e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76df7c10-1b2d-4f27-ad2f-606ddcad5c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6405e492-ea17-4bc0-8236-7f6925a529fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2b3e53-3949-4ecc-8762-f4d863b6ffff",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a20557d-b417-4822-84d5-a8cc38cd369d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4936ede4-0a14-43ae-a616-a927160d7527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54de7d4e-59b8-4a5d-896f-63a5766c57ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f798ac54-e951-4702-8d28-e21a6b5b3f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d17ba93-bdfa-4479-9e77-083400eff2ee",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239fdfb0-517a-44ac-baa6-89a5ae33672c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06380be-7e70-4968-9307-0c23f08c4327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5d973d-962e-4302-93c6-5463a08d5ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "76aa914d-962e-4419-9dd7-a8dfa973ca4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52a2f33-00cd-40b6-a74d-3673c55787cf",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718b52ad-fabe-4b2a-8126-8e50e2843cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9172f8d-6324-40e7-9aef-3e8e1459c2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c7d6f3-b691-4389-8c00-a6d216f45ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e16580dc-e22d-439d-beb0-119f3e6e62c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f496953d-abec-46ef-8500-99f88c2187a9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc19c435-8b76-4e72-ab05-7d98c6cb7812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0023276b-27ec-4bb7-8de6-6915592f3d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f858ff-de03-4542-95cd-f7885472508a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3910f387-7845-4fd8-96ed-88c1a617d786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad23d3ba-a66e-42aa-93d4-9c7b249d0d83",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016e92e3-47d5-4cdc-a347-4cef787e1ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c213cf4d-f773-4870-9bb0-b125e46a4324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dedeff0-a4a5-4f49-ad94-a8771aa64c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb93f0e-f426-43c3-81e9-0888927e66e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063c49d0-ba47-4c25-9d5e-5a7b51bc79ac",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bb0712-cef2-4725-bb51-f42d3711a00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8061e6-f490-40df-a426-c3e517e40e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d6e4af-8bba-44b3-9a9c-fda3433c66cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0782ae56-ce5b-423e-bb3c-ddbc722179cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29c4361-b156-4716-b939-bdde1c0cacf5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7423fbde-8245-4841-9304-7764eb22b6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890e99e5-558a-4b78-89a5-beab762e8c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d9d41a-d1f3-428d-8153-9a86307c79dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0349c30d-4201-42c7-94e2-1e6dcc9868e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef131586-77b3-446c-8a4e-118c81027d15",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1372ab1-220c-4602-8e6c-d7b935cff3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92296c1c-9bf0-4852-9152-c2a065cecee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46277b9f-cb80-4e80-934b-fb478d39c9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebfcf511-682c-4bbd-807c-535a8e78dc1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd8cb98-8fa7-4b6d-bc40-b0838c6cc48d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d590df8-6e05-4edc-823e-c54f7e67d4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11637aee-5b76-486b-91a8-7f58d37769c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ea9e6f-38eb-4553-bd0c-53c1ae13bf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb5f37d-ef05-4f3d-980a-fd7abfa5adfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f14350f-e259-4b85-af98-5bb350b9e36c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc75c112-ca21-4f65-8799-1c3c3e96f15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc1be19-ece6-47c7-85cd-475a05b7060d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f704ec0-887f-49fb-b75c-e5278cd6a5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f30bdc2d-b647-4cac-96a3-74e7890369ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5321d4-b215-49ca-87c2-05214aab3139",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0358439d-9b01-4318-b82e-6ad28046ed8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43405d4-84ad-449a-9f93-e744a7b8f2d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce76a4e5-5645-45c9-ad8a-fe3e1f29adf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de80e76f-ccc0-497b-8aa5-563444dca21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac7e155-f28d-45b6-a2ac-b453fac37d48",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbca6f03-deb8-4b71-b705-6b67ed9bd532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2106e716-b4ff-49c5-9dc6-0032d28e32c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c40dc5d-e738-4193-896f-dc073f07cf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "755687b4-38ac-4e54-8e7d-426176422d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e723b4ee-ef97-459d-a117-5ab812d0d1d6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7825bb8-578d-45e9-a383-e86577a447b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8dfaa1-0047-408b-9ca3-525c2948cdcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58707ea2-ca3d-499a-abbc-3d226b5b74c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bace5a2-68f8-4cfd-abe9-c936c3c8da94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdce90ce-d53d-4ed7-a288-da6b80c4f9f4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dc6f75-4194-4428-aec3-b3c876b635d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051075b1-4560-4b80-bce5-79349379897b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45e63ce-b452-47a4-906e-421ee03e60dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3ec259-a963-4ce1-b271-2080444bb0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678af0a6-1848-44f2-ac17-99e145ca4a7f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298e8f9c-7b00-4746-b947-1f5611169870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a938f3ed-518f-4919-b5fe-2d790d8e8f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcd5247-1f15-487f-b56f-15741a6c91f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25fd1804-17c1-4de3-b891-4fc1cd5b93d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c3e284-47f4-4a20-b2a6-c2f546011f5d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9646f866-0d82-4077-9ead-414bbf977ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c0b437-07ef-4726-a499-7dcb2908fcb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366bd30b-b8ad-4f75-a453-7f94f405893e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8da95c3b-b4d1-485d-bcd2-8c893a5054e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17be881e-47be-4a7a-a17e-8596bdeccc0f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8c77e9-e768-409e-ac85-6118bdabcf98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e2c936-3b00-4132-932d-44eb38fb2ca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f8529e-9a0d-4ecd-a4f2-0578fa52dc08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b98d6a3f-2501-41e7-849d-c88b32632cc2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "78709dc2-04a1-4026-ac2f-6deebaab93b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "341b928d-21fe-47cc-bf96-233e63a34307",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f938c4e-97ca-47e7-9a6a-e4068920c678",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "83921418-16da-45d5-80a4-f7750bd2afc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97717ad5-5b58-4d6a-960c-312922736445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c897cf14-93e0-4ddc-94ae-c3dcf2ab34d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5b2215f-05a9-4752-8aab-647486993337",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f79aab20-7903-488d-8484-a37ede292d83"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51e133d8-bb93-4afe-b02b-49d1a6a395bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5d91a14-518b-4d8c-ad38-a0f4eb3fee13"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0abe313-b794-4917-8ad9-106985148c12",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3494b285-e3f3-4bd9-8deb-3c9e42ae4d84"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "560cf7cf-a434-46a2-967e-1782ff233628",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9943a5b7-c912-4dc0-adab-428dd3009387"
            }
          }
        ]
      },
      {
        "id": "daea932b-c19d-4944-96b5-8af5436cf3b4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "453476e6-674c-4412-84e2-8fd10e91e34f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30abaac3-88f7-4af8-b4a4-de0ae680a554",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c7a25173-960f-43a6-8cd1-740f85a63285",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838aaeaf-0277-4e75-9dfe-52321965f5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b303535f-9a37-47e7-a4a7-6a3a497fefc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bf8aa2-e5ed-4115-bbbb-82ded5287cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd757dca-106d-49bb-9746-49b85e5b28b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfe3a1d-43cf-4db3-8cdb-ccb995d51048",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cc68bf-cba2-44dc-9d10-b2478f97f844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40445472-efdb-4f49-8f14-e5e8d7d8b793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b180d249-96ba-4c78-bd37-c8c12f5870fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74e1b9f9-8b4c-487e-8904-e0757e0cf248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e6df26-cd40-436f-a7d1-f3fb0c2654b4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3089f55c-2cbe-46ff-86e4-d002ada5e074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef280ce4-af41-415d-88c4-c23af3b2bd01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80f180b-2d5e-43e9-9e34-98da2d9a91cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f44c3787-f469-4392-8d70-214395048faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4dfc60-694d-4395-a30b-57899de35ee5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84a00c7-853a-42df-80f6-e43c6abb5bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b71402-0e55-4d61-9c91-d4981c9e62ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094cf3fe-5d34-41f8-b2ec-19d51d49cf13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85800d3d-5ff9-4f8b-8358-28ce16481c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b23558-753f-4151-9a33-611ba7cf4264",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364a0ee2-bb7f-4bb9-a45a-6e14468d7ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66055ec-9375-477d-a0ea-fd47cbca8bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648072fe-e92c-4be1-8041-c64e247b4a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31c89f33-400a-4d3c-83b7-5e36565c330b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69c6beb-f9bf-469f-a286-2ba489057464",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d4a0e7-c8e1-4083-b3cf-dadc6fdaf9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80811740-3001-4cf0-b288-e4958704728f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5381d526-a78e-44e2-83ce-6949859ea173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c71d307f-36c3-4c6b-9e95-6c357cc1b6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac46811-eb79-494a-affa-ec39d10d2020",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c4ffc3-1314-4f6d-8208-54b2c8aba5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d1989c-842b-41a5-9f09-08cd46defdec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03eb5e03-f057-454b-9287-4ba18f5382f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ec7692-7109-472c-bfa0-a00271a8b34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a748f19-8bee-479c-a6d4-b704c74cc55f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bca2d46-8d4a-468f-af12-bf10b8aeb97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73cedff7-4089-4e78-8803-5644346a8fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73beda7f-c59d-4b47-8b2c-eca5a701a2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0655cba5-1db5-4428-b40b-ff8f5a1ce4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb18f47-e49e-4037-8243-25495d73e798",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c1955d-5198-4c3f-a93f-128d038c4982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe67b4c-e154-451b-a5dc-552672af528c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ae31e5-754c-43e5-b25b-272a4c8bd924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf9150c-6748-4f7e-b76d-c16b2efca768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2844675a-4805-4f6f-b1ac-ba33516bcaca",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dd5dad-e907-4cd4-a3f4-accfdec6680b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334321ef-11b1-44eb-a12c-64127ad31afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c510068-5b2f-488d-b0cb-07aae74d4608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8d5b35-bb3b-4330-a713-6f349dab91d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42974fa0-a3a5-42c3-81a7-96142a1cb699",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941f71c2-e1c6-49bb-a7a5-febf4307f99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1e1502-a90f-45dc-99ea-e73daaf12775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69da5968-b6f5-4c88-9cf9-695271cec1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "43f5a95d-1b4e-40cb-9461-022172e2cc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba0556e-354a-47ca-aed6-dd2613584e5d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c79411f-1097-4f2b-99bf-fb46f851471e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34787a3d-430f-41b3-9bcd-6bca2fde5a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fe213f-9a68-4ed2-aebe-6da85368d704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bce5be67-7039-49a8-b7db-763c5b12773d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0953df-21e6-4595-b16e-e1cae239b05c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9314ae-88c1-4ef5-bac1-c2c132690e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972d5e83-37c7-46ab-98c2-66db67a4c3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b737b589-77c0-4ffa-bb5f-48969eb282b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ced79062-a200-424f-9c5e-819d68c5fbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4102d6-21a9-4e8a-94d7-7c795fc07d4e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44075ca-e5bb-4b18-8d24-7ede393733f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a77bda-a544-4650-8151-b1b4a77bed07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45613dc6-784d-448b-9334-cc3b4230be88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5be949b3-ab7a-42f7-bedb-f81f03685cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4b3421-e5da-4460-9119-18589e813f5b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b47a2fb-eeb2-4441-8708-beb205648195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a080416a-73e6-404e-9e01-84b7a7f6ccbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466431bb-b9c3-4e35-a570-ad9357a8b8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "43dcceb0-f4bb-4771-a624-690c7096c7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f3786a-54d3-4a01-bc1c-55792d6e71f2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d24b6d6-0e79-44e6-9153-c7202500fc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04dc07ba-c437-4a0c-8ed4-bc3a5d8cace4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfb9e34-bf85-42ca-8579-1dc22d9276b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb6d2d38-9ae6-41ad-bd95-65002d9523a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9553a37-7059-4e40-8012-0945b34a8149",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e033114b-46e0-41c1-9100-facc45e154d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8cb3ff3-5157-4f15-98e5-b20fc7b3a136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a25b49f-9205-4531-bdde-687a2503d0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "98f01106-f81a-4c32-8747-a88ca4912a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90513c9-4e93-4565-a745-5e5fe0beaed6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8661846-c1ea-49ee-85a9-370f90def7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cae1521-9786-4f49-8ca6-6083fbb07da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef151a69-9cc6-420d-929a-b1d1e547108f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2b4b0e-cecc-4674-a7dd-769c0158d24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae21f8a-296a-49ce-a4ab-49a7d8ea5db1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b49434-305a-4c85-8f5a-9ffc6be4be1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32dce7d-b4aa-44e6-8011-414ca5f96791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe6d33c-2e77-4bbc-8b48-fad5ef4aa3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5cfd501-d90b-4568-b3d5-5c4b22c2567a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6068d0f1-3322-464c-8ab7-79c3674d23db",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3a2168-59a3-4b8e-b1b8-4e66be08dd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b96035-b0af-409b-9e92-774a6f8c7145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b398d014-88ef-49b2-b3f0-807663feee75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f45ff90-79f7-42e5-800a-35e2171fa967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62b7229-4a5e-4c6f-8969-3598137ce840",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "857ddf43-35cc-4a6d-9976-c6473da92165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568f7a39-5982-4974-8752-cf5cb19d290e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0b509b-5365-45e7-b3a6-a4776a1b3f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edd73a89-4746-4692-b2aa-7f68dce44772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f694c9f-73c7-4fa4-9652-b198ca4639b9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58492f3c-4304-4591-97e8-b225714161e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044e4d72-88f4-43ab-9999-9183518c805b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5bf8b1-92ce-49fb-9f72-d85d26b241ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61404bdb-c2a5-4977-ad58-6e4ef8e45c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93631ffb-44d5-4110-8915-3268cf2ab103",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bff6542-e5d3-4088-98ad-d0cd7974a5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d81c3de2-6506-4507-9034-5ca619201139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c0d00e-c537-454c-b928-59374a3988e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbc95b8-b398-45f9-ac67-b337ad947cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ea970e-fe60-4d35-861b-11e7fae36632",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "982efb06-e7be-40fe-9864-007cdd6d71b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344fd11d-07c2-4f59-899e-8ed415d77807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ef5895-fb34-4c1f-9f0a-7a1fa1055b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "787a1c40-b938-4c09-8744-c18faae73126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a41084-faa8-41ce-b90e-c7f7548ffb04",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e800f370-b801-4d4a-bcc6-4dd1bea90e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f77552-b18f-498f-bce8-f4168e1a8d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e77692a-3094-4420-83f5-e1b3bace3e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a47e2a76-6659-4d1f-bd6e-e4a311a1227c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d523934-1b61-4bf9-8fa9-9bb6a583b769",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd0d0d3-8575-452d-89a5-f65fd0d6cfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8445ba42-693c-4776-9173-84235cc6ba0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9e7a21-d5e8-4b66-9544-73cc30c71b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb8eb04a-888c-4e6d-91b7-c7ece84ca6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b091e05-4eb7-4116-9500-685a68bea4a4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce9191b-c110-4296-8c92-acbbd54a8fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3cab39-a30b-48bb-bdeb-c60eb9e50499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d683c6-33f7-4cf2-b3a5-f1a8003a00a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ede1c173-0743-4f4f-a6f9-aaadcab89901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7821b5c6-2df2-4987-9742-5720d538d11c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e71a627-5c01-48fd-a2d0-96715499b175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2492ab-2fa9-4f01-b0cb-96faaa058014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85dc70b7-da35-4303-88b3-2eff9fa5ca90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1868d354-45ea-44db-93bd-7c94f293be00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5847af-5a7e-4329-9fcd-89c97d986a09",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfc8f19-a933-44d3-897b-45890b16c7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abd1817-acc2-4cd9-9871-fbbb797db398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d38aed-bef1-4237-b76b-0d627ec8aa3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d877e1-23b0-4800-8501-079c27a961d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b489f9-860b-4e2e-8e69-f6b43f00de52",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4712f9a3-00ec-4415-b849-00779deface1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d57313f-68f8-449b-a835-e5448c7d4d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b000cd-bc8e-46a5-a0ca-dff093bc72f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e45acb66-69bf-4765-ae61-baa23f791714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d893c8-5323-404f-a4ee-681210ab7766",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad52b95-2ea9-431a-a9d3-9710312489e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7983ac1e-7085-47ea-9f8f-57d594e20278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8b882a-dbbf-44b1-a362-e035196ea274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09f757d7-3ae4-4950-9e28-dd4688b7b484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da3cbdb-cf9a-4186-9531-39c59f369716",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5431139b-df6d-4032-95ae-c4b8cdbfde1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01be57a-cb34-494e-bfe8-47dfb32b1827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18128c9-46e8-4051-950f-eb8178d18f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58f12b31-8094-4a27-b8fd-7423e9f38f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086fe9bd-de9b-4015-a64a-79f9d0115fbf",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed951eb5-48d3-4956-81ae-b70ac7dc6133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbb6f27-25b5-4e7d-8098-7e0cae07889c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c986d47c-7fff-40c8-a73f-3fd3000d1138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f92afac-a870-49eb-a231-4258f12a25c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a53401-6fe0-4004-9857-ef98d1fa52cb",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed7e5b3-36eb-4d74-842f-12ad7880623a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c675f97d-8e8e-48be-aed3-e56922609767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac556b63-f535-49c0-a32f-ed99f7e973e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "400334b2-cd5f-477b-b548-566324415875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cea05f-9d2b-408d-8a63-e43cf6a9fa84",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1d83c5-1064-4289-8341-79bb61ea0478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34b9374-60b3-47ac-b96f-52b4e74670fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a7eb41-9741-462b-a7e7-ae908aa1f02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6de449df-ddc7-4326-b2f3-dcf126b3089b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d691bc7e-4772-4294-b4e2-64cbca641d9c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0035f5e-eb08-436b-874b-26d89002a154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71d6e22-b08d-402c-9d55-47ff623e22b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b00779-2b1b-4f12-ae88-d73e2ece7c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "123f4dd4-4337-401a-aba4-b73b3adf9b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda535a3-a86f-4029-9b56-9ff1b233fd7b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f672bebe-85a6-4379-bd49-dd8ceeeb8492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6197a5-c68f-4108-aa24-3ddd2dfab7ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4906bb94-8375-4293-84b4-bc498bf4f77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e534f459-8067-4155-a78b-24ce9195276b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "182e8d4e-d5f4-4700-bcbd-39e35dfb7961",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60df2c1b-3e9e-4374-b20d-46894a90452c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d60034-0cec-492e-86d6-628b780868e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6d718f8f-387a-4820-9c1a-11508addb4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59545f78-8e22-405d-96a3-c210f47f3dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1f55555-cf1c-42e6-9d32-c04ad1542726"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa1fe263-b1b4-4b2c-a89d-83c5117d21ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "defc2772-c11c-418d-8f85-7fbd75d7f9df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc0b6fbb-99e5-4a67-88a9-c86714fd9b38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d30b6f0-3b16-4f16-a779-bcf17d2e46c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "845b1d22-406e-475f-a515-763447852845",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "88d4781a-35e9-4af8-9124-6f56cba5ce34"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e20ecf2-1595-4913-bdec-ae677d4796f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4bc39ec-cd07-463c-8dec-95ac0a2b68ab"
            }
          }
        ]
      },
      {
        "id": "6741441b-f7a7-43dd-91d1-6bc2c358fe6d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bc88a98b-4df6-46b5-af49-9857446b2ed0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ae7de13-6a3b-4f22-9e66-3ac62a6d233b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c43de36d-a9fe-49e1-b6d3-084fbc07b7d2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab43337-6d4e-4b42-85ea-7d1ad2fdb051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00fc7f2-f2db-4c73-8a35-5c43c7e16596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c3e231-58d9-41c9-96d4-51218aa59a3e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59433fdc-1757-435f-976f-3c65a21fdc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2c78cc-d11c-4822-8523-3e9f2c236a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2f6516-b5fc-4249-9a7f-1aa335a9f9a9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b72a23a-7868-41cb-976a-66a3ababdb97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb08b245-dcbc-4c39-a86e-1955fa80037b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd71109-3032-409a-8b42-7ce8f45008c4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9252e3ee-2d1a-44eb-bc57-2654ca510773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0894059a-1e5b-4d60-ba1b-4f37b1563f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e9e56c-d1a3-4389-ae92-145381bd892c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee48545f-9546-4763-aaf3-0f6864a98895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfec7daa-a0ed-4123-8b87-5c13cc5a8b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9375b4b-9b4a-47f3-9058-6279624fd032",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab07eef-5898-46e0-9cdd-a24bcfc5be68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32446ad0-2e27-4fc2-ad77-e80ce8f53689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e0c25b-149a-48fa-b2b9-e72985e3d55f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c80ea7-43d6-4777-b534-3e213f8a16ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7689753-c640-493b-bfa4-215bfa945d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4734528-0100-4395-9a78-94b2728f55b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ba6295-4222-48c7-b83d-c4d9d37f593d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e624e6-7ced-4595-8795-ec70d9197238",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e8b39a-020f-4508-8183-8eb9b0f8b39f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0121db59-abb7-4a92-9960-8210e8a14796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b77b3ae-a424-431e-9698-9a99e6e68891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae170a30-9b4a-4bc9-97a6-487fba12b2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb64b9f6-eaaf-4789-b20c-3a6fc64f0768",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b0cf8e-1a8b-4ec5-a8f6-68c2ad820e1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d185f889-d352-4af7-ab34-a4aea8371348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a9db4d-7879-4fa8-ab82-a7bb0d0dec39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b5c369-0a0d-4f6b-b600-01a50a773521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b4b9e2-b091-4087-bd20-c1021224f0c6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1360f941-c94a-47c1-9608-66c9e85b1ae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d501d9bb-20d2-4dfe-a2e8-1b0b48e53d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970cd85b-bfa6-4f1e-85f1-859554037c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060167d5-d00d-4193-b294-200364e94f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0370bc49-bde7-454d-821e-a5f983e3cd37",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e71cd9-e650-40c7-b7e5-9f80180a5e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1e9ba2-6cfa-4d58-8079-d0675baac787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7667bbb-02ea-47b0-8f11-d6717e7f683e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73448760-e024-4a1c-bc08-ff35ef46153b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ac91d3-8354-4d65-b526-8ff20fbec20a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ab3cd7-da30-4f93-b993-b7546a8f57a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd62f12e-533c-415f-806a-72ead51820bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37440e56-a797-4bef-84b1-6934931b7524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b16abf56-ba51-4957-b0a2-274fba688e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cfab5b-1ee6-4562-ab62-5b478dcb21a4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d503da-b25e-440f-96c8-f098a02a48cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d01730cc-3f70-4679-bfb3-f9fea3bf0329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed5ee68-3068-477e-9080-74780e9224d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5e8a1a-8044-4f6f-82e1-ab08bd03e30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025c4d9a-5527-42b2-8c31-4ed8194267d3",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6ad372-3cdb-4f21-8a2e-50b1dfb7a238",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24a6b3c4-bc79-4578-b20a-9a60dd58dbbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abffbb17-4990-47d6-8837-f95116abacdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb6899e-18de-443e-91a0-bcf4f7dcf760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6159b0cf-217f-4735-b376-e5e33584f722",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df43c78-4469-4610-b17f-3634a529e7fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbe15ee5-97b8-468b-a61a-22ccbfe43214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd131a8-9f5f-4551-a0b5-f1cbfeab62c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8e385f9-6e7a-4ab8-9a61-83eda5e1e9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a39182-1557-4e85-b16a-dee0dee678c1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475f9f11-6699-4d37-95cf-ce9615fac52d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37c8f94b-1183-41c4-98ca-78a919789ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99ab022-cf19-452c-957e-984a812ff3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd46b06-de93-4e66-9cdf-167eb8ab533b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e76623-9268-43e8-b499-82a34235f5fe",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3b7da6-1d63-4828-b3f1-a8788ba9308f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d7ff81-0350-4e5f-a466-fd494889a74b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e03a6ac-a81b-4cc3-ad95-c7b08096e2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e528df-3fe4-4afd-bfde-73d2a6bf28a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e8a678-eb77-4a77-9bde-ac9cbd7ac205",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b6e482-7f3a-4d0d-ad3f-0a25ac830215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795e188e-ea5a-4357-a688-d18bc6917bc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfba8a5b-e3a2-430f-bd45-06c8036d5443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e50ef8e-e219-4fb1-9a4f-e00e07d6e95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3558965-eac2-4610-81eb-28199ac9f0e2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826cb515-346e-4c1e-afeb-705a50589a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f52a9a-8134-4c35-b1d6-8a0b40e268d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5d6e37-88c4-404e-a920-9f72c1fe4144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128bfb31-df01-46c3-a6b9-9c8adc7ee000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13344deb-7722-43a9-b8c6-6db2d27ecf7c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa87192-faac-48d4-aab7-bdf27d835a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1134991b-132f-4939-98cc-0eb06feb1e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edeaac1-73b4-45f0-a703-bc0a75b16be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f778f0f-8f7c-4310-a26d-e255bcf22422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8db829a-fad7-4186-9c7e-78592c2be981",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e13ca7-6bde-43f6-8209-b370f3881ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f2b7ef-c603-4291-be03-4f672703b591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "893a6867-3078-4fa9-b9ee-4c9fa5e32f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e7ad59-e2fa-461d-a9e5-8cc5d7661659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07cf1d3d-bb63-4bbf-a5eb-06edd500ca47",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc00d66-bff9-4f77-9e17-d527a24d1bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af14dcf3-9ac0-4bf0-b4e2-e71ff195ae10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52519dcb-441c-4b8f-9acf-9f4c348fd7a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7e8e25-7a88-4329-9331-1b5f8cfbc1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d94e188-4f7b-4a48-bc82-8684ebd38315",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b1a18f-fa35-4ae4-9837-7362b4972bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b29f53-f0c6-4316-9ec6-a07e6e8fb7f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb079495-6ea3-4883-8692-d221f9420819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5c2924-602d-4712-a06e-1a58b4702a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f33fbd38-d9ef-4e7c-b9c1-9b4e4d57fbb4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6745d74-0482-4f1e-b867-2380f1476494",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3e934d6-e528-4d6e-9b61-9b2b0d3b04b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "802ce644-3056-4f2b-b5f9-41953e9c315a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b709f27-94bc-4c07-b548-dd02592afead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314b5430-480e-4516-8274-041fbe395b5f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c52a1b-a624-4e47-89d5-0ddd76894abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70cca831-b6fa-4c54-9d19-7af74d588e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41c5824-a93a-4965-81ff-835332b97d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17cdb203-68c1-46a2-981e-3da59b5f1be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba7083b-11d6-4c49-b0d9-9199bf68379c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c917ca28-9e9d-4ac4-9e36-b2a87c071c3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "683a0351-aaf0-4eb6-b989-e40c51d2d3f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6791b306-c2ed-4edb-a49f-44e1726ae7e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c94b5c1-72d1-4eee-b02e-739e27309dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aadb7027-69c7-427d-8437-cc1e4103ac48",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f831b9ae-f601-4b95-9691-8829f5dd2520",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84086c01-aee8-40d3-9d75-acbbec97a012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4ce8b8-b0da-40a6-866e-4a6eb5395ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5366cf6-6e05-4555-8a0b-29f92b5bd374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65fdaabd-c107-4afa-b9dd-8092fa50aa50",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75119ac5-d9f9-4e32-aa18-2ac1ccbc3862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355ae21e-80bb-4317-a63e-c8c9c54ed7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3abbcc-0c8f-4187-a138-2779abaf42a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143254ae-849a-42f6-ac59-4d6fa3f737cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595cdc03-a724-4f6e-a2af-b6142e999542",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15592a1a-120a-4839-a72e-5e44241ff9c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ea3e85-4aad-4a2c-9d5f-abe02c28315f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f33737d-d5b7-495c-afe8-5ce06ea71255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08d6178-4dfe-424c-9e68-602d99ea73a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32818a88-bfb1-4918-8aa5-20ddb7211e31",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6e290d-be35-4f19-9dc6-0a35317f59d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2da6a130-4730-457a-80ee-796b223e3408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cc6627-c105-4dbd-92f8-bc9d8aaddab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517ae5bb-28d1-485a-a8fa-c3db5a377d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171a3247-5244-42fb-ab51-761130337a9d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f0a632-3427-466a-a995-9fb5281d1702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a39f53fd-9b2a-4af5-ad38-1dd2f45e16aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6954ebf-d4d9-4f18-8274-fde2142c0bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e46269e-d9e5-42c6-bbe0-44e16c5633f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665953dc-0b31-424b-9897-fe6242e6cd33",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c41048-50a0-421a-8b91-853b50c139a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5263f60b-1458-4224-b4e4-e69418fd6b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c293378-1134-474a-b88a-f8a3f61712cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e00d823-73ae-4df0-836a-08988c070949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12575740-44da-4e67-9b41-f12ee0a5df07",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6268b683-cde3-43f1-bb45-c811d24a02be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b277ff7-0743-4ccf-84bf-9102c98ca77f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0162db-57bd-48b7-a811-35b25c944829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d0b025-7426-48e1-a4f3-5d1a24a76d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce693cb-fa03-4b65-896f-0f7b32de08b4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a5364c-9067-4fb8-8212-b3057673251e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e1b576e-3579-4537-b94c-d8c2ede82b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c938d96b-5523-4f3a-ba46-12866e50a86c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c579f8a2-7f58-4d82-994a-0593ad35de4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24702bd-637a-4f61-ad58-8ed357286ed5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6b6ff9-797a-4597-9aff-98deeb012964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749051ff-c054-4678-b973-ccd5ef210faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d55d778-118a-43ac-adcc-84b2bcadd44e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d28f44-c95b-43c9-ae0a-70056868d952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f35262-c365-469b-a279-c6d914c8c682",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9a263e-8f8c-4173-8e79-98b71cf18db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d8adf2-ee71-441c-8d3d-a15643019e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7053b7e7-bb9f-482b-a41b-0e88ef62ea3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2054ae77-9d56-4f98-a348-2a2a406b02b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0f0257-fc1a-4182-819d-39569621f697",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc3e3bc-fd8d-4953-b9f6-87118853d348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "655f9a82-1bb1-4996-8b07-5d26428964ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "590e21a2-4bad-4ee0-9204-ffd3c001eb0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d476c8b-12aa-4f31-b28c-93e8cc3a5fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc73a03a-a627-46dd-b455-32b51c8af51c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85806f2e-da13-41b3-b311-eaaa3d3d0fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73238519-38fe-4a94-9c1d-0d00df6f18d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f825e35a-6a93-4f2e-bffc-a4b3acecd0ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "817e599e-5000-484d-8bed-24ec2db97c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c68d63-5435-445c-be84-317daea415df",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48fd5eb-64bf-43f1-9343-a1dcb3f10d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56bfbdd-1e4e-4ad8-8be2-23a29021500b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "189241cf-eaf9-4071-8d23-51b899c80672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf91b15-b8f8-412a-8c62-749ddf3a5767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f5b041-623a-4f05-8bee-8ce66d76745c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b992072-b2fc-4556-9a25-84be25b5ea66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53dea16d-ac25-4426-8b44-a43fb7db733a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b97e61-c487-482b-9d6a-da95442f0e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d11eb40-8d98-41e6-bd41-adc578d21451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31f7a2b-a6e9-4c97-8ca5-2f14fa847655",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1aa3d29-c9aa-4bfd-ba2d-ede62b9db886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7106818-c8b8-4077-849d-98f56094448c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d76bff6-61d6-43be-9c2a-7348de62efb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3857f063-009b-4439-b871-859a23a3b4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07213059-0dec-4b29-b10b-60beb702d19b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81fcf6c-707b-4682-97b1-42a75ed189d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a57cdd-d9d3-43d2-a023-024589f64342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52846e9b-3431-4737-bfa3-5b3cae44a3fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a1b08a-7279-42f3-80f9-2ac2fabc2aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b795778b-5a70-4f3e-8edb-53d48156910e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce4f71b-0df2-4d81-8629-c85b0ab1bb02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c85319-3ced-4c6d-9bce-5d9070c17e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca4cec4-60a9-4fbd-9b7a-48f6d7ca96c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1f7c38-2aec-4eaf-a700-54f8e2d69d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4d31dc-fd89-45e1-8a91-ae4987048303",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3d60ee-0277-48a5-8e63-7cef45e3f63c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e82adf-ceed-47f9-b140-4c7d53d34488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc477d01-6fbc-4fd1-93b2-8171c8229c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a009345c-2365-49bd-a948-8bacef5a872d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67747f5-699e-4982-9ed0-057de48b5791",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb61c453-d807-4c36-a7ea-81c7b9ef6103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5e0056-90f0-4390-8307-1145e80992c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8696dc5-ceb8-4545-ab86-1ef2a17eb5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3455e55-cfa2-4ffc-b5c6-023b62f7e859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1b1231-89ed-491a-8b33-6ea778beaccf",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257deb18-8ad1-4a4e-81ee-3c6d8d6429b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fd5f92-3e1d-4c6f-8a2e-4a605e143c31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65d25ec-f97f-4fba-8e58-8f968538c179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c01f46-91c7-4c21-bb79-eaa4e598a747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52323c12-520a-4207-9121-f30bad7fc701",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64969b6b-fb13-412c-a54c-e2f3bad475eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfadc62a-f903-46fd-b90c-02a6cc4e9e86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ea225e-2bfb-443a-8ce0-1d410004ef07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d23803dc-6c34-4d7a-b05a-f3432b02156a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c8208c-9e31-43eb-8604-724084716362",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbadd1c-a183-4999-9191-f7c146a9e257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4b7f51-bd19-4935-a6eb-fbc6590384a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3aafd30-5e1f-4b4f-b935-bbb0b75783d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75ce7bd-0a4b-48b3-83cc-f158ca38c6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b79b16-3724-4a31-a94c-1d04c0be5c78",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82eabdae-6118-4841-b46d-b77a64e27b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "367d7b6a-63d5-46ff-b4d8-70bde8100d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5cf721-3a4e-4390-a00b-32ed32672a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d008114-c509-4875-beb5-617cd7b22c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c336412-c2ad-45e7-8241-e16a40cdf765",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8de6421-0730-4f15-ab09-af9f55796330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0759e4-ab02-425d-8545-1bbd41bdd9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6670a4c8-736c-4de1-ac3e-167600e660ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c947f4-510b-49f4-9795-bf7943e8d90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a4e1ef-23d5-4010-8d49-e446a8abb315",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b168938-9be9-4546-9128-f2e94dc04177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23956c2c-7ab4-4acc-a105-46d514ca83c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1468d0-0433-4a04-87b0-f6b57c6437e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675d245a-1dea-450f-9e9a-cb2afeacbb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a618a3-ae2d-47cb-9c8b-7155788baf53",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890de92e-f937-43da-af27-df2d233072fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c265c78-7c49-4ef6-bee0-c1be5c98138b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57c35e7-27e5-443e-a843-b5efbf42f008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9f0cab-b5e1-4895-8c0b-7d402015cc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d24a5f7-9f20-475c-b838-d5f30e132d02",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc056151-7957-4988-8b8d-b9df115267f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90970281-e2f3-4b71-8409-7571777850d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde586d0-25e6-4ae4-a0fe-aa7fea54a75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2836c812-b0f3-4e54-a18e-a27605f0df03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6cd148-bbc8-4d96-82e2-610bd94e9561",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bb418e-a856-40d5-a227-50bf2bc974ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d67a42a5-75db-4e33-9603-6970978bd78e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18263805-8d51-4409-9a93-a92c24e5ac4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df7db6a2-6c8e-4164-865d-456ac134e98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fecc9d2-332d-4a16-9fcc-d65674cecf69",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62dcab9-1871-47b0-983d-f62cce7f2273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5966edbb-0cfc-4266-a956-d1e96fd85ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e7f38d-5907-44e5-80b0-4187be3da3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc8336b-9aff-4f82-bf3a-ee76088781a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c90b5e4-6ac6-48cb-8dff-6c17a90643b7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0885f2-4585-45b4-bd01-a8f0abf8fb96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e1eb60-f3c6-4885-b7e7-ac4053f7f823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74440ff3-75f7-49e2-a900-3fe11d81ea57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178aaa69-f161-40ff-954f-40653c49e0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c8f4d0-7f45-48cc-888e-8dcca8ff1b0a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b419cf01-e122-4a7d-b39e-57b3123e6ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236ad321-86a0-4b45-bba7-677b196ce191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65439e30-c883-4d47-afc1-8a9d59c4e457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d93269-9671-4f6a-aa60-795ea59ff901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f98b87-67e4-4bd1-96ad-0a4532199570",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eab6113-1b03-4b88-82b3-30517aec775c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6bd0d2-a8e9-439a-b02b-c5b147826ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c25e95-6689-4398-b4e1-95fa2ad013dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142e0bc0-73ab-46e4-b751-a14b7ecc241b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aeeebbc-d038-4b86-8928-cfd060dc7425",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a37d93-8438-49ab-b4d1-baeabf45f43d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e3afec-061b-40be-a68a-03eb989bf83d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5625d2d4-02cb-4a94-993f-4bbe7da4df39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "431069a6-2f3a-4167-ba51-9a64da5aa599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84049e2-55e0-4d19-b6f9-9cd28901d2df",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baad8549-be4b-44f2-a51c-d3484f7ae123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d582d7c2-d006-4d68-9241-2549b0136e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e65c6f-d5e0-4432-ab6e-45ea437db617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d604bb83-2e42-401d-99bd-0d0e7e0bdcd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47dd29f7-160a-4712-965e-75b039a338b4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a6dfe0-d628-4240-b955-47900101f07e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37928de8-1b5d-4bd6-b9e8-afb59e82ff0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45771d09-7a3b-4c36-96cb-f5e072f7d904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3b7bb6-9891-45ae-8b82-2f4988b5ee0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68566d6-3474-44f1-bdf1-ce00bb2c5d66",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8826e7-7c7e-495d-9f39-8b752bfc7d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a51c90a-2441-4e95-8761-21005e07e504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7460c0-7fb0-4caa-8fea-7cf5dbd8cc36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede35eb3-fa8b-4c29-9773-6287847562bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17da9d7-10fb-4e20-9fbc-4cc6e9968a0e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e4b55e-0a7f-4242-a21f-a434772fc720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac24e10-738d-4e4c-9613-24c8bb3990e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9afe58c-d85c-4ea4-b0a0-b8f7488a60fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0247271b-5824-4d96-bb96-99beb071133e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4295b69d-c901-42f6-bdf3-23cc077971a7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09980c70-03a8-4e88-8835-2d70a9e9720c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba6faf22-add1-4411-b75f-ff1bdab62da0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8933bea-225d-41ad-8cb3-363c3f098943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afab9df8-bdb1-42f1-904d-923be4bb5316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0389033c-90a5-475a-a816-5b7ca45642e9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a60cdcc-6824-4d4e-9d72-d285340a5cef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "719b8e8c-6151-4d50-9ed8-f47014c160eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e39e39-0805-49e0-8f96-66d15d5c8023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49401987-f384-4eab-8fdc-0518c5a05c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed2f173-54fe-40f3-a725-ff917a08df6b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145fcee4-130c-4597-9ad3-a1fc0e9c6bf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80d86eaf-2d89-4168-a358-6c0d9826d5ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab0f7bc-5929-43b3-9678-315b7a963292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81895b0-7207-43e9-8dbd-2f5dd782d05a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152ebcd7-df5c-477b-ba22-e857e9d2c59b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6422b8-e6cc-4a3d-846a-d70c6f2b0f10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70dfe92a-0c79-41c1-9280-9f4918081ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13deff4-6380-4333-9bd9-8c52c6f5e2b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff4db7c-9625-458a-86e4-e070c3b22eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af51c33c-8625-4951-a1b8-0193d4f84f6f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621f8115-33ce-4888-b0b0-11b53d093bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeb1cf67-f58f-4f91-9b2b-b26ed7cb2f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5639972b-3e35-478b-8250-4c1801c28259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd7e30f-a7c0-4eb6-9fa3-0df74e2a4470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4673c744-cbfd-48ae-8f4c-2a22a4cfc413",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548284fb-43aa-41bc-9427-d4e5f36525d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d4994c3-60e1-45f9-a58a-d902cc46a5b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f43725-9bc5-44b6-8c8d-662cde3cb66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f498e4e-755f-4324-aa2c-23e409e91089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae182872-978b-42d2-9ff9-d0d33611c21f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c549edd3-144c-40c7-b069-17afb3b792ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19d8435b-4fc1-4c98-bab5-a4ce0755d7c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2b9196-22b5-47ae-be95-1d7de2a70ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae4d8e7-a0f3-49b2-9311-9e5ac36901c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274e60dc-e17e-4cb8-b2b1-c43ee1ff5e00",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7080e2d-7c88-4517-ad43-34c28fd16fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eec547c-2eb9-4e1d-be96-1c2464d39a2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f63609-856b-4201-9f60-4e9280dd971e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678c6aa8-71f6-4890-b2de-24b862912a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e7602c-5e62-42b5-9cfa-d9cb78a2372b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c357b26-7986-499c-88d4-41c6fb880c0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03808642-6caa-4687-aadf-f70a4b4f2bf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45966963-111f-4c86-9734-bed939e7548f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9a281c-c39d-4ab2-86b9-2d565f983b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b0aa93-f562-427f-a6c8-751dd4430853",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb72622-6f63-4e16-905d-8f2b28334f9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b3b1e37-0932-4e5c-86d7-7e29b2bc4825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fc27b4-1a7c-4187-9471-6a82713006c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0533174-2d95-4a50-b881-4da78d1d9e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d27fc5-b1a1-4997-8e23-e52374dfb27a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ffc0ab-a306-4d97-a1ad-ff1d16c90063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9224fc7-88b8-4f1f-9607-45ea5248346c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182aa2ae-eece-4cbb-bb58-0c2c42a64e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69e0932-e3d4-4c61-9c49-e4fee4698887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc4be47-943c-426b-a6d6-73c52a9d9945",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8073342e-19d8-4adb-98aa-863f07d434a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cafac476-2d20-4d66-be85-fdf059779a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b815b938-bf24-4bcc-b4f5-aed900c4cca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c471fbe-475a-4d93-bfa8-84a08ab6722d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4725f2d-f7f3-47b8-bb73-6337decccddc",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf81c5c3-a9dc-4215-8672-7058d90eb8fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48299777-8454-4218-91cb-335252d9a5de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7753bd-e2f0-4a8f-a382-fdad7a53ce12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5292b6-3aa8-449c-b7a4-e9450ee81ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01158759-fce2-4fc6-8d52-ffdf613dc833",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73dbd93-ad12-494e-8dd7-341691b24562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7164f985-4189-49c1-a795-1dd6023b17b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0d5454-304f-429b-b81f-6e3643ee2522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b85494-5aba-4ff8-a720-e755d6f73c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8a1372-1b5e-4e79-93cd-105f5240339e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ff9b75-5eb7-4cb6-8707-9a62490aeae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b9ee3e-646c-472a-abc7-d338b04803b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804210bb-23fd-406e-b1a3-6683534a63bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b8a439-7c5f-4016-a4a8-dbba02f7d7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba8a5a2-ae00-4164-8436-474a66f168c3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfe3afd-673c-44e8-9787-6836b6267de9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae5e08d-3f2b-4713-9334-3b0d36038360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04124990-36a2-483e-8620-1471e49a0d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3093db5-abc3-41a5-8f4f-f2f93156d384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca09879a-ff3a-483f-80f5-4e41d5cf2bf1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da02f69-9af1-4b3f-bf81-04414144bcc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50f10464-5c3f-41e7-bd6a-3662e9aca9f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1360800d-92e7-4670-834d-dc10f15c8f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad8264b5-7939-4091-974e-46256c379794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8084de5-e390-405c-9379-ef014bedc03e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542e1d98-71e2-4e6a-8f7b-5383b79e24c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fe120b9-e702-4f8f-9a9f-0ed76ca40b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d693c86-1f79-4655-a8eb-6a7550c6edde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d67b115-dcdb-4da5-a653-eac39475a75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fb8bbb-acd5-4f46-94b8-160017666c5c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e481e6f2-6efa-4114-bbe5-6a418d1494db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b57b768a-d091-4f2e-b55b-cd1935d90aeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a8e7df-ea07-48c4-9676-0a76aec5f292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15fb4e4f-a583-4dbc-9287-b6ee3d395fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5d6f1a-dd0c-419f-b6c2-c155d7793a47",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44024899-4476-46dc-b738-66660b777280",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79795c29-ad80-4ad8-9906-360db3b07c8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a289070-d31f-4c33-8f36-0e60b467fa4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01852cd5-6399-408f-bec9-bf9e2d8653ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d3baca-72dd-4288-914b-f6ee822eedc8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fa5a31-4bfa-4a9a-9863-00c8675da763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c660033-08c8-4416-89d3-14365518bd53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbbc026-671f-4668-bd91-ef2d1348c692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7347c76b-e98c-44fa-8bb0-87feaa64f883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806db0f6-063a-4269-ae7c-42d99f6524b8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5061edae-a026-41d3-ad5f-9be712fe9a83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56995fe4-2ba5-4759-888d-2af79722aa7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bbf6cd-3d68-4a66-a3b7-1b8d5cb3aa1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb78dda4-ab6e-4c17-8237-2393fd6c13ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cdbe35-b662-402c-956e-17f7f701ac39",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8beedd6d-fdee-4bfe-87ee-375debb037af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feb2537d-0974-48ca-80ec-f69f4796b410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d66c6c-bfc6-43aa-b8a6-4107ea702252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794cb9d1-2995-4574-86cd-0940a269be6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d00c7fa-30b3-42c1-87e7-da36e422799e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f466f860-c0c2-4a89-b185-5e1618b5603e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "438b4205-8b00-4aae-9b90-1f88866c7fa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5ba8d4-13b4-4ba0-960f-0e4b8a778d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ba52b4-8f96-4282-a9f7-f3f6ff70f6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d18c67-39c8-4763-ae9d-7ca61440be82",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9dac60-bdbb-4a8b-88ce-f762f6a434a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42614e05-9d2a-4031-9eb0-a44669f6c21d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7f242d-73d3-4e54-b59d-e4d833853022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686f7ca8-31fb-4dca-829d-4a8f8f513944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551894c9-2eea-4797-ac72-e4f29f3b3f76",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4c02cd-c08d-462e-8a3b-0d7ef101238a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d5971e5-42d2-447f-b14c-54fec15646d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b56e371-3f68-4a43-b3b3-71eaa0a4e873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ccf8807-e4ec-4a76-a25e-9e8bd3e0f125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d9174b-75f0-489b-a831-a1eb9d54f9ce",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca59526a-d368-4f36-9a0c-0b57ba7790bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2f2b117-2bb8-4c28-aa79-458722256af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b928eb76-e15d-48c5-9fd3-c10d7bc4a6ed",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f93bc9-584c-4510-86d5-9c5a4d78782c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690d781a-5670-4939-be95-377af2b52ee4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7762baf9-8bc4-4b2d-b71b-df2b34341a07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93bad312-4160-49dc-811c-af798d6d24c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e542f10-6314-4557-b7ef-cb55283acf2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3539dce9-e484-4537-b70d-bc442a9d7c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202f19f0-bfac-43f0-a261-d35e7c3b4678",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6e25c1-e736-4698-9bba-6ba037020121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f6609ca-8be1-47c3-b2bc-158bfe21d82b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3193b9-2093-4694-aff6-e53ddf485400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89455489-4609-48e1-9b1c-ef995a6db676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652636d0-a2c5-47b2-b5c4-2f3e783ad76c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a263dfe-725d-4bdd-926f-1f68b91ea762",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e1b2358-9d58-406d-bc39-a0b6a096aa3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edf577c-1746-4d98-baf8-cbfbeb7816b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b37773d-7286-4b66-85a0-18db505f8c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56d1201-d2da-4690-9948-2273ac6d8bfd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba5f717-a73f-4580-bd38-4931cd98e47f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b29f0625-19e6-4339-9460-8157f257aa51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64198e69-b158-4513-8b2d-d729419d52a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "997068ff-f5df-4847-9651-2490f2528c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d213a84c-c07c-4f59-ab1b-50a63f7519da",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba13ac3-4ac3-4f0a-921d-5b019aa3c36c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dd1580c-95b1-4a0b-835d-44ce387eb78d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76107c25-cc2b-4c3e-bad9-5b08d530def5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d142e5e-3f6b-41d7-9fcf-511761991cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b02ef4-a0dd-4a90-8b4f-aba01b145c43",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2d5418-7082-4216-b9e2-a2cf3f7661a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc580371-ee39-4857-a43f-c50bb1fdc986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07558694-2f52-4644-a917-3008ff9d4842",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f93d72-2c4d-48c7-b609-59d6f7f69022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f532bafe-dcd4-4665-8100-581e35f1f5c4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabac2da-25d7-4f45-9aab-fbb54b14e7cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2c2339f-bf51-4edf-a5fa-58669e3cafdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b61a4c-39ce-4fc9-b0b8-4bac7da3b2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b86a3f-f802-4364-8126-d2510c20fc8d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0256fee-26af-41ee-82fd-8df55f97af7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21668ad3-974c-4278-9116-693a4002bd21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0006a1f4-c8fc-4f91-9a25-d4e26a80e422",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7902f02e-c317-45fa-af78-2c22da1044a3"
                    }
                  }
                ]
              },
              {
                "id": "65111ca5-ce63-4368-ab6f-45928a827fb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76b531fc-0160-43df-b4be-5b7b34beda1a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b735e210-a076-4db3-816d-09d2ed3c40b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f6dc5665-10bc-4227-8943-e5c60a5e1a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ecf59a-c376-470c-9984-5a762fe8ec0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69c59fa9-1903-4085-ba94-c79044d973ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e55f8f77-08e4-4a57-84b5-06246bec22c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cf13c4b-6e7c-43ec-a6bc-e6357c12f7e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72e4a710-fdf8-4790-88ce-5ce3c88a616d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d73f97a-fd3b-4292-826f-dbb20e593338"
                    }
                  }
                ]
              },
              {
                "id": "b04cd35f-a38b-42b1-be7b-62bc29841af4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6ab05377-62bc-42b8-b356-4db9d7c042cb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582e50e1-516b-4c3a-bbca-f4368038f220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2385da9d-c01c-469d-bf62-bc39bcf40d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b936c06c-3c25-48c9-9052-f6954f29c4ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbaee0be-1e93-48d2-8ca4-34e16147629b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ec71eb83-dd0c-4e44-849c-2f173ef076c6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6ae8426-618f-4723-a127-e03395a33cbe",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eea27913-f943-423d-9ef3-9fe4542ef0b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f69dff9d-0c7b-4a48-9060-149bc9a439bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62407894-a048-45dc-b673-d3e3cff41eff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49552a28-7c8b-433c-98be-243056c58605"
                    }
                  }
                ]
              },
              {
                "id": "175f561b-5b93-4628-8232-39ae9dec3007",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "47897134-3d19-433d-a940-4032e2fa637e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "baedc3de-359f-4ea6-ace4-c26f8f4fda6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f20251f-ac7b-49f8-9649-21d6bd1094a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83a1fff7-e982-4df8-8c21-23935f0b3a1b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e98aa01b-d826-4e24-b1e6-14ccde346ea6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "244b9408-b829-4324-875e-c60091cd9055"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cf298a2-89e5-4796-9beb-219ebbe90354",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "680eecca-02f2-4635-92f4-3244c312bdf9"
            }
          }
        ]
      },
      {
        "id": "90c8ab7a-9194-4c83-bbc9-0221a147edc8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ea9ee467-b177-42e3-8c4a-ac2a6ffa0426",
            "name": "Negative Testing",
            "item": [
              {
                "id": "445f0d2c-fedf-4585-b690-7e4c0a0a1ee3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4022395-05c4-476a-afa5-94f1120a730f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3df0ceb-87e4-4894-ad2e-de5ebca8060e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5220ea9b-b77f-4287-870b-3373bd4d0f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87c6c82-f977-476a-b0e7-c06a2ae21674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72fc58f4-e1fa-42fe-b091-7a66f317f28e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f011b801-e141-41c8-881f-6911488f97d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33d5af94-155b-46c2-b748-b290ddb42a81"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2d1024a-e21a-4f60-9846-7f94c7b06248",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ac9db62-f858-44d7-90b6-2c1fa327b8ce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03e484bc-296a-4426-9739-6aa91e5da087",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8e752add-e601-486c-8f4c-3d95d9e34986"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45764e2d-1a3b-48ee-8121-efe588c9e574",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19a877dd-1f1b-4ac9-a57d-8bd5cf478d8a"
            }
          }
        ]
      },
      {
        "id": "6f5e8298-35b4-483a-abff-b2c6c2c365b2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cca2a267-0e14-446e-a968-77b9aad7ef60",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcb1ea9d-e822-4115-a040-9a31af5d41ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fae7707c-4009-468d-87d6-842d13c1fe35",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3e2ce2-68e7-4285-a550-3b0f7a71a304",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73f20504-91bb-4af0-94fc-8bb2866b16a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82acf3b7-6f30-4d34-86b3-a748bd39f48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2c49f2a-87b2-4c52-8328-ab62f7f22d3a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6ed7db7-f9f0-457f-a065-29d4259dd914",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e75f7c4b-7133-4199-a6c4-11989a484277"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce811754-697e-43bd-931c-98e5f3126de5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59b69288-3767-4591-a749-cbd6a85af3b1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c445d2d-cdda-4174-86a7-b27421570f38",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8575b4d2-8b7c-4ddf-98bb-45eebdbf4ff5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7bd93150-6a38-4695-828a-d6db00e8e95d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "02fc6ed5-8a5e-41c9-beeb-83955a82b2da"
            }
          }
        ]
      },
      {
        "id": "3cc42add-191a-4a85-8a27-679f065ca912",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "58c737fb-0a8d-464d-a71a-76beeee4ab7f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6945f93f-bcfa-4678-8f7d-731e2833ca72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8a5f45b-0744-4a35-b6a8-2fb59c93d464",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485ed71e-2873-4b4c-ae19-c7de32215746",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0150360a-3a07-4347-a512-b59a3af7afcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c444c9-d51c-44c2-b314-54d2ff3c2cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "104e6988-7606-4337-ad60-7fbce39b719e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f85c5f9a-d1b4-4601-81f6-93ec88dd1f26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20aedc44-ba84-4d20-8f8b-0aa942ef52a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7301a081-b61e-4763-8654-677e11afaa62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b819254f-7c55-48e6-8b3d-41bf0e7856f5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7426760b-1489-487e-96e4-c4a34ef5af28",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "41a681af-3229-48da-a35b-480910e35077"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46b25a84-ce5b-4341-bedc-f21fa549477a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d6737af-525a-48cc-b959-5e6e6e65921a"
            }
          }
        ]
      },
      {
        "id": "992564b9-e422-440b-b219-51f60c625a55",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cd39e4f-19d6-46a6-81ec-aaa1db9fa143",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "597baa65-4f92-4bf9-a80e-c00c75e5238e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "eead7245-ae4c-4ca0-8009-e78bc7a628c6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cccccc7f-f7f9-4f73-8850-aff0c439ca5f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54b34242-3384-4f13-ba04-d2303c12bd7a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.30877192982456,
      "responseMin": 6,
      "responseMax": 765,
      "responseSd": 71.0207488355235,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701563878975,
      "completed": 1701563906473
    },
    "executions": [
      {
        "id": "83c6ba71-afe7-46e3-a34b-97c13a13e4fa",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ce552c98-01fd-4439-8ad6-67190d7a6d35",
          "httpRequestId": "6a6dca0b-0f3d-4f09-8afc-c57b25698d19"
        },
        "item": {
          "id": "83c6ba71-afe7-46e3-a34b-97c13a13e4fa",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "10d51cf8-e1a6-4e3b-b99b-0078bbf0fd9a",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "79d8eda3-582d-4c29-99db-a957e344c184",
        "cursor": {
          "ref": "f5d56e26-d931-47dc-a070-cb8171b5f61c",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cb627e52-d5f6-4903-a7e2-317802318200"
        },
        "item": {
          "id": "79d8eda3-582d-4c29-99db-a957e344c184",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "313b1529-0699-4bc6-9f11-2c8bc76894d7",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "f7d5e34f-5cd3-44c5-a7cc-b0519c9ad5fc",
        "cursor": {
          "ref": "b52639d4-7649-4c54-9e3a-1203ba63d183",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "67ebfe7d-842b-444e-a10d-6381bf963c0e"
        },
        "item": {
          "id": "f7d5e34f-5cd3-44c5-a7cc-b0519c9ad5fc",
          "name": "did_json"
        },
        "response": {
          "id": "e37bfbf2-5ec2-4fee-a78d-712ec03fc3ab",
          "status": "OK",
          "code": 200,
          "responseTime": 288,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fee8d2-8cc3-4b00-a36d-ddf3f3c1a6c6",
        "cursor": {
          "ref": "c0753945-4302-4ebd-9702-1680b4c116d6",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "42805ff1-6195-42e2-a3ab-c1644c4b0125"
        },
        "item": {
          "id": "58fee8d2-8cc3-4b00-a36d-ddf3f3c1a6c6",
          "name": "did:invalid"
        },
        "response": {
          "id": "a16c2deb-4ab9-4a22-8b36-21413b0ca881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fee8d2-8cc3-4b00-a36d-ddf3f3c1a6c6",
        "cursor": {
          "ref": "c0753945-4302-4ebd-9702-1680b4c116d6",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "42805ff1-6195-42e2-a3ab-c1644c4b0125"
        },
        "item": {
          "id": "58fee8d2-8cc3-4b00-a36d-ddf3f3c1a6c6",
          "name": "did:invalid"
        },
        "response": {
          "id": "a16c2deb-4ab9-4a22-8b36-21413b0ca881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fc35b7-f907-4436-89dd-4bba9bd15865",
        "cursor": {
          "ref": "b4949753-24f2-408e-ad69-efa2eb15d2c0",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e505b071-09a3-4e78-9341-8530cd1bc0c4"
        },
        "item": {
          "id": "31fc35b7-f907-4436-89dd-4bba9bd15865",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "55ac4992-6a3b-47fd-96f3-f7bae06a200e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b07323-d6e6-4b7f-88ad-b2885eb4ecbd",
        "cursor": {
          "ref": "bed9e180-134f-415f-8199-2c3d6b6e656e",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "15e576e7-24cd-4af1-8ad8-abb8588c6f98"
        },
        "item": {
          "id": "51b07323-d6e6-4b7f-88ad-b2885eb4ecbd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b6ed1f25-b06b-4b34-840c-4458f9835b26",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e69c47-f1e2-458d-92d4-2319c71ca8e1",
        "cursor": {
          "ref": "20b30c9d-81a8-4a17-848e-bd1767fe6868",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ae180b11-1943-4381-a752-39a96400c300"
        },
        "item": {
          "id": "77e69c47-f1e2-458d-92d4-2319c71ca8e1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b4c51ef2-3d51-40a2-b208-a6926af8b765",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f784864-d8b3-4b04-8610-6589fcbe8d31",
        "cursor": {
          "ref": "19e0e564-76f4-465c-96d3-e00f183d2259",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4fcf19f-6a81-45f5-b758-9ad7e8f6537e"
        },
        "item": {
          "id": "3f784864-d8b3-4b04-8610-6589fcbe8d31",
          "name": "identifiers"
        },
        "response": {
          "id": "96aab1a4-5c3b-4c12-be43-1b4b670c4192",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6e2981-25be-4aec-ad19-f188a2eb9b49",
        "cursor": {
          "ref": "3005fe56-4953-46c5-b5c5-6846baf0cf44",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "26b6dec6-a774-479e-a813-2c64a05b1f64"
        },
        "item": {
          "id": "aa6e2981-25be-4aec-ad19-f188a2eb9b49",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ce80227a-f7df-4a9a-8f41-c36210cb1699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f940a502-1815-412e-a6bc-d6887053d5f6",
        "cursor": {
          "ref": "d00d0caf-1204-4f6e-b0ee-3da944ca8163",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fdb55012-624d-4cd8-a53a-3ed238e349b2"
        },
        "item": {
          "id": "f940a502-1815-412e-a6bc-d6887053d5f6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f59653ef-531d-41c4-b4ad-85acb48f2df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65fc10f7-4e69-4dc5-90f0-83ae7864686a",
        "cursor": {
          "ref": "68ecf0e5-1d35-4380-9b5a-e915f4335368",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "26ec921a-4741-4651-a159-e868ed285451"
        },
        "item": {
          "id": "65fc10f7-4e69-4dc5-90f0-83ae7864686a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "490d6832-c515-49ea-8aad-198bf48873de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f26f85-1b28-422a-a2ef-d8df0b45a435",
        "cursor": {
          "ref": "6a27edc0-c209-48be-b32a-6864098e7c5d",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2cacdeb1-5f25-4ac6-9393-d55a82d0f9be"
        },
        "item": {
          "id": "d3f26f85-1b28-422a-a2ef-d8df0b45a435",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "517b7543-279e-41e7-8d91-c224c20a67e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9261b4c-9bf7-4ff3-81b3-149954769760",
        "cursor": {
          "ref": "a0d3579b-523b-4e15-9e7e-42b6a9bc010f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bc5618d2-62d1-4068-8d46-07d547668907"
        },
        "item": {
          "id": "d9261b4c-9bf7-4ff3-81b3-149954769760",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "34eae59e-a364-4e3c-ba59-f1cc8c5c1169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb32e2fd-330b-458e-a017-c3cdbbffff4b",
        "cursor": {
          "ref": "bd03c783-523d-45e8-a48b-50bf1acf745d",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "12416017-2cf5-43e3-9f12-379dd0745480"
        },
        "item": {
          "id": "bb32e2fd-330b-458e-a017-c3cdbbffff4b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c7a94065-9331-4860-9d15-c51b2ed9c75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e3cb58-e050-429d-a7b4-8f3a67b8c481",
        "cursor": {
          "ref": "19cf21ee-092a-44ec-8a17-d77c30bd59e2",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ea6dd27e-25db-4538-9129-80088ed23dd0"
        },
        "item": {
          "id": "52e3cb58-e050-429d-a7b4-8f3a67b8c481",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "eccb71ce-c431-44b3-ad36-9532745a2a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9503e77-1102-4824-8c43-539c5846c497",
        "cursor": {
          "ref": "e3c64ff6-f293-4766-9e11-04f9159ee3ca",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c84b81ef-5080-46b3-bc3c-1eddec97c332"
        },
        "item": {
          "id": "c9503e77-1102-4824-8c43-539c5846c497",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3c1e2a58-5d1c-4f91-a108-45357717edfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e57d90-463b-425b-b8c5-ccaf2115c818",
        "cursor": {
          "ref": "884284be-c4ea-4733-b94e-f20dcf086229",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1ef08bf9-7da0-424f-9bce-7690c420fcb5"
        },
        "item": {
          "id": "86e57d90-463b-425b-b8c5-ccaf2115c818",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "cc057287-a958-496f-af97-034d4e3c8218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3417a9-ead5-45a2-8789-e8c78c93a573",
        "cursor": {
          "ref": "d2884cbf-61e1-4fa3-aeb3-ca005d848f70",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2f9eac89-ef6e-487b-a9f5-e34fd362dffb"
        },
        "item": {
          "id": "1b3417a9-ead5-45a2-8789-e8c78c93a573",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c009b001-c174-49f3-8cc4-8d1c9414363f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6704662d-40e8-49a3-b27f-165592941d27",
        "cursor": {
          "ref": "92c42865-371d-45ef-90e1-1d292f328f39",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "eb294156-97fd-4d49-8deb-5d9538452258"
        },
        "item": {
          "id": "6704662d-40e8-49a3-b27f-165592941d27",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bd8dc8c5-b1f7-4609-bb89-ce309e8478f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49fae8ab-3546-4775-9eb0-94b2f8266b79",
        "cursor": {
          "ref": "628983fe-8aef-4d1f-860e-75ffd0eb7d64",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "91ca6080-8d09-4830-b15d-a8a2603536f2"
        },
        "item": {
          "id": "49fae8ab-3546-4775-9eb0-94b2f8266b79",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "09f45ea9-7658-40f4-806f-95a595efb245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21e1bfc-3bb5-4fa5-a298-f7eff510e090",
        "cursor": {
          "ref": "1f52f9c6-2c7d-4429-b6bb-410776c3b017",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "48d5a81c-3139-44f2-95fb-c77b94650b32"
        },
        "item": {
          "id": "b21e1bfc-3bb5-4fa5-a298-f7eff510e090",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "786c8e0c-1ec1-4e69-ab16-8e9e4fa2ba12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01de11d-885f-496e-aff7-c2cc2adf259f",
        "cursor": {
          "ref": "ec88b579-0006-414a-8266-3084b1e015f9",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bb572c38-4547-4b21-99c8-6cc204f3ecd4"
        },
        "item": {
          "id": "d01de11d-885f-496e-aff7-c2cc2adf259f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dcafa804-56f3-4e75-86ef-8ff2c2810352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721b9f50-a78b-40a6-93c0-74ee629af564",
        "cursor": {
          "ref": "1dbe30c9-caff-4ee4-944a-54697aa0e62a",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d65268eb-7d24-4a9c-8d40-580f6b227fe8"
        },
        "item": {
          "id": "721b9f50-a78b-40a6-93c0-74ee629af564",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "95bf49ef-dbcd-4225-af1b-c8d593b8d0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d07ed84-f538-456b-927e-54bc6668e577",
        "cursor": {
          "ref": "27032f94-176d-434f-be64-be1445cd0517",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0d5b0fbc-2be5-4722-ab69-d282cf74c105"
        },
        "item": {
          "id": "9d07ed84-f538-456b-927e-54bc6668e577",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e174081d-0e06-4f8a-bd83-83b7973f4387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b23e35-1a67-4a77-8213-bc58b162e849",
        "cursor": {
          "ref": "e2e3b16c-1945-4946-8bb9-7d01a44b0bcb",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8ff66b1a-c3bd-40ed-bbb0-b2de31a51971"
        },
        "item": {
          "id": "07b23e35-1a67-4a77-8213-bc58b162e849",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ea7f7a46-5c5b-4ea4-b4a7-62b42d1662f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811ab568-269e-496d-914c-5f722ba63afe",
        "cursor": {
          "ref": "9d4db069-4c2f-45c0-a31e-cd874f5109ba",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6380dd65-ce70-4d98-92cd-a668789e34f3"
        },
        "item": {
          "id": "811ab568-269e-496d-914c-5f722ba63afe",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7854fdd2-29bd-46c7-9223-76ba58b98028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacf4b59-01c7-4c34-91dd-d4328a7fcaa7",
        "cursor": {
          "ref": "6132a1b4-d5b1-44cf-85a1-c5eaf9c0920f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d5948ca6-48e4-4ed2-b699-3cfa61c25066"
        },
        "item": {
          "id": "dacf4b59-01c7-4c34-91dd-d4328a7fcaa7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "649bdbc0-35ac-4c8c-9303-461d4dce9af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f36778-29cb-4522-a754-540f656bb8eb",
        "cursor": {
          "ref": "cb165a8b-73be-4732-ab31-5382aa1cf666",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "32132b0f-e85f-45cb-be0b-4170b8824ccf"
        },
        "item": {
          "id": "36f36778-29cb-4522-a754-540f656bb8eb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "139fa491-ef13-4236-b6bc-632ca7c856ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c778439f-17b4-4536-874c-0aff1edee2c6",
        "cursor": {
          "ref": "b9dc3b21-ef4f-4f4a-8ae8-54304db43ea3",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bcbc8bcd-0dcb-4620-b46e-b3c00451d71f"
        },
        "item": {
          "id": "c778439f-17b4-4536-874c-0aff1edee2c6",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e3848044-1a6b-4949-8768-cba74c2f2859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17e4322-1826-45e4-bf62-abdb7a521ded",
        "cursor": {
          "ref": "4f6f289b-72ec-44c6-baa5-f6bd83243a1f",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6a2da23f-685f-4407-88d6-0c19393024c7"
        },
        "item": {
          "id": "a17e4322-1826-45e4-bf62-abdb7a521ded",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6b801108-ac4e-4539-91a3-fbb91903bfa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebed67ab-7a15-4c8d-aaf7-2084bdc60db5",
        "cursor": {
          "ref": "8853924a-10a9-46cb-ad89-eb0aab3729b3",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "80f138bc-dbcc-4237-8703-90a157342353"
        },
        "item": {
          "id": "ebed67ab-7a15-4c8d-aaf7-2084bdc60db5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "76492130-dbec-4f48-8cf8-726eddedeec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def32c07-23b3-4805-971a-e8153d40b0b8",
        "cursor": {
          "ref": "fd2cac3f-658e-4b26-b8af-cd858798ec2a",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f21766d6-a9c7-4710-bc2a-7657ac3c7af1"
        },
        "item": {
          "id": "def32c07-23b3-4805-971a-e8153d40b0b8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1826034b-a548-4e62-8d96-cfbcbb4b146b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b33d03-df5b-4e73-97c8-9b63dc922039",
        "cursor": {
          "ref": "6f43b431-9dfc-4e2a-873f-6f5f300704fa",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9cc06e30-7de9-4da1-8da0-2ec1e88a4b00"
        },
        "item": {
          "id": "96b33d03-df5b-4e73-97c8-9b63dc922039",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e48df207-f258-4fcb-bc71-794b1cbe803d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb839a8-9f23-4c4a-aca5-54acee1f44be",
        "cursor": {
          "ref": "4cc8a508-503c-4c7c-abb3-dd2f45108ed9",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "86acedc5-3497-428b-9962-afc2d4d22f6a"
        },
        "item": {
          "id": "1fb839a8-9f23-4c4a-aca5-54acee1f44be",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "deda61fc-b1a7-4a61-a013-97b68d5778dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf34e9c-6931-4ce4-bb77-296edbea6d36",
        "cursor": {
          "ref": "3dbf0a2c-6cfd-48ed-8b75-9cbcbf389585",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "51f676cf-fd7e-48fb-b6a0-79ddae57412e"
        },
        "item": {
          "id": "faf34e9c-6931-4ce4-bb77-296edbea6d36",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "92b59136-de9d-4033-a901-7cb7b1fdbfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1766b03-6dcb-41bb-a516-b469139ea204",
        "cursor": {
          "ref": "2cd0eaa0-7424-44af-b00e-d0fdcd97bfe9",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "efed5469-7a4d-45ad-92a1-06c2d9f7b294"
        },
        "item": {
          "id": "d1766b03-6dcb-41bb-a516-b469139ea204",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a9e80b5d-416a-4555-81cf-5d37363b5f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a64bcd-8d41-4d04-9669-4f3f28db8eac",
        "cursor": {
          "ref": "84691646-08b7-47e6-b905-f005e36d33c3",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3401298c-681e-4a7d-81ee-c4992069bcd5"
        },
        "item": {
          "id": "50a64bcd-8d41-4d04-9669-4f3f28db8eac",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2b2cd531-4ddb-492e-8dd7-ce3c4a38c268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7127c47-a653-4703-b7d5-a58ff0134e5f",
        "cursor": {
          "ref": "1fdb6bb8-acc8-4b39-a418-11a0c296c2f5",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1ac12416-625b-4dd4-8311-11fcee605d3d"
        },
        "item": {
          "id": "d7127c47-a653-4703-b7d5-a58ff0134e5f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "73d6a051-9d91-4ea0-8621-5ec838c02313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f94831a-6d8d-46f7-b750-d5788dbe37c4",
        "cursor": {
          "ref": "a4367454-1139-47dc-88c7-03bcbb1c512d",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "248010d8-607e-4508-af78-217f479054e7"
        },
        "item": {
          "id": "7f94831a-6d8d-46f7-b750-d5788dbe37c4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cf9990ab-5de9-42cd-9278-ec8176e1f2d3",
          "status": "Created",
          "code": 201,
          "responseTime": 765,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "860a0c0d-a4d3-400d-957a-0c5d54fdab92",
        "cursor": {
          "ref": "a5fec81b-04c0-4a38-9a4c-362f419d7874",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "70770112-4046-487e-9d45-63d284d3a819"
        },
        "item": {
          "id": "860a0c0d-a4d3-400d-957a-0c5d54fdab92",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "da602662-eb57-46a2-9b68-1a21a65213eb",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1069ff01-b0d9-4569-b7f3-273c72b713ff",
        "cursor": {
          "ref": "8dfbc960-ade7-4eb6-b6de-eb3a7eeec295",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "559e5f8b-b921-444f-a233-a03b76d5b06a"
        },
        "item": {
          "id": "1069ff01-b0d9-4569-b7f3-273c72b713ff",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "bfe9214f-bea7-4a99-9582-771f790449b6",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "21f52b9f-e382-4022-9f3a-fd07c3cb75ec",
        "cursor": {
          "ref": "554b82b8-cd29-4555-b235-1f5e8fe9fd97",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "39cf14ac-d0d3-41d5-a9d7-0adc43953545"
        },
        "item": {
          "id": "21f52b9f-e382-4022-9f3a-fd07c3cb75ec",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "40e3a14f-84cb-425c-8269-24decbeba0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef169539-f6c5-4ffc-bd8f-ffaf793f3a9b",
        "cursor": {
          "ref": "dff7c917-83e6-45c9-9d29-de23808058b2",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2b38a7cd-356f-44c6-a7cf-9cf76545a329"
        },
        "item": {
          "id": "ef169539-f6c5-4ffc-bd8f-ffaf793f3a9b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b00fa5ee-d539-48a2-9446-0b46c8c96710",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "635ad837-2be7-4c9c-bb40-9ba589ceb725",
        "cursor": {
          "ref": "dce41be4-cb94-4ba7-96e1-946b2247ab9f",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6660530e-fab3-479e-b45b-502182367173"
        },
        "item": {
          "id": "635ad837-2be7-4c9c-bb40-9ba589ceb725",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "11de5fc2-7bb7-4127-9b41-07d156e0fdcc",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "95123456-3906-4f77-b0a5-0e2fee9f8b59",
        "cursor": {
          "ref": "9bbbfe8d-f4aa-453a-81fb-49fb9dd4b635",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "43700309-0d27-4011-9d8d-bbe5e066e762"
        },
        "item": {
          "id": "95123456-3906-4f77-b0a5-0e2fee9f8b59",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "56384fe4-498e-4234-b091-b3ff5c4e20c7",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0214ef08-0002-489c-ad5f-cf84b136cb6b",
        "cursor": {
          "ref": "61407c86-727c-4c15-8a55-86cffe0a7015",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2b50f2d9-24f1-4594-a1d5-f15aa68f85b8"
        },
        "item": {
          "id": "0214ef08-0002-489c-ad5f-cf84b136cb6b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "91959298-2df9-43d1-a935-2bbe7c2129d2",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8d029584-d334-4437-a7ae-97250c671d77",
        "cursor": {
          "ref": "73b676c8-c094-46e9-b996-7f61da052f58",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c1e2aa0d-b074-4f14-97d2-d6adc4848da2"
        },
        "item": {
          "id": "8d029584-d334-4437-a7ae-97250c671d77",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "93421921-8ace-4b70-86f2-74840066d7d5",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "53c936a1-7ddd-48dd-b1f4-37bb506c1483",
        "cursor": {
          "ref": "b4541aac-9576-47a9-956e-750aac4247e4",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1e9cadee-164e-4887-a8c8-9b37fe9126f7"
        },
        "item": {
          "id": "53c936a1-7ddd-48dd-b1f4-37bb506c1483",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "916214f0-24e9-4396-8061-9cc4e5b849b9",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b3ce3790-c432-4439-bdbe-565726819b69",
        "cursor": {
          "ref": "fc152692-11b9-411f-a048-074ecb78599f",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8c1c054b-1c7c-43cc-a6d3-51bbd5cb86b8"
        },
        "item": {
          "id": "b3ce3790-c432-4439-bdbe-565726819b69",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "937e7a7a-064f-43d5-bcf0-e597a4a6ce79",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "368d4eb4-a868-4b23-9433-e4767a71d84a",
        "cursor": {
          "ref": "f9f21208-4ff8-45cb-9dc1-3cdfad810fcd",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "04abd5ab-98f2-4c99-b126-166cb41be89a"
        },
        "item": {
          "id": "368d4eb4-a868-4b23-9433-e4767a71d84a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2bfb0feb-d1f2-47a1-b51a-bd11f1c4d687",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f8a43641-1fcf-451f-9bf0-ab9f172540d8",
        "cursor": {
          "ref": "0730095b-63eb-4612-b3df-ede5c39896d2",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ca708aaf-9b6b-40c9-b91e-a8d79e955876"
        },
        "item": {
          "id": "f8a43641-1fcf-451f-9bf0-ab9f172540d8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b4999acc-4260-4a47-b072-f1e00440d09b",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8de8bdd5-9c29-41c4-9bc2-6cafe9895e88",
        "cursor": {
          "ref": "dac6c233-1a4d-48ce-9591-64554499274b",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ef1220d2-f4d1-4c6c-acfb-fbdfee2c6c18"
        },
        "item": {
          "id": "8de8bdd5-9c29-41c4-9bc2-6cafe9895e88",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b080ce47-f898-4e23-bd5d-482399b8a6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b971ca52-eb8d-4426-aba5-11be07bd53aa",
        "cursor": {
          "ref": "49d5420a-f46d-497a-9d1c-c84a49c4ec08",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9003b3a1-53df-4f2f-9e30-86cd356feeaa"
        },
        "item": {
          "id": "b971ca52-eb8d-4426-aba5-11be07bd53aa",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "54a7d05d-a103-4f17-920c-5be4892a8ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5add67-be8d-4ce7-90d6-91bddd0b0ace",
        "cursor": {
          "ref": "5ef8a38b-b999-4506-a8db-fb365323be12",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a4631bf1-1304-4b78-b930-dcf74f4abae6"
        },
        "item": {
          "id": "7b5add67-be8d-4ce7-90d6-91bddd0b0ace",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7bfd999d-17c9-45c2-beb5-7d4f876cca0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5733a05-c7b5-466d-8df2-29986428702e",
        "cursor": {
          "ref": "3fc6302d-7bf6-47c2-9ee2-187888f1ca9e",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c7ceea54-2735-4670-a278-00f48c0b8718"
        },
        "item": {
          "id": "f5733a05-c7b5-466d-8df2-29986428702e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e54a37fa-4045-490e-a682-696fb7ab55ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c389ba04-2597-45a8-a516-1c866816da77",
        "cursor": {
          "ref": "893ababb-07fb-4670-9c2b-8216df8c4f9f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4781968a-a9b3-44dc-b783-725f21ac41e8"
        },
        "item": {
          "id": "c389ba04-2597-45a8-a516-1c866816da77",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2cd6b9ce-f092-4f97-a8c9-5c407c1527d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d9c51b-2337-4d35-a823-92a45e6fca11",
        "cursor": {
          "ref": "3f85b75d-882a-482a-aa6f-cdb488481732",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b4fcf747-9f5d-4888-913b-9a4fd537605d"
        },
        "item": {
          "id": "c0d9c51b-2337-4d35-a823-92a45e6fca11",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6c3e2146-2e9e-461e-a24b-69aaaad81e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67b2704-1ed7-4207-8586-df5160a55f76",
        "cursor": {
          "ref": "7a6a72d8-4b86-471c-9977-b5d1db071d5e",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a323b4e1-de3f-4ca4-b03f-79b7e42d1433"
        },
        "item": {
          "id": "a67b2704-1ed7-4207-8586-df5160a55f76",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a854ef2a-8f70-4f9a-82e7-19e169558a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffa8dda-1d8b-47f1-bdde-691d50113a47",
        "cursor": {
          "ref": "73bcab48-018b-4608-bd39-d204e3cc66ed",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4407a37c-d800-4735-8f5f-03f1a7acd28c"
        },
        "item": {
          "id": "3ffa8dda-1d8b-47f1-bdde-691d50113a47",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ab86c4ce-5e75-4a71-81fa-99df9a2a5cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d94417-8b1c-4b89-b295-73d6d3e5d300",
        "cursor": {
          "ref": "324957ab-8ba4-49da-b38e-d3c91b6b99b4",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0a526d99-261e-4bb4-b7e2-577edd2513da"
        },
        "item": {
          "id": "e3d94417-8b1c-4b89-b295-73d6d3e5d300",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4a2a10b2-b13f-4eb1-a509-37af8cd7654d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1fb5f4-aa84-4e8c-8a46-6c51aa3b2c68",
        "cursor": {
          "ref": "57b53db1-017b-400b-9bb6-f2ddd02eac15",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "345f8a1c-e518-45bc-8071-8c6e6481148a"
        },
        "item": {
          "id": "5e1fb5f4-aa84-4e8c-8a46-6c51aa3b2c68",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "af0917e0-09d3-46be-b115-0467886e3a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6507e2f-5bfd-4b67-ae7a-deb22e7c56c2",
        "cursor": {
          "ref": "a3a6fba4-0661-4bc8-920e-4cff0065ad79",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0fe0a6ff-ca2b-4aca-84c9-129a3ab9baf4"
        },
        "item": {
          "id": "b6507e2f-5bfd-4b67-ae7a-deb22e7c56c2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1cf9744f-5d6e-4eb0-958b-7e33661acd99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663f1446-de39-4d33-acb3-88196565ddee",
        "cursor": {
          "ref": "ef59ac54-1502-4e6c-8613-6fc6f84d5bee",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2fc92094-a5bf-4d7d-81eb-d66b03c73403"
        },
        "item": {
          "id": "663f1446-de39-4d33-acb3-88196565ddee",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7112bd28-2eb4-4f9a-8c79-d9b5dc76f34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0474a886-0e56-4f15-8828-5dab8cfee808",
        "cursor": {
          "ref": "ed9a12e1-2eb2-448e-9f32-3015b95153f8",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c0325c7f-b6b6-4d83-9485-3240efc53b9e"
        },
        "item": {
          "id": "0474a886-0e56-4f15-8828-5dab8cfee808",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "262628b7-92df-4cd9-9ce0-5c6dddb340a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f35914-562f-4991-a6ca-4983610b3f3b",
        "cursor": {
          "ref": "ce1eff32-92fc-4350-be20-c50c115a1f62",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7f614371-0655-4911-9fd5-e8e256f56eb7"
        },
        "item": {
          "id": "01f35914-562f-4991-a6ca-4983610b3f3b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "38300850-c86c-487a-92bf-737e9e036778",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a148c6f0-ee62-4fdc-a5af-1ec0c4cfcae8",
        "cursor": {
          "ref": "8bbf025a-de58-47ac-b981-a4d1c57076d3",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3383d314-5ce6-4f3a-8b85-7fbb3003cc1c"
        },
        "item": {
          "id": "a148c6f0-ee62-4fdc-a5af-1ec0c4cfcae8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "76b1ee54-47d1-4a99-84b4-cd83e4d3aa20",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "0699da09-8c89-4e8f-b9bf-2b7e32684f1c",
        "cursor": {
          "ref": "84f91660-08a4-4fe9-b91d-82bfc11c3506",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b88cf03d-db87-4e6f-af88-e3d53a7b762c"
        },
        "item": {
          "id": "0699da09-8c89-4e8f-b9bf-2b7e32684f1c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ec2095e3-6406-4794-b831-612bc48bd67c",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ce3890fd-0325-4434-a3cb-73dbae8b6a23",
        "cursor": {
          "ref": "9679fa6b-fa58-4e53-a3f8-436b1ca2498f",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "37216892-4b90-483a-a3bf-96dbc94846d2"
        },
        "item": {
          "id": "ce3890fd-0325-4434-a3cb-73dbae8b6a23",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "81a36ef0-2dc5-4eb2-b319-65de50550540",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "fd408bdc-3903-43ab-8956-c4bf8a91c183",
        "cursor": {
          "ref": "99e05a0a-c182-4c4c-9eea-83c43dd70e77",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3a37b610-8c6c-481e-a115-56b942a25d98"
        },
        "item": {
          "id": "fd408bdc-3903-43ab-8956-c4bf8a91c183",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7d21f45e-5d0c-4260-9d1f-9fa53d271e5c",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b12559ab-5436-4bc8-b6dd-e3d837aa0e38",
        "cursor": {
          "ref": "24d398f1-6f89-482d-b483-d67ffb698001",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4a269fc8-545e-41e4-aa4c-239b3d4fed61"
        },
        "item": {
          "id": "b12559ab-5436-4bc8-b6dd-e3d837aa0e38",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f6db640b-cac3-45d0-af05-5e2f9097020f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef39d05a-c836-4150-8a2d-efb6bb03924d",
        "cursor": {
          "ref": "354153b4-5a68-4ff7-ade6-2fb90a810262",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f46be0c9-c1bf-4442-a8c6-4d5f430295c4"
        },
        "item": {
          "id": "ef39d05a-c836-4150-8a2d-efb6bb03924d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d8dcb30e-bac0-42dc-b36f-631bb1c6c820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21123b03-764e-4032-9f84-44907370d7bf",
        "cursor": {
          "ref": "0cfc7ca3-b301-49f7-87d8-533a21ccc026",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4adec924-cdbb-44a0-a305-823f72b8368f"
        },
        "item": {
          "id": "21123b03-764e-4032-9f84-44907370d7bf",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6175afd4-5188-45e2-9641-95744c4953c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b92360a-0336-45d7-8f32-10fc56df5399",
        "cursor": {
          "ref": "22adff8e-9d50-4e3f-bc1c-8b20de492ad7",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b8da98af-d8f3-4146-9906-381a826f8e22"
        },
        "item": {
          "id": "8b92360a-0336-45d7-8f32-10fc56df5399",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2bdbc9da-e612-4f03-8e58-967add20c2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1d8842-0bb7-42a4-ad53-0ed68b6760a8",
        "cursor": {
          "ref": "82677a68-6671-4657-b5c4-d13e4695f093",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bc5b0fb0-faed-422e-bd40-6ecf8fd3a225"
        },
        "item": {
          "id": "cc1d8842-0bb7-42a4-ad53-0ed68b6760a8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6ab18aa7-dbe1-4f4b-bad0-c7a55c4cec66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4605a3-cc99-48b7-8caf-2ac1ee309c1f",
        "cursor": {
          "ref": "55264cfd-748e-4afb-9ab8-38be080d77ca",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "faffb38e-1acb-4707-b479-7c86c094cf09"
        },
        "item": {
          "id": "7f4605a3-cc99-48b7-8caf-2ac1ee309c1f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "64ae2947-9889-4735-bfb2-b92532ab5964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b7e55d-bdde-4325-acea-6f19b828b678",
        "cursor": {
          "ref": "abd23722-7d49-4cdd-98c7-4484de650c15",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d3658390-bf84-475b-9af9-ddba3395471d"
        },
        "item": {
          "id": "92b7e55d-bdde-4325-acea-6f19b828b678",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c68398ec-4670-4087-9907-183213889eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623141ef-8223-4a19-80e4-78b6eb407dd9",
        "cursor": {
          "ref": "043f787b-92e2-4596-a228-882ff6e37105",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b980fc52-a832-4c3c-95d7-81f7138a0a59"
        },
        "item": {
          "id": "623141ef-8223-4a19-80e4-78b6eb407dd9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "779f2259-beb4-43a5-9a90-24828674fa0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf104ef-cbbf-4e5f-bca5-50620b886bf5",
        "cursor": {
          "ref": "cbfb1760-4188-4102-9aee-267992f2dfb2",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "24215c00-8b1b-4ff7-a22b-bd4c9d63c4a1"
        },
        "item": {
          "id": "aaf104ef-cbbf-4e5f-bca5-50620b886bf5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d9b12108-cf6a-4d69-85f8-bc5c39167511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636ffc32-92e1-44d9-aa1a-058f62e87f13",
        "cursor": {
          "ref": "5baf3fa0-656b-456a-b09b-4379c10b6f66",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "97a072e9-f498-4280-b6e5-d878c049f62c"
        },
        "item": {
          "id": "636ffc32-92e1-44d9-aa1a-058f62e87f13",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9d3850ef-96ca-4c9c-8331-27b688b84966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be100801-4c8b-4214-ac0f-48d14316e48f",
        "cursor": {
          "ref": "8fefedba-1a12-4e92-9cd1-f2ae8c4ca59d",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b6cd1bf4-0d64-4eb5-952e-ecdec8f2b1d1"
        },
        "item": {
          "id": "be100801-4c8b-4214-ac0f-48d14316e48f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3894d4db-8ec0-4429-93e9-adab77ea77bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d4732a-bb03-45aa-8969-7a611a58966d",
        "cursor": {
          "ref": "c98e9fde-1a8a-4db7-946a-634b9e19acc3",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "461b1f97-aa40-4fe7-88a7-7ce08995d994"
        },
        "item": {
          "id": "f8d4732a-bb03-45aa-8969-7a611a58966d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "12c0483d-dae7-40b4-be9d-a42cb8e5eb65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aba68f4-57dd-42a0-88b9-4820a499c500",
        "cursor": {
          "ref": "5c682721-bfb9-4909-89d5-75a6a4d1bc57",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9611a4ca-4258-40ef-a043-adbeee2efec0"
        },
        "item": {
          "id": "1aba68f4-57dd-42a0-88b9-4820a499c500",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1ad02ff1-754b-4325-b654-f7ea0afe5fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b9a037-22c0-4e89-b872-f095f85123fb",
        "cursor": {
          "ref": "5786df2e-f925-42fb-b518-3eea998c1fad",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "24da24ce-2075-47ac-b4ec-f1053b98c2b8"
        },
        "item": {
          "id": "48b9a037-22c0-4e89-b872-f095f85123fb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c5ec55d8-40a5-4dd1-be16-12b46350b314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0328426-fdf6-4a87-a63a-175bf6ae7102",
        "cursor": {
          "ref": "14948a82-0a30-4f46-8c58-0d49f5e67fa8",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "65a47d3d-8fe3-47b7-8ea0-5de5f4bcd4d7"
        },
        "item": {
          "id": "d0328426-fdf6-4a87-a63a-175bf6ae7102",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a0e9e676-f783-43aa-a5dc-135b7e83d965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116402b3-958f-4a6d-b281-78716f7ed763",
        "cursor": {
          "ref": "9d5efc7d-8be5-4ca2-96bf-644a344203f1",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a9e6e4f2-e9d2-40c9-a378-26a84c12294f"
        },
        "item": {
          "id": "116402b3-958f-4a6d-b281-78716f7ed763",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0011698b-8a75-4eb1-a3be-2d3b031d05be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ea51f1-1486-414d-926a-2fb3893bf4ec",
        "cursor": {
          "ref": "113df4d2-68f2-4520-a0c4-bb137e906b6b",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9e2cf97c-3595-41a5-9248-a6d1ed9fe9dd"
        },
        "item": {
          "id": "31ea51f1-1486-414d-926a-2fb3893bf4ec",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "eb28b85d-9d5c-4d37-a00d-58f964cacc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f14b52b-5b1e-4db5-8569-ab77240a4ffc",
        "cursor": {
          "ref": "17b65fe4-297f-420a-b4d8-09c0d7ae8e0d",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ff69c1ad-f5d5-4002-9c31-537569349c83"
        },
        "item": {
          "id": "6f14b52b-5b1e-4db5-8569-ab77240a4ffc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "02817783-1333-4363-b34e-bcfe9dbf47ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1074a14-c36d-45ce-9a22-52fbd1234637",
        "cursor": {
          "ref": "09e5ba7e-6d1f-48bc-bd71-a989be90a4de",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "70f6ceb7-3251-4fa5-b27d-8a331e5e65ed"
        },
        "item": {
          "id": "c1074a14-c36d-45ce-9a22-52fbd1234637",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6115c97b-b90a-442d-8aa7-1a47db7cc37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fd34dd-a3f4-40a7-b1dc-521b3a6e2bca",
        "cursor": {
          "ref": "92da05ab-607a-4bc1-bc4c-369d18ff71c9",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "83c91468-62a3-42f7-95fd-fb40c127c201"
        },
        "item": {
          "id": "a3fd34dd-a3f4-40a7-b1dc-521b3a6e2bca",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f09fc65f-9277-4db1-a008-9b341c0a9fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef565c6-6dcb-4088-a087-683880254a7f",
        "cursor": {
          "ref": "f7513005-8588-431c-b8da-3bcbbbd6516b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "514ef39d-be76-480b-b47f-856672df32f3"
        },
        "item": {
          "id": "7ef565c6-6dcb-4088-a087-683880254a7f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "61b1bb47-810a-431d-8b37-f32af0e7f734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62ff333-b70c-4e62-89b0-5d61ffa9583f",
        "cursor": {
          "ref": "14bca40a-a2e1-41ba-a046-ecbfa7620f88",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d3064a19-ba85-47c6-b636-c5835484c3fa"
        },
        "item": {
          "id": "e62ff333-b70c-4e62-89b0-5d61ffa9583f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f0d5d8b3-17ce-436c-8e03-3ab56e39a796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f570861-e9f0-4e20-bfcc-d3bc5a484e71",
        "cursor": {
          "ref": "9fbf1a4b-9966-4d5a-b5f5-21fe5af4ef0e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b6abd755-5888-4108-b4e5-30d7cacc4193"
        },
        "item": {
          "id": "6f570861-e9f0-4e20-bfcc-d3bc5a484e71",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5f962b44-b3ce-4a0d-9e99-a70b6b6fd03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba78e3d4-95f7-44da-922d-6f6481b9a4c6",
        "cursor": {
          "ref": "d16cf20b-acf4-4c3c-bb45-95dee2872aa7",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c9f3ed45-9c1c-4988-b6c3-9044ff317085"
        },
        "item": {
          "id": "ba78e3d4-95f7-44da-922d-6f6481b9a4c6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ea7b59f2-888d-4912-9a97-e2b2eb60f3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b349b9ed-3f2e-4426-a216-39c81eb2eff8",
        "cursor": {
          "ref": "340e653c-c8b8-45eb-8630-fded34ffcf7d",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3acc67bf-2a1f-4cad-b5aa-fb5dd9cc2df3"
        },
        "item": {
          "id": "b349b9ed-3f2e-4426-a216-39c81eb2eff8",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d5d3af94-8743-4cf3-92d0-2734f474daa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bac3d73-22ba-4bd5-af90-aa45beb121c5",
        "cursor": {
          "ref": "bf110bd0-934c-4535-9dcf-82c85731edd2",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "674d3365-ebfb-4d35-bcfd-d1a52a4ac0a2"
        },
        "item": {
          "id": "0bac3d73-22ba-4bd5-af90-aa45beb121c5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "47547b74-8ecd-4c43-b03d-9e351e0fbc25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17566435-dad0-4fc7-aae5-135c63068dcb",
        "cursor": {
          "ref": "26299f32-405f-43d6-b161-d5e4cac9e327",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "52a2ac54-19e9-4939-8f54-322562cc1c7d"
        },
        "item": {
          "id": "17566435-dad0-4fc7-aae5-135c63068dcb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "12067bb5-5e22-437b-8e25-92d6253c0775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f959557b-4672-40ef-b4e0-c1ae431d00ed",
        "cursor": {
          "ref": "2963e2d9-5a02-4c8b-aecb-ae94f7a86c07",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "30b83c35-1f5e-442c-9f99-786e4e195b53"
        },
        "item": {
          "id": "f959557b-4672-40ef-b4e0-c1ae431d00ed",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "16981957-c4dc-4c5b-bb0b-cbb868ea231e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da45bb12-c161-4c40-a828-fb3972a5d82e",
        "cursor": {
          "ref": "7369bbdb-5e66-46fa-81bf-b9d859f77e67",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c508c8fd-235a-4045-9763-a5be7e96f6c1"
        },
        "item": {
          "id": "da45bb12-c161-4c40-a828-fb3972a5d82e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3137b3ba-8bfb-48ef-85c1-5ece8dc39b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2e1e72-daa4-412e-a7a7-404f3dd40574",
        "cursor": {
          "ref": "18555aec-8a36-48a7-8caa-d7b2c7760bdb",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "966f4742-0238-4bc1-a15f-1893db762c49"
        },
        "item": {
          "id": "1b2e1e72-daa4-412e-a7a7-404f3dd40574",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6e1b4070-20b7-486e-a136-a14f86ce4ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8501cde-7ded-4392-bb20-4f964d7d3504",
        "cursor": {
          "ref": "ac049cdd-95ea-4302-8d92-730217118f09",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "baacc19d-0944-4cce-b305-2dbec9c4e76d"
        },
        "item": {
          "id": "f8501cde-7ded-4392-bb20-4f964d7d3504",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0d1c1600-1df1-4e4d-8812-7d18e82bcc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e86b76-3229-4957-89ab-e9de32550721",
        "cursor": {
          "ref": "4d6c0341-91f0-4fa3-8b81-289c82c406ec",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cacef45a-57d5-4594-9f32-5b8f97bedd2f"
        },
        "item": {
          "id": "06e86b76-3229-4957-89ab-e9de32550721",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "24922be6-1bbf-4512-8c8d-84ee5ad548c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34cbace-15a6-4b72-a9e2-c17e67ca7efb",
        "cursor": {
          "ref": "14157ab1-3bb4-4e4e-94f9-a84efe7020e7",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9d754996-a14f-4595-ab70-d1321c7a60cf"
        },
        "item": {
          "id": "a34cbace-15a6-4b72-a9e2-c17e67ca7efb",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "727d4da1-76be-4c5c-b91c-6d782f0dedb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "dbba6e8c-5a38-48f6-afd3-a867b93e70c7",
        "cursor": {
          "ref": "cacda989-0beb-4f7b-a487-9d372fa7161c",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9652e30e-ca3c-466a-a5ac-8b6b3a05fa1e"
        },
        "item": {
          "id": "dbba6e8c-5a38-48f6-afd3-a867b93e70c7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cd375a4c-cd75-4411-bb92-d387e8c63b32",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bfcea1-6fca-40d9-9220-89a1ae627912",
        "cursor": {
          "ref": "c1e63055-1805-4602-81e7-3ec93b82f2b6",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "090fad23-5e7b-4dda-aeca-aa42068e87c3"
        },
        "item": {
          "id": "d4bfcea1-6fca-40d9-9220-89a1ae627912",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "fb0a7536-1b0a-40d7-b2ed-0810def57ca4",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b351c458-141d-4492-93f0-825e5af669dd",
        "cursor": {
          "ref": "33edf4d6-4b8d-4c5e-a568-8f764c7de2db",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "848c753b-cf1e-45ef-afc2-c27e859a012e"
        },
        "item": {
          "id": "b351c458-141d-4492-93f0-825e5af669dd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cd4f47fe-6607-4af6-bb46-411a889274bb",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "012b4232-2f21-48d8-932d-bffe1a090b4b",
        "cursor": {
          "ref": "2550af77-1729-4200-bb31-b0e64494a8dc",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4f6f986b-c98c-4557-9723-604739d1a9a9"
        },
        "item": {
          "id": "012b4232-2f21-48d8-932d-bffe1a090b4b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "469de276-01a7-4cf7-b157-e48e86cdcd3c",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de914c2-e74b-41df-acfd-ce788e9030f2",
        "cursor": {
          "ref": "fc255c54-348b-44d4-9fe0-1f8f8dac51cf",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8e7eec1d-b4e7-412f-bf0f-1cee912fcf71"
        },
        "item": {
          "id": "6de914c2-e74b-41df-acfd-ce788e9030f2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3c347795-c160-406c-9ebe-496a81ea11e0",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-03T00:38:12.657Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-03T00:38:12.657Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9a1edb7b-9d30-4c11-9764-2b7d0208d187",
        "cursor": {
          "ref": "2d170d70-e4fc-4a9f-b453-66508d1ab430",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2c763d93-6be4-4a06-ad38-aee497ddf702"
        },
        "item": {
          "id": "9a1edb7b-9d30-4c11-9764-2b7d0208d187",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e6955dcf-b6bd-4ac2-a6fd-7136c0ec016c",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082389d6-7cab-4d3b-97c7-7f982ae9af19",
        "cursor": {
          "ref": "7e369c6f-01db-45a4-b8bf-3e3af71e2728",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5f828522-e49f-407e-8e2c-923144a56fa0"
        },
        "item": {
          "id": "082389d6-7cab-4d3b-97c7-7f982ae9af19",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3ad451f7-16df-44eb-9d34-f84e560b2295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434a30f3-f4c0-4840-a7c0-270a54f62510",
        "cursor": {
          "ref": "58e9e2ac-f30a-4489-84d4-6e90bec56324",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f274b257-eb7c-4fa9-b95c-f718d10633a3"
        },
        "item": {
          "id": "434a30f3-f4c0-4840-a7c0-270a54f62510",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f60adfcf-349a-42a9-9870-6b7b27dcc186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f472322-1724-4c71-a1db-49eb2c812f8e",
        "cursor": {
          "ref": "b48a9f38-662e-4558-b554-a366c55f68b3",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ca741a43-a28f-4656-ad3e-96b343fd66e9"
        },
        "item": {
          "id": "7f472322-1724-4c71-a1db-49eb2c812f8e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5cd914e4-4775-41ca-aa06-85dafba2e26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787c1ece-13a6-46eb-a2e8-c991d20fcae5",
        "cursor": {
          "ref": "e563f985-3c31-409b-b7a8-e4cd4fdceee0",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e69460dd-4ecd-44c4-b2c3-4b50a2da4dbb"
        },
        "item": {
          "id": "787c1ece-13a6-46eb-a2e8-c991d20fcae5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "362bbd08-0633-4f33-9628-12739b9e5272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06251c78-0877-4461-aa50-3a020abfc693",
        "cursor": {
          "ref": "634fc50c-d3aa-4810-b899-69dcd6fd9e70",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a4d756dd-bc9d-4553-a17c-299ebfe18a45"
        },
        "item": {
          "id": "06251c78-0877-4461-aa50-3a020abfc693",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "16bddec7-def3-4413-b153-1d0010943d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31156f6e-1abc-4629-9817-b5ed6bf3bfd2",
        "cursor": {
          "ref": "f7a66608-04e7-4e35-b4c9-2f292a6c7d47",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6b0fc2f1-825f-46da-addb-dec381843fc2"
        },
        "item": {
          "id": "31156f6e-1abc-4629-9817-b5ed6bf3bfd2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1d0760ae-2149-4c57-8ae1-f2a38a476024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddbb0e0-9976-41cd-9dbe-03f836a5ad7f",
        "cursor": {
          "ref": "af4b3780-630c-4218-8abc-3b810cda7ce5",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "fd558f97-d478-490a-bebd-f9006905d3e4"
        },
        "item": {
          "id": "9ddbb0e0-9976-41cd-9dbe-03f836a5ad7f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0fc43134-e5af-4f55-84a7-36e1d86cfedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bebfe4a-0e55-4dd3-a1b6-ed8ebff15218",
        "cursor": {
          "ref": "cc24ca8d-87f9-402e-be70-40ef314b712a",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "937e9308-6e8d-418e-8d49-ec297041a976"
        },
        "item": {
          "id": "9bebfe4a-0e55-4dd3-a1b6-ed8ebff15218",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "dc627ffe-0caa-4e0f-88bc-8f57604a2feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952a1042-a36a-449f-af2c-4e89f740de92",
        "cursor": {
          "ref": "00708f9b-b18a-44df-ae21-1785ab1fb8fe",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1e170a65-40c7-40e8-b758-4d0dc1dad354"
        },
        "item": {
          "id": "952a1042-a36a-449f-af2c-4e89f740de92",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5a961abb-4f8b-4b6a-ab81-58b900ae8390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbe9d65-de97-407b-a616-db761d6e6950",
        "cursor": {
          "ref": "ff367867-8ad3-4478-b137-6a9dcc9fc902",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "18f5aa03-61b0-4e76-b316-b2ab4e0b0cd1"
        },
        "item": {
          "id": "1bbe9d65-de97-407b-a616-db761d6e6950",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fc84e4f8-c4cf-49c6-8d73-2e0d08bb7a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af5d433-7a9b-43e0-ab11-3bddb38bbab4",
        "cursor": {
          "ref": "9e5f3268-c286-40a3-b09f-653188361605",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "915a6b1e-3be7-401e-9ae2-f0de1791a56d"
        },
        "item": {
          "id": "1af5d433-7a9b-43e0-ab11-3bddb38bbab4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1a1bd04d-7aa6-47fc-9c6f-5f678f707a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e283581-9996-40e5-92ad-fc6105fbb301",
        "cursor": {
          "ref": "39aebd2c-d16b-4c05-b9fc-17478a84e8a6",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "abdc296d-6753-4f6a-afab-cc200686ba0b"
        },
        "item": {
          "id": "5e283581-9996-40e5-92ad-fc6105fbb301",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "02d8364d-0ec8-4da1-9d2b-1ecf89898449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a332f4-5683-4fae-8cbd-ea411505abda",
        "cursor": {
          "ref": "891fc2c9-f7dd-4742-bcff-81f79d5cdf53",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "94cdbe4c-534b-445f-9ee3-597eca279fb1"
        },
        "item": {
          "id": "d7a332f4-5683-4fae-8cbd-ea411505abda",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a085e23b-3411-46e2-9978-86d53bfeaf25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b9f029-3e84-4b64-babc-b9e8814e6947",
        "cursor": {
          "ref": "6333d870-019d-411f-af33-e1f0b7f00b97",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0d7fc1b7-c2ed-48f4-b184-13f4941cb901"
        },
        "item": {
          "id": "15b9f029-3e84-4b64-babc-b9e8814e6947",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "423b97a9-5aa5-460d-9f07-74326882529d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c3fd36-d40e-488f-8c91-b06bf2dd4aec",
        "cursor": {
          "ref": "19414ef9-5652-411c-a72a-dc784eeb95db",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e3c64bef-c182-4db9-ac8c-ed607aebbbdb"
        },
        "item": {
          "id": "30c3fd36-d40e-488f-8c91-b06bf2dd4aec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5efc140e-616e-4947-9d00-ade81ca9158b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2b3e53-3949-4ecc-8762-f4d863b6ffff",
        "cursor": {
          "ref": "c3e0301a-8dc2-4f77-9214-0d6b6e25474e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "abf04ca1-7be2-4f7a-8d24-ca0c598459a6"
        },
        "item": {
          "id": "7e2b3e53-3949-4ecc-8762-f4d863b6ffff",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a506ae25-12ec-41dd-add9-164bb2f08050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d17ba93-bdfa-4479-9e77-083400eff2ee",
        "cursor": {
          "ref": "9c6fa60d-b4f9-4a02-b638-a664ce77cf70",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f1dce06f-738d-4f21-9e14-760c3dea6c65"
        },
        "item": {
          "id": "5d17ba93-bdfa-4479-9e77-083400eff2ee",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "7821c3ce-2705-49ac-ac0c-7dd6e1196b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52a2f33-00cd-40b6-a74d-3673c55787cf",
        "cursor": {
          "ref": "f0d7f4a1-402c-4916-b04e-be0b57c1826c",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7089eb69-f54a-4a73-b21d-9c1ed6275c1b"
        },
        "item": {
          "id": "e52a2f33-00cd-40b6-a74d-3673c55787cf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8a36ced4-d0de-4a7c-b3b5-fd43800a1dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f496953d-abec-46ef-8500-99f88c2187a9",
        "cursor": {
          "ref": "beb39991-1fec-4b72-9499-da4ab1eb4458",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3af1d3fa-9bfa-40d0-9418-ea8f4b9c3ca0"
        },
        "item": {
          "id": "f496953d-abec-46ef-8500-99f88c2187a9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b7b35f4f-8125-40a4-9d59-744a50902708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad23d3ba-a66e-42aa-93d4-9c7b249d0d83",
        "cursor": {
          "ref": "a40132d5-a04d-4fc0-8d49-0201cc4b9d75",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "28488e4f-2715-47c0-a04f-7da31d71845e"
        },
        "item": {
          "id": "ad23d3ba-a66e-42aa-93d4-9c7b249d0d83",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "16b71194-fff1-4dcb-aacf-9c0c9a2f2369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063c49d0-ba47-4c25-9d5e-5a7b51bc79ac",
        "cursor": {
          "ref": "8909e077-3355-4630-acdb-adaa9b12c256",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "88dda098-5f6a-4c01-9d03-dcda296e5432"
        },
        "item": {
          "id": "063c49d0-ba47-4c25-9d5e-5a7b51bc79ac",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6e0fb94a-3467-4d56-b056-d9a146bf5f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29c4361-b156-4716-b939-bdde1c0cacf5",
        "cursor": {
          "ref": "2ee5100f-5742-4d81-abf1-6f38a849d494",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d0f717ea-1e80-407a-b2fa-ec76d9977668"
        },
        "item": {
          "id": "a29c4361-b156-4716-b939-bdde1c0cacf5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "973d3a4d-d66c-4592-91a4-0f5150df85b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef131586-77b3-446c-8a4e-118c81027d15",
        "cursor": {
          "ref": "b4968dac-344a-42ee-be8d-7e24694306a9",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "486473e7-4add-4bfd-9eed-a2cf08733887"
        },
        "item": {
          "id": "ef131586-77b3-446c-8a4e-118c81027d15",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d1c34ddc-53c9-4ac2-96e1-889781df8600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd8cb98-8fa7-4b6d-bc40-b0838c6cc48d",
        "cursor": {
          "ref": "9f444388-db3e-47c0-8646-59641df5fc39",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a46e4715-196e-4284-8785-6ba4fdb52695"
        },
        "item": {
          "id": "3cd8cb98-8fa7-4b6d-bc40-b0838c6cc48d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "147261f9-ff83-437b-836f-80eb48a43e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f14350f-e259-4b85-af98-5bb350b9e36c",
        "cursor": {
          "ref": "281fe61e-85ac-4609-9d01-0ee3871eaf11",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ff072f8b-79aa-485e-8fa9-9fea95d77761"
        },
        "item": {
          "id": "5f14350f-e259-4b85-af98-5bb350b9e36c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3b4c8dff-993e-4fb0-9f4c-be0a1f39e025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5321d4-b215-49ca-87c2-05214aab3139",
        "cursor": {
          "ref": "4d1f35da-e478-459c-865e-ceb70ccccf76",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9d38f4c6-403a-4043-9dde-2324a47fa9a2"
        },
        "item": {
          "id": "ec5321d4-b215-49ca-87c2-05214aab3139",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c4652bdc-8dcf-4381-aa9b-911a6db8c56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac7e155-f28d-45b6-a2ac-b453fac37d48",
        "cursor": {
          "ref": "11de7f15-5ec7-459d-a9cc-22991e3bd86c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "77ad33b6-7eff-4e39-8c23-9398a09fa2ad"
        },
        "item": {
          "id": "5ac7e155-f28d-45b6-a2ac-b453fac37d48",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6357f881-5306-4f1a-b74f-1f99d682f1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e723b4ee-ef97-459d-a117-5ab812d0d1d6",
        "cursor": {
          "ref": "676e4f61-af4a-4b97-bc27-1e9f19af28ca",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "00e9c06e-72a4-4b89-8494-08f8effe4b91"
        },
        "item": {
          "id": "e723b4ee-ef97-459d-a117-5ab812d0d1d6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "daa0dbb4-15c7-47e0-a2ed-be55209169ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdce90ce-d53d-4ed7-a288-da6b80c4f9f4",
        "cursor": {
          "ref": "91f89c2c-489c-45c4-b27f-07903ee110ec",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a2976be2-2963-4382-9ea9-28fa2debc7de"
        },
        "item": {
          "id": "bdce90ce-d53d-4ed7-a288-da6b80c4f9f4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "83d71db5-dcca-4c55-a273-42d5930e55c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678af0a6-1848-44f2-ac17-99e145ca4a7f",
        "cursor": {
          "ref": "a1481cf5-e02d-40df-93f1-00b776c47a7f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "63a59af0-688b-4470-915b-92bc94b8489c"
        },
        "item": {
          "id": "678af0a6-1848-44f2-ac17-99e145ca4a7f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ff1b3cae-6c8b-463d-84fb-fe27bad61689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c3e284-47f4-4a20-b2a6-c2f546011f5d",
        "cursor": {
          "ref": "d42962f1-9028-44ea-aa13-550004d01067",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2acfb1b7-a396-4fd5-b35f-89c255a2b174"
        },
        "item": {
          "id": "74c3e284-47f4-4a20-b2a6-c2f546011f5d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "37eecc4e-b9c0-4bba-88a9-3eeeb7eb3cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17be881e-47be-4a7a-a17e-8596bdeccc0f",
        "cursor": {
          "ref": "325bf85a-b453-4dca-a59f-adc3e810faee",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5286bc79-83e6-4b30-b913-bfb6b0946204"
        },
        "item": {
          "id": "17be881e-47be-4a7a-a17e-8596bdeccc0f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e6afbf64-7537-4fc1-9ba5-5b4beee6333c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341b928d-21fe-47cc-bf96-233e63a34307",
        "cursor": {
          "ref": "b929121d-5d3e-475c-a7a7-1b3c33be0288",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "29e485b4-cdd7-4e1d-8b66-ce658bd5be87"
        },
        "item": {
          "id": "341b928d-21fe-47cc-bf96-233e63a34307",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f1636d52-445a-4459-b5e3-2ecc1c2b80ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a25173-960f-43a6-8cd1-740f85a63285",
        "cursor": {
          "ref": "52a005f0-f4fc-414c-b47b-be3cf1c4949d",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "521e653c-9936-4052-912a-c15bdc3871b7"
        },
        "item": {
          "id": "c7a25173-960f-43a6-8cd1-740f85a63285",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3f1dc1a9-1d1d-4117-86b2-5009f2d58807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebfe3a1d-43cf-4db3-8cdb-ccb995d51048",
        "cursor": {
          "ref": "e3982059-7754-4f1b-8f7b-717e4a0483c9",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9d63c3bd-71d7-4ad1-94a1-f1b7ac79902e"
        },
        "item": {
          "id": "ebfe3a1d-43cf-4db3-8cdb-ccb995d51048",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a290af8b-f72c-44b1-9737-82c3ff83b3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e6df26-cd40-436f-a7d1-f3fb0c2654b4",
        "cursor": {
          "ref": "1e4fa5fa-b199-46b6-8993-c44aa436c81d",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "24ffee33-a10c-4e14-9b8e-299867714671"
        },
        "item": {
          "id": "b1e6df26-cd40-436f-a7d1-f3fb0c2654b4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "819937d0-63ca-42eb-a98f-99586c74ad97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4dfc60-694d-4395-a30b-57899de35ee5",
        "cursor": {
          "ref": "d525ed41-5dc4-47c6-95d5-9dbedfd313f2",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e193690f-40d2-4909-881a-6dc423d10c63"
        },
        "item": {
          "id": "0a4dfc60-694d-4395-a30b-57899de35ee5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "564d3fc6-31fe-40b4-b885-c9fa3b13a3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b23558-753f-4151-9a33-611ba7cf4264",
        "cursor": {
          "ref": "b3c92b4a-de96-40ab-bab1-90e0b111a9f4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "72769880-6bc1-4682-a57d-9cfb5dc196ea"
        },
        "item": {
          "id": "25b23558-753f-4151-9a33-611ba7cf4264",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b38225ae-79c0-48c9-9a77-5b846a937133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69c6beb-f9bf-469f-a286-2ba489057464",
        "cursor": {
          "ref": "30ecb54e-fafa-4701-af4b-d38e9e93ad0d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c3de2b34-040a-46cc-8bc4-f07156e82ed2"
        },
        "item": {
          "id": "e69c6beb-f9bf-469f-a286-2ba489057464",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "99f284e6-17e4-41bd-ae3d-722c939cc44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac46811-eb79-494a-affa-ec39d10d2020",
        "cursor": {
          "ref": "cf7cd2d5-87e3-406a-8320-6c0a5c62c6a6",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fcd017fd-32c6-43c2-801c-d38aa6a1f438"
        },
        "item": {
          "id": "dac46811-eb79-494a-affa-ec39d10d2020",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "147050de-e277-479e-8933-1f4d8f263fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a748f19-8bee-479c-a6d4-b704c74cc55f",
        "cursor": {
          "ref": "f959c6ca-e259-4ac8-b0ea-5dd66bbc1958",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "26233a8c-0e98-4b2f-96df-4779d5078f15"
        },
        "item": {
          "id": "2a748f19-8bee-479c-a6d4-b704c74cc55f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "df2a9aa1-28a6-4fad-92a6-6c98505907cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb18f47-e49e-4037-8243-25495d73e798",
        "cursor": {
          "ref": "c490f5de-35f7-4e5c-9d50-80e021767257",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "761b8aa9-4b80-4614-9b91-448147cd1aa2"
        },
        "item": {
          "id": "bbb18f47-e49e-4037-8243-25495d73e798",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "721ebbc9-2502-4a6b-aef0-6e5f72a0ad13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2844675a-4805-4f6f-b1ac-ba33516bcaca",
        "cursor": {
          "ref": "f905d3b3-fdbb-446e-9714-6599689705af",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "539b7cb1-aa2b-4dee-9f87-0dc12182df02"
        },
        "item": {
          "id": "2844675a-4805-4f6f-b1ac-ba33516bcaca",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "21b0a2df-13a4-4c90-9c0e-d586519b3784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42974fa0-a3a5-42c3-81a7-96142a1cb699",
        "cursor": {
          "ref": "848c4e3c-9a8b-430f-bb6e-1e2c1887204c",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4d1bcd40-8872-4a42-bec6-7738edb30874"
        },
        "item": {
          "id": "42974fa0-a3a5-42c3-81a7-96142a1cb699",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "50591a7a-1865-4cf9-9586-9cd34d7a2926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba0556e-354a-47ca-aed6-dd2613584e5d",
        "cursor": {
          "ref": "3d649c25-2dd3-477c-b108-a1a5da2b84a4",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1ecb8575-ca52-4b38-aaf3-0f5f04a644d9"
        },
        "item": {
          "id": "4ba0556e-354a-47ca-aed6-dd2613584e5d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cf8b6fa3-a869-4547-bdb1-0abf30fd8ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0953df-21e6-4595-b16e-e1cae239b05c",
        "cursor": {
          "ref": "e1b64e1c-0705-490a-8b26-a3a3a62820fa",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0c9b5b83-da73-423a-99d0-b2c1f634cffe"
        },
        "item": {
          "id": "9d0953df-21e6-4595-b16e-e1cae239b05c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "afe19e4a-31dd-44e4-9762-9cc5c58c86ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4102d6-21a9-4e8a-94d7-7c795fc07d4e",
        "cursor": {
          "ref": "e4c7277d-400c-498f-aa32-493bf948c6f1",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dc313a4f-d8ba-4eb3-9229-01678226ecbd"
        },
        "item": {
          "id": "ff4102d6-21a9-4e8a-94d7-7c795fc07d4e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "96917eeb-b061-42d1-ad36-f6e9a644b17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4b3421-e5da-4460-9119-18589e813f5b",
        "cursor": {
          "ref": "2ff19b56-1310-4bf5-9f36-9184e43d1c83",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4a849df7-c628-4f4d-a895-d096b6c4f820"
        },
        "item": {
          "id": "be4b3421-e5da-4460-9119-18589e813f5b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "57852aee-a12d-44a7-90d1-4792ad1f7ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f3786a-54d3-4a01-bc1c-55792d6e71f2",
        "cursor": {
          "ref": "1b25dd0d-133a-4f06-8c65-0436a91a45ad",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6c6e4a52-5c1e-4811-895f-dc62ec9f3fda"
        },
        "item": {
          "id": "11f3786a-54d3-4a01-bc1c-55792d6e71f2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2318af42-34f3-4cea-8fb6-39c76f28dc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9553a37-7059-4e40-8012-0945b34a8149",
        "cursor": {
          "ref": "250c909e-95f7-4ca3-b2d3-e8269dafe4a3",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0562abdb-a76b-4c99-a0ad-4531f21d4603"
        },
        "item": {
          "id": "c9553a37-7059-4e40-8012-0945b34a8149",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "62b9eb95-89ee-4c62-92a7-9dd7ce2e34f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90513c9-4e93-4565-a745-5e5fe0beaed6",
        "cursor": {
          "ref": "1fe14a45-89ec-4cb3-bd1c-696fd12676ec",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "83d50dc0-9f3a-417a-8ad6-9633871971e2"
        },
        "item": {
          "id": "e90513c9-4e93-4565-a745-5e5fe0beaed6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5c37378c-8990-467d-b8d4-51e83d8c58b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae21f8a-296a-49ce-a4ab-49a7d8ea5db1",
        "cursor": {
          "ref": "9201bbae-b5c4-46f5-a097-af4ad55aaaf8",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "30426077-3c26-4ece-91d5-770a1a2ed9db"
        },
        "item": {
          "id": "bae21f8a-296a-49ce-a4ab-49a7d8ea5db1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "695677f0-2a3c-4181-8061-b55faeee3e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6068d0f1-3322-464c-8ab7-79c3674d23db",
        "cursor": {
          "ref": "a55339c2-8480-4b5b-bf1a-0bd9d110fc95",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "02a93d55-b00d-4a3e-a6e3-e26be042bcb9"
        },
        "item": {
          "id": "6068d0f1-3322-464c-8ab7-79c3674d23db",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "90e70986-d2c4-4a1d-a365-4009ee3dde0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62b7229-4a5e-4c6f-8969-3598137ce840",
        "cursor": {
          "ref": "b35622e7-03ee-409d-82c6-b5c60dc54e9e",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "21c84ced-883b-4d4c-afe7-f118c7813a66"
        },
        "item": {
          "id": "e62b7229-4a5e-4c6f-8969-3598137ce840",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dbea926f-ea60-4a67-9cef-f4d7c2d4bbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f694c9f-73c7-4fa4-9652-b198ca4639b9",
        "cursor": {
          "ref": "d749a9d6-58bf-421b-a1b3-5f8082900316",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3913260e-0462-497b-8857-c12d4a06e422"
        },
        "item": {
          "id": "2f694c9f-73c7-4fa4-9652-b198ca4639b9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a1930398-c101-432b-8bd4-ba5e9914636c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93631ffb-44d5-4110-8915-3268cf2ab103",
        "cursor": {
          "ref": "7338365f-e46f-44e8-b5e9-e2cea2c3ed9e",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0a4c7d61-321b-437f-a85c-583eb8b0aaa5"
        },
        "item": {
          "id": "93631ffb-44d5-4110-8915-3268cf2ab103",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3f0c5fe0-3707-464e-8824-e3569b6ed9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ea970e-fe60-4d35-861b-11e7fae36632",
        "cursor": {
          "ref": "389e03a1-b1ea-4f59-ac88-c28b33a46318",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ca281cc3-f8fa-400b-b729-9a7444f8a99b"
        },
        "item": {
          "id": "98ea970e-fe60-4d35-861b-11e7fae36632",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ad601cf3-43a0-4e9f-aa90-ec61336467f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a41084-faa8-41ce-b90e-c7f7548ffb04",
        "cursor": {
          "ref": "85d05df0-0522-478b-9678-0495d4300932",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "755ad911-c360-453d-9c64-e98b4e0b16e7"
        },
        "item": {
          "id": "a6a41084-faa8-41ce-b90e-c7f7548ffb04",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f8f7a1d0-3f54-42a0-8716-59e11745c86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d523934-1b61-4bf9-8fa9-9bb6a583b769",
        "cursor": {
          "ref": "1b4901d4-87fb-430b-97ab-4f87477dc36a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "179d9c75-40bf-4f69-bd1d-445682d6bccf"
        },
        "item": {
          "id": "5d523934-1b61-4bf9-8fa9-9bb6a583b769",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4f0feae1-924e-4b60-a6f8-b4b7c9f83415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b091e05-4eb7-4116-9500-685a68bea4a4",
        "cursor": {
          "ref": "c17c1473-9934-4d6d-876d-f1a0f9aab839",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5e3c3050-09d3-4238-91d7-06dc19835610"
        },
        "item": {
          "id": "2b091e05-4eb7-4116-9500-685a68bea4a4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0d6c4518-db4c-4328-b235-644bd9f526de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7821b5c6-2df2-4987-9742-5720d538d11c",
        "cursor": {
          "ref": "6dca070f-3659-44e0-94b2-4e128af438d8",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "55a4ccf9-eef9-43dc-b0fc-4a99765186bb"
        },
        "item": {
          "id": "7821b5c6-2df2-4987-9742-5720d538d11c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "99e103ad-2ca5-46cb-9de4-021a89da9e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5847af-5a7e-4329-9fcd-89c97d986a09",
        "cursor": {
          "ref": "4cc559e1-a0b6-4592-a02e-237d8a314c26",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4242d110-0f56-4d10-b95a-60747d637485"
        },
        "item": {
          "id": "8d5847af-5a7e-4329-9fcd-89c97d986a09",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4797fafa-7b5a-4cc0-b7b6-62fa1ee0335d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b489f9-860b-4e2e-8e69-f6b43f00de52",
        "cursor": {
          "ref": "01af213d-7f2a-487a-84ed-b33eac4daf1f",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9a61680e-e28f-4f66-a2bc-c5ad4673e21b"
        },
        "item": {
          "id": "38b489f9-860b-4e2e-8e69-f6b43f00de52",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "15a6c8fb-8942-4ae5-9202-c0731c78a69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d893c8-5323-404f-a4ee-681210ab7766",
        "cursor": {
          "ref": "918386ee-bfc6-42a2-bb44-c59164d423d0",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "76bce680-1add-43a5-a8dd-33a89d106577"
        },
        "item": {
          "id": "56d893c8-5323-404f-a4ee-681210ab7766",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9ba530c5-ef64-40f1-b96c-ebec8bb5551e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da3cbdb-cf9a-4186-9531-39c59f369716",
        "cursor": {
          "ref": "8fa479cc-3f87-413a-9420-00ed8db19683",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ffcdfa1d-8fc0-41f0-8685-3570e04a72af"
        },
        "item": {
          "id": "8da3cbdb-cf9a-4186-9531-39c59f369716",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "85f55a0d-3cb7-45b7-9350-cfc4eccf53ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086fe9bd-de9b-4015-a64a-79f9d0115fbf",
        "cursor": {
          "ref": "abd0a00e-9208-4a3f-94ca-1809a062f5fe",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c9323252-5335-4375-b2cc-3121e93f6e9f"
        },
        "item": {
          "id": "086fe9bd-de9b-4015-a64a-79f9d0115fbf",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3ab01576-25f6-4b20-805f-8f786731479f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a53401-6fe0-4004-9857-ef98d1fa52cb",
        "cursor": {
          "ref": "a2187338-67f3-4556-a528-7c351daf4ba4",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "62a5449e-04fe-47c4-b746-e3721a101cb2"
        },
        "item": {
          "id": "e9a53401-6fe0-4004-9857-ef98d1fa52cb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "eb0ec33c-6d92-4ed5-8a57-6259df7872bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cea05f-9d2b-408d-8a63-e43cf6a9fa84",
        "cursor": {
          "ref": "d6f872cd-2bba-4c6f-b644-2bfd002673a9",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "930daf39-a616-4129-b228-947fbacd915a"
        },
        "item": {
          "id": "87cea05f-9d2b-408d-8a63-e43cf6a9fa84",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f5102bc2-3d93-4dfd-a5c9-2a1885f3d17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d691bc7e-4772-4294-b4e2-64cbca641d9c",
        "cursor": {
          "ref": "5a1c2b71-ac71-4f03-888c-80c9012a8f90",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "301a5f51-e5e9-4994-97c1-031c84c4d8e2"
        },
        "item": {
          "id": "d691bc7e-4772-4294-b4e2-64cbca641d9c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f75ffb5c-862a-430b-8d0b-5d9dd52d9dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda535a3-a86f-4029-9b56-9ff1b233fd7b",
        "cursor": {
          "ref": "2ff20be9-7c24-415d-803c-4a407355a2c9",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "344154b9-7f6d-44ab-89c8-c9cde5996c22"
        },
        "item": {
          "id": "eda535a3-a86f-4029-9b56-9ff1b233fd7b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1bdde5fe-0967-43e1-abed-5328b62fb849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60df2c1b-3e9e-4374-b20d-46894a90452c",
        "cursor": {
          "ref": "3a282a69-95b6-4a73-aca8-06f3fcab8292",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6d1d0312-a2dc-48a2-bad2-11a4274498ae"
        },
        "item": {
          "id": "60df2c1b-3e9e-4374-b20d-46894a90452c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "52064dc6-bfa8-4ace-941a-ff18750b3ba1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43de36d-a9fe-49e1-b6d3-084fbc07b7d2",
        "cursor": {
          "ref": "c5b18ad8-f2eb-4921-8243-37d6f937d51b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bdef8759-bf78-4310-8aac-19dec3a21e41"
        },
        "item": {
          "id": "c43de36d-a9fe-49e1-b6d3-084fbc07b7d2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1f8ec953-268f-4226-b1c4-338cc9cee713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c3e231-58d9-41c9-96d4-51218aa59a3e",
        "cursor": {
          "ref": "e65bb2ab-3f96-4ca4-9dee-f6bbf843c102",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f8bc4d61-86ac-44c5-b8e1-9794274e305b"
        },
        "item": {
          "id": "51c3e231-58d9-41c9-96d4-51218aa59a3e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2687ca62-920f-4440-b5a1-90390cee3517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2f6516-b5fc-4249-9a7f-1aa335a9f9a9",
        "cursor": {
          "ref": "57741301-0baf-437e-a84a-2273ba17b435",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "37d199ed-f24d-4f70-af00-eb9595b7c578"
        },
        "item": {
          "id": "bf2f6516-b5fc-4249-9a7f-1aa335a9f9a9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "50a596e4-6bd9-449b-9707-bc158cb7fbed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd71109-3032-409a-8b42-7ce8f45008c4",
        "cursor": {
          "ref": "21ec0fb5-2fb0-4444-8bb4-352777728d26",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b1dda924-8018-4fb0-a7a7-f0f9f3499598"
        },
        "item": {
          "id": "8cd71109-3032-409a-8b42-7ce8f45008c4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e928e098-2590-47f1-8a8c-a6a47a92a488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e9e56c-d1a3-4389-ae92-145381bd892c",
        "cursor": {
          "ref": "c18133f0-87d2-4c53-aa3b-7c7212989bcf",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "faedec2f-958d-4137-98bb-02777aab7d4c"
        },
        "item": {
          "id": "24e9e56c-d1a3-4389-ae92-145381bd892c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "57dad236-c509-4641-8347-d13497676a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9375b4b-9b4a-47f3-9058-6279624fd032",
        "cursor": {
          "ref": "fd8ac445-4888-4b07-9d4b-cdb62c529849",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f3c453b7-4450-4b55-b462-4a75221af8fd"
        },
        "item": {
          "id": "b9375b4b-9b4a-47f3-9058-6279624fd032",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "eaee25ee-be4b-4a31-bbee-5aa0b1ce6fb5",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b8e0c25b-149a-48fa-b2b9-e72985e3d55f",
        "cursor": {
          "ref": "8499bc58-d8f9-4274-88d4-4cca430e9d9b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e8600f34-f3ca-47b4-aa8c-454b7cda5807"
        },
        "item": {
          "id": "b8e0c25b-149a-48fa-b2b9-e72985e3d55f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c655e5bc-9623-4ecf-a070-46361b4ca0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e624e6-7ced-4595-8795-ec70d9197238",
        "cursor": {
          "ref": "93fe8023-7f9c-48ef-8d3b-1b14574a7123",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "67558add-ca76-4f52-b11b-ebb871b63c75"
        },
        "item": {
          "id": "d5e624e6-7ced-4595-8795-ec70d9197238",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dda24f0c-a059-49a1-a2d1-2f4ddbf86e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb64b9f6-eaaf-4789-b20c-3a6fc64f0768",
        "cursor": {
          "ref": "d5385c3e-7a9a-4203-8151-ff86b23510cf",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "58acb138-ab2e-42b2-95b1-5b48dd76a721"
        },
        "item": {
          "id": "bb64b9f6-eaaf-4789-b20c-3a6fc64f0768",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "54fd550d-0a50-45bd-9bfb-8b9cfdcc4c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b4b9e2-b091-4087-bd20-c1021224f0c6",
        "cursor": {
          "ref": "2d0cb6b1-bca4-495f-9a17-5ed796494b55",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d36d218b-9f91-48b3-a7ee-31bc34e26817"
        },
        "item": {
          "id": "70b4b9e2-b091-4087-bd20-c1021224f0c6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1190c0ac-ebad-4d49-8177-ddb1e93180ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0370bc49-bde7-454d-821e-a5f983e3cd37",
        "cursor": {
          "ref": "1608f24a-6769-4727-a785-31253017c732",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a9875a11-edbb-4dd9-8b65-0674bfe8fb6f"
        },
        "item": {
          "id": "0370bc49-bde7-454d-821e-a5f983e3cd37",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7ece88f2-2912-450b-8fea-6833efe96051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ac91d3-8354-4d65-b526-8ff20fbec20a",
        "cursor": {
          "ref": "ebb7cea9-0c47-40e3-841a-fba2ffbc0e10",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dda6cff1-22ff-4080-8e7c-50413f9a2bfe"
        },
        "item": {
          "id": "e8ac91d3-8354-4d65-b526-8ff20fbec20a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "81fafb2a-b7bd-41b7-9d33-2bafaddf608f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cfab5b-1ee6-4562-ab62-5b478dcb21a4",
        "cursor": {
          "ref": "efcca121-572c-406c-bb73-748abbea5998",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "610cf4eb-591c-4c06-8331-1ecedaf2586f"
        },
        "item": {
          "id": "f6cfab5b-1ee6-4562-ab62-5b478dcb21a4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9c2b7b17-3e61-40e5-9a1d-88f2562251eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025c4d9a-5527-42b2-8c31-4ed8194267d3",
        "cursor": {
          "ref": "9c8a92be-8738-4476-8d6a-d95af733485c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "921232be-5c6d-4ddb-ae54-4810dd0daffc"
        },
        "item": {
          "id": "025c4d9a-5527-42b2-8c31-4ed8194267d3",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1f57eaba-3f75-4c17-8df6-dddfc736f0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6159b0cf-217f-4735-b376-e5e33584f722",
        "cursor": {
          "ref": "b41e0279-6f72-42a5-9872-ef2cb199a66d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d830e0d7-d24e-4293-863b-ba2fc44603ef"
        },
        "item": {
          "id": "6159b0cf-217f-4735-b376-e5e33584f722",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "162f73c1-38e0-41f1-9c60-2d938758266a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a39182-1557-4e85-b16a-dee0dee678c1",
        "cursor": {
          "ref": "bfdaa1ce-2dda-4bfd-836e-fd793f083da8",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "06ad25ab-62a0-4893-807d-b30d156eaf30"
        },
        "item": {
          "id": "a4a39182-1557-4e85-b16a-dee0dee678c1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e853b4d8-d51a-4b85-a14d-4bc16583f4ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e76623-9268-43e8-b499-82a34235f5fe",
        "cursor": {
          "ref": "47600cdf-6d59-42c4-b0a9-d2f88e2dc11f",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "29b2ba34-0a23-4a04-9631-021094aec141"
        },
        "item": {
          "id": "58e76623-9268-43e8-b499-82a34235f5fe",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2ea25b84-7523-4cb1-98ff-29ecb6af0df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e8a678-eb77-4a77-9bde-ac9cbd7ac205",
        "cursor": {
          "ref": "7db5153b-4364-41e9-bfcf-6d6b2e78c3cc",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "19b0d88a-e34d-40fd-9601-c8efd21e78bf"
        },
        "item": {
          "id": "d4e8a678-eb77-4a77-9bde-ac9cbd7ac205",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3380fd7c-fab5-407f-891a-b2420c748a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3558965-eac2-4610-81eb-28199ac9f0e2",
        "cursor": {
          "ref": "ce396423-a072-45e4-9521-abd4b99a99ff",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7381131c-7351-4f4b-aa75-88e78fa5965d"
        },
        "item": {
          "id": "a3558965-eac2-4610-81eb-28199ac9f0e2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "abfeafe6-5426-4134-85ac-e11186d2afd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13344deb-7722-43a9-b8c6-6db2d27ecf7c",
        "cursor": {
          "ref": "402ef9b4-7f8e-46d2-a995-8b7be74fc1d8",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f4c518bf-cfc3-497c-a1c1-d209c0506041"
        },
        "item": {
          "id": "13344deb-7722-43a9-b8c6-6db2d27ecf7c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2a2dba79-cca0-40a3-a974-365c220cca0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8db829a-fad7-4186-9c7e-78592c2be981",
        "cursor": {
          "ref": "998ad8f5-81e9-458c-984a-eb61d4f6ed61",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7d50bad4-a5fd-43bc-9714-0eacdbcb6529"
        },
        "item": {
          "id": "d8db829a-fad7-4186-9c7e-78592c2be981",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4773f211-e550-4e4d-87b6-2d82785877ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07cf1d3d-bb63-4bbf-a5eb-06edd500ca47",
        "cursor": {
          "ref": "ab6de3e2-5a9a-4f0d-9590-b990be2eec20",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b4f06c35-ce60-4009-bfdd-da998f53d794"
        },
        "item": {
          "id": "07cf1d3d-bb63-4bbf-a5eb-06edd500ca47",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cb50999c-76c1-4fa5-bde0-ae7ee49d4f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d94e188-4f7b-4a48-bc82-8684ebd38315",
        "cursor": {
          "ref": "f4725691-5851-4b50-905a-96c19f9e63ff",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1491b6da-166e-4f6c-80ba-d573bfff469d"
        },
        "item": {
          "id": "6d94e188-4f7b-4a48-bc82-8684ebd38315",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1d0b27fa-8c3a-4b9e-be86-9eebe0858cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f33fbd38-d9ef-4e7c-b9c1-9b4e4d57fbb4",
        "cursor": {
          "ref": "518522c1-0c95-4386-acbe-fd2ffd92dc63",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "530f2c1e-f805-4a70-95db-d8a8801e9517"
        },
        "item": {
          "id": "f33fbd38-d9ef-4e7c-b9c1-9b4e4d57fbb4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "98b5acd1-940d-4a0d-952a-9f650c268af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314b5430-480e-4516-8274-041fbe395b5f",
        "cursor": {
          "ref": "af120d58-9c24-4870-9ecc-af7077fb7f92",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "95acdc27-3411-4d42-87d5-41affda837ff"
        },
        "item": {
          "id": "314b5430-480e-4516-8274-041fbe395b5f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "93e9c5d3-11fd-4930-b810-7a2a3c2b1207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba7083b-11d6-4c49-b0d9-9199bf68379c",
        "cursor": {
          "ref": "ceac38bc-8cc6-4dc0-8dcc-d98f6ca9526a",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4b176a5f-4f89-4270-a89f-444fb70848db"
        },
        "item": {
          "id": "6ba7083b-11d6-4c49-b0d9-9199bf68379c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0c58d430-b931-4355-966c-506a5111721c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aadb7027-69c7-427d-8437-cc1e4103ac48",
        "cursor": {
          "ref": "0d7910de-00aa-45ce-8532-e417e3ec2d04",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5ff5cf21-aaae-438e-ae0b-0aca6b3738fa"
        },
        "item": {
          "id": "aadb7027-69c7-427d-8437-cc1e4103ac48",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ecd90681-abe7-43b8-ac2e-e14e673dfa8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65fdaabd-c107-4afa-b9dd-8092fa50aa50",
        "cursor": {
          "ref": "e0b1148f-33b2-4dfe-b68b-3658d046404d",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9d5aaedc-ac10-488d-b5d4-29120291430c"
        },
        "item": {
          "id": "65fdaabd-c107-4afa-b9dd-8092fa50aa50",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "508b587a-1183-4886-8d7d-5df693c13471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595cdc03-a724-4f6e-a2af-b6142e999542",
        "cursor": {
          "ref": "5560a985-ab8d-4591-b324-2b61e9b33ec9",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "731eba9c-33f5-48c4-a768-419116fe309d"
        },
        "item": {
          "id": "595cdc03-a724-4f6e-a2af-b6142e999542",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f1898bea-d036-416a-ba26-0396b498624e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32818a88-bfb1-4918-8aa5-20ddb7211e31",
        "cursor": {
          "ref": "267f8cc6-c520-494c-8e01-bb4aa3d913cb",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "79147ace-a0ea-43a4-9785-24e0f758a2b7"
        },
        "item": {
          "id": "32818a88-bfb1-4918-8aa5-20ddb7211e31",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1804cb38-9c8a-4b19-9d1f-5eb599a42ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171a3247-5244-42fb-ab51-761130337a9d",
        "cursor": {
          "ref": "49e06e4e-8782-458b-a345-bdd003944976",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ebed6ddc-e6ad-42d2-92a1-f5ac7b037d35"
        },
        "item": {
          "id": "171a3247-5244-42fb-ab51-761130337a9d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "990bdaee-d62e-4982-85b6-51c6e0ec48c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665953dc-0b31-424b-9897-fe6242e6cd33",
        "cursor": {
          "ref": "5e07f859-9019-49b6-8b98-87436e8083ae",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8df1bd19-e2fa-41b5-a63a-e63b0aa1e1ef"
        },
        "item": {
          "id": "665953dc-0b31-424b-9897-fe6242e6cd33",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "945a4037-f3b8-4b02-8a0d-2a545c7c8b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12575740-44da-4e67-9b41-f12ee0a5df07",
        "cursor": {
          "ref": "3c131857-983a-4732-b706-982b1945e213",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "222eb100-70e5-4781-a595-d0e596f3e842"
        },
        "item": {
          "id": "12575740-44da-4e67-9b41-f12ee0a5df07",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "20702619-4068-4b82-9089-1a71e49f4429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce693cb-fa03-4b65-896f-0f7b32de08b4",
        "cursor": {
          "ref": "0523a2b4-7075-4fa6-8c27-3da1d1dff930",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ca8a38c6-a39a-40a6-8f46-c996f40b6862"
        },
        "item": {
          "id": "5ce693cb-fa03-4b65-896f-0f7b32de08b4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f3ca322f-abc1-4b47-8696-5f102777917d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24702bd-637a-4f61-ad58-8ed357286ed5",
        "cursor": {
          "ref": "904fdebd-eb12-46c0-b5fb-f26604254e2c",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6b14645a-ea6f-48d7-ad10-05c7782fcdb6"
        },
        "item": {
          "id": "c24702bd-637a-4f61-ad58-8ed357286ed5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "871206fb-0428-40e8-93e8-55e0a0caea51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f35262-c365-469b-a279-c6d914c8c682",
        "cursor": {
          "ref": "bc16bc3a-0109-4e41-8a8f-5a3436228a0e",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b9c3135f-da36-4b61-a783-2086f1aad575"
        },
        "item": {
          "id": "53f35262-c365-469b-a279-c6d914c8c682",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "26cf9e04-7dad-4b96-bde8-42d91cdebb01",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6f0f0257-fc1a-4182-819d-39569621f697",
        "cursor": {
          "ref": "6e3c9c09-b9ba-4166-9809-70ab4687557f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b4f30db0-1588-4fb4-8827-968e17859bb3"
        },
        "item": {
          "id": "6f0f0257-fc1a-4182-819d-39569621f697",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "88d3051a-b95f-4fd2-a057-f9438e27d8d0",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cc73a03a-a627-46dd-b455-32b51c8af51c",
        "cursor": {
          "ref": "c8e9b30d-2f06-49a2-a003-d03547f0fa42",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "15187d27-f112-44c1-99d7-feb916058d80"
        },
        "item": {
          "id": "cc73a03a-a627-46dd-b455-32b51c8af51c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d955be07-d47a-4392-925a-8ec3554877f8",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "f5c68d63-5435-445c-be84-317daea415df",
        "cursor": {
          "ref": "3db9713d-89db-4c8d-8d01-af701ed8d609",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cb3b102d-9313-4631-a794-650eb6e2ea50"
        },
        "item": {
          "id": "f5c68d63-5435-445c-be84-317daea415df",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "38d5a8e9-fe5e-4b09-ae69-3c409d401b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f5b041-623a-4f05-8bee-8ce66d76745c",
        "cursor": {
          "ref": "f1e16827-9dbc-452b-8ede-54b15b5ac333",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "16e3e930-be89-4ff4-a8be-0831c6ef7c3e"
        },
        "item": {
          "id": "50f5b041-623a-4f05-8bee-8ce66d76745c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e6b03a27-396c-41c8-8ad3-b1bcd09967b8",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f31f7a2b-a6e9-4c97-8ca5-2f14fa847655",
        "cursor": {
          "ref": "eea5cfe0-6381-402d-a6c5-583e0ace4c2c",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "47713c17-03b1-4874-b6e0-f8bb3d25c802"
        },
        "item": {
          "id": "f31f7a2b-a6e9-4c97-8ca5-2f14fa847655",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "34ae6aee-8441-4851-89db-380238dfcddd",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "07213059-0dec-4b29-b10b-60beb702d19b",
        "cursor": {
          "ref": "114488fb-0f4e-4c85-bad4-bc90ebae7fd6",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5da8e06a-06c7-410c-87d5-754f0034d4b9"
        },
        "item": {
          "id": "07213059-0dec-4b29-b10b-60beb702d19b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4e82787b-d4d1-4814-af84-3f980bada78f",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "b795778b-5a70-4f3e-8edb-53d48156910e",
        "cursor": {
          "ref": "9513c988-bcb0-4ddc-b60c-1c510467daf0",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "721f7dff-ebeb-42fa-a6d4-7b1cced800e3"
        },
        "item": {
          "id": "b795778b-5a70-4f3e-8edb-53d48156910e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2c630b3a-ecfb-4b00-9dfe-6ac8e53695e7",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0b4d31dc-fd89-45e1-8a91-ae4987048303",
        "cursor": {
          "ref": "617add2a-13f8-49f7-bcc8-cfcd5fd97fe1",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "eb148352-fcce-482a-af4f-35199f23efd3"
        },
        "item": {
          "id": "0b4d31dc-fd89-45e1-8a91-ae4987048303",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1dbea089-7b8f-430f-aeed-2f0d29c63caf",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a67747f5-699e-4982-9ed0-057de48b5791",
        "cursor": {
          "ref": "c3dad702-16ad-47be-b1af-34a56651a768",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e98dfbb8-9eb6-4836-8d41-5ccf5c0fa582"
        },
        "item": {
          "id": "a67747f5-699e-4982-9ed0-057de48b5791",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "df0a0844-a78d-4c7c-9b43-8421b4e5247f",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ba1b1231-89ed-491a-8b33-6ea778beaccf",
        "cursor": {
          "ref": "0652af71-3bce-46ea-a971-233cba087bd3",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6fd3afcf-835f-4150-a09b-b5d9e4353100"
        },
        "item": {
          "id": "ba1b1231-89ed-491a-8b33-6ea778beaccf",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bcaf834c-9f02-43ac-bc79-01b5315adf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52323c12-520a-4207-9121-f30bad7fc701",
        "cursor": {
          "ref": "7cf06ef4-70b0-4c3e-8ddd-b55dcc956936",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2c83fc93-22cb-4443-92df-90452c35cc09"
        },
        "item": {
          "id": "52323c12-520a-4207-9121-f30bad7fc701",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7b16d1a9-86ec-425f-ad50-58de2ae484b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c8208c-9e31-43eb-8604-724084716362",
        "cursor": {
          "ref": "302e9c82-44a5-4f25-8a4c-0f2e431087b6",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "602d2bd5-8220-4c42-a923-f0cda371d173"
        },
        "item": {
          "id": "82c8208c-9e31-43eb-8604-724084716362",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b84dda80-e042-40c3-8da3-013f55ff8b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b79b16-3724-4a31-a94c-1d04c0be5c78",
        "cursor": {
          "ref": "dd3eceeb-2976-47ab-a55a-2bff2cd062f1",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f2f0ec2f-6be3-476b-9f06-d0510ca1131b"
        },
        "item": {
          "id": "c6b79b16-3724-4a31-a94c-1d04c0be5c78",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fa885ea8-d77b-4e90-ae15-ad26ca99cf55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c336412-c2ad-45e7-8241-e16a40cdf765",
        "cursor": {
          "ref": "c824b829-3fea-4686-ab26-9cdb29f295d9",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6d9552e6-7085-4c5c-b34e-402ea1a8d7f7"
        },
        "item": {
          "id": "8c336412-c2ad-45e7-8241-e16a40cdf765",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "302534b8-2747-43a5-ae70-021377e0c09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a4e1ef-23d5-4010-8d49-e446a8abb315",
        "cursor": {
          "ref": "3345040d-1143-4aba-9f0a-58b1545b1ba8",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4bd7f02a-de4f-4712-ab1b-e17fd0d040e7"
        },
        "item": {
          "id": "43a4e1ef-23d5-4010-8d49-e446a8abb315",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "60cb76ee-1b88-428d-a5f5-06e9cbc04570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a618a3-ae2d-47cb-9c8b-7155788baf53",
        "cursor": {
          "ref": "22413549-d9ea-4f40-a8e5-661ed215725b",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "98324927-4cca-4bf9-afda-e422cbecabf8"
        },
        "item": {
          "id": "54a618a3-ae2d-47cb-9c8b-7155788baf53",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8aaffc23-9865-40d3-a285-2fb3d16a85b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d24a5f7-9f20-475c-b838-d5f30e132d02",
        "cursor": {
          "ref": "b0c667db-40de-4007-9b66-1e935c7436b6",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f8f126e6-cfdf-4ea1-8637-784ede770123"
        },
        "item": {
          "id": "2d24a5f7-9f20-475c-b838-d5f30e132d02",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ae2f82c2-2200-441a-91cd-c29c746eadd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6cd148-bbc8-4d96-82e2-610bd94e9561",
        "cursor": {
          "ref": "ac359816-2f1b-40e8-8d99-209769c85348",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0ad6d8f4-05d7-479d-ac35-47c787d84ac9"
        },
        "item": {
          "id": "0c6cd148-bbc8-4d96-82e2-610bd94e9561",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c7fb3a44-2692-4bc0-b1ff-9194f0fc4abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fecc9d2-332d-4a16-9fcc-d65674cecf69",
        "cursor": {
          "ref": "b1d9637c-1cc6-4898-b7ad-278e392fa223",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8a2b7011-bea4-4549-9ad1-3afa03a1037d"
        },
        "item": {
          "id": "6fecc9d2-332d-4a16-9fcc-d65674cecf69",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "407362a8-8fdb-4064-8b62-46560a25466c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c90b5e4-6ac6-48cb-8dff-6c17a90643b7",
        "cursor": {
          "ref": "ee4ca8de-89eb-4562-ae20-8c7a6d3c692f",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f0b52e79-cc70-4352-aa59-11da410b76d1"
        },
        "item": {
          "id": "2c90b5e4-6ac6-48cb-8dff-6c17a90643b7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3494ebae-3c13-49ad-9283-351de88c16db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c8f4d0-7f45-48cc-888e-8dcca8ff1b0a",
        "cursor": {
          "ref": "f0e73cb0-b641-4ece-97af-f114328eff99",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dba45136-058d-4d26-b368-65875f1f7b1d"
        },
        "item": {
          "id": "49c8f4d0-7f45-48cc-888e-8dcca8ff1b0a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c143c662-804d-46bc-8bab-6b3d6895c8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f98b87-67e4-4bd1-96ad-0a4532199570",
        "cursor": {
          "ref": "587652be-63d5-40f4-8aaa-334f33085a91",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d8875436-bc34-4fe5-8c78-7cbae674399b"
        },
        "item": {
          "id": "72f98b87-67e4-4bd1-96ad-0a4532199570",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4a878095-b5bf-4a8f-bc31-9d704c42780e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aeeebbc-d038-4b86-8928-cfd060dc7425",
        "cursor": {
          "ref": "a3b6ab0c-aee2-4c2e-b198-05dc52eac766",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6c424ede-1b6f-4e7b-86e1-715d48c818aa"
        },
        "item": {
          "id": "5aeeebbc-d038-4b86-8928-cfd060dc7425",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a9458f93-9ef2-45d5-b600-4cc6798e109a",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a84049e2-55e0-4d19-b6f9-9cd28901d2df",
        "cursor": {
          "ref": "9a75da34-b9d0-40c9-90a1-749dc424b0bd",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "52f0bd0d-1c27-470b-ba83-e6cd180e86e2"
        },
        "item": {
          "id": "a84049e2-55e0-4d19-b6f9-9cd28901d2df",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8aadac4a-9057-477e-a848-c27ecf02b63d",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "47dd29f7-160a-4712-965e-75b039a338b4",
        "cursor": {
          "ref": "1fb2faac-09c6-4a7b-86d1-9730512759ce",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "691644c5-66d1-48f9-bb07-b342248f0064"
        },
        "item": {
          "id": "47dd29f7-160a-4712-965e-75b039a338b4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e77397b9-3c9f-4dad-acdf-4ebb8b854235",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f68566d6-3474-44f1-bdf1-ce00bb2c5d66",
        "cursor": {
          "ref": "246a6646-7763-4efe-a065-3e275c2f2cf6",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a17c2bd0-7175-4efa-a753-5629be1af004"
        },
        "item": {
          "id": "f68566d6-3474-44f1-bdf1-ce00bb2c5d66",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6ea581c6-088f-434d-9a7f-e8385f7a846d",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d17da9d7-10fb-4e20-9fbc-4cc6e9968a0e",
        "cursor": {
          "ref": "b0b23273-646d-4a16-a328-12b0280017e6",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "03999402-b5d2-4c60-8ef8-f66a4592831b"
        },
        "item": {
          "id": "d17da9d7-10fb-4e20-9fbc-4cc6e9968a0e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "cadc4f55-4fa4-40a2-b552-832cec8730ab",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4295b69d-c901-42f6-bdf3-23cc077971a7",
        "cursor": {
          "ref": "48ba9e6b-cfca-49ef-ac65-439624e08fbe",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0ca87538-f8f5-4377-bc1d-1efcbb229927"
        },
        "item": {
          "id": "4295b69d-c901-42f6-bdf3-23cc077971a7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e022f70d-2809-4f5a-83cb-b2012e063fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0389033c-90a5-475a-a816-5b7ca45642e9",
        "cursor": {
          "ref": "a91a3d23-6a14-4bf0-8751-361591d18a26",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c0dd0259-af61-43d4-9ed3-e3b5c3d9d83c"
        },
        "item": {
          "id": "0389033c-90a5-475a-a816-5b7ca45642e9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ddf02fd2-ab47-44fe-b2c1-4f18e79050c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed2f173-54fe-40f3-a725-ff917a08df6b",
        "cursor": {
          "ref": "26c34641-9a67-4053-8c12-e413075e199d",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d5da62b1-799d-4a8a-ab24-0f4be004ccfa"
        },
        "item": {
          "id": "0ed2f173-54fe-40f3-a725-ff917a08df6b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7a7e539d-4a08-41df-a3da-2a494d9eb05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152ebcd7-df5c-477b-ba22-e857e9d2c59b",
        "cursor": {
          "ref": "aa36c110-9e9e-45b1-b5be-ff6f294384ad",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ddb0218b-271a-4ecb-8673-302bfa971e8b"
        },
        "item": {
          "id": "152ebcd7-df5c-477b-ba22-e857e9d2c59b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a45f0c75-371c-46d1-be70-09d1da6cc1bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af51c33c-8625-4951-a1b8-0193d4f84f6f",
        "cursor": {
          "ref": "4d4e025d-b9f7-4640-99f3-cc1872537f38",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "39a7778f-3062-4f1c-adea-9113eaf261f1"
        },
        "item": {
          "id": "af51c33c-8625-4951-a1b8-0193d4f84f6f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "47c9b66f-804c-4651-be49-581f896c7643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4673c744-cbfd-48ae-8f4c-2a22a4cfc413",
        "cursor": {
          "ref": "09848596-4014-420d-b551-c7fbb8c6b24f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1118325d-d3b8-4eb5-a650-fc51d9467ec5"
        },
        "item": {
          "id": "4673c744-cbfd-48ae-8f4c-2a22a4cfc413",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b3a644d2-cf2d-41c2-97a7-640f8e5ec597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae182872-978b-42d2-9ff9-d0d33611c21f",
        "cursor": {
          "ref": "fcd6f39e-4eb5-49f6-86bd-394b967d08c6",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c78f59cc-1338-4091-bfba-0cc0ca48d33e"
        },
        "item": {
          "id": "ae182872-978b-42d2-9ff9-d0d33611c21f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a9db9a04-2391-49c6-886a-be11156d54d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274e60dc-e17e-4cb8-b2b1-c43ee1ff5e00",
        "cursor": {
          "ref": "4897cb66-f13e-401a-baf2-97775d3b63bc",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "33c153af-10ac-494d-9ddc-684f484e964e"
        },
        "item": {
          "id": "274e60dc-e17e-4cb8-b2b1-c43ee1ff5e00",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ab0fc144-ab76-43e8-a0f5-c4e90bc9e0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e7602c-5e62-42b5-9cfa-d9cb78a2372b",
        "cursor": {
          "ref": "9b91d392-2c12-4fe2-b30d-9aa79a8b5d63",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3d10ae70-d808-4d19-8165-9703583ef1da"
        },
        "item": {
          "id": "18e7602c-5e62-42b5-9cfa-d9cb78a2372b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ec8023a0-8fcb-4080-8b34-429251acf4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b0aa93-f562-427f-a6c8-751dd4430853",
        "cursor": {
          "ref": "cb8064b8-0f8c-4948-ac47-39b02fb7d990",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "25317890-0c2d-4b90-a63d-29908749a8cd"
        },
        "item": {
          "id": "21b0aa93-f562-427f-a6c8-751dd4430853",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "df8b5e35-f47c-4260-bc5d-a711f716c824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d27fc5-b1a1-4997-8e23-e52374dfb27a",
        "cursor": {
          "ref": "98ba503d-4aa3-4453-8f42-809bdcf18732",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d0f51039-c5e1-40ab-98c7-089ceeef6f3b"
        },
        "item": {
          "id": "c3d27fc5-b1a1-4997-8e23-e52374dfb27a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "61245c21-d058-4dbc-a8ce-68e3d7441964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc4be47-943c-426b-a6d6-73c52a9d9945",
        "cursor": {
          "ref": "29d153ed-b423-4cd6-bd11-9eb224caeae9",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9a3a94fd-8e8e-4078-b2b1-85aac4571b94"
        },
        "item": {
          "id": "afc4be47-943c-426b-a6d6-73c52a9d9945",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fea4187e-3b4f-4878-b7d8-22f671161a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4725f2d-f7f3-47b8-bb73-6337decccddc",
        "cursor": {
          "ref": "a2c911be-044d-4d3b-a31a-7fe051ad4608",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8ac273e8-7c62-4d11-8c82-e14214cfc9c1"
        },
        "item": {
          "id": "b4725f2d-f7f3-47b8-bb73-6337decccddc",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "44fca4ca-416e-420b-afc3-96c054105a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01158759-fce2-4fc6-8d52-ffdf613dc833",
        "cursor": {
          "ref": "b24ee06e-4e7a-4377-bdc0-6ba5cf73e8eb",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "6fd4e2b6-0ace-48b7-a285-526cb0e90637"
        },
        "item": {
          "id": "01158759-fce2-4fc6-8d52-ffdf613dc833",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e12f4034-6124-4fe8-8b12-1b994ab9ebaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8a1372-1b5e-4e79-93cd-105f5240339e",
        "cursor": {
          "ref": "da3c51f0-97b9-4347-ac07-0a8475557f95",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a15bf0c2-701e-4176-a9a8-607c41e95731"
        },
        "item": {
          "id": "5d8a1372-1b5e-4e79-93cd-105f5240339e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "67667d82-70a3-497b-a47b-8a4698c6d393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba8a5a2-ae00-4164-8436-474a66f168c3",
        "cursor": {
          "ref": "29b250a6-08ac-479f-9090-97dc24d8061f",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8710eb6d-18a4-44a1-adb7-fa090c7f8af3"
        },
        "item": {
          "id": "cba8a5a2-ae00-4164-8436-474a66f168c3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "67f42bd6-ff6a-41a8-afc9-be2579581d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca09879a-ff3a-483f-80f5-4e41d5cf2bf1",
        "cursor": {
          "ref": "b3768493-d617-4f17-91df-9519bf2d299e",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "13ee64eb-008f-4e07-9ee0-0f19c4cc2f94"
        },
        "item": {
          "id": "ca09879a-ff3a-483f-80f5-4e41d5cf2bf1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0e3d6e6e-5900-4c18-8cba-ac3785656356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8084de5-e390-405c-9379-ef014bedc03e",
        "cursor": {
          "ref": "b169b603-10d4-4009-a7f1-6a4ceb924d8e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "8949cdb0-c4aa-41a7-b06b-da462f6ac732"
        },
        "item": {
          "id": "d8084de5-e390-405c-9379-ef014bedc03e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7c0b0935-5e6e-46d5-8984-14a622542799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fb8bbb-acd5-4f46-94b8-160017666c5c",
        "cursor": {
          "ref": "82c1b5f2-fafb-4aad-954a-d57189213b59",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "28bff1d6-3635-4880-8758-ebaded59742d"
        },
        "item": {
          "id": "a1fb8bbb-acd5-4f46-94b8-160017666c5c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "99338f43-3687-4486-be94-52875eb8af84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5d6f1a-dd0c-419f-b6c2-c155d7793a47",
        "cursor": {
          "ref": "66fda2fc-a712-472f-8b2f-58af7eb9048a",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3e8f15cc-7f35-4a84-9309-b0ed3d9a5d19"
        },
        "item": {
          "id": "0b5d6f1a-dd0c-419f-b6c2-c155d7793a47",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "aef102fe-e969-48ce-a0aa-6e60e8b6e1de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d3baca-72dd-4288-914b-f6ee822eedc8",
        "cursor": {
          "ref": "87e8feb8-1137-4716-a2dd-abafaada15f0",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e1c8af0c-6492-4928-9bdd-79ed06c44f9f"
        },
        "item": {
          "id": "d9d3baca-72dd-4288-914b-f6ee822eedc8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4a9595a4-0b17-461c-a60d-66f909ba3473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806db0f6-063a-4269-ae7c-42d99f6524b8",
        "cursor": {
          "ref": "fb6acfa3-4294-445f-b375-5a501eecc192",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "b38f9dab-96fe-4781-8843-18f6a45bc1ab"
        },
        "item": {
          "id": "806db0f6-063a-4269-ae7c-42d99f6524b8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "93b64687-75c0-4338-999d-e9cddaf1356f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cdbe35-b662-402c-956e-17f7f701ac39",
        "cursor": {
          "ref": "71fa2a2e-e66e-433c-b14e-a5462e36a847",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "6b7436e5-d006-4ac0-b136-e380c19032c4"
        },
        "item": {
          "id": "30cdbe35-b662-402c-956e-17f7f701ac39",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a88e189f-22d6-47be-947a-bc60ce32fb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d00c7fa-30b3-42c1-87e7-da36e422799e",
        "cursor": {
          "ref": "c15f4d33-950f-476c-8985-e5b6b0761a28",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "bc35b7d9-16dd-43c7-8009-62d6caf0025f"
        },
        "item": {
          "id": "9d00c7fa-30b3-42c1-87e7-da36e422799e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2d729a68-1597-4f3d-9f8d-91fb799186bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d18c67-39c8-4763-ae9d-7ca61440be82",
        "cursor": {
          "ref": "a4b3e744-433a-4eef-8bff-77e15d90ad4a",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0b3e5c59-60e8-4d0c-b026-f782b0982587"
        },
        "item": {
          "id": "79d18c67-39c8-4763-ae9d-7ca61440be82",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6800daaa-a44a-4736-87b6-ee5e613064de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551894c9-2eea-4797-ac72-e4f29f3b3f76",
        "cursor": {
          "ref": "a50e8d81-a54f-454a-ac98-8d34e1de626f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "47d7b441-8df8-41ca-9196-ec8ea510f319"
        },
        "item": {
          "id": "551894c9-2eea-4797-ac72-e4f29f3b3f76",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "59b563b3-c19f-4bf2-8775-7119ade479ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d9174b-75f0-489b-a831-a1eb9d54f9ce",
        "cursor": {
          "ref": "83fc7e5d-94a1-468a-a6d1-d63db14222db",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "4d1d9a47-2f35-4f89-9b57-c79899ad4cfc"
        },
        "item": {
          "id": "38d9174b-75f0-489b-a831-a1eb9d54f9ce",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f20e10fa-3132-4a53-a52b-d227f1123da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690d781a-5670-4939-be95-377af2b52ee4",
        "cursor": {
          "ref": "e22cb5b1-8bf1-4122-aff6-44846f719d33",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9287d363-121c-4d76-8474-5d86237c65fb"
        },
        "item": {
          "id": "690d781a-5670-4939-be95-377af2b52ee4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "26186ef2-f4e2-4115-b74d-e8a556e28d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202f19f0-bfac-43f0-a261-d35e7c3b4678",
        "cursor": {
          "ref": "7318a97a-c41d-44e1-93c0-039c180060e1",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "57ae7a04-82ac-4eda-a91d-2c32c441efc9"
        },
        "item": {
          "id": "202f19f0-bfac-43f0-a261-d35e7c3b4678",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "aee88ef7-df3a-475b-b960-7da618a85584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652636d0-a2c5-47b2-b5c4-2f3e783ad76c",
        "cursor": {
          "ref": "2574615d-0486-46a1-a64d-621a89ef5fdf",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "b900cf9c-c52c-4f1a-9107-105259a8e187"
        },
        "item": {
          "id": "652636d0-a2c5-47b2-b5c4-2f3e783ad76c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b7d4cf1d-a311-42c7-ab25-21d68d4ec355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56d1201-d2da-4690-9948-2273ac6d8bfd",
        "cursor": {
          "ref": "6c34ffea-6480-44fd-8b59-2280d1c1f5eb",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "19aa2fb6-b46b-448d-a20f-8fcfa2f6270f"
        },
        "item": {
          "id": "c56d1201-d2da-4690-9948-2273ac6d8bfd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "abdbcc3c-41c6-4c56-b75c-59482a524966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d213a84c-c07c-4f59-ab1b-50a63f7519da",
        "cursor": {
          "ref": "aee1d172-761f-4659-ac03-dc17231e95ea",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bc3c69f9-847b-4190-b6ef-85b902cec524"
        },
        "item": {
          "id": "d213a84c-c07c-4f59-ab1b-50a63f7519da",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "98a891a8-94c0-41a8-9d47-43f37dc823ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b02ef4-a0dd-4a90-8b4f-aba01b145c43",
        "cursor": {
          "ref": "e085fd05-cae5-425e-b6b9-b45a5655bbf8",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "bc8a2024-dda8-4cb3-b781-2e43d8237bbd"
        },
        "item": {
          "id": "05b02ef4-a0dd-4a90-8b4f-aba01b145c43",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bb77623e-89a2-44a9-b384-d3774def836a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f532bafe-dcd4-4665-8100-581e35f1f5c4",
        "cursor": {
          "ref": "441c1076-da16-4e7f-acd2-1ca9ac0e33a9",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "98ba4603-1ff3-45db-ad79-b5043bd21e62"
        },
        "item": {
          "id": "f532bafe-dcd4-4665-8100-581e35f1f5c4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "02999621-33ad-474c-b451-9dc7ef60c75a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b531fc-0160-43df-b4be-5b7b34beda1a",
        "cursor": {
          "ref": "e743eb36-ecbb-44bf-825f-87429f6a211b",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "3367c534-d147-43f3-b4e3-1f2e773db405"
        },
        "item": {
          "id": "76b531fc-0160-43df-b4be-5b7b34beda1a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3fa7f6e8-7714-47cc-9353-0249af7a2560",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab05377-62bc-42b8-b356-4db9d7c042cb",
        "cursor": {
          "ref": "d4213d28-0188-4191-815b-5ac876c6e868",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "73d0e489-9e16-4fc0-9046-fe849d90194a"
        },
        "item": {
          "id": "6ab05377-62bc-42b8-b356-4db9d7c042cb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "567136a1-8bbd-47f3-ab89-76b6938eec10",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "f6ae8426-618f-4723-a127-e03395a33cbe",
        "cursor": {
          "ref": "a952ab40-0820-423c-b916-21cda33adcb4",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "fdd2cf94-ce7e-43ff-8fc7-379ebe3f521f"
        },
        "item": {
          "id": "f6ae8426-618f-4723-a127-e03395a33cbe",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3325b34a-4121-479a-b771-61d7a7b4c307",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "175f561b-5b93-4628-8232-39ae9dec3007",
        "cursor": {
          "ref": "99f818ff-5c9d-4564-88b4-05baf1a0661c",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c6f89707-5c07-47d5-84c6-bf09f52ca2ce"
        },
        "item": {
          "id": "175f561b-5b93-4628-8232-39ae9dec3007",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "03039aa9-2c78-4b54-98fc-f57edb66007c",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4022395-05c4-476a-afa5-94f1120a730f",
        "cursor": {
          "ref": "9d6adc86-4f56-4278-ac0e-af783f5bd70b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c49a9b56-d136-47b7-9898-b54bdc04e5fa"
        },
        "item": {
          "id": "f4022395-05c4-476a-afa5-94f1120a730f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7045546f-650e-461c-9f7f-df765b132a97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4022395-05c4-476a-afa5-94f1120a730f",
        "cursor": {
          "ref": "9d6adc86-4f56-4278-ac0e-af783f5bd70b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c49a9b56-d136-47b7-9898-b54bdc04e5fa"
        },
        "item": {
          "id": "f4022395-05c4-476a-afa5-94f1120a730f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7045546f-650e-461c-9f7f-df765b132a97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae7707c-4009-468d-87d6-842d13c1fe35",
        "cursor": {
          "ref": "a255e0e1-60ed-4090-9e57-b7b79e9ed5b0",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b586bfea-0125-43fc-8e10-5bb65b34c357"
        },
        "item": {
          "id": "fae7707c-4009-468d-87d6-842d13c1fe35",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "98fca273-c07b-4850-977e-80fca797befc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a5f45b-0744-4a35-b6a8-2fb59c93d464",
        "cursor": {
          "ref": "fdfe03ea-aa25-48a2-bf19-785e646a97ad",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "2b3f7059-71a5-4d88-a9dc-8a48d4504369"
        },
        "item": {
          "id": "c8a5f45b-0744-4a35-b6a8-2fb59c93d464",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d75324da-bd16-45b7-8b49-b295892a69cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}