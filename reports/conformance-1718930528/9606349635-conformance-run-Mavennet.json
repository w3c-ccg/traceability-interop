{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "94271326-b28c-4f2f-be2b-196927e98e11",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bf6cc642-8ff7-4db0-bf65-2954af0f27e3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b7b169d-94af-4eae-adc6-5033ddd229f1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7e635954-eccd-4ef6-8215-1948350f6ecb"
                }
              }
            ]
          },
          {
            "id": "0205619c-295a-4971-9d45-7de39bb536bd",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1ed30f49-cb20-4025-92bb-cec4c7084dc2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2277027b-cc8e-4a9d-a511-f625ae6a9b83"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7dd93ccd-1571-48b6-931f-ef67eef5c152",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bc79ecd5-7ef9-45df-8fba-9fa5cbdc2f12",
            "name": "Positive Testing",
            "item": [
              {
                "id": "da4d46bc-10e6-4f80-acae-6bc80035ea94",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebdf9f32-5257-4cf8-931e-ad89ece5655e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "057bfe44-9012-4ede-a254-7cdf10e2c4d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff31c72d-32a5-44ed-bd4c-32489e30f4ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04e5ddca-8b26-4c25-95c1-f277c84ac34d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a3e821b2-3501-48bd-afae-231ee1720b59",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69c3f3a8-1500-4069-a9b4-2c71ade2a400"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "306c09fd-7362-4666-bf46-f87347a85ae5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "005deb86-cfe4-4232-82a5-64daa0b9b838"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0f1df06-e858-452c-a213-f490d1f80ea8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6521d7a3-7759-4c7a-b3b8-ba7602e96b39"
            }
          }
        ]
      },
      {
        "id": "78000e77-acee-4f8b-94b1-61d2d834ab85",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f08ae3f2-32de-495c-84e3-fdce2db9b5f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "753fc38e-aa77-4d78-8603-a85baf3dba18",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ee5a8b53-3a5c-4727-83da-7695f9c03879",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46feb653-af66-4c82-86d7-ab093499f92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc51a898-ef8e-4834-800e-6efaa356319f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0db114-05d2-4e22-9086-f1a8eb82b72d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524965c0-0dc5-4068-a2e1-dbedc260f42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c8f5a01-cc19-4432-95e4-876ca0b0d0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde72a7b-16e6-4c9c-bbee-8265c53370c9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd305730-1a36-48ff-945e-ef11c8d4542e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd5c14a0-7977-46b6-bb79-7034aa70b83f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ca0d6bf7-df54-4b3e-9dd0-4d9244fc1364",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4af921d-8282-42a7-9e89-6f4892b98a47",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664bed95-b0b3-457e-af46-1199e3d85b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3f0ea1b-40a5-4b69-b027-a0dd1f6e684e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63a847b-93ab-45e0-a6f6-17333794310b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081519b0-8206-4e98-9b82-21bd5ccddc00"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e45e75db-2631-4d66-8aa4-8bcfd727f586",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cf22ffc3-4ae9-4bc6-a174-070672bedc03",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27e49cb2-6ec2-418a-85a3-2fd0271d824b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "40c68ed7-e844-4e0c-a446-3c51d93bf3af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd761014-19bb-4e1e-b72d-0e40b106f415",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "89acc308-a465-40da-b7fa-6eed5fb5c56e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c5c751b-813f-4149-ab00-5874dc1cf669",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ac1e43a-a493-4ec6-a1fd-cae796473716"
            }
          }
        ]
      },
      {
        "id": "f352ea27-0382-408e-b877-117b788376b7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a72c4e9f-5f51-4287-8bf8-99dec76d1a83",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f6de6ac1-5f7e-4601-958a-ca182ec847a1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ef716ea5-1b90-4f2f-8e91-8fb188de7b5d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8784e1c-10da-4ad2-99b8-f9623f508319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba74ebf5-9b18-4c58-9f7b-9c05c385c6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ea1ee7-6294-4688-956a-c99ed69d0a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42da9081-990b-486c-81c6-de4c937891d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9908eb3-7268-4ac6-9a61-7fa649f41ba7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4394d4-608e-48d2-b1b4-6397339756a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bef4c9a-1eae-4c09-b0ad-d3c902015993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349e9500-ed57-4d23-81c9-06addbf8f088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32cd32cb-59c5-4524-998d-7dcf8cf9ebe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061ab704-6860-4b5b-8362-7047ff9cc061",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d549c81f-c7d5-458d-8d86-8d44039273f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0d65d8-771a-4292-b56c-067a6625fc12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4ab39f-0935-45b1-bb3f-ab6710680b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5de95232-fbce-46ac-b602-d36d1212f8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6b8b81-fce8-4727-93e2-fa8732ad249b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7887e4de-fb0b-44e6-8660-d5203ebf1492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24867705-4b8d-4733-9aec-c5d938390f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a504f5a-ae41-46a0-9f76-b4babab650eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f63b7ff-0fec-43b0-a1d7-a294edf19782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61cff674-6bb0-4f70-8f73-89025e40d88a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d5eaba-1091-4857-9a51-2c2208b321d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd325a55-b966-4208-822c-7481606eb36c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7593a7-ce2a-415c-8f0c-04e35fa61db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c193ed97-9a0b-4c45-94c9-d9bc38515876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdea2743-d5b2-4490-86f4-26fb6e60b095",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4820f5f-152d-4832-830b-5b83275e2ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130cf10c-11a3-4354-8702-ca7d0efb0560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23addeb-27b4-4f48-bdd0-eefd635b2e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54e57be7-2843-4ecd-9b91-692dec390922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9b0a19-1543-430c-8dee-43439ea2b54e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc96d7a7-240d-4c76-8ebc-e59dcd4d2061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f402927c-a5ad-4abb-b0d5-829bda847f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0255768-d45c-4c1a-b004-fcf92441b08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54c3dfc3-8026-4968-954d-75a291d47eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdef403-118b-49a9-8d69-258b5f6c0bac",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439729e5-89e1-4df8-b1ff-a67666c623a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c084d71d-24d2-48ee-b982-dde999bf5a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0478336-e0df-4adf-83e4-9285fc434ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f789910b-42e1-4b4c-b72c-38d9f3d4b71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9016813-f6ad-4678-88fc-05d7e1e1082f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a61fef-9605-4773-abd5-6aaefa3f6b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead9ff56-b233-4a8b-ad3f-1797498773d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd54641-f44e-4e53-94d6-84230f62e8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9814f2c-e02c-4372-8d38-9eadc07abf14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809b60e4-89d8-4a7c-af17-a57be0b879ed",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f5bddb-99c8-4de7-98bf-87317514b48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e412afd9-2ca7-409c-a7da-945a7d3982e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38817bdd-d315-4644-b516-cfd92297cd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "251c3a6d-577c-4062-b4e5-2a5283dffb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7890a65-d74c-4fa1-8422-b749a3c46f23",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da504e2a-4181-4c4b-8063-6ccd571a5627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93ab003-2699-4599-a3d4-b59c9c6a4177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a952eb4-afac-4618-a762-5c39d44bdab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "011daaf0-d8af-4618-89f3-cad559585451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acdf35c-80e8-4f0b-abbe-5b46cd1b8ebf",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cc9d37-6832-441f-8339-ee0ac637bf88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b35d15-0e5c-4a6d-bd79-e2f489945b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee2266a-ebfe-4218-8ed1-d911efec3f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "097b661a-36bb-4a45-9b63-193ea4d9aa6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e0f908-2703-47ce-ba27-338ce4e9e789",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "001e8be1-f791-4888-a868-42846876af0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c423743d-5963-4c65-a36c-9533d1f34c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6f97b6-4ecd-4fda-b8c4-6661ee2c0bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "902eb806-c18e-4cce-a3f7-a5ea2fb02fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7ab86c-e380-497f-9722-0139a12dd701",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4b1b1f-2bfa-4e7c-9d5e-5424a20a0d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a81c931-6c2c-4fbd-8c0a-8eca48651301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e39cc29-358b-4258-8e33-2c61a5561204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9d833d6-6b79-4006-976f-e3ac4b1b7f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f274d0-3251-4fee-b428-21d50c89be7d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d4f6d6-141a-4067-9ce1-baa3d5cb0732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591811dd-dc97-41aa-8a5d-e4868f86ecb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0b4a1e-38ee-4633-a0bb-d914c12a71c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5eca7468-b0dd-41f8-bb50-955814c5ba16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd56eb18-2582-4622-8051-5cc3c5ca33c9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe0ade4-be52-4f66-be3a-1ecc69ff2536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0c386e-15e4-465b-a443-4844a3354657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe1979c-ae79-4b2b-8629-9e994ee6ebfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8711a8ff-566a-491f-a10a-2be7195c6519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b65d369-4199-4d83-8ef8-de0da363ac28",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb80ee4-5db6-4c0d-baf7-0b800f922f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13530b5-913a-4d00-b1eb-54d69caaf979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bdd5d7-4f82-49cd-a376-054f611cbc75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1f7818a-e949-4b19-baa5-3028884146c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff18823-202c-4e32-9b03-4502a254e123",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bac91a-0578-4506-9b44-d54546156ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3867c1-2538-48a0-a404-9952f8b719ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74216615-3772-4a77-aa1a-1ccc938c729f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "afbaeca6-2b93-4f31-98a9-6bc8735d9467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a01eb64-c16b-4731-a113-55900796dc78",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72952c6c-fa00-4871-89fa-bca135c26416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a78ea42-a48d-41a5-a64b-ddafc583e867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f4c42b-0d42-43f8-8043-580f7b0ac399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e8f383-49f5-43ac-94bf-9a55407b4c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e37d58-1b9f-4c57-a77c-7328c8bf0b68",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffd23f0-5702-4e13-8396-bc804101df69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e20dd1-9840-4b3d-aa81-4a6ed8881ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6099ac2c-5228-46f9-9717-c632109c7c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0eeee66-c088-4f30-b353-59397ea7054b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c14875-5871-47cf-90e7-eb9c0730b576",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2174e2ee-7c01-4cb7-83e4-67adcb754db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de452891-db27-4e0b-af22-42d012051f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27ed8d8-b2e6-4761-96d8-3f81d360cd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93f60ba6-f096-4d39-af40-f59141bca9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511bc3df-3fb1-414e-a7a8-3a119e2b4375",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16e88bb-8673-4cac-b0a3-2fc8149f40cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e817f5-4faa-49af-86f6-c1e7b3d75875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efa3e46-5058-4060-8e87-1933f0dcaf73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "345d67d9-acd3-4d79-83f4-e07f64b03731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4303b978-d575-48ca-bd43-69747cda03ce",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba587b2-3d4d-4dd6-a49c-4679897a3afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f04d10e7-599a-4ce1-8d2b-9503b6b3b753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6241b29-1569-4e7c-9d2e-fb54594d73a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93d2bdf8-d165-48c9-b64e-176575b789d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73e73e39-e500-400b-ab60-a55bba27cab4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850f4f18-2e00-4f66-a13d-48c1f6a1a7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "538509d6-981f-467f-95dc-1df2a8f50b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea7503b-75fe-4850-a6d8-2a41bc2165a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "462251ef-aa1b-453f-8df6-0c70f728e8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121440b4-16b8-439d-ba1e-68b267da777f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40714c94-3436-472c-9125-98ae8ff82c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a906eec-cd2e-465d-86e0-c4985c43f1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b8c7dd-bbe3-4edd-b0e6-3453bd89597e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "906f74e3-55fc-4727-b986-e3022699b6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef86906-c5a6-484d-b79a-b3e930aea8ae",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95aeb497-79b7-4930-a662-2ebb60a2a1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69163a4c-47fb-4c27-8e11-45f26c50648a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2367cda9-0e98-4b3e-9ece-32e74b1fb2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "48bec457-5674-4444-af80-b0f6c9b191f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4cade7b-51e0-4e02-8815-ecf0facc199a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37776057-72d6-46bc-8bcc-925882d718b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c986e155-f597-42e3-a673-20cc1e2347bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a65f8b6-9a35-47e1-ae27-b1b968efe9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b8e424-b1a9-46dd-8fcb-7aa1e0c2990f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d453e4-555e-4834-a5b0-c83524a4e319",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf9786a-7e5f-41ba-8086-d9d5c6d2d093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee38465c-ea9d-4069-b5d9-bbf2cc87166d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b8d750-6ec2-4037-b9ea-d807f2fd01fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d623ba56-c931-4d95-99be-11b225c62794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b834e1-5742-405f-80a7-fee4a2bd2ab1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c05445-1770-47e6-822c-be66a2264e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab3c00f-5427-40a4-b35e-0cdedc88fa69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0faba1-1b8a-45db-bcdd-fcb31e4175cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63912dc2-2ece-45fa-9c69-1fb0c8e7a470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a0668b-b440-44f1-a567-c00c98d97b93",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd0d07b-64c6-497f-8014-a1032a36b846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90875090-275b-4bf9-8543-2974f60a8fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3934139-bddd-4a03-81c0-beb13d6b2307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "382213c3-21ed-4ff1-88c4-179343bd7ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadc19c3-3a30-49c0-84a9-6f00bc401616",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520b5bd7-a1a6-4374-a3f0-0296ecd4b1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "873b3fe7-0860-4fbc-9b79-42c5b48a3675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8063cf5f-98c0-4899-9291-ec0376ff0c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c76b32-5329-4922-b36e-d8d82ea41cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729caf13-2bb0-4667-9ed1-aa52ac4d1aba",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bacc364-5391-4ac3-acd8-b958f946fcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d34717-c04a-4d09-8fcb-482e5b47d66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18084b4-5bdc-43f2-b5c3-7e0946fd470f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b1834c-fb5b-4c1a-8a2d-d7af7b0850ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bb48cd-bcf0-437a-8ba8-8258e7c0e837",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eaa38b7-dbb6-4dd9-955d-31d4f772e373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0591b9-7038-4f77-ac07-c9ba7f094692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950fdd2b-e033-4fd8-bf76-b16201ee7acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a591066-c7fa-485f-a135-5fa0bab14710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacc3b48-e1ba-40d0-842e-27b8ba2b8bf4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7586ce-a6ea-40a2-851f-3eacc698662a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29da2f19-3807-4095-b610-937e914da30e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75554c7f-c0ca-4fc5-bb06-3139fc16b567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd9c8c6-4ee2-48d7-a391-5c66db467a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc552ad9-98c8-44f1-b5e8-e0cef97f2960",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678395b3-87b1-4247-94ad-c9df9ac8c5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad264623-3cc8-4d0e-a439-7779a49c4001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9500bfbb-3d51-4c0b-9ee9-219b778042cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a119ce4a-d5ee-4135-b0bd-99c79fdd0a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badc99cc-3559-467f-b07d-e3f00d63d0b2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba364866-b52a-4255-b50f-59417304593b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f29d519-e92a-477b-890a-fc02fa1efd8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b6595b-24c1-42e4-a0c0-d669083db020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b150fa4b-44b9-4dc5-acc4-506ecfc7a080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4a3301-617b-4849-9435-0cdda2dd2bb6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c35f946-3eaa-4f0b-84fa-50731abb88f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b40ae77-8d50-4f74-81f9-d9daf67a5baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cde856-c238-4427-97f1-6be4ffdbe7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "893b430f-21ae-4c91-b343-b90d10c99bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5667423-118a-4169-a105-b26b6e3dd0ce",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691660b4-5596-4bdf-8bad-61c384f16940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ad7637-eb9b-4123-928d-8531dd84aabe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f90568-c3ea-4d54-b428-6c76ae4aac1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b01e0b-7cee-44fc-9b1f-dcf04ac7180d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecc4703-785a-4849-9927-f0576f60055d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6561337-9f01-4fbb-96ed-3c8e2241d4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e8f4cc-ca47-4ac0-9965-9e0708aa9f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c99816-dd1b-40f1-919a-7a716109186c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "09b5ac44-faca-4771-a37f-3bbe70f0c11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c205b5e-6072-43e0-9ec6-7ab63cedd646",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70b53eb-302e-4c9c-9ea9-70b729250bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5af0fb9-6cd1-4724-b72d-453ad6b2fd8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a2d1a9-977f-4198-ab27-cad5d1ea500f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c964fd-140d-4b0e-a6b9-80279baa5412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d84b5c-e91d-438c-a04d-ab93d3af4c76",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00001f92-5591-4078-a9c4-a86eae92544b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b278902-89d8-4a40-a2e9-33fb5243a83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d2dd65-9dd4-4bb0-a9c0-9ab1d9b53cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "38dc3180-8e19-452a-a077-2e48d4a66acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea3932e-642d-4b88-a077-0906baf7fe65",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e49dfa-4efb-4913-b05a-27837e4c9c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4898f1-f697-400c-8e59-563a3289b2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ef3104-2f29-47b1-a743-e68119f150bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ae6b94b6-eedd-476c-88c8-999e52fa050f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ce8831-d395-43e5-b1b9-89cd881bae43",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccaf54f0-1394-49f3-b2a8-b60c7a20e942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24d9c34-1c82-41bb-95c2-d340599db9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7dde55a-7810-4c5f-bec1-cf6867c9f0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f39156-3063-4f66-aa35-4a8934cb6783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8f1ae0-9805-4c8e-8ad4-dff3d1a721ca",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cecabf6-36cd-4486-95f9-5c6c4c6f3a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76b7504-9f55-4ff0-b601-bfc2a0c868a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd734d81-9cf3-46db-aadf-93dffcc68bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae436a1b-a148-4e66-9983-f7399b4c6e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21e1059-a7ee-4c81-8fd2-972189554ac6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd9c19b-c15a-454c-aaae-65588e6fe7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f45e96-41dd-469a-9fa4-ab087b7b81ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2319c54e-0a22-4419-a3b5-dab7187ae589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "829b2314-cd42-45e8-9bce-a901352c1bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57de91d4-71e1-4742-abd9-b05d41a9ef95",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26229d23-148e-4be7-af00-d262837d995d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84830c6-1f45-4fec-8e86-e118958cb3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2803305-1247-4377-8d59-379ca391916f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "735d6601-bbf2-4edd-b89b-f9980f6ad059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b092574-2645-460f-98cb-5aa50e1c5f00",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59c36c4-474f-4314-b6e8-19e0913b77b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec05cb8-c1a8-40db-a985-ad8b23ea1cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3ffbe73-f585-4124-8a8d-7d9980bfe582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b11754a6-8986-45df-b313-50c90205caa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a17d6d-f0cf-4ac3-89a0-473b9f03abfe",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e512a2-1f25-4a6c-9e8a-72e2bf877413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbfb149-56ee-47fe-9c2d-e8deabe6e07e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d3e57b-c781-4e6d-bb62-a90099d2b2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d72e2e2b-9e0b-4362-89f6-78735995e42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309982de-f89d-4986-bb02-e1674800c3dc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac30c3c-9223-41dc-8d22-340cc971bdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e944e8a4-649a-4adc-a912-87180c5cc8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec509c9-2f42-442d-9d88-2b28e16cd945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6841e01-a51a-4a72-b7bd-cdf7e9804d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0121859d-7866-41fd-99d9-f89395dd3018",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d503dbd0-adfb-44ff-985a-422092049c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b013ee9-5957-408b-8bf7-7669cfe8e961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cd0118-dd98-45a7-b69f-1673a7479b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9d25de-7d8a-47d4-adbd-36f13b4af984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cadc32-3367-4f27-939c-7330640a56a8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14204e5-8b3b-44e3-a71b-5e900a03f745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45aaff7f-2ec1-4b1b-b773-38c921adbb2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d37783-9a93-4f7f-a72b-f36f054e5bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "913ebbc2-766d-4d01-8b4d-2bb013d141fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbdd1f9-0e2e-4a17-9e82-f562d57c4ae1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bef661-3ed5-4ac3-9f54-b49987f62df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb360e61-30df-4867-8c82-f208ac25ef78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a57e882-ff6d-4e7b-bd91-5fbd31d33f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "da463090-60fa-441f-8b29-7464cb1736b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71cafd64-f48d-4268-9070-bfdc679f2fc7",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b0c029-2128-4aee-8172-5d56f7eb5993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56fc2ccf-16d9-4ace-a830-4a9f54a48190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f43a6b-a616-4526-b410-762a70ece64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "623ff750-f1d4-41a3-852a-f534ccca1149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cebe05a-73d6-42dc-b220-6eb017cd5c94",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1124a60d-a9f6-4f28-b0cd-7ce201c40710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8760cd-ccd2-48f0-95f9-3e1c028b1c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a900483-e216-452b-96ce-545e810c96f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d501b58-4675-4502-b8ae-ce2ebc770e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1705d69-b4de-4883-930e-cad65e84f3f2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0339e510-7b04-486e-80b9-2f9a9af7e6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25eda24e-762a-48a3-9343-9902e8a6f239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7adc4b-27c0-467b-bc38-5a5541095639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be918e77-bb8a-4d5b-8bb7-adcf594c5ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963d9e3e-888b-4298-8559-9cda492bfde9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86b1d67-701c-44a6-8405-7e45d759f617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360adfb5-83f1-404f-b02d-39df485127bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21927d0-3a68-4a21-9eb2-4b7e3b1ac675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "61d0bbc2-c6b5-4f57-9eed-86ac1aab3501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb617821-a67a-49a5-8f81-7afd6beed69a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb066afb-e6de-489e-bdd7-e07dc1a976c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4bef68-0b21-4041-9c5c-a095b39126f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c7663b-4328-46f8-82b9-6b9f3adad892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "badb723c-a407-4e9e-a2bb-76f207d1f03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae68260-65a1-4a43-8e1f-3bd23ebed953",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8296706b-ec35-4d53-8862-77bf777241c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa41bc6b-b6dc-452d-8186-3b05a0e90c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451b3898-07d0-49bf-9827-54f695edf83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "82a767d0-3960-48fd-ab9b-6f92e47054df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf079f9c-b8bf-4ae9-8ac3-2f6a74fb4af2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3baed20-13c5-4913-890a-6630984236bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dfe447a-7d1a-4af9-bf0e-f349e496a5a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41914b0f-deba-4fed-ba80-7b79a8152de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd4d29a3-e323-4ab9-80cf-31a9c6abb5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd10debb-69f8-43de-bab7-2b8386befc5c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c89cf7-de9e-46c1-97de-6f39588bc1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d33a6f-a336-4fbe-9af5-ac3eca3e78ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2009a566-22d8-4401-b720-feaf580ff0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b871e95-1e22-4e27-bd8d-efe572a2659b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67637e7-ad20-42b0-a972-289ab6c836ce",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a0f8d4-0b0d-42c9-a8c4-deec191346b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1f5a2b-8bbd-4de6-bdc4-430a00bbc95d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ed791e-ca1f-476a-8d65-6b7fe8447a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "28de9c98-4417-4ea6-a032-5167a7f636e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a869ce38-3ad0-4026-a1c1-2f89ad9f9456",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d8a000-8592-4573-a93e-a91caabb6651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6ec496-93c3-426c-b8d4-f320a1014b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332d36c5-82f6-4033-8960-a748850b4b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a14244a-fd8a-40fd-8eb5-9ca0de30d508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4f0cbd-d43c-44fb-be40-84244cd462a6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ada728e-e40b-4eea-a680-df03c2647be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f03adfc-0807-4156-a677-4873a7c36559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d00913-76e7-4fb8-826e-66503c132d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "95538676-5677-41a8-b490-0e937b2ba1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e340242f-4d26-4c4f-ad67-0b812dcabe31",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b35ae9b-f501-442e-93f1-8f7070031413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7622a208-cf5c-4c80-9681-b32816cbf460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc4f403-2172-4b95-9a89-b80e42910025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "623316cd-c2da-4283-ab4c-a6c8c16ded53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253bb84c-6712-4749-b62a-d14673ca7794",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650411bb-b190-48d4-8105-c98ee5f6526a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dba8e08-ca26-40e2-be8f-8dacf0a14a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31339db6-d82d-401a-8144-7a133163e7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "95ec6046-b45a-4de1-8a58-0d56ca17dddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e20802-4ef5-417a-8da1-4f1d0a9c076f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cce2f1-278c-44f0-8f78-1dc31cfb6813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c92768-2016-4f6e-a866-4940833ec1d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a76c985-fd18-43d1-8b5b-2f874d8048b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70770195-d199-40e7-955e-a78e21b945df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93fcf0f-30cd-4dcf-a5e9-8d0395408bdc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c10e58b-6049-422e-b0b8-ff1e02a7c2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0481c368-f75e-4d1c-aae9-accabbc367bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2361bf0-6521-4377-818c-3b5466b423de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "929c1ec7-7b92-4c97-80cf-cb514d5cb284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57ae9a7-db60-4d1c-bf34-0489877dd8b9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb62eb38-f43b-4e29-bb03-01eaf882fd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46ed6ad-082c-4a04-b78c-b31c3e0c3b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0fb1a7-7bac-4b99-8794-150120883ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb885a74-2b16-4df2-a77b-092d97f9ce97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9231d5d2-092b-49c3-a989-617eaeb24585",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6905e71f-7c32-4ad3-b3cc-ba32660c81ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dad96f3-964f-467f-af19-408454d62285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178830d0-2792-43f6-ac74-50701984e49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "29839c4e-39ed-4a2f-bbb0-9b73b33354e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97abbf4-023c-44df-a97c-ff4bff6e1eb9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0351b7d-bf70-4452-bf0b-5c34b57f16cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a533c1-1d10-4e58-960a-57674246f639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e588ffc5-e95a-4472-aa7a-583aa64ea86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "649f8e87-1722-4fb9-98aa-a047723faf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4fb355-5632-4cc6-be2f-7fdf7151965c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44eb7da1-c3ce-4cba-b2ea-5ff35d4c8247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89fff2cd-a582-46dd-b5dd-a60bfcf2fdf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc27968f-cc9b-4532-9f2b-839c45425406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f51f399c-a12a-4567-aa47-fc3d32f6ea97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa65e0f2-1606-4c47-96c1-a0e0f2594681",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af690d6f-d204-4347-84f0-0234cf9658a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914afc80-2ff8-44f2-b028-0ca04b03d8cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b99219b-e899-46c6-aa86-ba02fab9ed0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a44ffbd1-9420-48d6-87fa-05ee22c87ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcc2bc0-0ea2-4602-9784-6402a55b782f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f29b87-59dd-4738-ae7f-5edc63c0fb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e140fadb-c3ab-49e1-9119-a747ef7ecc5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8651601-161c-4302-8321-2d82fbe752ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c64b0fdc-f5e9-4dcb-b79e-ae1a376e1812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696b07bc-04ce-460f-b8d4-2123ceec9b30",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4c379c-700e-4daa-af16-d1633fed9028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f118e9a5-61d6-4dbf-b3bd-da62e3569a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f2ba2f-77d0-4962-a649-c4ee2a4b3235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0fcdce0-a01f-45bb-ab5f-35e2689e10bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd02075-56e4-4a6c-a0f1-e29aa8fcc83a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071a325f-867d-46bf-b772-d42cc394809c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb2fe0c3-948d-4e62-9ea6-bf2cf321a59c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1a6df1-be21-4716-9d04-d4b6c9db98af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b772858-f40e-470d-8d31-b43d2757b79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d92a96-ea0d-416b-a7b2-7cc56d7f904d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e424756f-0651-41af-a2e9-2e6390de72a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9a46c6-36f8-41a9-b26c-4158ca2b1876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c764ccc9-0785-41ad-b2db-2806f3d598ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4967f208-0847-4d8e-981b-4991a1299bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad1ce7b-1dad-45df-ab12-72e992ab6d3c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31eebaf4-6f2e-4a2f-aef7-4e6449ab117e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1490e8f-cd83-4d70-bb97-9be9e9dd6c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f4fef3-a711-4606-85dc-cb09f3d52210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9413ede-3b88-4008-992e-b95b4a82ead7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d687ac3-0844-4a7d-b78c-c3b3ee1bfd26",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bd66a1-3155-4281-aacd-1dcef6a8d71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ecc706-e489-4f0c-9675-2e7194e2e6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98eb1e9-1ba4-41df-9f90-6a436d2fdeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86dd8565-015c-4ca3-9323-2e56925d7f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c3846c-11b6-4a34-b400-788444000041",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a14d8d-9704-401b-a7c1-42d65232a2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d737b1-2df1-4143-bea2-3409e05a58e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3ea461-44a4-4ee2-9c97-2093aea3ead4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e69ac36-7fbd-4a1a-ac5d-2b1bbe6ce6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a69e5c-29d2-443b-a664-2b4726fea3a1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a6a701-3bff-4461-9cb2-42c8608259de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f7fef1e-25ae-4a68-a767-5e32ba9a4cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845e40ea-b4b9-4a4d-944e-4e1ef46e6130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43f129ff-5ccf-4606-8cbe-f44043e3420e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7932bdeb-5882-472f-9307-13421ba7578f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b029451d-8ea6-4235-94b0-3c1910be5128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bd8883-d988-4444-ab15-4f003af7ad5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127f3624-1f4b-405b-8d32-c78ff8b7e524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "37338e51-06db-4264-b2a5-33d8f1012ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5320397c-54d1-4600-bb11-d83666ca31b9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fd9552-6cc3-4461-b244-aac5b6c31eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7f2ad3d-ca24-433a-9488-9e1bde131734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d63e659-66a7-4f03-a5cf-c3dac8a9a45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de4e824f-9e4a-4c88-9e3d-d3547246731a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2bf77e-3397-47c0-afb4-715e105ebf24",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfec656-bd42-4869-9f03-be0bcc531bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d0489a-38e3-4d2a-aed9-29a2f0791913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc66dc0d-c545-4ac7-a479-e3729987e5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f8edc49-359d-4a50-a556-41c3d86ee32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc4ae1b-fa18-46f2-ad08-10018037ad1e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18871fd-b588-44e9-b12b-205f99379e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e24edcd-7526-4524-a22e-516253ed5fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef81a6e-bcb7-4b14-95ef-2270b27c8982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35ee12a7-e072-48f6-a6f2-f929ea6871be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef4ef35-ec17-404d-aea2-8a530b8a85b0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a57aa3-ea56-4995-a0e3-9a6fa9817db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68aee8fc-30cf-4aaf-b769-bd1b9b3bde73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276da37f-ce69-4010-ba08-d512992b9016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a791cdd6-0d62-4129-ad5b-065a7e051674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ba51fb-9f5f-4d9e-9d8e-fef700bb8f8b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b93c33-af37-4750-a14c-1453f0d0e8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fad650-6e95-413e-b1d0-7a9f02f5d050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc1a6fc-2be2-4175-a94f-35432bff8eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "235feb0e-933d-4ec5-ab04-f639eff99187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eca42b-564f-4914-a970-3b1b4581cef3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cd8bec-c541-4140-ae37-fec7c69a535c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b266f4-4f17-4465-9acd-9e9214f217a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a662d6d2-0a5a-4abc-acb9-da6177cb8f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7171ce75-72df-42e8-863b-c014b71e95b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac375c0-7c54-49bd-9bc8-1cd96ad3aa95",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226e87e2-0454-4896-833e-62dcd46164f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2b09d35-e4f7-4630-94c6-5671bac93714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f5c7f0-1fab-4f27-b76f-73dbab0f5086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c42c27c8-9f46-4a51-a634-eade304149c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fef345-5139-44d8-a17f-bca0fdb1c449",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de51c577-882d-4467-a7f9-e9325e3407cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d4088f-d0bd-452a-8e31-98a71d90dc71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db411593-ffac-4ba4-a043-0be6dbb305f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "39785e75-93b4-45c9-8568-c06d02a21133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97adf2da-40e2-45e1-9f11-744778f3c8d5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17c9b7d-8fc7-4a98-bb05-c5e025f288a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa97e919-39c3-4cfd-b7d4-864108625a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2a5ba3-4238-4cf6-b6cd-b9404bb8beb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "133b4751-2e6b-4c9f-87a9-8cefdf800eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4698762c-a44d-4c62-b103-390849fad631",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270451d0-a71e-4d58-89e5-184f29e23d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8898d9c9-b306-4a46-9006-90242034818d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8c35fa-2468-474c-9f94-bb266a444f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "401e3d1b-e8cc-4295-9e0e-46df3a10d3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416b2042-a019-48e8-b993-123728a4f6a8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4945c4-a2fd-46c0-84de-2043f3c35b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d84ff375-8279-4a6e-b935-c36a5eff77e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fc84b6-2801-4ca8-9e7f-2959eccde92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f98717aa-afe4-46c3-aede-e2bf33edf771"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "04569f80-e058-45dd-8b63-49e1dc4ec84e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8fdd58d1-be46-4003-b24b-fe1fa8345b5d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb83941-6499-448d-9379-cb78aeb878fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c9486a6-e741-4a18-8499-09cc2b1c84f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c639033f-2b53-4f8f-b634-f0cba7dfad01",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b29a27b-3ebc-4277-ac4b-8961af73e968"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab31a868-8445-4254-81cd-1b4cb638eae3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "280e6460-97dc-4299-83fd-eeee6dd48962"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67bb86eb-e2c0-46ea-b5cf-cc699d808333",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f93e3a7-dfdf-4f9e-bacd-9cebdf97c595"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e074d88-5de6-4db7-b627-c26124aa96f1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c4ba76f-66e9-4857-94b0-590a08e1de17"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "65d19539-9c2f-44b4-8bc3-abb46f022de9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a63b9e4c-339f-4dbc-a037-0c54b0fdf7eb"
                }
              }
            ]
          },
          {
            "id": "a812bc8d-1bf7-4582-b6fb-248fdbf54f53",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09a8981a-51f9-41dd-b109-0edb87d2771a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6de3b31e-1c4e-4acf-bc5d-95810dacd034",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb69c6fb-2d58-4b2b-8927-467df8c07033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "15eef077-0985-46a5-9d62-6bd35ed8702a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1f99fa-e707-4840-a131-177757dce8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c23b2241-1392-4648-912c-be5403b9f4e6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a71d455-31ce-466b-ace0-aa630098accf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c23b433-1b67-4421-8a93-062fff56c3b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd8e9c19-276d-4697-a26c-672e82ce2f8c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21bb5553-eaa7-4b84-bf12-ccb60ea1e56c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c671ac55-cbf7-4c1e-875a-93b8e9ccfb8c"
                    }
                  }
                ]
              },
              {
                "id": "adaa0c33-580e-4181-bd61-57020a4d56f4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef3cba55-e505-4f79-943e-190c5ec186c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "21a4639b-7ff6-43e7-b232-254247afa622"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "648d21f3-f2b8-44cb-aaee-f9890c41d80a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c99809d-1398-4b31-a282-5635511aa671"
                    }
                  }
                ]
              },
              {
                "id": "8ab8d67e-2c7e-4a1c-b7d1-27fbd037c446",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a10f5cb-036a-4f6d-b16a-b3cd3406bf92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "333a3743-ec7f-4e99-954f-e535f3bf58cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b531754-c6be-459b-b7db-9aaa3ebb166a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11dc5df9-3557-48f4-b34d-27014b8f9a50"
                    }
                  }
                ]
              },
              {
                "id": "6d171769-fccb-48e3-a2e9-17064a14929a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b37291c-ae4c-4823-8079-c4cd92e19f5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d82b7648-a113-45c3-9d6c-c06289138b12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46b6fbeb-1a88-467b-888d-511f29899086",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f7cd3d96-bf74-4119-95d1-b10abaaf370e"
                    }
                  }
                ]
              },
              {
                "id": "d6d4c4c5-0f17-42ef-bdac-a510b526e1d7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40a24ec3-d9f0-4402-9d05-28cd445b9e25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d390275-3275-4cf6-83e7-8eeebe632d9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "322002a7-176b-4d2e-9f25-ce9b6b7125a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b042bb00-0a6f-4825-9b79-705b9a62e9be"
                    }
                  }
                ]
              },
              {
                "id": "839f8be8-f652-4b6e-b75f-497f9d63a90c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77f6f41d-ec38-4ea0-962e-a2bfa577a219",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e24d7f46-783e-456d-9821-44f9c300706f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d33d871-388e-4455-a737-bbd8408b8db0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c2333a79-f264-4abd-8cf6-9ec504198ea4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2847568b-2b0a-4906-afed-1cb76d1f2a0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9bfe1b4-663d-4a56-8d19-621e770b7ad1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dc18e1cd-94da-49fc-8522-03d3c4fef96f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7cc698b7-4fb5-4bdd-ae6e-ea6675b77d24"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "283ae411-f364-4c72-a011-57375d9241a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "93b89e25-5b6e-420b-92fc-a714f06d3611"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ad4363b-d79b-411e-b3ba-6dc8dbaff408",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b253c20-a4df-4ccc-9d8d-80a9190eef42"
            }
          }
        ]
      },
      {
        "id": "3622288a-e81d-4445-8d14-a5417cc13bd4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0f094d86-fb7d-4155-b134-78c7622bb6f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c0888fe-ca2c-48a7-872a-b0c301fda3b9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7a30687a-37bf-4e03-a814-026a220ce7f6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cde57f-698c-4d19-b1a4-7f33dfcf1921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b9c49c-10a5-4517-9339-faeb1e76fcd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d435fbd6-bb86-4834-bc16-0657e240a393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4e888c-6465-4ee8-b7a3-64914f09afbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229691e7-314b-4571-936e-ba3ef6c0d672",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11135100-66ad-43c2-a5e7-1a5cedbf480f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96edf73e-58da-4bfc-8ac9-a67404e94597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1341e6e9-89f0-4a88-b9d1-773fc4578f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "64b9ba94-91a7-4e14-a13d-b6660ad00aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952b5a71-1657-4659-9523-68748f017c4b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cdec66-bab1-4776-be05-60e24251be74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d658364-3fd6-4913-bd0d-24f0508600c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a448d76a-88c2-425b-ae27-741d61000b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "859c7c13-4df4-4dc0-9510-e6f00e950523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747eb8d3-2067-4cf0-8dd1-cd9de764c396",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "418685a5-d04a-4d13-b41a-7e05c5153fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a3cdd9-20e6-480f-8863-a742b2b8e22a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d694039c-a889-46f4-aa83-6e65775de38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6159a10d-b264-4758-af38-8b2f08aea663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4474845e-2329-4dd8-88a1-1aa22342a29f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3ad71c-9389-488c-a053-19b821cd1d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a24e3d-4bdd-4213-bd09-dc06f6f651fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27cb1fc-7dea-4ad7-9294-c7f8115ef06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f68bad31-0192-4c3c-9c52-7307a4ac5512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd70e35b-9ca4-4881-9c4b-6c4a45b084d3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea4f26b-54dc-447f-90b7-707a324271e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4225631-750c-4e65-a87e-cbeb36f3b1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d047f6-4802-4491-9dcf-5fa26dab22d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5db4c24-3aac-48d1-8d59-cf045681d3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5590c5cf-58a5-4e8a-8bde-1a29a737c6ac",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef98865-b098-4221-b94e-1f50fec2b7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e5e809-5e72-4364-8e25-83be90696261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4e1eeb-cf76-425a-a9d3-41419fb53337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "88bbb334-5607-4d75-a0aa-a96fec7c765b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb77f78-e464-49c8-9960-4c779bb555e0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9f98db-67da-461a-a178-fd0937cb925c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb0306f-6418-46a4-a9ee-a6073ea04ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9836edf6-bb47-47d4-ac75-fd750d55186c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5364147b-0630-48b9-b4a7-9b1c8d74ef11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb1b075-d3f6-4277-b1e3-ea3fa5ed7833",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be74934-6261-46b2-9f40-3fbc8a4c5873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc086f6-ddf8-4c2d-9f74-c5f50a1ab867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b23ffc2-1730-4571-bcb4-7822cb22b096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4249644e-38b9-43e5-a2f8-06459b52337b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971a6c98-daf3-4256-9eaa-f4ba804f10bf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "093124a1-6e5a-4ffd-8777-fd518b60e628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6db4e45-9fe4-4298-b835-8a07fc5eeb28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a99ba5b-b5fe-4089-9536-c9caf394381c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e99ac29c-a88b-4840-b238-5a71939e7147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944785ea-696e-41c5-9f2a-178272b14ad5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbcbf444-cedf-43c4-8db7-8671b2b0176e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9d969c-ec00-45d2-b357-f416da7808a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9a5683-0b1b-43ac-8786-e4698ab3bced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "12da40ad-a8a2-462c-8db8-016bfb3f03d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8034c480-dc4f-4d34-bdf1-c26c0896cbae",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f49a5d1-93cf-48c5-84a7-6695f78f25f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a85c9d0-e0b6-43d4-b73d-666003922166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d99681-0077-44c8-8b73-bbd0e20a8eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d693ea51-cb6a-4226-a7c8-5348af556239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0010948-d725-4858-8207-2bbf9f32a6f1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01ae92d-5829-45af-b711-c486777c9e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131cc408-4009-4576-b71d-ef3a02f9a38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a999c0-e5bc-4b63-9f88-bbb92e41a443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5064d46-c996-4ed2-b296-ca15d4e1586f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff657894-e807-4fc0-b00c-077210f9238d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc8cbdd-011c-45a9-b04e-164851635217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb76d657-950c-4fac-b6f7-640a88e68826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0d5c38-7f6e-4090-a0ae-662215abd2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8667fe04-eee0-4a2e-89d4-365f088b4650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170b0003-2549-4f5a-bedf-793543aa4dcd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac771ba-5730-42ed-9e82-f6be4554db3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ccf793-af0d-4ae1-9ba4-3021fb0a9c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5671ae3f-9a8b-40e2-9c25-5e7c23292fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "afcc49c6-5afe-4bff-b33a-fb79e8de0475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7e13e0-098f-40ab-ae84-a038ff462627",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bde170-1a20-47dd-aeaa-4cd320c6225e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362820aa-353f-4de7-8c69-892dd608b940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7437e4-ef1c-4b65-a891-923cfaf1878e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b232cda4-3b7e-4d7d-ab4f-24bf7b230d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be04640-7ea6-4abe-9672-30e28220bbc9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddd39a9-7970-4079-b47d-34c11e6b0071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59699f48-435f-477a-94c0-67750d8e0a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8348e33-bf5e-470b-9244-85fada260a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1757c4f-14ee-418d-8af6-5214a9e20ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2269528e-2646-4e62-9146-01a359a4e8c7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5180713-b804-4b6e-9a0d-37f3fedeb695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fdc980-54bd-4bee-acd8-d443ac5d78f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6e01ae-ac35-4f22-91ff-a3024e4103c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff89829-d4c3-4acb-a7a3-78072d041742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b719a1e1-9686-42b0-b5fe-59193ccdaf95",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eca693d-44c3-46a5-90a5-d4a263cdc847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "956c9893-19a8-4daf-9237-654133a43692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2fc9f7-acd3-4293-9a70-f2ac3e41b37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a695f92-2425-447e-8c23-7903ed968db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a97a5fe-657f-4435-a2fd-327b8953e4c1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4bc236-b41b-4f9c-b8f1-d287bb28b7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39abe3b5-e102-4eb5-bcbe-e4208b0269f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b37f4a-7e9f-4559-abb2-d2bb2fdaac9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "140995c6-422f-45c7-95b5-2858ba44307a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00a23e3-7536-480a-8f18-72cc16d4b5e4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b65f0f27-e8bc-4afa-8c33-cf5352fe702f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c48e35-4cc5-45d7-8a7a-c45d59073edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4db42e-3610-44f0-be63-f892c6c9dfd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66fc193c-2ee0-4b3d-bfce-8e1fcf703c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03002dc-ed65-4ac3-802e-3df3515f6492",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0e13e2-3e84-4b27-8af1-c636ce03ef18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a54afce-d1ab-455e-bf0d-9ad54740b2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e211835f-0eb4-45d7-bc80-634201615dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7284a202-0755-4303-8a80-0f7e99fdbe6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61b3218-de6c-4327-95a4-e8cbbe729d5d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977a82ed-fb70-4906-afa4-cf5ebed6dcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18df1435-dc3a-473a-b262-92ef23dc011d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965a8cce-d64d-4d05-8247-13a959fd6af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d7b8097-d81e-4537-8de9-4acd8a6a6af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a8aceb-1493-4536-927b-98ca6b67c865",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f67e60-6496-490e-9c43-284f819c60ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3334be7c-bcf8-4065-9473-7577fe877ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c814150-de5d-4a4f-9b33-4372a3e83b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a0c980-6e2d-4c24-a6d4-b01fbd732b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41accea3-0696-4322-b99e-eca85f8eea48",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d060130-32f7-42cd-8827-b257d013ac44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611ba523-62a5-4b30-ae38-7ddb1ee69979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0bda2a-a845-4950-9d45-2121fa07be5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76972942-42df-46a0-8d2d-9a1c5faef689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d94fa8-6b81-4368-a840-e81e98c7b18f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f46800-881c-439f-bab2-3a0cd581e2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1fdb681-e577-4c56-91c2-5c078174e8d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e6d4ec-790c-42cd-8806-60f5a83924dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "821ca71d-4d80-460a-8ace-a9f6506cbdd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9610c21-7901-4014-be3e-691681180d6b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfcd212-18a9-40ef-b947-b4f8ba746b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1aa06f-0ef2-4d46-a87c-1e6a76206065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171b5165-9ebf-463d-8166-86230e251e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d097732f-35b3-4ae5-af38-148c21443eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8097fde5-64ae-432b-aa78-32698031394c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84e09ac-f021-4de8-822e-12a690e58d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdbf290d-e200-4790-afe8-619347b945df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c838a8-499c-497f-95ff-1dc3711bb115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d295327-2b8f-42ef-90fb-b76f2e6e4989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fbc510-99ab-4730-9f9b-2ba2e52eaef3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be377758-9d48-471d-9e76-bf5a91034023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de7d088-b8f2-4e1b-8b92-7d98ec3073b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5e5bfd-fa1d-4173-9da5-8cc291585e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4329c0f2-269c-4bdc-b6af-846e886ad521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db4b3c3-271f-4253-8f56-6599521e5ead",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee36467-90c7-4098-985e-86861abf1141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33a5ba8-6867-475b-afe9-753d116aa43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0856d273-c8f0-4755-977d-c588241df166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "109a9b46-386b-46e9-b523-18113ea3c1f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1a86ed-01ed-4c10-a7d6-0e9aef3bd62f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c5b32c-45b7-4f96-9167-89d098624f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60945a0-6a78-4344-b0b9-bf303edd4d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4793798-f9bc-4bcc-952b-dde249f18728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d41a101e-8133-4150-ba57-351d450bd02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d819cc-2825-4222-ba20-d4bd224b8f1c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f2b4e3-af63-4c20-b281-d56958910874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec0099c-a630-403e-92ca-5a70c2f7ed45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59fdc45e-c615-4ccb-8dfb-4f72cf9ab2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b5b160a-4236-439f-9ab5-5e14fd630c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ad85e7-6719-43d4-b91e-c28a600daeb2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb761fc3-4c8f-4504-960a-5b98ae6fccec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2593fccc-8a61-44d9-a807-dd6d39414d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dad62f5-879c-443a-a9d7-aeb49720f8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "135ab65f-5eb8-440f-93eb-791407158a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daffbda7-3144-4de8-a68a-627e459ec620",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9425b7-8f91-4b8d-a5dc-432bb4a999cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b74495c-3e98-4970-a9fb-25fcc141be6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aebed86-4ee1-4b3a-b42d-38cf8f202713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b288db5-d349-4ed8-9195-fc4307743fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88aef9bc-e8e1-4a61-a87e-4990adc26451",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f87002-bcb9-481d-bc17-cd654567a396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16783a57-b89d-4cb8-b31c-c324f26aee83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5babd89f-0b74-400c-b42d-d732a74141e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ae9a24-ce02-49af-8e28-bdab3ded4286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976d76a5-d177-4456-bcbb-b75a0ab395f1",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f874f5f-d1da-41a8-8a51-fffade5622f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22caea70-9bc3-4bd2-be92-aba6acff5f94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce44df9-a4db-47d7-8065-97a07813585d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "938c9ff0-6e6b-493c-b1f1-79fc3b42fa80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cd2d89-cf17-4a4f-8403-27c1a946b86a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c71e80-cc76-4863-ab49-2a331e66c40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd10028-598a-470b-b610-9337e6f6fdfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61a1ac4-d9aa-402c-9779-6ffcc4612f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08f20feb-72cb-4a81-bc55-4b7c46f516d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f977986a-4ed8-4b48-8637-7f86910f8421",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92214535-0df5-4a5b-8bd2-4141f98d8450",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5cf839d-1d89-4f53-9762-8e1bf01963ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4e4d64c1-829f-4338-b8b4-c58f317f172d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf88e93a-917b-4b68-9b11-394d2bd8c440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4928efa7-ba85-4a84-81d9-bbf634ed7701"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f50d14c-c42d-466c-afd9-d25d3bafdc7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3efb2349-dacf-4140-96df-d8a32e4a6e56"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96f2efab-e4c2-47d9-8bc0-46016c8f8527",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8af7ec92-1630-4951-b14b-a8bba6d10f33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14c0c182-18ca-4d3d-911d-c8cb4dab27d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "24e1dc5b-337e-49be-815d-79554727b923"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c21e137-1f4c-46a9-845d-01f20a1db900",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d14977ce-e23e-428d-85d6-c5528de8e90d"
            }
          }
        ]
      },
      {
        "id": "698a62d3-23fc-4366-9c43-4221f92f4f03",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6b6f93a6-66c3-497c-aa1f-6f2c6e6a4d18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e539655-f7a2-418f-b4cc-5d1b0bb76104",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "afd42dc7-a04d-404f-b7f3-1006b22c1b15",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c47bef-76f8-4abf-a92d-5e875682729c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f5ee73-2177-4d09-8155-c6c7daa34f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9828c47b-fef0-4305-8042-cde25598ece4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0664fabc-aaf0-4102-a377-272a4db4dfe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f9365c-c65e-46c2-9164-ab6407f9a9db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904c6ac4-de13-46a7-8852-7f9c82b02aec",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b475f8dc-3602-4c6a-9d38-be785bbaaf2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5044584e-bea5-404c-9d51-b7cb5c1aa710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f837498-89dc-449f-ba67-43dc4e3d7b69",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe14b7f-258f-4291-b560-351dde7cf7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed431cdc-e0fc-42c9-b9d2-93d333b0ca60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c02b1f-98b9-463f-871b-e4115bef4b5b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45872f5-9683-46f8-b7b3-6a3658beaa32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfe7165-9ef9-44d0-a4b6-7fb47edb8e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103112ae-8f0f-4355-8774-ab0b6376c806",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c48051-2f75-4a1b-a7ad-60859fe44fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623be8bf-9533-43af-b3f2-3ef817aadffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f201cc75-5f32-4a22-9aa0-5e3976709ab0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96ce8f6-9aa9-4de4-ba56-3620c5df1631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6087bc-f897-4ee2-b88e-e73edd2c08b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84346bd6-ef5c-46ec-aaab-ef8b50b23bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d1c870-e705-42e5-b704-9bc5fb58ef51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7223573-6e09-4a16-86b5-010e51accac9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d4124d-085d-4628-ba69-543230800645",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f967d6c-2b08-410e-95b4-5e25c78352f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a8fcdd-e693-447d-8446-02e9d7955585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f44be0-a65e-4c60-aef0-6aeadb809b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69657ef-fb5d-4848-9c53-e665fe887d1a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f39d19-a783-400d-b9c4-50751c05966b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0278ba1c-2b2f-44df-87c5-5c0c983b8e37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77909f64-c811-4c6c-97a8-951c8d6dfb20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8abeab23-18e1-4722-8fe3-3f5d7f4d380c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb1597b-01c9-4a02-ae2c-518a7ea6f6ac",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21d35e1-05de-4639-886d-6fc816833516",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "681765e8-0100-49c0-ba43-e7f442b1fa4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5309114c-94d7-477c-bbb9-25c2810fcd93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f848ccf-4b1b-4847-88c8-0ddcbd0b8f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04950491-2766-4f71-af33-f883439ee864",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132daa65-a7ed-4ad2-9db3-49f512436eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66eacbc-db58-46ee-ad95-88e03f658a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d407b2f3-831c-4eb7-8411-2e594d579d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b940db61-6d21-4d18-8a9d-bc7d330d40de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019208a1-6614-4749-901a-56763433cd24",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37772c2f-6c04-4029-a8b3-22e0f6ba9e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf58d1a3-e540-4235-9957-84d8996ebe8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5bbb4d-399d-41c3-b4d1-9a439d3c9392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92e65d2-b142-4136-9bd6-406f529d7230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dbfbc0-0c61-4574-b016-0709a607b619",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08375e12-db25-48a4-a8b4-096bd74ba8e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67d8e4b7-6fa4-491b-a328-9e728830ac93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f149e3a3-a39f-4021-88e6-a59ef6c7e310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb749c7f-95bd-4248-8889-79a68be96d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293ed62d-b9c7-4021-b671-c97b9eebef0a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e594f523-88e1-43f5-a33d-7203721866e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cf9bbc1-0f3f-4a2d-872d-bc19028ead42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2287e1e-e971-45c9-96b5-666ca6de0bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4eaec75-5a42-4ecd-af8c-3de6efa88545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d093a10c-7a56-4f7f-bf86-5b96bdff5f04",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240fc286-cbeb-4c4d-9ec3-f536151d66c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fbd02be-a71c-4e3b-b37e-aef674639c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f655269-3137-41ac-9115-9546fa9492ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2eda8d1-a9a3-49b7-94cf-a3ce5795d49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e29a1c-d74d-4a5e-9178-95d2ea0c7928",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30071a5f-e361-4b11-bc0b-086d5048041f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54a8593c-fa62-4f9e-be36-7cd7417344b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d0bfb0-9266-40a0-8e28-a3c65d8d1d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352fb34a-51e3-4d6c-8131-59c5ed4f34c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d5304a-7d49-4b41-9089-d7e378d56782",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063a6e4a-cad4-4fb6-bf47-92e58b85a371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8521a27-51a2-4511-916c-1771b1bdbacf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723478fe-de92-482e-8ee4-caa677232947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbab19f8-5e45-4366-bb02-8dea4c2fb5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7a6309-6b01-4cae-b5b8-aeea627ba38e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a016fb5-819c-4a43-9cbf-9b9dc3febc9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ecfecbb-a91a-48ad-ac09-52f6fdad63a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0519cdc-2b38-49fe-95d2-596a88b63484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789c35da-96b1-406c-a971-f853d311ff3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fceb8c60-7950-43f6-aa2b-61da3f955cd5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774d8a4b-c3cc-4090-bbec-89277d09e61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5462d4fa-59dd-44ac-bb29-cbd2fbd48915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcffcc3-48a0-48b8-94d5-be693d4f5275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670ef67d-75d2-4887-96be-5baec9c866c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29851cd-6d76-4ddf-a73d-f6de53592e56",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ac23e1-6561-412e-81d8-fafe173d4546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ff73f4-f2e0-4fa1-8e1c-41d86d9fd6cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28cfd58-dafd-48a4-8fff-f76c93f74786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6558e19-1ee3-47d8-a6b1-d6fb5cf3b1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763badfb-2e0d-4193-9312-f1d80f3b5115",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48852e37-1639-4af2-83c8-a8e4eead6d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b6d2ca8-5bf4-421f-b86b-719cdf63e1b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "887348ce-23ee-47d6-8c3a-a664b49f4655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16ccb23-0daa-4594-99a3-8108e6d09979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe8903b-ca6d-4dc2-bc89-b366dbbb949e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9bf7b1-d0af-451e-8959-0286cb78f659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f2c413-4f81-4552-b132-8ea519fa6b62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2420636-c36d-405b-b154-27eb3ebe9ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84bc8e0-a690-4c8b-80f6-c3d01f133de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ad70c2-b998-4737-906a-71e247ea5485",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9442812-7010-47ab-a6e0-c5d5b6ff4197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789efa2b-dc2d-4f61-864b-2ff4e1ad48b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b323307e-1d0d-4ca2-b45d-9ebe1d493005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce70658-8f4d-4c00-88cd-16cf02b58c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7400962-1870-4470-af90-e47503f0cbdf",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f9eb77-1bf5-4e11-84eb-e2cff6ae7ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbf9c121-54e5-4631-b303-cb63b45fabc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4ee77e-d4fd-43c8-b2de-44991daae624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac29e58-252f-40fa-9a93-fa1cf36dce06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe698e1-e77d-4612-ba2a-7fcca4c07276",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f7479d-1933-487d-a701-9583a5efb96b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd6be5d8-db58-4769-abe4-a6456e48c17c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51deb5b8-b284-4a33-ab1e-d9c2624ccadf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31dfb003-418f-471e-8c3f-1640b9a131f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6805de42-1481-4ab9-b2a5-a35dab2a2bec",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f55c19-4a8a-49c4-841f-c4ed4be99261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eb876ac-1132-416e-8d63-0fc70004f606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc971f0-8637-4847-82fc-d211d45e5ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e816c4-9fed-445a-8a12-dd622a71e2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56571be9-2096-439a-977a-931fccaad328",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f43beb-8614-43ec-b825-1630b013700d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08827c2c-b439-4f15-a043-720b9d6d5798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff4968c-8bfd-401e-815c-d414b5faff6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e2dd53-66c5-4fe0-a4c1-f930db6365b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d660bd69-61e2-4011-9552-80719ad971b8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deefcc41-77fd-4d45-8084-01e71ffcf6d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e38aba0c-cf7e-4c13-945c-daf9110eb958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b830333-1485-44bf-acd5-dc2edc8907ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f905ed3d-ecea-4338-a3eb-6ab26ae2bbf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5133c17-2949-4123-abe6-eb49bc8ae378",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c153d1b-7873-4438-b282-c3266ee34893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d35ff0d5-c7de-4932-82da-10dca1199274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5b701d-8abf-4585-91a3-0a535fa09bf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74880dfc-14eb-4ed0-b97e-b69ff15e2b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d27e64-1c31-4a2e-81b2-148fe72be1ba",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c67fca-e4a6-455e-bb17-89dd75c39c6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "459de324-8d54-4a7a-b2de-62088068a4ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8811255d-024e-41ec-9366-5026b50d7339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd13741-27cf-4029-b59a-dd2c38a302dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b97cf37-1e49-4521-b274-297945dcb4b1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab31d17c-eeeb-43c9-ae18-dfb7eaf45c07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe5f5c38-b1b0-4398-b3db-96daf32b57aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a958ff6b-cba4-4f8b-a300-f3a4e8bba5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04cab03-f56a-4b6a-9545-136993b22873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e86b22-855d-4eb3-8b86-7c7862d07621",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4a55d0-7a8a-4167-8c5f-11b3b166d982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45d4a62f-c530-4400-b370-bada9c399ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70df90f-8f93-4a71-815f-ad5226c1600e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f316e1e8-f6af-4ab4-987c-52d0f00c9d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578e67e3-ff90-464a-9a71-80e5d94dcd4e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdff9604-3897-46a7-87c4-1efd22091475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58c039be-98b3-4de8-8f3e-5f0252704f4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bf4101-1908-4edb-99ea-fb0ed911a066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926f91e2-1fdb-4dab-a541-437be009a8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71ff591-4de0-4b58-a081-04d77e29b14e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736bb11e-cb5d-4b10-9c29-513d9fe22b2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0644318a-b61c-4bd0-97d8-5f78ca461b8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57bd448-48e9-43f8-9b12-09881c6595e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ab02af-5f40-46b5-9a20-8cad933c90e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b2a268-8b6f-466a-a236-115ba756dbd2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb9bcaa-ac45-49ab-958d-839f119c7ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092e3efe-02f5-485e-a8eb-3bb11eac1bd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e9674e-b0bc-435e-8bbb-11b25a489a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059515f2-8590-4a72-b3dc-e21e8bcbe2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2a9894-d878-46f1-924a-436d62021a09",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9974cd11-9e13-481b-abff-e31b732ce551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba3b9b9-80b9-46dc-9e24-e8f1f33e1201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8fc4e2-eb87-4ce8-8059-df83f4dd54a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e369e5-1713-41da-9fb1-4eb00c9bf82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d31dc31-0f91-40ff-995e-2acdad59b1f7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03060a05-6e91-4e58-b932-e1456c7ebf1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07647dd6-6a96-4dcc-9397-f795e69e4dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d078244f-0007-4458-a82e-1e88b6751a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "987fcf96-b5aa-4923-b96a-8b688237c70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f73b4b-ac3c-4350-86e9-abe3a255b170",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca3fb42-648f-4a18-9e65-ce0669c30183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "386b6e23-3f39-4b7f-ac45-ca19b2111cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a77fad-8b2f-403e-8330-03e70fdc6fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd8374f-49ea-497e-b6ca-5792b79e0b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a175c850-91b3-4929-bea0-0ec4b1f813ee",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea85319-5f03-472c-ac02-0eec503aa4e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad673aa8-2cc9-4cd2-8346-b2ef2f143d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbd1d4c-3c83-4b25-a485-1765f0cece11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2ac5b8-8a5f-46f1-8482-69b06d37ea6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c6a05e-3d9f-4c91-99ff-a014ccfebe13",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6688483-fbf1-407f-bac9-ebf7d44dab5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5352c8-dd24-47c4-b238-2c34c28efa4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc64fd4-a1e0-4038-ae88-a5966caff572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49652686-074d-42eb-af57-023c470e1ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6238da04-35b6-404c-90bb-bf14c0723341",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74a5ca1-052b-4c4b-b7e1-8ebcec1e0bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de53a1a9-7a01-4ea7-ab09-49d4efcffd19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9db98f0-8f41-4d3c-92b5-2c089bf2c311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15b1b3a0-cd72-42c8-ac40-7532d8099239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63f1f4d-33fc-4e3b-9d68-1cfd316585d2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53164e69-2db0-48ae-9d9d-ae414237e88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076a0432-f65f-4eca-b3de-cca3b49a21fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e1fab5-ebae-4406-85dc-c1dc3576a24a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e02f785-74d0-40c7-a220-96c610cbdf27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3397ec4-4885-441a-aa8d-c318e5e4e5eb",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7306111-1ad5-44cc-b936-0e2f28b55667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7960b7b-4154-49e9-a329-49c2a5799195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a515598a-6f02-4937-93b1-956d3e4d3e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62339c24-1139-4875-9d0b-da7a2a88d641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990b9755-c9dd-485e-90ff-15fe92031155",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208fcc12-2b57-4767-9f2c-358d30c333e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac86000c-116b-419d-9292-72a0893692c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3354de25-4ba7-46a1-b3b5-7f5220dc8284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcbd939-595c-465e-9ff2-696da4ab26cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7097d075-7c42-4cb1-8ac1-7c409ae5fd2a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40150e7-aec0-4875-8a96-dac80cd18dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab528a9-e148-4687-9cae-8dc2598eba2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2bceb6-b460-4e16-98fa-2c66957b1fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa8dfcb-ee54-468b-ac6b-f741f0c0888e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149e0c03-e424-41af-90ed-66e3c9481e22",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ef0874-2062-4e26-98ff-2cf9822ef6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b781ed8-f8e8-4c7b-8d2f-a47e5a3347cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "295d7da7-4b22-4042-8c3b-5444dd4f09ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b52520-d686-441c-9f8e-c24b37a44258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a399e1-fd25-484b-89fb-4c7e594194c7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a818648f-6b2a-4b97-8085-47c4c45d9ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20957f65-a369-4f6c-a2a1-a4f7b798389e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ca9e34-7811-4e4f-9324-c1ed4ef37ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f123bb3-4161-4bd6-b459-8b88aac0acf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39aa361-69ce-424b-aead-1825ace10f6a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec53e01b-5d0b-4757-b822-d1eb1abf8a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882ef928-48b7-4b46-94c6-6fe0deabecfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21eea9a-c209-42c4-9068-6057528cc7ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0ae618-6f81-4eff-ace3-685c91e0d2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0e3c2e-9996-4650-8893-4669c9ecc97f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80456a62-81f3-4cc6-a340-432753324595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697c339a-8a16-46cb-804a-46741f073a14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b4073b-abe8-40a3-8a54-fad146889871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3403457-353f-4e15-8f57-7a2437fb463d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e968157a-5770-4553-b432-8f57348f8025",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd891c6d-9713-4fa7-9dfb-d9b47ae7df8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b5c0b7e-4702-41b0-9be3-d994c9564350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de02ead-1254-4a25-99f2-8665a13c4fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602d4fd9-4b59-443c-9286-341c2e32a9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1211095-7edb-4e8f-ba40-8f8bb6994a47",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447d9cf2-2c56-4717-88e9-6150f4dcd394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74cbe853-1350-4077-adcf-4337ac61a2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b054c8-a64e-4178-b8b0-66a95b6341e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "647c5083-58a5-483e-a878-75f3120ac484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ad209a-ea29-4109-ade1-cb0e609b5d25",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fa5aea-1de2-47ff-a250-c47fe9a11560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb2dadf-ee8a-4e2a-872c-f8ff66e228f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58c77a2-0bf8-4f58-8cdc-15e5cf9c91b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64441590-711d-420f-9930-24bea5a2b338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57fe382-231a-4d37-9bd6-43d06ea79446",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6542321a-4146-4d04-9a31-49972dccb5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296ede60-a91f-4f72-9422-083519a54d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd041e1e-478d-4ae9-b612-1f88516f8ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94daa13f-7a1a-45bf-9009-1c2afcbe9480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b596fc3d-5fa9-40a5-b67a-6e1de1572f4a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fa693e-d592-49b8-9af1-50b3756dfa16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5d807d-cebc-427d-bfa0-2d944123d39f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76ff960-4049-42cf-9c18-5effaef4aecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2080cf16-6148-408b-af3f-a327cd5efe52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6060c1-46ef-4829-81da-9ad30fe78f28",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5829f11-9631-407c-a874-06355c50937f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf21ffdc-3a41-4b66-85b8-c5cf372c1387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb7ba72-8ed7-479e-9222-1dd498551736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8a1800-0838-4ca4-91d8-56d2d75053e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a031c0-b368-4983-b6c7-5226ad7bb80e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ae108f-c4c3-4d72-9dd1-718fcb9c557f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabbc819-c6a7-4f76-b92c-c338559fa708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "515c8ff0-d289-4d68-8f57-06567818161c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8af2ff-1898-4a3e-8bb2-7d850dd50809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d6ef67-4c2f-4754-b78d-bd83dfe852a4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c82ec4f-9945-460a-ade7-1246c7953d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4f1752-4d39-4ff0-90f3-94466685a496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b69e09-1393-41b9-bf98-5e2efb84449a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986d161d-b3ab-45e4-838c-388c26fe5fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c404fba-001f-4ad1-b7b4-ead877888045",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a7cf75-fc33-48f4-aaac-013a3f52855a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de5ca87f-5120-4cc2-a7c5-07f4a2ca3e79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16704398-97e8-4f6d-b8b3-6e2b677433bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3cf521-d6aa-4418-b5b4-aef4af768485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6a2512-b32c-4243-8c39-50a32691a14c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987329a9-e0d7-4f3e-b060-d0790bec64b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e044700e-cca8-4728-b0c2-b2f087e6564f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b98627-fe89-4f6a-acc1-33009df92525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2b25d5-0e54-4d40-8dc5-bfb68e7bfcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76604e11-5ba6-4add-b39e-0f56717bfce2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca0ac26-6957-4f40-b99a-163a886e37ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70a2542-1482-406b-85d1-56d21b6f5d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3740baee-8ac3-453e-88e9-3caaa705c631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24bff249-b3ce-4281-b961-7b198baf8aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1694e6e4-0cbd-4b1d-9e31-2939adf1e5e6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14713b0f-f68a-4a74-8686-b1870e2c2fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "003aa73a-1f63-4728-b245-1176318d32cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7938ef9f-6857-4a0b-88a2-83e670fc874a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da096996-f24c-402a-a2e5-850dd70e28ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b360f630-b868-41e7-9503-e8e5c8923f6c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4e1454-af3d-4586-847d-bcce2a8fd883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b363ff-5091-456d-8713-a19315e6e771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8351425f-d803-45fc-826f-9b2a4c400bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40227147-9d36-410b-8c0d-2f0f29aa98fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fb7f06-a7d9-457f-873b-cb695e2c6763",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013ee666-cb3b-483f-bae2-ed1cf470e67a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895f6195-a4e3-49e8-84dd-1de7d72d9dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4635b1a3-a603-4826-a235-385f09c77e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee6f6056-f6a7-4b11-85b7-5ab86f65a38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4544627-f4d4-450e-8759-f4c8a5c75e1d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0eecf1-b067-42e7-81a3-cc72aa28c99e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "751f28d6-7e97-439f-a59a-75623bde83c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f390bd4-8be3-4d9d-becd-88c9aa40f2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d56e494-75c0-4389-b87f-6c67f23a31e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f135be6c-63b1-40e4-8958-27fcaff2d444",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc0a48d-e347-4e74-b7da-bed1509382ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bfe72a9-6912-4190-858d-43046f4b5852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2715697-3e38-43fd-a90d-13b3a5a0e215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a32009-7728-42fa-a10e-60e32a667aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771f4026-cb9b-44ac-8923-86c66e3dccdb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f66b00-746a-4de0-ad58-ecab3906e7bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17a4c48c-e211-42b3-8942-d03f275e15e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c5a98d-276f-4d52-a1e0-d11e3f597974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0ba79c-b217-488a-aa89-0f4ceebf53e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70db8c66-3d99-45df-baab-68cb85482940",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d676d1dd-f211-4331-a801-3f518c8f0763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9db8db7d-fc8d-4ca3-a8e3-992cd438e654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c845b0ab-bc5a-4f15-9358-397b9bee3502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9756ebd7-8a1f-459e-9648-0fc02aedcc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c019f3f4-f364-49ad-bc34-b7ef1fdec332",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea150398-121e-43b3-b74a-e1fdcb95cb4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9005705-0ac9-4589-b469-cb77bfb6126b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb18aee-e167-443a-9635-d337aa0642be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3c3733-c4b8-4c89-b244-57ce29d8e240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fc579c-3deb-4edd-a6f5-0da8062003c6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5021ce7-da43-4463-805f-7319494929b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5737c5a8-ec5e-4d5f-9917-e4ee04de895d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76af883d-a164-4a74-9f7a-b7724428b904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16957466-ed9a-493f-a445-e4ac25fcd386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6a1da2-760b-4846-87b2-fa9c85507f4c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7390fa82-fce6-4517-8e55-117faf815d91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a400e103-9f2a-4ebb-afd6-0c71c5562539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16578be0-251c-4679-b661-afa3cefc8492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b052101-8ba4-48c3-9153-c30b6b23b3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3772b7de-befe-41fd-8049-a50eb3834f24",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8b31d9-06ef-47cb-ab53-9b0ce9eacfd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ea56e48-fd06-4828-991d-dd713041d3e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cba9aeb-6b23-40b0-967a-7b16ed12aacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de816232-7228-44e7-b34c-3b1e819906dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9246cfaa-8b8b-43f0-9ce8-edd78325a029",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bc8d3d-ebcd-44bd-9b85-dde01aae3e09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49dc458f-ea23-4b79-a4e2-372176c73ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99c2231-c399-43bd-81cc-7d25d5192ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828a8309-6dc9-476a-b5c5-b940f218937d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68291f8-d371-4f8e-bb4c-c06cbd775bc3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0116354b-f1eb-4ef5-990e-dfdfa8e25be1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fae47031-63d3-4edc-ad79-73db43533264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f147f2-c101-47a8-859b-5879ae2cf526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "477c23d3-423e-4380-9ef2-0364316c45d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cbab93-1d6e-42d9-bd8c-5fe567241532",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23543b2b-c512-45cc-8f37-2e94af06ae5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36994180-069f-4b2a-a2d2-d700235aa57b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11f3e92-a48b-4275-9b0e-8bfb3004ea0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9215d8-e860-4910-b495-c53b6ba2cc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37468c00-757d-4022-b7a9-225308cc9a7d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2c2966-9d98-4951-b949-0f5a23228c1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b12ef33b-e1ab-46df-a48e-1c1a3bb0e53c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52202f3a-a928-47b3-9d98-3c264adb35cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e66f238e-dac6-42dc-a4d7-f0e07c8446db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beebd337-5178-439c-ad92-7904c712b3a8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9ab7d9-c626-458d-92ef-57468991ad6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8155f4c-b154-490f-99cc-401c0e6385ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "360ef55f-84a8-412a-a366-6617bb19db6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1632cb64-63e0-47b0-8e90-6a51fa1bf427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5feb6479-e42b-4bff-9c27-b6677f111902",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f74b9b-7ad8-4fe8-ad57-468d45911445",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bc51d64-c859-4591-9666-dec7427fc6f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586885d8-708b-4c37-87db-5ff0df3873c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53be7433-271a-4e87-bfe2-ff38f22a7916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad9bd34-dd70-41db-9253-f5967ac18ec8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d4be59-66e6-47cb-81b5-8a4c59d18bd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a48b6902-0749-465f-b896-96bbd8b0a9f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b431cb8-a71e-47e8-9a68-2f67ad2c0622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef128dde-0009-4672-8036-e267c830bc77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cb4639-bba8-42a7-8b8e-c8fe9d134df9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66a3fb6-5bb1-4665-a71c-ed605fbe6dfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c910da16-caba-4207-b68c-a20326fd3a8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac95953b-18cd-487e-9851-7a056e892a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c2907d-f90a-49af-82ee-7e1e850abd0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc13123f-82d4-4704-9cdf-13d61a48fbf2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628907bc-f696-4567-94f8-8ebe3c130494",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d2104b6-5005-4d7f-8ae6-773923e59a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11459bf3-8123-40e5-8402-cb37e888b554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d49b0d-aae2-4acc-8209-deca29201925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e605bfcc-910f-4442-a376-026741292a30",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbfd6bd-9f1c-4c16-8f09-0a4c3f8e9023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1260c43c-1c98-44e8-abee-d56b9422127e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad10df56-36d1-42b2-8f7b-dcc4fc5f73ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f21a60-716a-4d96-83cd-a760ca2db66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a2bec0-598a-404f-b702-2420daaa5861",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b45d16-a381-4053-9156-5f6578c2f2c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d81b479-fe0d-4ed4-9eae-39a98850fde0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "551e99a7-00d8-4165-a168-bfe52189c381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1123385-375c-445e-acf3-ee3378a7c7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586a1edf-41c8-4b9e-9fe2-64bc0831aed2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e62e2f-f677-4018-9814-fb51668c8208",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5c858c7-dbe3-4d36-8e09-b2f98d2dea76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8422138-ad13-404b-b7b1-e49c58cd46b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a15cff5b-7906-4da4-8771-84223fb9a0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005a0bef-dbe8-485d-b743-0d4045354984",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaa0a91-a453-460c-954a-211504952beb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "234739c0-6d14-4b1d-b579-c64e386c3077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdb0bcf-5090-4849-845b-b2619b48a800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f60cbf3-b45e-4df0-adae-9381d5a47441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5701e60-70b7-46b9-a745-f99ed45e8e50",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6667ca7-95b0-41fe-9c14-b4e08f82265e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3673ce-3e2a-47a7-8613-7bd3070fc023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb451566-5fe9-4171-b5a0-ceb3d8e9a999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5696a71f-b10c-4ba9-8f21-45409ae469cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58360b6b-9b2f-44ed-b2d0-10fb4fdc45d8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f199b9-0482-4f92-aa89-161077270143",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4971e8b7-47c5-49e2-a56d-d32b9f84f0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64dbf0f-e20c-4a5a-b377-32b272076616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681aaf07-6872-49a3-a172-9482a898fb63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4a8966-3f36-4b63-b7c6-7ad710ec39b5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14c9289-b216-4477-bb97-8982c01726fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "559f9c8b-4d48-4e10-85c0-d061c553b36d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79fd57f-ed2d-41de-a51e-b0cdab9fecb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bbb120-0a7a-4ee6-a89e-3d4b2f418df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc8e032-4188-4eb5-8d7f-3328bda8cbfa",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827d07ca-c0cb-4f3d-9832-81a78fbd0f8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4c89134-8b21-4f5e-a559-a44ceb6c187a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589ae90e-c51f-482e-83c5-65e2757afb47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770dc6bd-a295-4291-bc6e-79d2cf743794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838d696b-7180-473c-a02a-c502f82c7e26",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f3eabe-ba96-4ed9-95aa-5fe25594d1cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31004669-dc87-4d8d-8b7f-d2882c8fa90d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefda765-1add-4473-826e-6782da017bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c180fe-6c20-493e-801a-9c63b72388eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2de64f-d3b7-46f3-a192-d3e6fbe21f83",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec464ef-9ad5-4583-8315-ff0f6e9989aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd790eeb-14ac-42cb-98b6-a89ddc73139c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e009b38d-b9c6-498c-b945-bc72e2918715",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4902198-9c37-4963-afea-ee180b082df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81110cfd-0127-4e5b-91fd-6a5e3ce05aab",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0530fd48-0b41-4294-81e7-4a063c0800a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0788649c-a6f1-435d-a4c6-775afa60dd10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fc124f-307d-417d-b9a3-fe65232ca210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d9237b-a85d-45f3-a305-4576708baa73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b159bc81-140b-4464-b579-dcb805dad324",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a02c104-3569-4f39-83ca-f1faf72e0d8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b6412af-9194-4937-9f3c-3a775bc496e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b9360e-e70e-4ad6-b40b-fd0218c80d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8cfae0d-beff-4b12-8312-d4a893c13565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfcaf19-c469-447c-9ff9-0b7ffa6f99c5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276e6056-8f46-4987-bbd2-38541b888118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb5cfca5-bf26-469e-8c61-7e265c5c2696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5e465b-219d-4447-9711-0340c405da9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c5003d-8278-4683-8e2f-d33ed4fe6bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd628fc-e9e2-4261-a9af-ec5e1a1adaff",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd81482-0306-484b-9159-504ec2ae5c4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41125f7d-4fac-463e-9376-8b4a0ba6bd18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c8d623-f15b-4a8d-addb-2ae4ea9d859b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "051dc197-d789-465b-8a3b-44295bd58774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd187a6-d18f-44c5-9a67-f48a4189f771",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70d69bc-4c93-4028-9698-7dae5f33fafd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c11184ed-3dcc-432c-9266-4f5965e5b99c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "987a6de4-0ca6-4892-894c-5ce5dff74ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba833de-faae-4024-b52c-80b486c21399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be8bb9f-0ab7-4ccb-a3cc-8bfd72fcc4cc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d15c90b-12be-4619-ae04-dc5832dfe2bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "944721f1-1b4e-48d5-b0d6-6b00ac97e4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db22c0f-b278-4e4e-a085-081228b0a569",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162801d2-3a98-4afb-8b23-1058a05445c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab15ac4b-f850-45b4-8f54-f45c221a46ae",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c4f39d-ad65-4a24-a878-a49b0ca052d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbc49158-7ff0-4579-a787-f86977996b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0b32f7-2fa5-4a8a-8a85-9463cbe0becf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93249b7c-fa94-4291-bc49-834e69b40e39"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66ca0386-5342-42d4-9921-2ba1e62aa18d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0120a63a-1d0e-4cd7-930b-2300559d1644"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4e13131-2728-41e3-90ce-07ea5f8b19b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cde15063-327e-4ce3-9715-b88a9f9b11b5"
                    }
                  }
                ]
              },
              {
                "id": "28f0a351-6598-49fb-87fc-46a6d7dceb75",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7a22939-5680-47c5-98c4-5abd561cc2b0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eab701f-2960-45f6-a671-cafcbac742ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2c343299-f97a-4d71-94d8-49856139160d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d31691-f3ab-4163-a369-4fe44d360ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a90cdee-4121-4155-bc3f-6d433632318e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3553a3bd-43b6-4793-a2e1-722490c0fa01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad72b996-fece-4878-a9f8-1cd3c1c10d81"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fa9b86a-9a63-405a-8e8d-58472efd2e8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14299b9f-52f5-4ca6-80a6-b45cdf6f0bcd"
                    }
                  }
                ]
              },
              {
                "id": "50f66d66-9a9d-4db8-9e1f-e10edd3ea842",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "72cf8307-af74-4945-aa60-0636ed305246",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c0d2bc-9998-4f41-a192-d5b772bf0387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3ec8970c-eea1-4cda-8f06-434d9e2fb06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d67186-57a4-4c38-9bae-225895e02f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e40beff-83d7-43a5-8d4d-e98b889ce73a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "799da0e5-83cf-4d71-a4f4-7ad77cf39ca0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "12be3da1-a5d7-44f9-94f3-a596f2485d37",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "262fd9d3-fa0e-4c7b-b97e-d21855a0b352",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "92abff98-c30a-45e8-a3a0-d7d37261484c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce4119ea-5a68-4bd5-9c2a-d66b5c0fcc2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a2548da-e791-48d3-9dc6-a139a55e088b"
                    }
                  }
                ]
              },
              {
                "id": "882b6245-648f-4c7d-9f68-81ff84638b4d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f065529-fdd9-411c-ae2c-b9ddf1a44f5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a1407600-fdb2-4f2e-bd6d-31761662878a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02509010-bb32-40d8-9b45-b660fb4ac5b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf6ae637-c827-4e5d-8c80-50995f8f7a25"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba5b8747-bf1e-4724-995e-4abd72db07f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "75d11253-de03-4a4c-9ecc-45d7c8fec501"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5540ccb-b1a7-4256-93cf-5e6816ce6cf3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d2351f1-e95c-4f8f-8f36-1133f4fc1c56"
            }
          }
        ]
      },
      {
        "id": "29a521b8-3213-4935-a885-53612ba130cc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4cf3ff2a-b7bf-421a-9bdc-f319ec5d6cc0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "18fb0d90-f139-40e3-b3e2-a3eea8389a4d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27c642c0-0ad4-4569-8861-26d82fcd5aa3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e4c895-7687-472b-a35b-5bf67f19769e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "af621948-4aac-4fb4-93a6-5bb8768e6f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ae2c52-fa26-4133-a59f-2f0cc5e30d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c50ef96e-1993-4656-bffe-3b53ff69b625"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b918560-7da1-4838-be3a-560f396e9446",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca8f8cda-c264-4efd-9a02-6915e461c3ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fcce527-3c54-4978-af90-6680f38c6a91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89ba4dc2-fa07-4f1f-9e07-a7dec3a14011"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b50788b6-98dc-4e97-88d7-5d132bed6b5d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "473dfaeb-d920-4491-b996-fa8cb9127b1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7411f71e-6435-4496-a7e7-1c433c51aa52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2ad2bc3-ac85-4bdd-8790-31f14389fa97"
            }
          }
        ]
      },
      {
        "id": "ae70b07e-3e17-4457-bd4c-ec94537bbff9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fcbbdbd4-9d3d-45fe-8413-74fe86649e8d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c6b8dc56-5169-4581-b4ec-a9a1ad95f9a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2cd94601-b92d-4731-9af4-3145cf5819eb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44d9212-d181-4fba-863b-1f4698a9144a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1b371ea-af7a-441a-ba16-c43cf31ba5d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df88a5a0-9c8b-4670-921b-19365cc8ec43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d84e9f43-8786-4ff6-9186-0f4e698a59ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c0cbe9a-d13d-40bb-bd1e-a0b9f4b37220",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69d15c6d-9e99-4735-ad91-40d4c39d0554"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29a56b32-ee0f-42d3-a67f-de40aeeb3900",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9134f9f9-fd73-4982-9501-5368524941d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "584120cb-8313-46be-b681-3be6bc568b39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb7da91b-2243-450b-aea0-bb40e22f9e4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84e86d88-77ab-487d-9049-ea2a6687b993",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f582a5c5-3f31-4b16-85de-d70f25ab958b"
            }
          }
        ]
      },
      {
        "id": "d3f4fdd2-b9b7-49cd-8005-9fcbc38bcccd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "72e0424a-bfce-49f7-8c6d-c90b74b5d93d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6f5b477-c9f9-4601-a450-151bcbdcf46f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a809fc0-9a1c-4b55-990f-89d3180eff68",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ef5768-965a-4e34-9ab3-53390104551a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3961d68f-e10d-4207-9f4f-587430b80c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4f1dde-b453-438c-87be-8f2c75c837aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88a25eea-0385-48b8-b3b0-d6f61dfe48de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3126824f-2471-47ed-8f40-2969e8153a91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93fe70a0-5114-49a9-8439-4d356bc32e0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "277867e5-2416-4dce-aade-bcbbaef89f6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "594af0f1-8e9e-4377-a8d7-a1d06a02372b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e24cba8-a779-4411-a593-d81f3efac73d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1fbf04b6-8920-470d-9bfa-9169150c0b19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7ee5bda-7fba-4cb7-9134-f5d578666a91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee07273b-5e83-43ea-8095-4c82446d5420"
            }
          }
        ]
      },
      {
        "id": "262cf979-83c8-4496-91fb-94b94aacd901",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ea93fe6-92d8-4523-8f1e-c5472124aea2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e7fbf8f-4eb4-4887-af74-46333f2d9d65",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6fa93dea-4dd1-4e4a-8946-78b1e4f6507c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "271216e3-13d8-41a7-ae42-7afe356f4258",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d4a74e3-6e55-407f-afcd-80709ba409b4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.74603174603175,
      "responseMin": 7,
      "responseMax": 849,
      "responseSd": 87.36653644618268,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718930261249,
      "completed": 1718930287427
    },
    "executions": [
      {
        "id": "bf6cc642-8ff7-4db0-bf65-2954af0f27e3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5114aac8-f727-43af-8d84-a648804ec0a7",
          "httpRequestId": "ebf75e81-769d-4c62-8587-f4a2e421edd7"
        },
        "item": {
          "id": "bf6cc642-8ff7-4db0-bf65-2954af0f27e3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b60f1366-7ac7-4151-a090-35aef6b5eb7f",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 0
        }
      },
      {
        "id": "0205619c-295a-4971-9d45-7de39bb536bd",
        "cursor": {
          "ref": "c453e2b9-a230-45f6-84cd-5ebb67f02759",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e508939f-94cf-4b02-8c2e-220770e07017"
        },
        "item": {
          "id": "0205619c-295a-4971-9d45-7de39bb536bd",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6bb2caf1-3e60-466c-ab72-0ade624c2177",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "da4d46bc-10e6-4f80-acae-6bc80035ea94",
        "cursor": {
          "ref": "b13a2131-0cd3-48dd-8d1c-e6f3901ac6b2",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a8a7258c-7f66-4d13-8b40-dddec5bdb845"
        },
        "item": {
          "id": "da4d46bc-10e6-4f80-acae-6bc80035ea94",
          "name": "did_json"
        },
        "response": {
          "id": "09eb776e-134f-429b-97db-5fd23f1f10e2",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5a8b53-3a5c-4727-83da-7695f9c03879",
        "cursor": {
          "ref": "6bd9b3fa-58de-44c0-b515-52df037412d5",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "304a2d5b-11d8-401c-9475-b0645fee591b"
        },
        "item": {
          "id": "ee5a8b53-3a5c-4727-83da-7695f9c03879",
          "name": "did:invalid"
        },
        "response": {
          "id": "3f3973c0-f9ec-43fe-878d-918d59b38020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5a8b53-3a5c-4727-83da-7695f9c03879",
        "cursor": {
          "ref": "6bd9b3fa-58de-44c0-b515-52df037412d5",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "304a2d5b-11d8-401c-9475-b0645fee591b"
        },
        "item": {
          "id": "ee5a8b53-3a5c-4727-83da-7695f9c03879",
          "name": "did:invalid"
        },
        "response": {
          "id": "3f3973c0-f9ec-43fe-878d-918d59b38020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0db114-05d2-4e22-9086-f1a8eb82b72d",
        "cursor": {
          "ref": "2a20d14e-c339-4ae4-9537-17f73b174be6",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "70f99fc8-30a3-43cc-b1f2-a57eac42c15a"
        },
        "item": {
          "id": "ea0db114-05d2-4e22-9086-f1a8eb82b72d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4da28fa1-dc97-47d8-b29b-ecb3aeba2b08",
          "status": "Not Found",
          "code": 404,
          "responseTime": 319,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde72a7b-16e6-4c9c-bbee-8265c53370c9",
        "cursor": {
          "ref": "c66abcf7-339f-4f96-af8e-a278eade8d35",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6959319e-12a5-4430-bf4f-45bbc44ce3fd"
        },
        "item": {
          "id": "dde72a7b-16e6-4c9c-bbee-8265c53370c9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0bfaffd0-52f5-46f9-85b0-a66c9d306048",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4af921d-8282-42a7-9e89-6f4892b98a47",
        "cursor": {
          "ref": "cb101d7d-4f7f-4c51-8e82-0c53e7b01118",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6748ef02-ccde-461c-a6ff-6e361f8f6d65"
        },
        "item": {
          "id": "f4af921d-8282-42a7-9e89-6f4892b98a47",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4cdc6552-8cca-4f21-83dd-aef5c31d4d26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf22ffc3-4ae9-4bc6-a174-070672bedc03",
        "cursor": {
          "ref": "e5962a63-c23c-4274-bb73-2f3af3ed0866",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e370f14b-4929-48b1-a3d1-8cf3a64c087f"
        },
        "item": {
          "id": "cf22ffc3-4ae9-4bc6-a174-070672bedc03",
          "name": "identifiers"
        },
        "response": {
          "id": "e4ee25b5-211b-4b5c-b010-0fa38356e253",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef716ea5-1b90-4f2f-8e91-8fb188de7b5d",
        "cursor": {
          "ref": "65573739-1cb0-45a7-b280-0de213daa550",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f3b68c62-0d52-4e2b-804f-faaf093dd1cb"
        },
        "item": {
          "id": "ef716ea5-1b90-4f2f-8e91-8fb188de7b5d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1bb37a5e-2fe1-4e38-8715-6e92e947a978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9908eb3-7268-4ac6-9a61-7fa649f41ba7",
        "cursor": {
          "ref": "45f34fe5-e99d-4882-a962-a952f4b19c31",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6ccdaf1e-ec9d-4a2f-823c-4040eeb06eb6"
        },
        "item": {
          "id": "d9908eb3-7268-4ac6-9a61-7fa649f41ba7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0c5d257e-4452-4d06-9ee8-a50aa54c63a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061ab704-6860-4b5b-8362-7047ff9cc061",
        "cursor": {
          "ref": "38dcfd93-eae9-4b58-9074-a1ae8b7c037e",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "01403e10-f857-4368-bd62-bcd1ccbe122f"
        },
        "item": {
          "id": "061ab704-6860-4b5b-8362-7047ff9cc061",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a7c3aa7d-8c68-4aad-982c-5cab4cfaa9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6b8b81-fce8-4727-93e2-fa8732ad249b",
        "cursor": {
          "ref": "e25f49c9-314f-4c23-9172-9b74c70fdeaf",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c5837c26-f0f5-4258-b178-e101b000e6c1"
        },
        "item": {
          "id": "dc6b8b81-fce8-4727-93e2-fa8732ad249b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "52edfa7c-c591-4a96-9ae6-6af1a8d8d040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61cff674-6bb0-4f70-8f73-89025e40d88a",
        "cursor": {
          "ref": "5393a51d-ea7e-4b2d-8c29-e5408ac09731",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1bab9746-c02e-4763-ae89-b620fcf2ef35"
        },
        "item": {
          "id": "61cff674-6bb0-4f70-8f73-89025e40d88a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0f58f5a2-656e-478c-8542-47c83dbdb2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdea2743-d5b2-4490-86f4-26fb6e60b095",
        "cursor": {
          "ref": "fe590844-3efe-4a63-8f05-eb3f749b207c",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ed96de05-fb64-4fe4-831d-c1209a97673e"
        },
        "item": {
          "id": "bdea2743-d5b2-4490-86f4-26fb6e60b095",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6f811535-c82e-4645-994f-da35946e0a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9b0a19-1543-430c-8dee-43439ea2b54e",
        "cursor": {
          "ref": "0caaa9e5-7fe7-4089-a304-7d15ddb8a95d",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2520de3e-0eb0-4172-91aa-df8c56d5bd81"
        },
        "item": {
          "id": "1f9b0a19-1543-430c-8dee-43439ea2b54e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "84da09c2-b5bf-4360-a4d4-738d577eae64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdef403-118b-49a9-8d69-258b5f6c0bac",
        "cursor": {
          "ref": "9971739f-875d-4de5-9ba7-b9fb05ac9b4a",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1f51f8ff-4e02-40e9-9399-2ea85f9d82eb"
        },
        "item": {
          "id": "bfdef403-118b-49a9-8d69-258b5f6c0bac",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c016e344-e0ed-4559-9cf6-8acfaaf0a140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9016813-f6ad-4678-88fc-05d7e1e1082f",
        "cursor": {
          "ref": "84197036-ca12-4172-a73d-ca6a2665c97d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0eb31072-f503-49ff-997d-e397063f917a"
        },
        "item": {
          "id": "d9016813-f6ad-4678-88fc-05d7e1e1082f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2bb0914d-3dbe-4cf2-af2d-77081ef3e089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809b60e4-89d8-4a7c-af17-a57be0b879ed",
        "cursor": {
          "ref": "8a6410ed-844c-4338-908c-a62f614163c3",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cf9bf7cd-fda8-4d43-85be-a2bd05316968"
        },
        "item": {
          "id": "809b60e4-89d8-4a7c-af17-a57be0b879ed",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "bae8afa9-2983-4b89-ac83-6b32e15cdc56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7890a65-d74c-4fa1-8422-b749a3c46f23",
        "cursor": {
          "ref": "4f65725b-a8c7-4de3-8858-ab7f46f98103",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9d638fcb-6dbb-4dd8-aaf4-b3954b805f8f"
        },
        "item": {
          "id": "b7890a65-d74c-4fa1-8422-b749a3c46f23",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c9484da6-3e01-4ae3-8df4-c73a033cbf7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acdf35c-80e8-4f0b-abbe-5b46cd1b8ebf",
        "cursor": {
          "ref": "fe255fb1-188b-4058-a7bc-fb2053563a27",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b0ed5119-ee75-4d6d-b480-66ba75fd0370"
        },
        "item": {
          "id": "0acdf35c-80e8-4f0b-abbe-5b46cd1b8ebf",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "20203dfa-4cda-4932-bd29-af37153da15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e0f908-2703-47ce-ba27-338ce4e9e789",
        "cursor": {
          "ref": "424c061d-917f-44f1-b983-5dc0eca585a0",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "92cec68c-45ad-4af4-ba80-78b6a4d6db4a"
        },
        "item": {
          "id": "03e0f908-2703-47ce-ba27-338ce4e9e789",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4c22723c-59d2-4fcd-85a9-7483c3f3ac2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7ab86c-e380-497f-9722-0139a12dd701",
        "cursor": {
          "ref": "522b0afd-b269-4b6d-b07d-610bbef9b2b2",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0475675c-4c10-47ee-9651-700ad35a563c"
        },
        "item": {
          "id": "cc7ab86c-e380-497f-9722-0139a12dd701",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ba657fdb-0650-4758-a295-5c33dec0388d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f274d0-3251-4fee-b428-21d50c89be7d",
        "cursor": {
          "ref": "133d7090-36eb-494d-b0f8-5707de12a4d5",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ec2c4c99-e98e-4447-ae05-30d52a6eb3c4"
        },
        "item": {
          "id": "89f274d0-3251-4fee-b428-21d50c89be7d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "392f2ee9-d567-48b8-9693-03f7bd746446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd56eb18-2582-4622-8051-5cc3c5ca33c9",
        "cursor": {
          "ref": "8bf569c3-4231-4669-aad9-69fb22da9062",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fff2dd1d-7616-4cee-b896-a3cb65e0ce5a"
        },
        "item": {
          "id": "fd56eb18-2582-4622-8051-5cc3c5ca33c9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1e769eac-f317-46ad-818a-fabca09905b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b65d369-4199-4d83-8ef8-de0da363ac28",
        "cursor": {
          "ref": "87cf8b43-50c8-4e47-ae26-6a705a308ef8",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "20d4bed0-61e7-486e-9e08-4583c37e008e"
        },
        "item": {
          "id": "5b65d369-4199-4d83-8ef8-de0da363ac28",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c4b0d405-c693-4ff4-a92d-f3caf069e0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff18823-202c-4e32-9b03-4502a254e123",
        "cursor": {
          "ref": "61c45757-0ff2-4d26-8a04-3328d6a2fb6c",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "815cdf31-27f6-403d-a0d2-5a83a5af5054"
        },
        "item": {
          "id": "3ff18823-202c-4e32-9b03-4502a254e123",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a9607995-9a36-457c-b7a7-6281691b71a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a01eb64-c16b-4731-a113-55900796dc78",
        "cursor": {
          "ref": "5d2b9ed4-d1f8-4222-a950-c3ff5a95d679",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "95d195f8-6fb0-45d2-b3ca-db3289ea00e2"
        },
        "item": {
          "id": "4a01eb64-c16b-4731-a113-55900796dc78",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bba07c02-ed75-4412-9d83-b40176a60266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e37d58-1b9f-4c57-a77c-7328c8bf0b68",
        "cursor": {
          "ref": "76d29718-3c0b-4b88-923d-912f4e45c23b",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "322efd79-4c14-4563-a4dd-ab54bf5f1485"
        },
        "item": {
          "id": "e3e37d58-1b9f-4c57-a77c-7328c8bf0b68",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "05e1a9cd-c484-4b92-bfdb-5cef9c674a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c14875-5871-47cf-90e7-eb9c0730b576",
        "cursor": {
          "ref": "668e0881-f618-4a93-9c01-5c8f2d982c19",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "639ff22b-6865-44b2-af1a-a9b11a56f9c0"
        },
        "item": {
          "id": "48c14875-5871-47cf-90e7-eb9c0730b576",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "253f562c-3615-4524-ac35-3eb8660b55c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511bc3df-3fb1-414e-a7a8-3a119e2b4375",
        "cursor": {
          "ref": "2ead768a-ef62-4439-a0c0-8486973ae8d8",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1c38e29e-e7b1-42ac-a9d9-1c65d37b22fa"
        },
        "item": {
          "id": "511bc3df-3fb1-414e-a7a8-3a119e2b4375",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bc0f62c6-aa22-4e22-81fc-c1fbcc17fa1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4303b978-d575-48ca-bd43-69747cda03ce",
        "cursor": {
          "ref": "afc5ec72-0b6a-4970-8aba-dca6eda68600",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e28fa5c9-60f1-4590-8ccf-e06bbf1bdd47"
        },
        "item": {
          "id": "4303b978-d575-48ca-bd43-69747cda03ce",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c2bc7ede-775c-4ee2-a21d-3b6338d4f4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73e73e39-e500-400b-ab60-a55bba27cab4",
        "cursor": {
          "ref": "65746ee9-a5c8-4d7f-a7d6-038c6aaffb15",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4355cf92-0945-442d-89fe-45bbb424aa2f"
        },
        "item": {
          "id": "73e73e39-e500-400b-ab60-a55bba27cab4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8bbfc4ae-5e78-479a-ab39-6f31784c7119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121440b4-16b8-439d-ba1e-68b267da777f",
        "cursor": {
          "ref": "f0323597-2ba2-40e7-8d65-c5ef5ed268f5",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "981cdbda-a77a-477c-92ee-7893ffcfd4b2"
        },
        "item": {
          "id": "121440b4-16b8-439d-ba1e-68b267da777f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5bc1c19d-8409-418f-a7a5-2b91049e04b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef86906-c5a6-484d-b79a-b3e930aea8ae",
        "cursor": {
          "ref": "3b70db5a-a78b-4b72-9cfd-148952c869ac",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e79b5fca-4d7f-45ce-826d-772f7e5cbb55"
        },
        "item": {
          "id": "1ef86906-c5a6-484d-b79a-b3e930aea8ae",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "aba589d8-9380-4897-bdaf-8a873888670b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cade7b-51e0-4e02-8815-ecf0facc199a",
        "cursor": {
          "ref": "b9255bf8-4e2c-4217-9f24-a8946eca86a4",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fd4d3bf2-2c02-4227-bbfe-c5130b0fbc18"
        },
        "item": {
          "id": "a4cade7b-51e0-4e02-8815-ecf0facc199a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "13a51a0b-1738-4e06-8ec8-6335c7653d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d453e4-555e-4834-a5b0-c83524a4e319",
        "cursor": {
          "ref": "a46ae249-554c-43c1-9c95-feb287bb5d82",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "873d1fa6-8cbe-43ca-91c2-96493ac21b4d"
        },
        "item": {
          "id": "f8d453e4-555e-4834-a5b0-c83524a4e319",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1bcafc39-f340-4a56-a7eb-ac8c40cb02b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b834e1-5742-405f-80a7-fee4a2bd2ab1",
        "cursor": {
          "ref": "1996bdc8-3414-44c0-ae52-6057fb8be4a7",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cae92dda-aa99-4bd2-84c4-85aa9727e6cd"
        },
        "item": {
          "id": "c7b834e1-5742-405f-80a7-fee4a2bd2ab1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c7f88150-67c2-4a38-a933-2e96df895e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a0668b-b440-44f1-a567-c00c98d97b93",
        "cursor": {
          "ref": "d52be14d-09b3-45a3-95ae-fdb300e862e0",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c8a0e9f3-00be-4ee1-bc55-b927df65fa37"
        },
        "item": {
          "id": "f5a0668b-b440-44f1-a567-c00c98d97b93",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "30f8e098-2c28-4b41-916f-c5d429b0e61d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadc19c3-3a30-49c0-84a9-6f00bc401616",
        "cursor": {
          "ref": "da944b75-86bb-4da2-b928-214a33f4d98a",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bfb4fe76-4167-4dac-9fb7-3dc413ee377c"
        },
        "item": {
          "id": "fadc19c3-3a30-49c0-84a9-6f00bc401616",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6f3ec214-bbca-4b8b-bcf1-96020581d595",
          "status": "Created",
          "code": 201,
          "responseTime": 849,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "729caf13-2bb0-4667-9ed1-aa52ac4d1aba",
        "cursor": {
          "ref": "a4e8538a-17a3-43b5-b32f-2f1aca6d9ae9",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d947cf43-fdea-405c-9066-840930354961"
        },
        "item": {
          "id": "729caf13-2bb0-4667-9ed1-aa52ac4d1aba",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "da9cf48a-43d6-4cf9-bcd6-9355986ba920",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d4bb48cd-bcf0-437a-8ba8-8258e7c0e837",
        "cursor": {
          "ref": "e68b7f72-e99d-4a5d-8b26-98c064fa25bc",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ecd53e80-8e10-4c22-ac5e-2e18c7be98b9"
        },
        "item": {
          "id": "d4bb48cd-bcf0-437a-8ba8-8258e7c0e837",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e03d395d-4b69-4b0a-9abc-0e3ee8a608d9",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "dacc3b48-e1ba-40d0-842e-27b8ba2b8bf4",
        "cursor": {
          "ref": "7d07232a-b339-480f-a33a-f04a9a891244",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "145494dd-e0dc-4cd7-af3c-fd439750c2dc"
        },
        "item": {
          "id": "dacc3b48-e1ba-40d0-842e-27b8ba2b8bf4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d25cf783-52eb-4f36-866f-5c570be6c373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc552ad9-98c8-44f1-b5e8-e0cef97f2960",
        "cursor": {
          "ref": "bd260583-b4dc-42a9-b903-6c5e5df4d64f",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6351071a-8290-4093-b4b6-7eee18a0a2f8"
        },
        "item": {
          "id": "fc552ad9-98c8-44f1-b5e8-e0cef97f2960",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ecd87ad6-6d04-4694-bff3-a34664f996d8",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "badc99cc-3559-467f-b07d-e3f00d63d0b2",
        "cursor": {
          "ref": "30efe50a-4885-446c-ae94-af1fdb2464a0",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f70fb78c-06e1-41b0-8591-5dfdbf163aac"
        },
        "item": {
          "id": "badc99cc-3559-467f-b07d-e3f00d63d0b2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5e4bfa26-3c79-4bca-b676-772621be0a54",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9f4a3301-617b-4849-9435-0cdda2dd2bb6",
        "cursor": {
          "ref": "760f38cf-7232-4699-b29d-4033bae4a46c",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "73748736-a9c0-42c3-9819-52948555eaff"
        },
        "item": {
          "id": "9f4a3301-617b-4849-9435-0cdda2dd2bb6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "95bd9263-2fb9-4103-b8cc-4ef42aa6bf3b",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c5667423-118a-4169-a105-b26b6e3dd0ce",
        "cursor": {
          "ref": "38ced461-5c26-4273-b4cf-2cc1e4448e90",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "63e41c41-ea28-46a7-a1c5-82033e28698d"
        },
        "item": {
          "id": "c5667423-118a-4169-a105-b26b6e3dd0ce",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a73263f2-90fa-46ae-8b06-9cb5bf3369ad",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9ecc4703-785a-4849-9927-f0576f60055d",
        "cursor": {
          "ref": "2fd65c65-3802-4690-ba75-714e25dd077f",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2c346ba4-5877-4f76-8d14-27324b787a51"
        },
        "item": {
          "id": "9ecc4703-785a-4849-9927-f0576f60055d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "47405df0-f5f2-4b01-a4d7-5c3c2345c552",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2c205b5e-6072-43e0-9ec6-7ab63cedd646",
        "cursor": {
          "ref": "1b4b593c-929d-4818-abb1-68a367d32240",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "09ca6f36-ab28-49aa-8c89-d6b6e5e70bdd"
        },
        "item": {
          "id": "2c205b5e-6072-43e0-9ec6-7ab63cedd646",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3cd08fcc-c082-4d65-b879-23cebdc3d493",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c7d84b5c-e91d-438c-a04d-ab93d3af4c76",
        "cursor": {
          "ref": "f6109d1d-d59f-46b2-9283-a272fbb9039d",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "284a4660-3c57-4139-b8fd-bba83617dc81"
        },
        "item": {
          "id": "c7d84b5c-e91d-438c-a04d-ab93d3af4c76",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bbcd467a-6ea4-4ae9-a80a-a48c39d44ff8",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9ea3932e-642d-4b88-a077-0906baf7fe65",
        "cursor": {
          "ref": "a6bca02a-bccd-440b-baa6-b28ea1651d89",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fb766b1b-1089-4596-9609-bbfc505462d3"
        },
        "item": {
          "id": "9ea3932e-642d-4b88-a077-0906baf7fe65",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "36b8621f-03d0-41cf-bb4e-a4574ef0ce37",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "71ce8831-d395-43e5-b1b9-89cd881bae43",
        "cursor": {
          "ref": "4987fc95-a243-4068-929b-0633a98229e6",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "11049724-81f5-45bc-80e9-0d80cd8d8bd6"
        },
        "item": {
          "id": "71ce8831-d395-43e5-b1b9-89cd881bae43",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7c9c29a6-a62a-4b32-b949-92b06106e4e2",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cc8f1ae0-9805-4c8e-8ad4-dff3d1a721ca",
        "cursor": {
          "ref": "ec040ef2-3275-4cd8-991a-ae84dc54d06e",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fa175c3e-49cd-4473-9b70-1544ac7094da"
        },
        "item": {
          "id": "cc8f1ae0-9805-4c8e-8ad4-dff3d1a721ca",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "750b2bf6-cfb9-4244-b234-946f5ef052e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21e1059-a7ee-4c81-8fd2-972189554ac6",
        "cursor": {
          "ref": "483342cb-a60e-468f-a5bf-ddcac771ee9e",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ea4417c4-532f-4542-b0f5-c4648ff5f5b0"
        },
        "item": {
          "id": "c21e1059-a7ee-4c81-8fd2-972189554ac6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "36b2a047-3aaf-4263-8e83-fe6ceb1cdc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57de91d4-71e1-4742-abd9-b05d41a9ef95",
        "cursor": {
          "ref": "23e1f51b-65f4-44ce-a96e-9aa2b29d20e6",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0f9d17d6-389e-41aa-83f3-6d30858cb481"
        },
        "item": {
          "id": "57de91d4-71e1-4742-abd9-b05d41a9ef95",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bf7940b0-c849-4b63-ba92-a26c93eee971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b092574-2645-460f-98cb-5aa50e1c5f00",
        "cursor": {
          "ref": "9231bd4a-0f0b-4593-99b4-a6da5dc59fa3",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4f5c2076-4380-4b0b-a489-b3ecb75de2f4"
        },
        "item": {
          "id": "6b092574-2645-460f-98cb-5aa50e1c5f00",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "74d54963-4e06-479a-819e-84e8c934e123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a17d6d-f0cf-4ac3-89a0-473b9f03abfe",
        "cursor": {
          "ref": "a9dfaf97-453c-403d-96dd-65d56995b7e6",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "32f49763-1f74-4d71-9635-a80d95c673ae"
        },
        "item": {
          "id": "93a17d6d-f0cf-4ac3-89a0-473b9f03abfe",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "794fed64-a5e7-409d-8f20-33a85ce7d064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309982de-f89d-4986-bb02-e1674800c3dc",
        "cursor": {
          "ref": "30ef1112-8aaa-401d-9956-a31ce2c2355c",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "51e67442-cc19-43ed-9a97-194ae3420fad"
        },
        "item": {
          "id": "309982de-f89d-4986-bb02-e1674800c3dc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1d3410d8-58b4-45af-a64c-77b4081525c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0121859d-7866-41fd-99d9-f89395dd3018",
        "cursor": {
          "ref": "505cf9c7-f57c-477d-abcf-344ea2b1e861",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "757f308c-5eb2-438b-842d-8256b17d73c2"
        },
        "item": {
          "id": "0121859d-7866-41fd-99d9-f89395dd3018",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fc461711-2de0-4001-a9d5-6a3b9658dfd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cadc32-3367-4f27-939c-7330640a56a8",
        "cursor": {
          "ref": "8001507c-0802-475b-9418-07eea8b93894",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "638bfdcd-451a-449d-9da2-08121bf560f9"
        },
        "item": {
          "id": "b1cadc32-3367-4f27-939c-7330640a56a8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1ba5bc65-54d4-427e-9d74-12ecc51cf133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebbdd1f9-0e2e-4a17-9e82-f562d57c4ae1",
        "cursor": {
          "ref": "50a38d1a-05bd-4db7-8d06-7174ef908d38",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dde57e78-f5c1-4487-b4e0-ffbdd4f7727c"
        },
        "item": {
          "id": "ebbdd1f9-0e2e-4a17-9e82-f562d57c4ae1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1a95b754-79fd-43b5-ac1b-9f74d3cad9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71cafd64-f48d-4268-9070-bfdc679f2fc7",
        "cursor": {
          "ref": "98d216ec-dff5-43c5-90a1-4096df82d9ae",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "59e314fc-95ef-4e9f-8652-1ad97ddd3fce"
        },
        "item": {
          "id": "71cafd64-f48d-4268-9070-bfdc679f2fc7",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e27e53c2-81cd-456c-90c6-fd145b9b6b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cebe05a-73d6-42dc-b220-6eb017cd5c94",
        "cursor": {
          "ref": "67338fbd-7fc6-4dd6-96b1-ba1a148a4719",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "904f2aaf-789b-45de-a92d-d30170b11f32"
        },
        "item": {
          "id": "2cebe05a-73d6-42dc-b220-6eb017cd5c94",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e860620c-e98f-4b7b-a12c-fb6e6ad07d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1705d69-b4de-4883-930e-cad65e84f3f2",
        "cursor": {
          "ref": "2b6d7459-24b8-429c-b097-9fe8d84d4c50",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e33886ae-4a41-437d-84d1-8dcd27f93e32"
        },
        "item": {
          "id": "e1705d69-b4de-4883-930e-cad65e84f3f2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f8d9d4ad-70e8-4ca4-97d6-3a1ca26a0c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963d9e3e-888b-4298-8559-9cda492bfde9",
        "cursor": {
          "ref": "b25becfb-c41e-4dfc-86f0-a3ddbe63bb45",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "374ffef1-b697-4b65-be67-b283d9ed4939"
        },
        "item": {
          "id": "963d9e3e-888b-4298-8559-9cda492bfde9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "245d3790-f387-4723-89c0-9e44c89c5e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb617821-a67a-49a5-8f81-7afd6beed69a",
        "cursor": {
          "ref": "4d77ea7b-b9cd-473e-a014-4b2b974147d9",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9988e405-8f5c-490e-83c3-985f6d2cefb2"
        },
        "item": {
          "id": "bb617821-a67a-49a5-8f81-7afd6beed69a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9af42275-4569-4b66-8cc1-2a15af65dfbe",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "dae68260-65a1-4a43-8e1f-3bd23ebed953",
        "cursor": {
          "ref": "a26574ff-8c2b-4930-80f0-95d4e54add80",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8c3f06bb-2016-40ff-acd5-a210bd1c9c4c"
        },
        "item": {
          "id": "dae68260-65a1-4a43-8e1f-3bd23ebed953",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b53f379c-8118-4e6d-bc46-4c21ee2ba35d",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "bf079f9c-b8bf-4ae9-8ac3-2f6a74fb4af2",
        "cursor": {
          "ref": "521bddf9-79fa-4a22-8f57-f5ef72e7001a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "44b2caff-b232-46ed-a2e7-5a4fad256bfc"
        },
        "item": {
          "id": "bf079f9c-b8bf-4ae9-8ac3-2f6a74fb4af2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a3707aa1-4154-4643-bc26-abc5d48e1fd4",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "cd10debb-69f8-43de-bab7-2b8386befc5c",
        "cursor": {
          "ref": "28c61fe5-57d0-4967-bf1c-16071542e629",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a1446fe9-dc4d-457c-8e98-af2f481cad46"
        },
        "item": {
          "id": "cd10debb-69f8-43de-bab7-2b8386befc5c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7898cba8-15d3-4b41-8809-b3d7aeec326a",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e67637e7-ad20-42b0-a972-289ab6c836ce",
        "cursor": {
          "ref": "76dac658-cdd3-40d6-82c6-f63ca26e9928",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d1789416-7ea3-481b-aad3-56dfe6e75f60"
        },
        "item": {
          "id": "e67637e7-ad20-42b0-a972-289ab6c836ce",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8d409186-391c-49c9-bfdd-de069499c488",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a869ce38-3ad0-4026-a1c1-2f89ad9f9456",
        "cursor": {
          "ref": "6ab06b5d-d406-4c44-b4a7-d35d2d46774b",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "98fb6eae-83cf-49c4-a70a-1a849627ec90"
        },
        "item": {
          "id": "a869ce38-3ad0-4026-a1c1-2f89ad9f9456",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9ce5c44a-7f4f-479d-9c44-ef7eeea0744a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4f0cbd-d43c-44fb-be40-84244cd462a6",
        "cursor": {
          "ref": "c26eb64b-d2c3-477f-bf66-8602d50227ec",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8e73d548-49c9-4989-b30b-adcab89fb89e"
        },
        "item": {
          "id": "8b4f0cbd-d43c-44fb-be40-84244cd462a6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "83102ed9-dc08-4728-b476-f272c4b81339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e340242f-4d26-4c4f-ad67-0b812dcabe31",
        "cursor": {
          "ref": "8009802c-1ba2-4209-a1be-9591081e7351",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1a1f75d7-c1ec-4e40-9738-266e4f7bce69"
        },
        "item": {
          "id": "e340242f-4d26-4c4f-ad67-0b812dcabe31",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5bd237da-9263-4fdb-9e8e-5af5cc03ae02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253bb84c-6712-4749-b62a-d14673ca7794",
        "cursor": {
          "ref": "6c4777b3-a14e-4f1c-8fa8-4f3a659c94cd",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "03bde1f3-42ae-4b28-b728-6c8def7b6275"
        },
        "item": {
          "id": "253bb84c-6712-4749-b62a-d14673ca7794",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4595e908-949c-4a09-a9e8-d95fd8254ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e20802-4ef5-417a-8da1-4f1d0a9c076f",
        "cursor": {
          "ref": "327c6e79-af37-4f44-bd48-e27035474cb1",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8625ab33-1120-4c10-8963-14a7989106f2"
        },
        "item": {
          "id": "46e20802-4ef5-417a-8da1-4f1d0a9c076f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8f517ce9-eaca-404c-a788-e1decd0b82b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93fcf0f-30cd-4dcf-a5e9-8d0395408bdc",
        "cursor": {
          "ref": "fe8ede2c-78a9-4a4d-bd4b-8c8d32c837d7",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "af2c718e-ee4e-4e73-945a-e1e13547c4d2"
        },
        "item": {
          "id": "f93fcf0f-30cd-4dcf-a5e9-8d0395408bdc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f90d9e82-98f1-44dc-a8b7-8dd6d17cd0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57ae9a7-db60-4d1c-bf34-0489877dd8b9",
        "cursor": {
          "ref": "04667667-e6eb-4992-9990-f24f38a3227a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5debea8f-f424-437e-9d9c-4399ad522744"
        },
        "item": {
          "id": "f57ae9a7-db60-4d1c-bf34-0489877dd8b9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2e1a9fb1-eaad-40d3-b024-4f6b137852b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9231d5d2-092b-49c3-a989-617eaeb24585",
        "cursor": {
          "ref": "035eb7ef-f105-4054-89e6-609a9afd16a7",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "64020b0f-a6f3-44bc-894e-1cbe761bdedb"
        },
        "item": {
          "id": "9231d5d2-092b-49c3-a989-617eaeb24585",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bd87a471-feac-449e-8590-5694e30f2fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97abbf4-023c-44df-a97c-ff4bff6e1eb9",
        "cursor": {
          "ref": "2e149483-3750-4c5f-92ef-57d535a18fa1",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ad14939c-829d-4441-95bc-44ca6768fd38"
        },
        "item": {
          "id": "c97abbf4-023c-44df-a97c-ff4bff6e1eb9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6a5123c2-c511-497e-b9ae-742be43b9908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4fb355-5632-4cc6-be2f-7fdf7151965c",
        "cursor": {
          "ref": "06c1c0e9-fa1e-4dc0-9338-5ed8cce64628",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c6e7995f-a0e5-4923-9ef3-b9affae17f46"
        },
        "item": {
          "id": "7a4fb355-5632-4cc6-be2f-7fdf7151965c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "65e0e95d-c110-4289-a970-017a366aa209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa65e0f2-1606-4c47-96c1-a0e0f2594681",
        "cursor": {
          "ref": "b02ec39c-b020-489c-b7e5-a75671307699",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7e546ba7-9cd1-440b-9187-ac9570931025"
        },
        "item": {
          "id": "fa65e0f2-1606-4c47-96c1-a0e0f2594681",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6f013af9-8b52-49a9-8539-c35e3796fd75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcc2bc0-0ea2-4602-9784-6402a55b782f",
        "cursor": {
          "ref": "a2bd0b56-4b80-46f6-a383-716ac6350aa0",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "012658f4-192e-497d-907a-b4716fee65bd"
        },
        "item": {
          "id": "4dcc2bc0-0ea2-4602-9784-6402a55b782f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "18e3d5b1-d1f8-4f84-bd44-dfa45c89bdc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696b07bc-04ce-460f-b8d4-2123ceec9b30",
        "cursor": {
          "ref": "efca3c55-dd7f-40f9-bbcf-61520208786a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6014c8e1-252a-47eb-b754-705d121097ba"
        },
        "item": {
          "id": "696b07bc-04ce-460f-b8d4-2123ceec9b30",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e5476535-0476-4cbf-822d-3f71e54c11c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd02075-56e4-4a6c-a0f1-e29aa8fcc83a",
        "cursor": {
          "ref": "734317e7-348e-4401-aceb-1d139bae9fe4",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a8e5a37f-a815-464d-9172-99b352ea9abc"
        },
        "item": {
          "id": "1bd02075-56e4-4a6c-a0f1-e29aa8fcc83a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "10ef43d7-2864-4611-98ad-f561460dccc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d92a96-ea0d-416b-a7b2-7cc56d7f904d",
        "cursor": {
          "ref": "247b39a3-4623-49ec-bcd7-735b3e9b65e2",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b2304d53-118c-4832-a474-3c0a506aa728"
        },
        "item": {
          "id": "d1d92a96-ea0d-416b-a7b2-7cc56d7f904d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "47a84aac-4d47-412d-97a9-a77ab92329fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad1ce7b-1dad-45df-ab12-72e992ab6d3c",
        "cursor": {
          "ref": "49b7e9a7-545e-4a90-aaf1-cf8ae12f4adc",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f8b7bc0a-7e6a-460c-966d-b1efd5f35e12"
        },
        "item": {
          "id": "dad1ce7b-1dad-45df-ab12-72e992ab6d3c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "02ab35ca-e09c-4a37-a51e-0c5315ece5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d687ac3-0844-4a7d-b78c-c3b3ee1bfd26",
        "cursor": {
          "ref": "d5e66a66-cf85-4744-bc60-5ec41a6a0718",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f5d4d1f8-1fd2-4a96-ba33-26564253259d"
        },
        "item": {
          "id": "1d687ac3-0844-4a7d-b78c-c3b3ee1bfd26",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4ee4ce17-58b7-4ec2-8478-a39a60d99a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c3846c-11b6-4a34-b400-788444000041",
        "cursor": {
          "ref": "8f816917-1e78-4dc4-adc1-9da7ee722c40",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f8ab2168-5ff2-4f41-adc7-3fbd76d6b5fc"
        },
        "item": {
          "id": "81c3846c-11b6-4a34-b400-788444000041",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e7bf6ee6-a43c-4600-9cb7-730e8d57d4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a69e5c-29d2-443b-a664-2b4726fea3a1",
        "cursor": {
          "ref": "ad9be08e-3f24-4ec1-966d-9d8410b65918",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "870887fc-3abc-413f-b684-b6e8db91ed08"
        },
        "item": {
          "id": "a1a69e5c-29d2-443b-a664-2b4726fea3a1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "effc831c-3f27-4273-8f34-89e2e9eecc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7932bdeb-5882-472f-9307-13421ba7578f",
        "cursor": {
          "ref": "8e8be70e-3b64-47cb-ba48-27e0438ee715",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7fabb65f-cc84-448f-a576-c7ef18677040"
        },
        "item": {
          "id": "7932bdeb-5882-472f-9307-13421ba7578f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d2547eaf-4476-42fe-b56b-0d61d0809394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5320397c-54d1-4600-bb11-d83666ca31b9",
        "cursor": {
          "ref": "66e00fc8-c9c3-4925-a448-78a6ebd822f7",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "03d86b20-7ae6-4a73-9a39-457a3d20615b"
        },
        "item": {
          "id": "5320397c-54d1-4600-bb11-d83666ca31b9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c291a3e4-f2c6-487d-b88d-fbf4c9507ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2bf77e-3397-47c0-afb4-715e105ebf24",
        "cursor": {
          "ref": "fbf2308f-25b7-42f7-b08d-c1aafa0d4a86",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6d900316-7cb9-4ecd-92fc-139131d9219a"
        },
        "item": {
          "id": "6a2bf77e-3397-47c0-afb4-715e105ebf24",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "723a5427-204b-47ed-bf07-232b66888276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc4ae1b-fa18-46f2-ad08-10018037ad1e",
        "cursor": {
          "ref": "dcb6e05c-1219-40ee-af6c-110c746bd7f4",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b18b4bd0-3166-406c-8482-191e18301745"
        },
        "item": {
          "id": "7bc4ae1b-fa18-46f2-ad08-10018037ad1e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "dbb05a11-adc0-48bf-8800-b4484cd1eb0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef4ef35-ec17-404d-aea2-8a530b8a85b0",
        "cursor": {
          "ref": "7cf3d710-b221-4b3c-aa98-91ad16f2b77e",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "464cae9a-586f-4063-a999-b6ce98dfe25f"
        },
        "item": {
          "id": "cef4ef35-ec17-404d-aea2-8a530b8a85b0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "053d5530-cd36-4448-bce5-a5024e750f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ba51fb-9f5f-4d9e-9d8e-fef700bb8f8b",
        "cursor": {
          "ref": "6fe1b01a-bba2-4bd6-ba9a-87b74a6136b6",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a0175467-9c1b-421c-93f8-d232d1db081c"
        },
        "item": {
          "id": "78ba51fb-9f5f-4d9e-9d8e-fef700bb8f8b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9e4730c2-1381-4f70-ab0c-20b4236c4c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7eca42b-564f-4914-a970-3b1b4581cef3",
        "cursor": {
          "ref": "481b0ed8-cc93-4f4d-875e-838efcb30591",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1f9ec685-6f8a-482d-a721-1b4e86180a2a"
        },
        "item": {
          "id": "e7eca42b-564f-4914-a970-3b1b4581cef3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0ccf6637-c2d4-49d0-b6ce-751be8ceaa14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac375c0-7c54-49bd-9bc8-1cd96ad3aa95",
        "cursor": {
          "ref": "c3764ea3-26b2-4061-ae91-f2a85aa985f1",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "18f22189-b012-423d-88e4-0e98c59bf297"
        },
        "item": {
          "id": "8ac375c0-7c54-49bd-9bc8-1cd96ad3aa95",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "64bcbcb5-e36c-4e76-ad2f-cca281afdd33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fef345-5139-44d8-a17f-bca0fdb1c449",
        "cursor": {
          "ref": "ffce2d15-2660-4267-9c03-d01d86849f6e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f6f18df1-1c68-493c-a2ad-72ca13b423d4"
        },
        "item": {
          "id": "28fef345-5139-44d8-a17f-bca0fdb1c449",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "39f46dc2-3355-48ab-9698-cdee3e044b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97adf2da-40e2-45e1-9f11-744778f3c8d5",
        "cursor": {
          "ref": "d863d679-f9b9-443b-a351-a000c5e04542",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1a134a1b-1275-47e2-a947-d510a464897a"
        },
        "item": {
          "id": "97adf2da-40e2-45e1-9f11-744778f3c8d5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "764c412c-54d3-4ea8-ba4a-2d993fb09158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4698762c-a44d-4c62-b103-390849fad631",
        "cursor": {
          "ref": "18c2e045-7e33-4190-b085-f7724201ce8f",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4a59bc40-4a68-4be3-9103-aa11bdeae259"
        },
        "item": {
          "id": "4698762c-a44d-4c62-b103-390849fad631",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a548955e-8889-4b48-ab0a-5704dd166a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416b2042-a019-48e8-b993-123728a4f6a8",
        "cursor": {
          "ref": "1b5aae8a-ecef-4b8c-b721-17ee7db77828",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "891b6cb4-a37d-42dc-974e-419c29f3dc8c"
        },
        "item": {
          "id": "416b2042-a019-48e8-b993-123728a4f6a8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "79c269e2-a7e6-40a9-a6eb-ac2868a5226b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdd58d1-be46-4003-b24b-fe1fa8345b5d",
        "cursor": {
          "ref": "5d574035-756f-4c6e-8052-f8078ac19a1a",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d309e1d2-957b-4a1b-81f4-db35163ff7cd"
        },
        "item": {
          "id": "8fdd58d1-be46-4003-b24b-fe1fa8345b5d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "01779541-4cf1-4986-8a8f-b0f865368875",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de3b31e-1c4e-4acf-bc5d-95810dacd034",
        "cursor": {
          "ref": "7f859f6e-27c1-498a-a8d9-1d51779b6ef2",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2f264996-4b27-453f-b3b7-b256ac056ac4"
        },
        "item": {
          "id": "6de3b31e-1c4e-4acf-bc5d-95810dacd034",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7ba9e2cd-d2f8-45d6-bc46-9c08a70da046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4a71d455-31ce-466b-ace0-aa630098accf",
        "cursor": {
          "ref": "55a4a804-4b8d-465e-90c3-a946342921b3",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3597d303-9af4-4307-9223-e6d539078478"
        },
        "item": {
          "id": "4a71d455-31ce-466b-ace0-aa630098accf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3065933a-5296-45a3-a5ec-c9d4ad668ca7",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "adaa0c33-580e-4181-bd61-57020a4d56f4",
        "cursor": {
          "ref": "915a82e5-2c38-417c-83e7-711f07073498",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "31637e8e-cc5a-48d0-a227-3b4683955278"
        },
        "item": {
          "id": "adaa0c33-580e-4181-bd61-57020a4d56f4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "aeb67b27-cc36-4916-b3ac-c92d7a5052ee",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab8d67e-2c7e-4a1c-b7d1-27fbd037c446",
        "cursor": {
          "ref": "3d87d9ce-9795-46e7-8e8b-5e57f91c9d23",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "49c2130f-e8e6-42b5-89af-abb22b6fbd7b"
        },
        "item": {
          "id": "8ab8d67e-2c7e-4a1c-b7d1-27fbd037c446",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5448483c-f5e5-4955-8d1e-bad150ca80ee",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d171769-fccb-48e3-a2e9-17064a14929a",
        "cursor": {
          "ref": "12493f11-f03b-4c90-82ba-0bbd85f98500",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f328f741-7718-41c6-8058-af7e3796778f"
        },
        "item": {
          "id": "6d171769-fccb-48e3-a2e9-17064a14929a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "80c1bc62-65bb-4c61-882e-e745aabd1415",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d4c4c5-0f17-42ef-bdac-a510b526e1d7",
        "cursor": {
          "ref": "f7df3c34-4cad-4771-9ee8-058a2a1029e1",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9432d39a-00db-48ac-a114-aba6d31c6f31"
        },
        "item": {
          "id": "d6d4c4c5-0f17-42ef-bdac-a510b526e1d7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3170e9ce-db36-423b-a54e-4fd08c3d4dca",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-21T00:37:55.633Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-21T00:37:55.633Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "839f8be8-f652-4b6e-b75f-497f9d63a90c",
        "cursor": {
          "ref": "071b5783-413a-407d-9629-df7e68a3a5d7",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "edee5f88-260c-418a-8de2-1c4803e80bdc"
        },
        "item": {
          "id": "839f8be8-f652-4b6e-b75f-497f9d63a90c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bcb07f25-e88f-4efc-a51d-7652b2ebeaba",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a30687a-37bf-4e03-a814-026a220ce7f6",
        "cursor": {
          "ref": "74330967-a4c9-4ba0-8395-4a0656473272",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d75b2fd6-4eb7-4524-8b08-be7cb342c739"
        },
        "item": {
          "id": "7a30687a-37bf-4e03-a814-026a220ce7f6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "54c42fdc-4a46-4c0b-a927-0dfe14509e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229691e7-314b-4571-936e-ba3ef6c0d672",
        "cursor": {
          "ref": "78957678-91eb-4269-b596-0c8fa049a66b",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "479dfb84-9d83-4c48-a63d-03d3e9c0b440"
        },
        "item": {
          "id": "229691e7-314b-4571-936e-ba3ef6c0d672",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c91f71c8-8a36-44cf-bcbc-e84dc515c9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952b5a71-1657-4659-9523-68748f017c4b",
        "cursor": {
          "ref": "9f7d47f1-6527-4437-a7c0-827f20e2ad5a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "75e7bd43-037a-4cfd-91ed-d49c7fdfef09"
        },
        "item": {
          "id": "952b5a71-1657-4659-9523-68748f017c4b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d5a4fec5-6138-46d4-b1d9-cbd17595a4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747eb8d3-2067-4cf0-8dd1-cd9de764c396",
        "cursor": {
          "ref": "69d41529-644d-4fd9-9463-106ffd169fcc",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b1bf098b-b714-42cf-97ae-38ec9c156651"
        },
        "item": {
          "id": "747eb8d3-2067-4cf0-8dd1-cd9de764c396",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2881ff7d-642d-4330-9185-f1bb5ec8c635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4474845e-2329-4dd8-88a1-1aa22342a29f",
        "cursor": {
          "ref": "a9406985-15ce-485f-88c2-1d24386180df",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ce3b85bd-2bb0-458d-957e-ebd2817e590f"
        },
        "item": {
          "id": "4474845e-2329-4dd8-88a1-1aa22342a29f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "761e3efb-3a74-41e0-ba9f-526ac462f93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd70e35b-9ca4-4881-9c4b-6c4a45b084d3",
        "cursor": {
          "ref": "01b1fa0a-5ca7-48e8-859a-16ed87f3dc7f",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ee52db3c-7c96-4b43-b717-8663907b081a"
        },
        "item": {
          "id": "fd70e35b-9ca4-4881-9c4b-6c4a45b084d3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "24ba0fb1-72f1-441b-8daa-05bc388f3215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5590c5cf-58a5-4e8a-8bde-1a29a737c6ac",
        "cursor": {
          "ref": "7b72fcef-520f-43a9-b6fa-d4fdcaa9e0d3",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "746cd250-e585-4053-b975-50bc6e25b745"
        },
        "item": {
          "id": "5590c5cf-58a5-4e8a-8bde-1a29a737c6ac",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "08617115-28ef-4653-891f-31b856b11a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb77f78-e464-49c8-9960-4c779bb555e0",
        "cursor": {
          "ref": "b389c1e5-0fdf-4d45-845c-679d6dd44e48",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d00e55d6-3b86-4b11-9419-00c624dcdaa5"
        },
        "item": {
          "id": "deb77f78-e464-49c8-9960-4c779bb555e0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "60017183-990f-436d-b6e7-7cbd661a82a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb1b075-d3f6-4277-b1e3-ea3fa5ed7833",
        "cursor": {
          "ref": "9bf84b75-634d-4b9b-a0c1-69d543b39021",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "81784971-1a3d-4bd7-9778-fd8f443a78bc"
        },
        "item": {
          "id": "1eb1b075-d3f6-4277-b1e3-ea3fa5ed7833",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "40513da2-bc5b-45fa-a101-7850d9161a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971a6c98-daf3-4256-9eaa-f4ba804f10bf",
        "cursor": {
          "ref": "b86f1109-50d2-48bd-b5f2-e4b99ed9a8e9",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2a422253-12f0-4ae1-b1c4-1e7021b2c81c"
        },
        "item": {
          "id": "971a6c98-daf3-4256-9eaa-f4ba804f10bf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "81021386-b0cc-4ad9-aad8-33a23e9ff6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944785ea-696e-41c5-9f2a-178272b14ad5",
        "cursor": {
          "ref": "a2aa57e7-e1e7-4309-b486-2924d71ff354",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4ebfcc60-334c-421b-87d2-d6a14138acc3"
        },
        "item": {
          "id": "944785ea-696e-41c5-9f2a-178272b14ad5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "54a139de-ffc3-40e3-8795-cd3bb0c79dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8034c480-dc4f-4d34-bdf1-c26c0896cbae",
        "cursor": {
          "ref": "4043444b-2fc7-40c7-938c-26aae9eab80d",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "55876129-c345-4bd5-84d4-5f068553f843"
        },
        "item": {
          "id": "8034c480-dc4f-4d34-bdf1-c26c0896cbae",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ce8180a2-9b90-42f8-9271-4182ba270590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0010948-d725-4858-8207-2bbf9f32a6f1",
        "cursor": {
          "ref": "e3fd16cf-9a4b-47bc-abab-671b2c0ff6d0",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8cf0cd7f-6bbd-4425-b9a5-e28485a61d9e"
        },
        "item": {
          "id": "d0010948-d725-4858-8207-2bbf9f32a6f1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a6856ea4-6175-42e0-ba3c-35ecd2ef7417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff657894-e807-4fc0-b00c-077210f9238d",
        "cursor": {
          "ref": "a457e593-5cdb-4c32-b5ac-523a602046f7",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "fdc771d7-7a3b-4bae-9330-4fa1eba548ce"
        },
        "item": {
          "id": "ff657894-e807-4fc0-b00c-077210f9238d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "62e162b5-8b7c-4764-912a-62aae948e191",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "170b0003-2549-4f5a-bedf-793543aa4dcd",
        "cursor": {
          "ref": "2c84577d-759f-484f-b3fd-722af5c0a62c",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "127ac39c-84c7-47ea-8e8a-08b33cff2b8c"
        },
        "item": {
          "id": "170b0003-2549-4f5a-bedf-793543aa4dcd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "06a48dea-f74d-4373-aa03-9701c93ddcf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7e13e0-098f-40ab-ae84-a038ff462627",
        "cursor": {
          "ref": "4eb2dd6d-d307-49f4-8077-28bd1942ef96",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6423b256-49f9-4f3c-9e25-c6e315b79e4a"
        },
        "item": {
          "id": "6b7e13e0-098f-40ab-ae84-a038ff462627",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "70d01307-70b5-4512-b3c5-61522820c1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be04640-7ea6-4abe-9672-30e28220bbc9",
        "cursor": {
          "ref": "34187206-b562-4965-9e43-8a825a1975b1",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "04b11405-5099-4f12-af2f-1fc8b6186b06"
        },
        "item": {
          "id": "9be04640-7ea6-4abe-9672-30e28220bbc9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c2bf728d-4857-470c-bed6-b7cc2a50143b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2269528e-2646-4e62-9146-01a359a4e8c7",
        "cursor": {
          "ref": "134a9c9c-41a4-436e-9f89-654467cf4700",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8663d6d5-8533-48e4-a6d5-ba286237fc63"
        },
        "item": {
          "id": "2269528e-2646-4e62-9146-01a359a4e8c7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1ea1a8f8-8a28-4ce2-bfec-de046e32660a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b719a1e1-9686-42b0-b5fe-59193ccdaf95",
        "cursor": {
          "ref": "59d11761-a9f4-4297-b843-940ac136fb07",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0b62bcc5-b1b5-4548-b627-70153b94d80d"
        },
        "item": {
          "id": "b719a1e1-9686-42b0-b5fe-59193ccdaf95",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7c3d2cca-aa68-4f64-b8ce-64ee018061e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a97a5fe-657f-4435-a2fd-327b8953e4c1",
        "cursor": {
          "ref": "3194b653-bb4f-445a-8eca-5b90185666ac",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "322c56ba-5429-40f8-a0ae-1445f7a96f04"
        },
        "item": {
          "id": "0a97a5fe-657f-4435-a2fd-327b8953e4c1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "aefc505a-17cf-4d24-9556-e357be36e8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00a23e3-7536-480a-8f18-72cc16d4b5e4",
        "cursor": {
          "ref": "76ea2c77-8537-4dea-ac09-fb48676800a0",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6069dd99-c7b5-4585-a4a4-37b763a4ff55"
        },
        "item": {
          "id": "d00a23e3-7536-480a-8f18-72cc16d4b5e4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5c45ae4f-7e30-4215-93f4-188f50a0c7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03002dc-ed65-4ac3-802e-3df3515f6492",
        "cursor": {
          "ref": "ae7c3f58-5f6b-4055-8f8c-4b5761f08f11",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c1deaaa7-9922-4150-9a69-2fab25529c05"
        },
        "item": {
          "id": "f03002dc-ed65-4ac3-802e-3df3515f6492",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "05b2089a-2084-40d7-a52d-8603a8d3a134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61b3218-de6c-4327-95a4-e8cbbe729d5d",
        "cursor": {
          "ref": "190663fa-30cb-421f-9710-94632cefeaa6",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5784e275-3e36-4a26-a7be-67a4cb4f9397"
        },
        "item": {
          "id": "a61b3218-de6c-4327-95a4-e8cbbe729d5d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2d8fcc46-a04c-4270-bbe4-57052c62fc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a8aceb-1493-4536-927b-98ca6b67c865",
        "cursor": {
          "ref": "dbd4d4b0-9d13-4d59-b019-83f45b597d18",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4418dc46-7c74-4c4a-a7d6-6f7738f98bd6"
        },
        "item": {
          "id": "e2a8aceb-1493-4536-927b-98ca6b67c865",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9fe0e411-c333-420d-bbd3-aa6086098d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41accea3-0696-4322-b99e-eca85f8eea48",
        "cursor": {
          "ref": "fbe53e04-8922-426e-a1b6-35c7cf5722e9",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c637fa3d-ace3-4be8-aef4-4623b1c4debc"
        },
        "item": {
          "id": "41accea3-0696-4322-b99e-eca85f8eea48",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "94ffd700-3df6-479b-b5bd-16db736cad0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d94fa8-6b81-4368-a840-e81e98c7b18f",
        "cursor": {
          "ref": "42fef386-88ea-4303-92fd-52cca3e1217d",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3015ccda-bb95-42db-88f3-6d73f88987de"
        },
        "item": {
          "id": "c8d94fa8-6b81-4368-a840-e81e98c7b18f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "af3e6bf9-77ac-4787-913f-424a9307db12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9610c21-7901-4014-be3e-691681180d6b",
        "cursor": {
          "ref": "ce17be82-6f2a-4513-b727-dd1474b13ba0",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "de24b08c-0f9a-4698-a72c-94810d84190a"
        },
        "item": {
          "id": "d9610c21-7901-4014-be3e-691681180d6b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "57d054b3-3ba4-414c-993e-6245d1906479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8097fde5-64ae-432b-aa78-32698031394c",
        "cursor": {
          "ref": "98313339-e508-4d26-ba1e-c385a1c957fb",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "874c281f-3d77-49d0-adc1-23a201394cc0"
        },
        "item": {
          "id": "8097fde5-64ae-432b-aa78-32698031394c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1e861d0c-4e39-4597-ab97-18f4a79b22f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fbc510-99ab-4730-9f9b-2ba2e52eaef3",
        "cursor": {
          "ref": "38f2de41-53cd-4557-b84d-c9353c593cda",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7b68c735-5342-44db-8d38-a89b02ce6803"
        },
        "item": {
          "id": "b2fbc510-99ab-4730-9f9b-2ba2e52eaef3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0e400656-246b-45a1-9b06-b3322af8a0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db4b3c3-271f-4253-8f56-6599521e5ead",
        "cursor": {
          "ref": "0dc09274-8468-40c8-9059-009ea5e395d7",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ed1bf3eb-cbd1-4cde-9933-f0443ffd1438"
        },
        "item": {
          "id": "2db4b3c3-271f-4253-8f56-6599521e5ead",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a3ad8f98-8f07-4bed-a77c-d14932c0b932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1a86ed-01ed-4c10-a7d6-0e9aef3bd62f",
        "cursor": {
          "ref": "87e73d0c-9e64-41ea-9f71-06c1dd609491",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2700f9b5-4733-44cd-b583-afa16ce12244"
        },
        "item": {
          "id": "3d1a86ed-01ed-4c10-a7d6-0e9aef3bd62f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e57d482f-0154-4597-96a7-6be8cb66b38f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d819cc-2825-4222-ba20-d4bd224b8f1c",
        "cursor": {
          "ref": "3595d7fd-ccf1-4045-bb20-ddd1788d32ab",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9bebcaa5-b0bd-45f1-a19a-0f9b6b464bd8"
        },
        "item": {
          "id": "34d819cc-2825-4222-ba20-d4bd224b8f1c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "509de3e0-6741-4576-a038-7a4a2e3ae857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ad85e7-6719-43d4-b91e-c28a600daeb2",
        "cursor": {
          "ref": "63ed72d0-a5b4-4109-9dc5-e2390fe9c6aa",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "57b02ab5-6a15-4ad9-a464-f6ab46ee4fad"
        },
        "item": {
          "id": "68ad85e7-6719-43d4-b91e-c28a600daeb2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "fc4eb6af-4b4e-4ff2-84f0-8ec9332b7fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daffbda7-3144-4de8-a68a-627e459ec620",
        "cursor": {
          "ref": "6a0e112d-5d88-4e8c-8902-0429117bbbfb",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "35544314-3784-4dec-bfad-8284af56b4fb"
        },
        "item": {
          "id": "daffbda7-3144-4de8-a68a-627e459ec620",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "877636bb-1791-4c55-aeed-5435cd406804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88aef9bc-e8e1-4a61-a87e-4990adc26451",
        "cursor": {
          "ref": "565a228c-cf8a-4977-8d36-9612b6230a3d",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3db349f5-aff0-4fc5-896c-c8293393f795"
        },
        "item": {
          "id": "88aef9bc-e8e1-4a61-a87e-4990adc26451",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7bbe73f2-8dcb-4a11-ad70-07bca52ca103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976d76a5-d177-4456-bcbb-b75a0ab395f1",
        "cursor": {
          "ref": "0b0d38d6-2eb9-4f72-8a0b-c3b535bb91db",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4a9bf7a4-fa32-49bd-aa1d-1ec39b688e51"
        },
        "item": {
          "id": "976d76a5-d177-4456-bcbb-b75a0ab395f1",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c3e18f0b-e1a1-4ce9-9ad2-4be6b8a77f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cd2d89-cf17-4a4f-8403-27c1a946b86a",
        "cursor": {
          "ref": "648f568f-13a9-40c8-9a75-c063ee4ed275",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "453d603c-604d-4188-af4f-c04657ab3b17"
        },
        "item": {
          "id": "c8cd2d89-cf17-4a4f-8403-27c1a946b86a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e1f995f8-344a-47bd-a98a-32e71a77df25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92214535-0df5-4a5b-8bd2-4141f98d8450",
        "cursor": {
          "ref": "af66cde9-c6b1-45c0-b12b-ddf2f11a0813",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8a643481-d840-4e11-9994-53877ae13caa"
        },
        "item": {
          "id": "92214535-0df5-4a5b-8bd2-4141f98d8450",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "320a2a2e-4afe-4e0e-b481-53831c7027f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd42dc7-a04d-404f-b7f3-1006b22c1b15",
        "cursor": {
          "ref": "774bddb4-37df-4284-964d-aada01e3226e",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b937c681-9346-424f-84da-f0dee4d9a9a3"
        },
        "item": {
          "id": "afd42dc7-a04d-404f-b7f3-1006b22c1b15",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2c2c7856-b541-4a21-bc77-bafe8ff50812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9828c47b-fef0-4305-8042-cde25598ece4",
        "cursor": {
          "ref": "3a09f7fd-0b1e-45b1-9f15-a60d8ee5ec39",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0b9faaf1-7226-4907-a42c-ec419a8ebb0f"
        },
        "item": {
          "id": "9828c47b-fef0-4305-8042-cde25598ece4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "67b5e475-0b2e-4dec-b7fa-48b4db3dcc98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904c6ac4-de13-46a7-8852-7f9c82b02aec",
        "cursor": {
          "ref": "0b28adee-ca21-4e5b-8749-6beaf70f5172",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5df1ef84-dc4a-48a8-8bb7-bdbfb4ce3bfb"
        },
        "item": {
          "id": "904c6ac4-de13-46a7-8852-7f9c82b02aec",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "555f4f1d-d79b-4051-b7d6-95cbe551ad17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f837498-89dc-449f-ba67-43dc4e3d7b69",
        "cursor": {
          "ref": "48a7dbdb-8a7a-4b05-b776-cea5c1ea2745",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6b2089d7-a909-4c36-a4d4-33c0057e667f"
        },
        "item": {
          "id": "9f837498-89dc-449f-ba67-43dc4e3d7b69",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1d06b1bf-2262-4b64-a12d-2ddf64985e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c02b1f-98b9-463f-871b-e4115bef4b5b",
        "cursor": {
          "ref": "402e49c6-4fad-4365-8c4b-e82e259e155e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7a232fc4-4ef9-49bc-9bd8-2a10aba1dec2"
        },
        "item": {
          "id": "a0c02b1f-98b9-463f-871b-e4115bef4b5b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6ba42136-533a-497c-aa38-c889fa3b0237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103112ae-8f0f-4355-8774-ab0b6376c806",
        "cursor": {
          "ref": "03a669f9-79de-42bb-a437-3dd630c17f47",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b88e2328-ad51-4798-b104-af709737f6af"
        },
        "item": {
          "id": "103112ae-8f0f-4355-8774-ab0b6376c806",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a09dc3fc-463e-4706-bca0-2dce5ae27c20",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "f201cc75-5f32-4a22-9aa0-5e3976709ab0",
        "cursor": {
          "ref": "bbed3970-43bb-4bd3-8dbe-1187a37d17a1",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0e478e4f-b36b-4475-a033-03db8b777856"
        },
        "item": {
          "id": "f201cc75-5f32-4a22-9aa0-5e3976709ab0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2e12339e-ceb7-497d-bb8d-2ffaa40c4366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7223573-6e09-4a16-86b5-010e51accac9",
        "cursor": {
          "ref": "559b939a-715d-4405-944d-546b2ea8c172",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b4959719-c065-4e66-9ca3-ad913750fb4b"
        },
        "item": {
          "id": "e7223573-6e09-4a16-86b5-010e51accac9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "44f93345-37e0-45f1-8cf1-8a80109a6d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69657ef-fb5d-4848-9c53-e665fe887d1a",
        "cursor": {
          "ref": "cbce3cc4-dcf5-4cae-a32f-2b3986c3f2da",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b3f1b1db-8124-4864-b037-3e0be3abe690"
        },
        "item": {
          "id": "b69657ef-fb5d-4848-9c53-e665fe887d1a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3e3b904b-2e7f-49a4-af2e-e498a07813df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb1597b-01c9-4a02-ae2c-518a7ea6f6ac",
        "cursor": {
          "ref": "1f953e9b-76d6-4be6-a119-8143ff5cb7e9",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0682cc9f-37b8-48e9-8045-270313d1925f"
        },
        "item": {
          "id": "7bb1597b-01c9-4a02-ae2c-518a7ea6f6ac",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "46bbf932-c76c-4467-8b3c-438c47a5b7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04950491-2766-4f71-af33-f883439ee864",
        "cursor": {
          "ref": "9bda81d4-fb02-4e90-9639-4eb4bdb01111",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "79461336-1e20-40bf-bf54-a973bdf9dc5d"
        },
        "item": {
          "id": "04950491-2766-4f71-af33-f883439ee864",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c59a045c-4ff4-423c-bef2-75a3606ec900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019208a1-6614-4749-901a-56763433cd24",
        "cursor": {
          "ref": "13af358f-a9d7-4445-ab15-a8677d3d8dd4",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "162430f9-474b-4a85-8f1d-2b628ce866a7"
        },
        "item": {
          "id": "019208a1-6614-4749-901a-56763433cd24",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "be4e768a-0140-427c-8c5c-999c058a2733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2dbfbc0-0c61-4574-b016-0709a607b619",
        "cursor": {
          "ref": "2be680cb-6d66-49d6-a170-e9db5d8bb7ae",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6a766b90-76f5-4af5-b601-b0dd9f748f47"
        },
        "item": {
          "id": "f2dbfbc0-0c61-4574-b016-0709a607b619",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9b223f32-3539-4c70-8aaf-1ea0cce4cab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293ed62d-b9c7-4021-b671-c97b9eebef0a",
        "cursor": {
          "ref": "bd371f90-cf50-4aae-a6f0-302283d2d66d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "57660ff5-960c-41ed-9d18-601514645cb0"
        },
        "item": {
          "id": "293ed62d-b9c7-4021-b671-c97b9eebef0a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b0d01c54-e155-4587-958d-7243a87b4b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d093a10c-7a56-4f7f-bf86-5b96bdff5f04",
        "cursor": {
          "ref": "58e3c5d3-4862-449e-b3ed-8cee763bcc70",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4a33de04-89f3-4b89-8c83-90e3c381e32b"
        },
        "item": {
          "id": "d093a10c-7a56-4f7f-bf86-5b96bdff5f04",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "665d2000-35bb-4675-bafd-064f50b16c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e29a1c-d74d-4a5e-9178-95d2ea0c7928",
        "cursor": {
          "ref": "ee6a5f4c-a19f-40e6-88d0-9a127ffdf1e7",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "674f168d-52bb-4e58-b4bf-69d754bb7f65"
        },
        "item": {
          "id": "78e29a1c-d74d-4a5e-9178-95d2ea0c7928",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "edb82b02-50b4-4079-9c13-73c180211923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d5304a-7d49-4b41-9089-d7e378d56782",
        "cursor": {
          "ref": "b3f7c1dd-4e49-496d-b425-78d85be37286",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "72cb0a98-f91d-4398-90db-b3c409997925"
        },
        "item": {
          "id": "d8d5304a-7d49-4b41-9089-d7e378d56782",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4b0f38b6-e39b-415f-8bde-e57a8faff969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7a6309-6b01-4cae-b5b8-aeea627ba38e",
        "cursor": {
          "ref": "3a90ac28-a7fa-4b5f-b721-117b03d92f26",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ce53c8a7-774c-47a5-bb42-ce0ed910cebf"
        },
        "item": {
          "id": "ed7a6309-6b01-4cae-b5b8-aeea627ba38e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9430bbaf-2bd3-408f-91ed-c26a09caa90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fceb8c60-7950-43f6-aa2b-61da3f955cd5",
        "cursor": {
          "ref": "37a8bf5f-7432-4b14-8201-a6aaebf2e6c3",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "922ad00f-ac4d-4918-b192-744f5dd1b8da"
        },
        "item": {
          "id": "fceb8c60-7950-43f6-aa2b-61da3f955cd5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2147fc7f-3862-45b3-a277-5c7fd958193e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29851cd-6d76-4ddf-a73d-f6de53592e56",
        "cursor": {
          "ref": "4ebbd937-bd7d-4084-ae43-5ca54f722b72",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b1b476a4-55ad-4147-b7ba-9f823e510ccc"
        },
        "item": {
          "id": "c29851cd-6d76-4ddf-a73d-f6de53592e56",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c6d4be34-0b40-4843-86db-9d117070eafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763badfb-2e0d-4193-9312-f1d80f3b5115",
        "cursor": {
          "ref": "c60b9f67-0648-4d5f-bbf2-2541f1496a18",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "95141d00-ef1d-4f61-90f5-cc284c0594aa"
        },
        "item": {
          "id": "763badfb-2e0d-4193-9312-f1d80f3b5115",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7bab3449-0c25-4950-86e6-185a6e8f8e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe8903b-ca6d-4dc2-bc89-b366dbbb949e",
        "cursor": {
          "ref": "1d11d570-a8ca-402f-a70b-dc26f57a4dc1",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "64f367d4-1381-49d8-81d3-2a88e5280272"
        },
        "item": {
          "id": "6fe8903b-ca6d-4dc2-bc89-b366dbbb949e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "29698721-ab6a-49f5-9e6a-eeb6a428e20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ad70c2-b998-4737-906a-71e247ea5485",
        "cursor": {
          "ref": "027246ce-fda7-4572-8240-93057dd41309",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "cb7d00ab-deb2-45f8-92b8-784a273f66ae"
        },
        "item": {
          "id": "37ad70c2-b998-4737-906a-71e247ea5485",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f60a53d5-a73d-473e-a8aa-b899e49ff73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7400962-1870-4470-af90-e47503f0cbdf",
        "cursor": {
          "ref": "2c5011ed-eaef-4015-b811-21805bda2b36",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3688458c-9100-40a6-9bd6-5b6119cf77cd"
        },
        "item": {
          "id": "c7400962-1870-4470-af90-e47503f0cbdf",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f5e1d837-b6fd-4cb2-a571-75eadb3fee6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe698e1-e77d-4612-ba2a-7fcca4c07276",
        "cursor": {
          "ref": "3d051aed-a098-4f00-8e4f-ad2f32d4d952",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a2e19f22-c1e9-4a5b-88fa-ed2bb9601e47"
        },
        "item": {
          "id": "cbe698e1-e77d-4612-ba2a-7fcca4c07276",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2cae2cef-6a45-4eb7-b144-31280ef96b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6805de42-1481-4ab9-b2a5-a35dab2a2bec",
        "cursor": {
          "ref": "8f09a7b5-b8cb-4dcb-be25-b0b1b88c3f77",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ee851e3e-c3d7-4f23-94cc-94bd03f3c67d"
        },
        "item": {
          "id": "6805de42-1481-4ab9-b2a5-a35dab2a2bec",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6b9a4e17-5266-42b0-927d-e6aa386be6a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56571be9-2096-439a-977a-931fccaad328",
        "cursor": {
          "ref": "ba3207e3-eb34-42d2-bdce-9434a77d41f2",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "aacd5a16-7d5c-4902-b1a0-fa04c689be01"
        },
        "item": {
          "id": "56571be9-2096-439a-977a-931fccaad328",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "66794e33-ea49-42dd-8f31-6f2f114f9f3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d660bd69-61e2-4011-9552-80719ad971b8",
        "cursor": {
          "ref": "03ab9041-5343-4ebc-a548-87133dbd0fbd",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1b85267f-7582-459e-b89e-14ecd2c2e778"
        },
        "item": {
          "id": "d660bd69-61e2-4011-9552-80719ad971b8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3fed76a3-eed9-41f5-9008-070cd99ba1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5133c17-2949-4123-abe6-eb49bc8ae378",
        "cursor": {
          "ref": "53d4db37-efd5-48c4-b6dd-10ed03dbc8c7",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fa02d473-1173-4f18-b36a-35ae0336b0f7"
        },
        "item": {
          "id": "c5133c17-2949-4123-abe6-eb49bc8ae378",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "88091e37-b1ed-4ce5-bec7-68ee4e0a968a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d27e64-1c31-4a2e-81b2-148fe72be1ba",
        "cursor": {
          "ref": "86fa80ef-426d-4df0-bce6-f76d1aed3edf",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6eb394b6-907a-4e6b-8b3e-3c0e81bde512"
        },
        "item": {
          "id": "b9d27e64-1c31-4a2e-81b2-148fe72be1ba",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a7a8ad3c-6dc8-4e73-9ff1-e26a1a3de212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b97cf37-1e49-4521-b274-297945dcb4b1",
        "cursor": {
          "ref": "488cb001-1620-48ff-9932-8a1b1ae44b6b",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "15c7d60b-3776-48c5-af67-7cc712012dff"
        },
        "item": {
          "id": "3b97cf37-1e49-4521-b274-297945dcb4b1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "76518001-845b-48f1-8eff-e9e559e1afd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e86b22-855d-4eb3-8b86-7c7862d07621",
        "cursor": {
          "ref": "59416a84-96b2-423a-b05d-d6efdc1ed0b6",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d13efc77-4c0b-44d2-bf11-8b09d9a187e5"
        },
        "item": {
          "id": "b5e86b22-855d-4eb3-8b86-7c7862d07621",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "83d8d353-1299-47f4-bdaf-9e8623377adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578e67e3-ff90-464a-9a71-80e5d94dcd4e",
        "cursor": {
          "ref": "6e01ff38-8573-4eb8-a3be-ea7257067f5d",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "99f92df5-62f6-4263-9133-78251b24d027"
        },
        "item": {
          "id": "578e67e3-ff90-464a-9a71-80e5d94dcd4e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bbeb65a7-e860-4c65-af42-5b8756bb253c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71ff591-4de0-4b58-a081-04d77e29b14e",
        "cursor": {
          "ref": "699e0433-4300-4e51-aeab-3ddfeb938369",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "96746469-6849-4fe4-b6ba-05f543aeb5ac"
        },
        "item": {
          "id": "f71ff591-4de0-4b58-a081-04d77e29b14e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5b7d4bb2-ddeb-4beb-9996-0da127b055c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b2a268-8b6f-466a-a236-115ba756dbd2",
        "cursor": {
          "ref": "79834b7a-775a-4753-a518-0653afbb2496",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "03bf90a3-d79d-443f-b87b-f0d2f685cd75"
        },
        "item": {
          "id": "49b2a268-8b6f-466a-a236-115ba756dbd2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5dfdc1e5-2939-426e-821b-5405471b4366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2a9894-d878-46f1-924a-436d62021a09",
        "cursor": {
          "ref": "89ed0562-6f40-48a8-a9d6-04c27a7078a4",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0c99648b-5719-4b75-85ae-0839e89d8039"
        },
        "item": {
          "id": "ed2a9894-d878-46f1-924a-436d62021a09",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "14356715-7606-4b33-9b39-e52ceb43912e",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "3d31dc31-0f91-40ff-995e-2acdad59b1f7",
        "cursor": {
          "ref": "f3b74a6e-4ac9-4fda-9995-f921414d0c93",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "bb1bd136-aebd-4e46-a27f-9569cdfd29bd"
        },
        "item": {
          "id": "3d31dc31-0f91-40ff-995e-2acdad59b1f7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "39a96db5-03cd-4d37-a7c5-0c508b08f536",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "b1f73b4b-ac3c-4350-86e9-abe3a255b170",
        "cursor": {
          "ref": "f1c56137-88ff-4bf2-9e24-934e890f8e28",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ab174a71-1a64-4636-9f0e-fde624d75b90"
        },
        "item": {
          "id": "b1f73b4b-ac3c-4350-86e9-abe3a255b170",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5f5a5eb0-aeb1-41df-9958-848f1290f184",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a175c850-91b3-4929-bea0-0ec4b1f813ee",
        "cursor": {
          "ref": "2e5170e9-9069-4513-ae34-7f52777e5c33",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5517a5f4-c242-4897-b723-3f766625f4ff"
        },
        "item": {
          "id": "a175c850-91b3-4929-bea0-0ec4b1f813ee",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "826742ad-5a7e-4ac8-9a48-f9027cc7b815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c6a05e-3d9f-4c91-99ff-a014ccfebe13",
        "cursor": {
          "ref": "3d50370b-3a43-4b98-b8d2-bfc61f6bdf1a",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a14573ea-3b9c-4d56-b38f-93ff8f2b8ab3"
        },
        "item": {
          "id": "a4c6a05e-3d9f-4c91-99ff-a014ccfebe13",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c2d614f5-94ae-49f7-ac9f-a57880160e59",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "6238da04-35b6-404c-90bb-bf14c0723341",
        "cursor": {
          "ref": "0f1ce9b8-04b6-4699-9088-4f758a80acd9",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "04d02579-359e-4d5d-aad1-ae4e44ad56cb"
        },
        "item": {
          "id": "6238da04-35b6-404c-90bb-bf14c0723341",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8b660699-ccbd-4ab0-ac50-4b087be77f73",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "c63f1f4d-33fc-4e3b-9d68-1cfd316585d2",
        "cursor": {
          "ref": "b973b6dc-e81e-4f1c-94a7-a02e2818a958",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0d67b35c-4110-485d-8734-37b77336d49b"
        },
        "item": {
          "id": "c63f1f4d-33fc-4e3b-9d68-1cfd316585d2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d705fa46-6983-4d6f-8fc5-9e12c9147f89",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "b3397ec4-4885-441a-aa8d-c318e5e4e5eb",
        "cursor": {
          "ref": "9fd72d74-82d1-4552-a4fb-5cbaf1d0e716",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "226fe040-2900-427a-bf52-eb8c1e513d2c"
        },
        "item": {
          "id": "b3397ec4-4885-441a-aa8d-c318e5e4e5eb",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "47c82fac-87a7-4c7c-a2d1-85faa5a7f7e5",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "990b9755-c9dd-485e-90ff-15fe92031155",
        "cursor": {
          "ref": "6f800e27-0cbb-4298-ad40-3dac9188652f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5f825b65-c7a4-4095-90b2-8ada408b087e"
        },
        "item": {
          "id": "990b9755-c9dd-485e-90ff-15fe92031155",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "73a8651e-4dc2-4616-acde-9ca9a21313aa",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "7097d075-7c42-4cb1-8ac1-7c409ae5fd2a",
        "cursor": {
          "ref": "6788e7f8-8408-40b9-9554-933e77f577ce",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4c9047a6-05a2-4f77-b2f1-6ac90c7dbab7"
        },
        "item": {
          "id": "7097d075-7c42-4cb1-8ac1-7c409ae5fd2a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "63ba84a6-4dfc-44fb-9be5-6f44cdb7376f",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "149e0c03-e424-41af-90ed-66e3c9481e22",
        "cursor": {
          "ref": "e058e1ac-d164-4a9d-bcfb-03b476dd4778",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f794c90e-6d04-4fca-924b-4728dd8b11f2"
        },
        "item": {
          "id": "149e0c03-e424-41af-90ed-66e3c9481e22",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "af94a7f0-f68b-4a60-bcba-6dca2fc2a694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a399e1-fd25-484b-89fb-4c7e594194c7",
        "cursor": {
          "ref": "48e2c91d-5e7f-4359-96ef-d786686344c4",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "90ffcb05-7cfa-4d8e-968d-60fb0911c83c"
        },
        "item": {
          "id": "62a399e1-fd25-484b-89fb-4c7e594194c7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8380e3b8-e63f-47d1-a261-eaeebf4021a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39aa361-69ce-424b-aead-1825ace10f6a",
        "cursor": {
          "ref": "85312dde-62ed-4216-bd60-51acd3360341",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d51d1a18-b7dc-4a61-b733-4caab0e8bc3c"
        },
        "item": {
          "id": "c39aa361-69ce-424b-aead-1825ace10f6a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "48a11f79-0b10-4090-8e0a-26c4e4d4a50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec0e3c2e-9996-4650-8893-4669c9ecc97f",
        "cursor": {
          "ref": "78e8d41d-b90c-4ee7-9596-753a86f8d9e3",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "07b1ed32-882c-4d71-b567-5073cbab8074"
        },
        "item": {
          "id": "ec0e3c2e-9996-4650-8893-4669c9ecc97f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f827224e-a91c-499f-93ff-a9879f50ad8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e968157a-5770-4553-b432-8f57348f8025",
        "cursor": {
          "ref": "138845a3-52f2-49d7-bef8-b4462ce0b2ff",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "08b209b8-94ec-4aa4-a4e9-f8049cfb8d16"
        },
        "item": {
          "id": "e968157a-5770-4553-b432-8f57348f8025",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "59b386e7-13e8-4112-8ecf-aa8703e0d2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1211095-7edb-4e8f-ba40-8f8bb6994a47",
        "cursor": {
          "ref": "5adfff0b-2d71-4b17-8c6a-9e0d73ba93e3",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "85d23f74-3c89-4f39-9856-4a76177bf5ef"
        },
        "item": {
          "id": "c1211095-7edb-4e8f-ba40-8f8bb6994a47",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cb6ae82a-65a6-4f58-9937-ae26031cf210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ad209a-ea29-4109-ade1-cb0e609b5d25",
        "cursor": {
          "ref": "07225614-237a-4909-994e-3feec7f55e85",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dd6a17f9-a047-4360-99f3-74d4588e8ac0"
        },
        "item": {
          "id": "e1ad209a-ea29-4109-ade1-cb0e609b5d25",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "76162c20-fe3d-4981-98c9-9e5159c41a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57fe382-231a-4d37-9bd6-43d06ea79446",
        "cursor": {
          "ref": "f0758c09-b948-4329-9679-e22774a94688",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d3926812-b0e2-4f97-80ee-70e20e6f62a6"
        },
        "item": {
          "id": "a57fe382-231a-4d37-9bd6-43d06ea79446",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "291dd35e-1d02-462c-bd0f-3322e242f6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b596fc3d-5fa9-40a5-b67a-6e1de1572f4a",
        "cursor": {
          "ref": "0de290aa-823e-466e-80f3-18ce1339a639",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0fd9e473-49f4-451f-838f-9610119e0105"
        },
        "item": {
          "id": "b596fc3d-5fa9-40a5-b67a-6e1de1572f4a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "be2d5d91-ab72-4a8c-b76b-11a9dd0892ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6060c1-46ef-4829-81da-9ad30fe78f28",
        "cursor": {
          "ref": "0d79d377-9310-45e9-b337-e3afc0f7b938",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8bbd470f-c96d-420e-a77c-48ab7159288a"
        },
        "item": {
          "id": "cc6060c1-46ef-4829-81da-9ad30fe78f28",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7c12af29-2bba-4f1c-918c-60446d6a9e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a031c0-b368-4983-b6c7-5226ad7bb80e",
        "cursor": {
          "ref": "01cfbf6a-3ffa-4f77-8c05-01316619e5a0",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ed93540f-8e96-4a62-ba56-661292966134"
        },
        "item": {
          "id": "c8a031c0-b368-4983-b6c7-5226ad7bb80e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dc2be3d9-2c5e-4311-aee4-944b5ecb3d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d6ef67-4c2f-4754-b78d-bd83dfe852a4",
        "cursor": {
          "ref": "ffccacd5-85c0-47b6-b6ef-71b34f77e899",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7f7ae486-8c99-4386-bcfb-354835ff3843"
        },
        "item": {
          "id": "26d6ef67-4c2f-4754-b78d-bd83dfe852a4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1fd03419-55ee-4003-a6cb-cc37cac09942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c404fba-001f-4ad1-b7b4-ead877888045",
        "cursor": {
          "ref": "eaea01ec-11bf-4852-90b6-c2ae3933d82e",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "49c07725-2bcc-4856-be3e-45b6c37b717e"
        },
        "item": {
          "id": "3c404fba-001f-4ad1-b7b4-ead877888045",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d7bb6d19-1263-4b46-b48a-98f95feea126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6a2512-b32c-4243-8c39-50a32691a14c",
        "cursor": {
          "ref": "f6cb6641-926e-411f-b150-97909f67890e",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "05f0e1ac-68b9-41df-a91d-0c16c611c98f"
        },
        "item": {
          "id": "6d6a2512-b32c-4243-8c39-50a32691a14c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4bb974f2-4ffa-4e1d-9fd5-33dd95b9ec8b",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "76604e11-5ba6-4add-b39e-0f56717bfce2",
        "cursor": {
          "ref": "0bd505b8-12bd-4074-905f-0865a998b8fa",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c9c43f91-ef3e-435d-aefb-f5640311b097"
        },
        "item": {
          "id": "76604e11-5ba6-4add-b39e-0f56717bfce2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "81f50d93-1d53-42a8-953f-55846f527fac",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "1694e6e4-0cbd-4b1d-9e31-2939adf1e5e6",
        "cursor": {
          "ref": "80464ba5-421c-4ac5-9b37-5c666e58f5ab",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a5927ba4-6f09-4e53-93ef-6da57322025c"
        },
        "item": {
          "id": "1694e6e4-0cbd-4b1d-9e31-2939adf1e5e6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "295f796f-eaeb-4ad9-9cad-9d823c2d1786",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b360f630-b868-41e7-9503-e8e5c8923f6c",
        "cursor": {
          "ref": "a16b8a43-5f70-4450-892f-d9f401ea63c7",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0cdf9414-0b5e-4ff9-ad16-321918cc8bf4"
        },
        "item": {
          "id": "b360f630-b868-41e7-9503-e8e5c8923f6c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d7c7badf-00af-4d6f-8c07-9c9cde650ebb",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "38fb7f06-a7d9-457f-873b-cb695e2c6763",
        "cursor": {
          "ref": "f5a186f0-39e5-4d5d-915a-2a7bc415351a",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1d637257-e6af-4fb0-97eb-272994413c75"
        },
        "item": {
          "id": "38fb7f06-a7d9-457f-873b-cb695e2c6763",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "04afe01c-9b24-4259-9a7f-1b588f2f1300",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "d4544627-f4d4-450e-8759-f4c8a5c75e1d",
        "cursor": {
          "ref": "4d7fbc63-a7d8-4e92-80bf-17d039317dc5",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "80a1fcdf-a43b-47ef-8065-046f16455965"
        },
        "item": {
          "id": "d4544627-f4d4-450e-8759-f4c8a5c75e1d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "078e0818-f9e8-4b3d-93f3-288125792da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f135be6c-63b1-40e4-8958-27fcaff2d444",
        "cursor": {
          "ref": "3c2f5db5-5757-40f8-a54a-2d5458feb7ad",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d8f583be-2c21-4ade-8fa1-e6bab363380b"
        },
        "item": {
          "id": "f135be6c-63b1-40e4-8958-27fcaff2d444",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a405e87f-e401-4cc6-80ea-94e20e65edbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771f4026-cb9b-44ac-8923-86c66e3dccdb",
        "cursor": {
          "ref": "80057037-d225-4c45-bd21-dad4c24913f1",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bc3cd5e1-4658-427f-a7f9-2f7451f187ec"
        },
        "item": {
          "id": "771f4026-cb9b-44ac-8923-86c66e3dccdb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3dd426cf-14c3-4d22-acd3-c9b166d7241a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70db8c66-3d99-45df-baab-68cb85482940",
        "cursor": {
          "ref": "675750f9-0e8d-4f6a-b1fd-2652115b7a8f",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "08805836-92ef-42ed-bf07-82cb293ec2a7"
        },
        "item": {
          "id": "70db8c66-3d99-45df-baab-68cb85482940",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f7d99b3f-13b3-4426-8823-2d4ebe3c3494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c019f3f4-f364-49ad-bc34-b7ef1fdec332",
        "cursor": {
          "ref": "2bec7afc-2a15-4144-99ea-280f192e399e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "885038ec-0cc1-4283-958e-2fa6f96700ee"
        },
        "item": {
          "id": "c019f3f4-f364-49ad-bc34-b7ef1fdec332",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b0330d27-a763-4785-94ad-714dd577237b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6fc579c-3deb-4edd-a6f5-0da8062003c6",
        "cursor": {
          "ref": "9d17ba5f-c650-473d-b12a-334968b23aa8",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8b8acbb9-fc2e-44fb-be0f-8c227ac1196d"
        },
        "item": {
          "id": "a6fc579c-3deb-4edd-a6f5-0da8062003c6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e318dc43-2ef4-4dd0-a5b9-1b65bbf4a756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6a1da2-760b-4846-87b2-fa9c85507f4c",
        "cursor": {
          "ref": "d5f08f3f-aea8-4cae-9e7d-80cbe18e0a55",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d67f870f-f841-4b11-9401-ef18e7a34483"
        },
        "item": {
          "id": "9d6a1da2-760b-4846-87b2-fa9c85507f4c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b660b72f-12c5-441e-a962-d19dcf83016b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3772b7de-befe-41fd-8049-a50eb3834f24",
        "cursor": {
          "ref": "a4bd17a0-909f-4b91-ad70-450f26d4cdaa",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4b19f008-70d7-454f-b742-01316c462a33"
        },
        "item": {
          "id": "3772b7de-befe-41fd-8049-a50eb3834f24",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "da7adb44-4dd0-481e-adcc-f716f59d68b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9246cfaa-8b8b-43f0-9ce8-edd78325a029",
        "cursor": {
          "ref": "25628ddd-270b-4be8-9e0d-24d11d5efd2f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "72504295-d27a-4329-9435-4375dbd85bbc"
        },
        "item": {
          "id": "9246cfaa-8b8b-43f0-9ce8-edd78325a029",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d7befeb4-def9-4999-824a-994b70a13c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68291f8-d371-4f8e-bb4c-c06cbd775bc3",
        "cursor": {
          "ref": "f0d30e71-dbb3-45a7-8a76-884d9b802e91",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ed8bd356-89ef-4adc-a423-30343f5b6c71"
        },
        "item": {
          "id": "a68291f8-d371-4f8e-bb4c-c06cbd775bc3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "846b7083-497b-4f97-96aa-14adc5a8abf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6cbab93-1d6e-42d9-bd8c-5fe567241532",
        "cursor": {
          "ref": "4b92e518-4529-4330-8027-fcd037ea32f8",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "18b7fa9a-f41c-485d-9493-b61150c02dcd"
        },
        "item": {
          "id": "a6cbab93-1d6e-42d9-bd8c-5fe567241532",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f6daa992-95be-41b2-bb7d-4df87ec80076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37468c00-757d-4022-b7a9-225308cc9a7d",
        "cursor": {
          "ref": "84518b4d-797d-4c01-a100-37620fd6d3b9",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3779be9a-82c4-40be-b2e4-ec2ad3a85ffd"
        },
        "item": {
          "id": "37468c00-757d-4022-b7a9-225308cc9a7d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b555d6a4-eac6-4712-801c-f1b3854ff7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beebd337-5178-439c-ad92-7904c712b3a8",
        "cursor": {
          "ref": "b3cd3b28-6cc5-4a0e-9a85-d4bfeaa328f2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e7751304-852a-4076-8f25-ee8a55738dfb"
        },
        "item": {
          "id": "beebd337-5178-439c-ad92-7904c712b3a8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "dce8bdd3-e6b6-4bf5-8561-928ec84bd040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5feb6479-e42b-4bff-9c27-b6677f111902",
        "cursor": {
          "ref": "de24f3da-78c2-4446-9e20-cbd9e1a55c4d",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6712f4ba-68be-4eae-9e69-0ea52f118116"
        },
        "item": {
          "id": "5feb6479-e42b-4bff-9c27-b6677f111902",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "aa37c9e0-997e-4d74-9bad-56fc72135970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad9bd34-dd70-41db-9253-f5967ac18ec8",
        "cursor": {
          "ref": "226685ff-599d-4c5b-ab48-7f8f89061242",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d534ed24-666a-48b0-bcc1-3d322369982f"
        },
        "item": {
          "id": "7ad9bd34-dd70-41db-9253-f5967ac18ec8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "88b5308a-14a8-4907-921a-d25ea7e4195f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cb4639-bba8-42a7-8b8e-c8fe9d134df9",
        "cursor": {
          "ref": "6cdbc099-06b1-490b-9190-7129e1d81076",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "54720027-be1e-4ac2-a2e8-b7ac5920446c"
        },
        "item": {
          "id": "06cb4639-bba8-42a7-8b8e-c8fe9d134df9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e2585166-47a6-4806-bb60-b6a72b50959d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc13123f-82d4-4704-9cdf-13d61a48fbf2",
        "cursor": {
          "ref": "0f8d8b76-5e5c-40f1-bc20-dbddc737f3ac",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "15463c61-1e81-468a-8c6e-c5b1a31cadea"
        },
        "item": {
          "id": "fc13123f-82d4-4704-9cdf-13d61a48fbf2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "eab1b3f3-72ed-40da-b9ab-14272251b896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e605bfcc-910f-4442-a376-026741292a30",
        "cursor": {
          "ref": "12ebbf60-505e-431a-a052-eeb5ab30bef6",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a172fcc7-b2e0-4b37-ae28-9c8352ed9362"
        },
        "item": {
          "id": "e605bfcc-910f-4442-a376-026741292a30",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "456cd28a-d4bc-4138-ac9e-436ff2c68405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a2bec0-598a-404f-b702-2420daaa5861",
        "cursor": {
          "ref": "47fce752-afe5-4d4b-b3b7-cbc5f40b0c16",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "37df2d77-297f-44c4-8131-baa862af218e"
        },
        "item": {
          "id": "41a2bec0-598a-404f-b702-2420daaa5861",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e5e16f3d-ca0c-43dd-abab-190da611c266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586a1edf-41c8-4b9e-9fe2-64bc0831aed2",
        "cursor": {
          "ref": "8eb79554-400d-43de-a33d-08b49d505afe",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9e5eb144-c9e9-4032-baaf-97bf63d77691"
        },
        "item": {
          "id": "586a1edf-41c8-4b9e-9fe2-64bc0831aed2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "704b5958-0791-4b5f-8c38-ba133dabcc5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005a0bef-dbe8-485d-b743-0d4045354984",
        "cursor": {
          "ref": "6eafc595-8e5e-450a-9cff-141134dc5a47",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0b6682ce-13c5-4901-b0f6-c6144352fa32"
        },
        "item": {
          "id": "005a0bef-dbe8-485d-b743-0d4045354984",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9e11f7b1-aefd-4466-9ad6-a936414e4aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5701e60-70b7-46b9-a745-f99ed45e8e50",
        "cursor": {
          "ref": "0feee25d-5ba7-498e-a904-0d08a00f9d20",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c87d88d2-8d20-4672-9bd1-2a24a7670e69"
        },
        "item": {
          "id": "f5701e60-70b7-46b9-a745-f99ed45e8e50",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0dfcc20d-7657-4b5d-9d02-0bbd60ba4a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58360b6b-9b2f-44ed-b2d0-10fb4fdc45d8",
        "cursor": {
          "ref": "fca88256-7ebf-4370-8335-954312715645",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6710bf6d-bd46-419f-93da-410b643a0cd0"
        },
        "item": {
          "id": "58360b6b-9b2f-44ed-b2d0-10fb4fdc45d8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5d4db9f4-5d63-4785-999d-dc8685d4b8a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4a8966-3f36-4b63-b7c6-7ad710ec39b5",
        "cursor": {
          "ref": "df4fefeb-f32e-4403-b10d-93ddd411abea",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "70a64cd4-9ebf-460c-9f82-c3e5b2e5edb5"
        },
        "item": {
          "id": "0e4a8966-3f36-4b63-b7c6-7ad710ec39b5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f2df0b69-91f7-43ae-8e5f-b5556e78e705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc8e032-4188-4eb5-8d7f-3328bda8cbfa",
        "cursor": {
          "ref": "ad9868c9-5b7a-4051-bf89-6719896219e5",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "798206f9-5c0e-46e8-8a53-2ba9b7e3bd2d"
        },
        "item": {
          "id": "8dc8e032-4188-4eb5-8d7f-3328bda8cbfa",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0c27622f-75b3-4cd6-aa56-38cfbf2f4202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838d696b-7180-473c-a02a-c502f82c7e26",
        "cursor": {
          "ref": "0617e053-16dd-4d03-92c1-d7b9e6c1f358",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "816ef287-24a0-4c4b-9bc6-468f9612128c"
        },
        "item": {
          "id": "838d696b-7180-473c-a02a-c502f82c7e26",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e1b9a752-1119-47dc-968d-b00b322c0689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2de64f-d3b7-46f3-a192-d3e6fbe21f83",
        "cursor": {
          "ref": "cf002b2b-b7d6-4bd1-b924-c1705b9f8ff9",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "402a48d7-8b30-479b-a59e-f42b0b26a0d6"
        },
        "item": {
          "id": "fa2de64f-d3b7-46f3-a192-d3e6fbe21f83",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "14f0a329-cd0a-4441-a75d-07e82e43fd56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81110cfd-0127-4e5b-91fd-6a5e3ce05aab",
        "cursor": {
          "ref": "27a9f382-2ae1-408f-a113-b28f94284bf4",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2a71da6b-8b63-43e8-a814-078cbbc70212"
        },
        "item": {
          "id": "81110cfd-0127-4e5b-91fd-6a5e3ce05aab",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9c95dd35-7202-4267-bb39-33ac80779d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b159bc81-140b-4464-b579-dcb805dad324",
        "cursor": {
          "ref": "a1cf9fb7-0387-48d0-9b67-ee06a664610d",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c0cb1260-9d0d-478f-9d1a-e3d6c944ddc1"
        },
        "item": {
          "id": "b159bc81-140b-4464-b579-dcb805dad324",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "64302ce4-f6b8-48ea-9d2e-510401f9b089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdfcaf19-c469-447c-9ff9-0b7ffa6f99c5",
        "cursor": {
          "ref": "a699edb3-12bd-4023-8f96-5774e95d919c",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0525428c-c9e3-468b-9994-791df7eed2ae"
        },
        "item": {
          "id": "cdfcaf19-c469-447c-9ff9-0b7ffa6f99c5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "79ca4421-c9ab-4cf5-825d-fd0a5ee901b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd628fc-e9e2-4261-a9af-ec5e1a1adaff",
        "cursor": {
          "ref": "d7d41058-a5c4-43f2-81fa-089da5fce6f3",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8e9dde86-1e70-429e-8eb3-387e5124a739"
        },
        "item": {
          "id": "2cd628fc-e9e2-4261-a9af-ec5e1a1adaff",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1123b5f2-7a80-42ae-8c82-5dd9cb414b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd187a6-d18f-44c5-9a67-f48a4189f771",
        "cursor": {
          "ref": "2dcbdcce-5c53-4e2d-a324-fe17582a4f3f",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d13b303e-6ba4-434f-961d-278b371c696b"
        },
        "item": {
          "id": "0cd187a6-d18f-44c5-9a67-f48a4189f771",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e9711beb-7031-4d54-b61b-76f5cdfb8946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be8bb9f-0ab7-4ccb-a3cc-8bfd72fcc4cc",
        "cursor": {
          "ref": "9d920d1a-abcb-4270-bfa9-af556ad9a4cd",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9bd8d9ed-1035-4354-a610-b03511f20bc3"
        },
        "item": {
          "id": "1be8bb9f-0ab7-4ccb-a3cc-8bfd72fcc4cc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a91071cc-7451-4a20-9c91-937eaadacf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab15ac4b-f850-45b4-8f54-f45c221a46ae",
        "cursor": {
          "ref": "68ff092a-b1fe-4bec-ae1d-0098f5e15440",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "36ad493f-4ec6-4e6f-89b4-4977ef90fb34"
        },
        "item": {
          "id": "ab15ac4b-f850-45b4-8f54-f45c221a46ae",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "28c948d8-77c3-4fb6-87fd-ca3752e5dcc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a22939-5680-47c5-98c4-5abd561cc2b0",
        "cursor": {
          "ref": "d5accaf0-8e3f-4b94-b176-2e2d439ccee6",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "cdebcfe9-b84e-4f48-8e9d-2b242c9be135"
        },
        "item": {
          "id": "f7a22939-5680-47c5-98c4-5abd561cc2b0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bf143f98-baf8-49a6-af2d-da0074efa355",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cf8307-af74-4945-aa60-0636ed305246",
        "cursor": {
          "ref": "eac322eb-6b31-4db5-a8ea-5d5089551e97",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bea6ae77-dadf-4245-bf71-cd3d5ee55f3d"
        },
        "item": {
          "id": "72cf8307-af74-4945-aa60-0636ed305246",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "82de2315-7f38-4644-8173-21a874fb454b",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "12be3da1-a5d7-44f9-94f3-a596f2485d37",
        "cursor": {
          "ref": "27865fc5-dffe-472e-af51-767c1075f553",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "415a74a5-b1e4-4f21-b813-e8ecc36daff8"
        },
        "item": {
          "id": "12be3da1-a5d7-44f9-94f3-a596f2485d37",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e421cd7d-3981-42af-9a46-8cbb6ed2a3cb",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "882b6245-648f-4c7d-9f68-81ff84638b4d",
        "cursor": {
          "ref": "332662c7-6141-4f42-bc40-a121a656a6cc",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "91b41f8e-ba0f-4ee3-94ec-d58f38d92b85"
        },
        "item": {
          "id": "882b6245-648f-4c7d-9f68-81ff84638b4d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8c33ada2-78c7-46e7-b05f-cb95e2953e07",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c642c0-0ad4-4569-8861-26d82fcd5aa3",
        "cursor": {
          "ref": "391259de-4b3f-465d-a069-f1a619b9df2a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d53c7ebd-5163-4086-9f46-85b82ca47518"
        },
        "item": {
          "id": "27c642c0-0ad4-4569-8861-26d82fcd5aa3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d4e8661e-122f-4f03-b184-9a301fa20e82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c642c0-0ad4-4569-8861-26d82fcd5aa3",
        "cursor": {
          "ref": "391259de-4b3f-465d-a069-f1a619b9df2a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d53c7ebd-5163-4086-9f46-85b82ca47518"
        },
        "item": {
          "id": "27c642c0-0ad4-4569-8861-26d82fcd5aa3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d4e8661e-122f-4f03-b184-9a301fa20e82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd94601-b92d-4731-9af4-3145cf5819eb",
        "cursor": {
          "ref": "55d9dcb2-99ee-4a73-9db0-78fe0cc26961",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6bd1d636-a075-4564-ac53-b20555d663f6"
        },
        "item": {
          "id": "2cd94601-b92d-4731-9af4-3145cf5819eb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d6baa749-1e9c-4d9e-98a6-258ca10f7e1b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a809fc0-9a1c-4b55-990f-89d3180eff68",
        "cursor": {
          "ref": "c8a3fc9d-2215-40b1-9e9e-3d63f4dbe43e",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "89435e69-54ae-4582-a357-a5f774954d42"
        },
        "item": {
          "id": "9a809fc0-9a1c-4b55-990f-89d3180eff68",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d252a12b-f615-48ac-8186-5e8ef42e6d7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}