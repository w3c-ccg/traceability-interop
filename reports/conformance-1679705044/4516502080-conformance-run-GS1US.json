{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "16a0bff9-acd2-49f7-bb49-00706209677c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ca4fd882-65cf-4898-964b-c90050ddb2d1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b3b48833-84ff-4458-bf67-e64550cbf5f0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8608161d-1662-4342-abdd-e4e8b258fc83"
                }
              }
            ]
          },
          {
            "id": "e670da34-1039-405a-bf33-a3eb890737f1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76331367-be61-44eb-9438-f7c03c1c13ef",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a579d23b-9980-4c3e-abe9-33f0815872ce"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "feadccd8-c28d-47fb-9398-12b0c172f72a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "fc49ef4c-7677-43ae-a898-d06bdfcf832c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "65c0b063-f355-4028-b726-6c378fec4a18",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a645d58-d8d6-4734-914b-c6939bc9dc8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc8297c8-f43e-4896-a5c6-e76db61684d3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5bc3ddb7-68d0-484a-8392-a32f46cdd740",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61d832bd-eb18-4dc4-8bc9-badcd863b1f8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1daf8282-9cf4-45e9-8d0e-b6284a65c360",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a5f44191-3297-4de0-b90d-752f205c8749"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a1f3784-6979-445a-bcbd-1a03697e92be",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4c84866e-a56f-4f42-b0cb-6600caaea613"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "873ba742-f493-4af2-ba09-cf783d87f9ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9124ab9-6ba8-469e-aacf-3a5d86e51de0"
            }
          }
        ]
      },
      {
        "id": "6a1024a6-e30e-42fb-a409-0b4a553b4363",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "04937cde-8fc0-464a-8b09-c3d06cfa4240",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd95450f-5ea5-44dc-a24f-da6c424b40f4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cfe5ce9e-999d-438f-b1ae-5ec79fca69cd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa0f6ba-f8a3-4681-9287-abfcdd5d3719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd8509ac-de31-43bd-86be-218d411a01ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb305144-ab2d-4a9d-840d-9aece581ec01",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3d28df-9e06-4382-8109-1dad43e212d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9961250b-a87b-46d8-999b-e749053429fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52469f49-0e9f-41ac-a3fb-3b1c2c33836e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2525a502-3584-461f-841a-3efa946ef244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04adc9ef-55d3-416d-b400-cc4008babc2d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "66abd66a-f082-4da5-876d-8ca827580f0c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e713d34-fe0b-4a08-add5-593028a307ea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54290384-141e-4bb0-9f29-e16054e2c899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68a937dd-ded2-40bc-933f-12345cb9ef79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c29abe-8244-4739-b43a-b9dbc6081b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4d0d97-5348-420c-95b4-d5a677b387b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d6ed41-5de4-4c41-94ee-5c53eec7f8df",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e39222-3e20-4250-b12e-db3200bab6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "463be88c-7db1-40cd-8865-6ffe98ed7db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43513f1-08fe-4495-962f-609688d5a853",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "4a81b79b-3eed-4e1f-a250-650c3125a39d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b9769cd5-78ac-458a-9d0f-7614908b65d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "91b23073-6aca-4953-b327-4d979a37fb81",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "970323aa-fa52-4d4b-900d-febae4288de9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d40c0565-51cc-416d-a38b-73949b5921d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0e01400-5ea8-43a1-8776-483bcb2b4ba2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8e1914cc-5ff2-4a91-874e-80584534142e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fde29c06-6059-4dda-ad79-8c60d3cd84ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "112d569b-5112-470e-9056-496ac2f518ae"
            }
          }
        ]
      },
      {
        "id": "0ed15750-b6ee-43f9-89f9-310035e09b9e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4dbc8541-ef14-43c6-9119-4447d723e349",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d50df3fa-220e-457a-b521-c75bf6d91943",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "06c9d31c-6b1a-4d5f-88e1-d0d1c8399ffd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6475f222-ac7a-48f5-a93f-33074944af91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137e3ec8-4811-4173-be05-b2f451df24cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5159b31e-233a-4e04-aea5-71294587ff9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7e2b42e-625a-429e-a42e-98fff677e0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc355b6e-0a94-4e9b-8352-9d0c9fbc2feb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf3bcc1-4a24-434e-b932-29cd80e1b0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d87c1b-2ce5-4107-940e-4ec02ec06d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f662cdf3-cefa-4ab0-a98c-b9d441d7e2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b75feba-2600-4380-b636-10ce897c4f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccfb729-09a5-4a0f-94c2-9dbdca1a7f6e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c282be5-1fd1-40a3-8486-a3a2f6433bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e082e11-9c36-48f6-be04-2952bcd49fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f94942-2a66-4427-bf6b-18ca86abec59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c26612fb-880a-4a4a-b33d-dae86b4f6c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1f93f7-f3ee-4c56-bcf4-08264887fbf8",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb471d16-4d7c-4c88-981f-bec230a32729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b57634-8363-4528-86f6-a3a2ee3fdd7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34581cbe-6f33-46f6-81dd-76e0fa31bc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0462bcd9-27b9-4ad1-afdf-201973088340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fb71e8-3567-4db7-9f96-fd0e5ee10044",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1a1764-e0f8-429b-a488-383dadc2e6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1e0f0e-0d4e-42fd-8dde-a1fbb1a00053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1017f16-4436-4acf-bedc-dd675f89a680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dc3740a-a704-457b-bf3d-09f740051792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1d62d5-190c-4267-a957-fb1b246592c6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c187606f-3c1e-4153-a510-f5bbdcf2f500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bceea9d2-e3ff-44ae-8e19-92e1d0a6063e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c0ed44-9db0-468a-9f14-29ca5681f20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be0a1247-f2ca-490a-8e4d-89757f0cad0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d3ce4b-ce5a-43d2-b6b3-5fd72438903b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9bcf06-c658-42f3-85d2-49855bf56eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d63fe09-3aee-46c2-ab74-0b3bee7e1db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f86e04b-2fe9-4188-9216-bd8667d4f80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c011aba7-c161-4daf-a87a-ded72690c78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3acaaa3-19dc-417f-bfd0-b419639de152",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af9e731-8813-43e7-bb35-43763579f92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d5c5d57-9437-4f31-8056-4bb41f4ca52e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55042a77-0c69-49e7-8a75-8ff702bcfd31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9aed100-bb45-4edd-b702-40a19d51be77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cf617e-9501-42e3-bdb9-e656abdafc81",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da64896-ef6d-400f-bf96-786582b45d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21966b4c-fb15-43bf-9a29-36390953e2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79aedbcf-07e7-4b50-bfcb-2505c8789989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea2abfe2-901e-4690-95cb-c528f8498c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911147a2-8439-4f1d-999d-23a299d052ea",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eac2be6-d270-4883-8a60-d37432bbea7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5467d5db-f1ec-4738-bc43-1a6dfb3a7754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70607406-65eb-4e88-883e-017e715577a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e6381e1-5dd6-46bf-b730-bfee5f23cf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16883602-4882-4c89-b4c0-071dfbb7709e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15cccd8-050d-48d4-862e-5f4845179f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd27229-d57b-4e0d-bad4-c3d560eced14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf9caf8-3d31-4102-95be-544ad3ffcea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "167fe9c9-a0dc-40fe-bf74-6a9e0ffaea50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4df70b0-cfe5-4f8f-8c21-1bd4c30f09d0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7bba3c-5707-4905-a589-96b0bf239412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e1ae12-6944-469b-a43c-0ad07a8f3109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0797b0d8-c166-461b-8923-e6803b8e603e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26284feb-fff5-4ee2-b54e-195a7d254218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef74a2f-b435-403d-b170-a5b64f4d10dc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71683c7d-24b2-407f-be52-4cd17e94d337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b3c7b2-276c-4f19-a605-ada1f0085b1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fe48a2-4550-41b0-a8e9-1fd71d59deff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "283564e8-cab2-4ab8-8dca-167a5353b4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b124aa-5e4a-407a-acb2-76059e7636ce",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3298c4-3490-446c-9d29-86ab64765803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e3dd74-1d9c-4b06-8c39-f5303c9e77fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18a91ea-2f73-4c72-a5aa-8ffef5ac5b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73d89fa7-58ec-4a57-9f70-2e959270426d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f95ff9-d2bb-40f1-bf79-6de56653777c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3ab54e-a452-4d1b-ab37-d4a87a896ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b50218-2802-4603-bc47-ae1655d18c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4ad7b4-5cfe-4657-add9-7730937755c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a161cda-ea69-4ed9-9db0-24d14712995d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd09fd70-4b66-4066-a214-286bbe63ff3b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90daf5cb-4d37-42a8-9bcd-97ba699d553e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c631939-2b47-4202-97ff-e02b6868df42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c59b34-4cc8-4181-a971-adcab706b6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2ed7e8b-4551-49e2-a85e-85bb6e9bf1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0becefa-1ca6-4d9a-a030-505a50887136",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d27d5a-d584-44d9-85a2-e917176b230e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4073f639-b2bb-440e-b66d-f053f3433aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c16ae6f-8b88-4583-b173-4e8c659d0f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2a4662c-fcc0-413a-a2ed-18327aedfe61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f6b641-3165-4521-b52a-6f080e110bac",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5765d244-4f29-4ffd-a108-68ac7ee77cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa0bd17-0974-4f78-8346-99c4c1fd9067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6bea8cb-e741-4049-86ee-172230c5eaec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b28b1c4-f4eb-4c3d-a598-6886a859d180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67cb7f5-508c-4e2f-981d-08699c627dee",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9197c6e-cecd-4e2f-8b23-6ba0174599e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80506335-49bc-492b-86d8-499fdb8622ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7d4c37-b447-4dbb-8db6-49b90bef4a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2aa0e9-94df-4e00-9406-15a458355147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f66359-0a40-4fca-a9be-d2d6c7ce09ac",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0f23ce-2f44-4446-96b8-22304bf91e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08da7b1e-0c36-4684-9486-a63b4eeb3468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc961781-c7a7-4403-ba00-cb00ed002a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3db715b-4dd4-4e63-9de3-2b6956a84370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b376b50f-76ff-4a25-b3a8-40e404422675",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7caff9-d25c-46f3-8f78-f4d66433e254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb73ba7-3950-49f0-87dd-833d5afb3c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfc1eff-bc7a-4daf-b798-574b88561a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a79a1ad9-9ff4-4536-9663-94f6c131eda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6988c50a-48cf-4853-a03f-45b3a9b5c5f9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c22860-5394-4aa7-b206-2062dd65782d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695f99cb-bb74-4bc6-b6f2-eb9418bec54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d6f788-b58d-4e84-bd2c-5ed9ea39ce64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2bc9c21-89a4-4eba-b0dc-4a27d4b7371e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1059e9-0cee-4e37-89a0-8dfd7f65a7ed",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11eb0462-2ef6-4f05-8449-0d3f7e5edfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f3815f-5196-401a-b6b8-187ea3ff31a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02914b4f-426d-42f7-9c51-d0053b74fcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75890431-b78c-4c75-979b-37ca98bd64e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29aa59af-617e-4cfc-91c1-50c9ef1e2c56",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03dda0e7-3c2f-4b92-becb-6deface87ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7a0529-2634-4e62-bd74-81bf71d39f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea8ff38-ca98-408b-a7bd-36a121b13af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "164c9160-56f3-485d-9768-e832025e2c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2668908a-ef50-4bef-89f7-fa014e5973d8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca35c354-cdc4-4aa9-aee9-fb47e8589273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b922c3-1f5d-49ff-863d-6b6aa899fd6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5c07e9-dd89-46c0-a2e9-1baaf22b46fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c1ea7d4-80c1-4fc6-8d64-13e6a25cf12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602619a2-c257-44dd-a37a-00d0d2482d2e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7215d120-b755-4002-8e89-65c440bd7bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4813068b-4c51-4c5c-9716-4dfa3dc94f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8ce372-5883-4562-99d8-cb1d192de7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9493776b-a6b6-4b9a-80e6-5b024da4af39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cd07c5-710e-4eb2-a96c-f994549f5ff3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5db453e-de2c-4123-ab5b-dc0dfbc0ad65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653812a8-8dcc-421a-9fb9-c2b190044e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3f9f31-6d8b-45d4-be15-6bfa111449d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "29fa8cb3-e5d6-4c67-bf73-04783240430e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed316c7-4f34-4521-bd95-90cb9c29d574",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a634db26-9189-4731-b731-8da5bb92f3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77277838-c873-4036-8a7f-f5f3d7f90e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deeb9e41-5e88-49ac-895c-f08bb56d883e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dd30ae8-b468-42e1-a6c8-d54cd6951380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57d5282-57a1-47c1-af6b-f7f0705118fd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9f8f8f-0e27-402e-a7d1-b782032e6fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5bb8ad3-69fb-4d84-934a-546687059fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb8d7e6-5df9-4cc0-834e-daa10162eaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "feac9aca-8f9c-4ca8-a5f4-03b570f0382c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113f04aa-39af-467c-9e38-5a50f3dc3140",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c145034-cd81-4f5f-932c-6c55ffc84ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eab59f1-7f37-4358-90c5-60ee42c4841a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3183206a-df9a-4b67-8125-501dea11d34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d7259e3-4b60-4b30-aef5-85f60f2a3f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a49f54-3417-499b-9217-01f23704ef49",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c087fc8a-85d4-426f-82b3-fe400a42542f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8506c4f9-ec50-469a-beb3-f4eab89a0626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b24f855-610e-46fd-a416-0fa2a3e96e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "85b7a00e-2d11-4cdb-9ddf-fe587f8ba947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abc3a56-8053-45a0-a8f3-f0c30f5c67eb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee8a9a2-4385-4097-b653-4d3d07760fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9825c2a5-daca-43dd-bd19-5ebb21e3ca61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce64ce9-531b-455e-9e84-1871b91a10a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b82c1f4-8f53-46c5-8bc0-accda6b55c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c131d98-23bd-4078-8ec3-b8e104c19081",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83e981d-e104-41fc-921d-e9d8a601a74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e5a736-c46b-45cd-95ae-a6fb0809ee31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b387ee80-4070-47bc-baec-6513e4ad4186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7ec31b-d991-42d0-9d03-8c1cc3e410a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c931f8-d68f-4ba5-b5e3-a68a8ff50bf9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fefcd86-72cf-4d4a-bc16-680c8b250206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b70b94-75bc-462a-84ae-c537e2cd3345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035316c5-4780-44e6-975b-4e08f1e8ac40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d456b5b-ab36-4655-9d8a-5652bcdbd7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7059588e-87b8-4856-9759-87b4048a1de0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84246499-7eb6-4374-a1b2-ee8e6eb0bd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8e9456-25a0-4052-8166-481f44c20fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df04bd9f-11ee-47ac-9fb0-8dc16ce4b371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4d096b9f-9632-4052-bfb3-9bd66cc49b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2bf63b-971b-4eda-993b-a8a0936d95a1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77fea7c-0617-469a-a76b-71d9be60df64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "512833bd-a630-45cd-9cd7-fb3f4874dd63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e65d94-6147-4983-b46e-5b4e7743c75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "adfe4a31-59db-404e-ad84-d34daa71dac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f489f41-8e0d-41e8-9886-2d118f344d4e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9285cdc-4cee-4794-80bc-014fb79af2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1cad40-4c96-44f9-a042-113c2d5c6a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269a584a-8feb-40fb-9d7e-539910ef337a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc7d550-130a-4782-9158-b86b8ea887ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8eba8f3-3c3d-4249-8796-46a4c5f4994c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd67aa62-29f8-4090-88f1-de78c4f8bd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05eab50b-cd4a-41d4-a84c-2207b5720b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0099856-2371-4345-99c5-43c8193fe0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d157ad08-5bb3-4dff-93e6-78d43fa4cd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691358c7-8805-408d-a9ca-9d012197adbf",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26d34b2-3b44-4082-8df2-2dea7c1e3165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c7b854-575a-4423-b526-aa7c16512760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b837dc79-c110-4796-be76-3c7675871afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "867a16ca-1ec0-4406-bc1d-44d0898532ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8632fe-f26b-42e3-8dae-294f234f67bb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dc6cce-535f-4218-abfc-7bade4ed7fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98e3f6d-afea-450f-bbbd-f37ce3d6cc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac02a5b2-d18d-46d5-8e74-69b95c30dbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff836b4c-1bc6-4989-a244-fbe2d67a801d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7c9e5a-b5be-44e8-a4af-32e3624d233f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0d619a-b173-4a31-aa35-67cb040fde63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22aeebf-9db2-4b08-8507-0a9715fa9712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523d0126-19e1-4efe-ab3d-bf867c22e918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9819e05-8540-4994-8bca-a542f09faa77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b15b64-6f3e-488e-b2f2-a47aa53b3a8e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fc3991-4bab-481d-99c8-3d2f253c7730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c235ef01-dd35-4e15-af0e-a12851091af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d03b767-9a5d-4bae-b178-46bc6a4b0037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "033d9288-9c8f-4cd5-8d2a-23c29db0f5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffe606c-dce3-4b75-97fe-ffa774b81a03",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6f6b9f-31d5-4ee1-aefe-3f190fa0a091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b60d46-86fb-4544-be91-7488f4a117a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66c855b-62f9-4436-9033-20dfdc7ff9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e443fa36-6597-4030-b7ed-86bf40c06069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2ec086-28d3-48ac-88fa-e92e77c17375",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2328716-5643-4160-83d3-83c5f7429ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace0541c-ee48-491b-b551-d5dde803bbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da50a815-a9f4-45d2-a8c6-98ee6ee506db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "00283c69-f2e6-4b5b-ba04-de882821ef7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de54ce5e-ea7c-406a-b71d-adadf5fc3d8a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "939e712a-bf9e-425e-a1fc-52775f22ce9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603deba2-13f8-43f4-b0f1-611d23760582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccc13d0-c170-497e-9193-4dfb174370c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7dc9421-1fbf-460b-bffd-f4db36291f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc95990-c658-4a8c-8eaa-9d37b97e1c05",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa370311-f895-4058-89fa-1e4af628b3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6c8de8d-39c0-47ec-acd3-f3afa5b018fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94e1871-a485-4815-91fb-afed9212366c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9addf0a-8c96-408e-a962-f219a8e3b348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5658adc-341e-482c-8148-e86ed9ec5436",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406aa4c2-fda2-4681-bfd1-ffc6114620fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7d829d-110b-4b80-afe9-a01e40cd2f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5da12d-89af-479a-8c57-100f28401b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4db3b42a-389f-4081-a688-f6a9f9010a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc8f941-12cd-4861-8610-7b24c90fa62a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20331620-c797-4fd1-aad0-86d566a6e1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccad7cc0-9c72-4e8b-bcc7-ca52703e7834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0311a1d8-72f1-41d1-97e3-7dcba5804c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c08dd86-1ab1-4e34-9304-dd4159ea31df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34aed4da-8241-4c3b-95b5-d39021abbdc2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f920e2-7c55-40a6-8c74-93da9fd4fdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61868044-83df-4979-ba8f-1706884b17f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecad226-3b19-4109-9e69-d989929768a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d035e047-dfdd-44a7-8a8c-2912a05fd72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a82b32-1c40-42a8-a193-5d54cc89dca2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21947b54-c56b-464b-87c4-ab4f2edb7d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2bb90c9-f613-4640-bd84-6f92604bd7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84ffd2d-6214-4886-a4a4-cf0d4f16c917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e023791e-091c-4d64-86bd-e61f941d723d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2282da-5ed8-4d43-b9b9-ffdbd0155959",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb3c92e-3b62-4b41-9e93-efaee6f20b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87aef455-d938-48d6-a9bb-92da0a457dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a394d66b-a273-4313-9c73-8facbbb06021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6233355b-ed8e-49bf-abd8-7f875e23fc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a362a0ea-b237-4fea-97d4-0850dcedd4e3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01c5acd-3ae3-4e89-a5a1-5e3176e15d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9675e8be-f8e1-4e88-aa25-6dc88f11d477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99b1116-4119-4e7b-9c97-d8fa8beb1e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74987d87-6697-43b5-b732-668cdf4c71b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b09e48d-7c18-4ccc-a6db-4c9c0f28507a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d457374-6d9a-4aec-a81a-1b977aaccd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9fe51f9-364b-4a7f-8651-94e70860effa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5418cacf-d4b9-4e19-b39d-adf5ebcbfb67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "527e7aca-572f-4971-b955-16234c4a480a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b38dfc-73c4-4cfd-a42e-57b1f28959bd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b41c39-9ac1-4075-b07b-19347b44ee60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9983b443-73f0-4d3e-8a22-ee0deaccabd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4a2c3e-94cf-4e31-84f1-517e824f9a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "875a7878-1b59-40ea-a5fb-fcaed96d748c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b3c96e-ac9a-4ae5-a531-7b58b6fe1b72",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e563527-c641-4e46-a497-2c52e428d76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bc54c3-c82d-4301-8d13-928c188733a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9496521-5e09-44ee-95c8-0b5cb9cb3aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9bdfcf1-9be1-448b-8ee1-4f133e3d176a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fa8fb5-b59e-49fb-a55e-c1b768460d5b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ca2598-73f4-4f2d-84a5-23dd76a2e83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c443981-e510-44cd-ab90-18abebce881e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3773b5-3f51-4508-8e11-c3fe7bf76d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c1f1f0bf-5104-4c70-a388-8794b3e1027a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da666ea1-6402-49d1-84f0-e80b3da9abae",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058af57f-0d7f-4251-b116-1ebae7f5d937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df5d0d95-9e55-4b42-8594-51f4f4ce1df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fff204-342f-4216-8e6b-f5d394e22181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dec4f54-635b-45e8-a51b-d04ba1c6882f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba41681-721d-4344-bfbf-06aedc283e64",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db33024-3b25-4db8-9c8d-26e1b585d579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7b6d04-2400-488e-ac9e-4519b370a0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccc7ac8-7c75-406a-9c21-b3e8f8067c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c60c77-169e-4bd9-83a0-8f53d5964a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e708be-b91b-4fe9-b47b-2be3eb0e0ee6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63653cf5-3031-4b1e-ba27-6025ab1fe2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77163931-eb0e-4a25-93aa-5677dc7742a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35501e9a-607e-4fd2-a562-0cfb84209d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c475a312-fc95-46bd-9be3-ef842ae55148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccb8462-49bd-43f5-9228-b5d9809463ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a22eede-7859-4c59-8482-8ad85d63c09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "069d7ccc-f972-4026-b6c6-20c7cf1f8769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566ea930-f90d-43dd-8616-74f4283b6a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a282ed-f761-49a9-b574-f6fa7fafa6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bde0a0e-162e-426a-ba3d-60096108eae5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4d47d6-03e2-48f4-ad36-875956f57f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0746fe73-2b90-4ce1-9bcc-9d430e5dc165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b49327-1f3b-48d8-839b-7ab55c46dfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "03ee2a16-67c5-4ec5-9ae3-2b356541b4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8419bb3-e357-4cc3-a18a-80e91ce2ba53",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5c02b8-d386-4b52-b084-9071606f963e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a1aec4-7ec1-40cf-b900-dcec67df0226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5445df68-3837-443a-9c48-ee6a270e2b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc09f3ca-d551-4551-a606-f99268d9a032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb01e1db-1c3d-4bf7-8ed8-490740fabb3d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e360627-cb39-4c74-b259-baeacc95aace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20c2a2a-65e5-40bb-bc10-b089ccf477c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cf85e6-26ad-4b1a-b279-111fcbfa1e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "967c74e7-dec3-480f-af68-ba7d24460e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae6080b-cfe7-4943-9e24-da72f54d8fad",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc193deb-0b27-4792-a1a6-e1bbf3b7cadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90996d04-8d27-460e-be96-c3721c9405c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a5627c-dc32-4988-b3a5-5ba98218f310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33538d1f-b38b-4f25-afd4-7a2730369483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99979f9c-bb16-45d4-8344-ced833d8ed21",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22a5c83-fff5-4e2f-a004-caaca75a88c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc28bd4c-b370-4a6d-87f8-e4ac485b628c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dde240a-f6eb-4817-90f3-a2d137a1d843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "496a46e2-5367-444c-933b-6948d3ca82a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b397058-3129-48c9-8482-873a7a28cca4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc5f146-11e2-4008-8a9c-bc0c2dd3fb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a657af-29b5-48ca-93f6-c36d7f9e6926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d1b5c5-d5bf-415b-b987-75d1e12bdee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4534793-bc31-455b-8bc7-fd1108a7f75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a023c2-bee9-4c97-940b-659d995bd286",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce21cd5-76eb-4139-aeb6-21f6718e8472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c8c15c5-94cf-42d0-92d5-8e13c97950d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba1382d-51c0-4ca1-af80-c751bfe7d0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a76fb4c6-79e6-4100-8f7e-7b10d8c74212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cfdbea-acb4-498c-8b2a-50930b790520",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6aece7-62b7-4fb5-9af6-441eb746ed79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32764d9c-627d-47ea-a9cf-c7a7c54ae1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5326ab46-fd5e-4fc6-ba22-1bc1ec1fdc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "813f25b7-d078-40f3-8e60-9d8f6c6e1b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a86c0f-11ee-402f-b699-bb57449a4bc9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfdf056-6df9-49b6-b96b-7b03242c7346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2298e56c-db22-4f38-8d92-2ea9ad575ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940f658e-4c65-4cc8-a08a-a2bee02b39dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c94d146-8577-4e82-949b-2be6013464da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27711d6b-a50f-4695-ad84-cc7dba6d45ff",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0494f97f-2719-468a-8af1-b3b0093669db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f675a6a8-228a-473d-b344-b534a40ea18e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e0a804-3244-4747-8d0f-088d8442f834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adad5e36-46e2-4b57-9a67-fca74585c72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c775f9-5aae-414e-be83-df7db8f3ac62",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c09a8cf-9d3e-424a-9cd4-047194b615aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4146dc42-2615-4bcb-8c1c-dd372b0625b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa47dd3-97a9-4cb4-82dd-38294ad05338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07976730-3248-4005-a4a1-f06c8689b4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7ea037-a016-4698-ab55-338c8a65b1e2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec613b83-3b22-4284-a3fc-4c4f0fcfd08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67390f19-8cdf-47b5-b185-1c8fa403e0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3f951c-06f4-4423-93aa-9093a57b5da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a492e91-e9dc-4cd7-9b0a-d3c0a90c82d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048444cb-d474-4da9-8dc4-6239721cc770",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d747071-8b9b-4479-9edf-73f1e5a863eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc783918-d438-4f38-8024-3de6a3610fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b50fad2-5044-4f50-b104-31e00e8f6f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "116aa98d-1d7f-41ed-85d1-6383755148a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4659b3-4d9a-41ca-a478-9b46ccbfcbc2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37739df0-5b10-4eab-9cf8-dd081a3cba9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce5d60a7-9560-41e6-b037-dbaf397bdb82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b7d8c3-3ebe-4fea-aea5-055162e70cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe8da88f-fe1a-4874-bf25-a5fe7e01a10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac33c43-1f70-4cd5-a634-fcc9a75d4d8d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf0952a-1494-4b87-9b19-99f68df42296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c52501-83a4-4790-bc78-6dbca69a3c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe91485-d514-4ef3-b71d-a8f689be7c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c201f9e-6f42-4bcf-81f2-1154e8be7993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056d868a-e37e-40ac-9d81-68dfb747a532",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1b23cd-811a-47bf-8ed3-f7ac0f1ca436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b6a52f-eee9-4ed3-9e80-ed676c19e525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008fdd98-62e2-4310-920a-21923650cacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd245240-0c97-4020-8a16-603ab886b4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984bf2d2-9d8f-459e-99c2-c6d98377076a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423bcb16-4ac3-445a-a847-2749d7da4e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98073868-20a0-462d-b68e-39d6110d323c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1efd93a-f56b-4d60-83c7-bab57d7d0db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f42aeba7-df81-4a2c-bdb3-8549aca7ab8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49eff876-062a-4cb0-9d91-3a7f71d45548",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33ac701-240b-44dc-804d-d1e1c0157ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f522c4-5802-40c3-92a2-20a9077365b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3329f711-ed06-43e0-a4ac-46b9bd98561b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31b37b7e-b588-4453-b5c8-6ab520969cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c033dd-07aa-42d8-b6bd-290811880acd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37efe360-8ede-45f2-b4a0-600910a753bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260ecf0c-5691-4915-9327-949f4829fd49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde50ec8-e1bb-4948-8e9f-5868cfc0b721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01caee28-335e-43fc-9b2c-63560add4937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a328527-5d64-4302-a7b4-0940647ac008",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b185b153-8493-4012-9e54-2087f4c26fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32171afa-e7d1-4ce9-90b9-e7082b3b0358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5da45b-53bf-4f75-88bf-d3f4937c9b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7aaad06f-bf8b-4c88-aa3c-a7b0918bf5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e520f9-079e-4153-ae40-52c8f029bc9c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef109d05-7eba-496c-a774-9660a8148bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d047f58-9861-40d4-ae96-2ee63bbaa09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcfd321d-f3cb-4927-9db0-8c9ca7340bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb700ded-e59d-47bb-ad97-703e7608ccbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee3e0ea-cc75-4f1f-b758-ca56005aa07f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d857ed3-bcaf-402b-8bfc-e6a6e833d55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c9e7a0-3801-4c48-b919-f8675f708a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2195cca-94d4-4964-9e52-9e8f821af01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74aad570-37f3-427c-a089-1f44a7cb984a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30df56b8-5df0-489e-b2af-ca7a8201e4df",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce40e31-16e2-4978-bc8e-b9272000ab82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe4f548-c354-464e-8000-f8822f81092c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180e5ff7-5d9c-4ff5-be39-8fe25f8707dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa5d6de-45d1-4b2c-bbf4-7b4e3556f8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7188fd01-c4fb-4fbc-a788-c7613c32a27a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a70df9d-9261-4c15-b08e-e11a9873d9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5d2222-dc6c-4309-8364-dbc6413f5f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0581ab5c-1601-44ae-8b7c-65bcdf550512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac6dfed3-9aef-4167-b9db-6fd0db4f3a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f950f8e-8947-4058-9c82-ce83b308b855",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca729e8-4bd6-416c-9555-10e38465ef70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c25249-2971-4c6f-96f7-f59cd1ebcf89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a72fbc-4c25-42a1-8bf4-949b6b422158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c3ff405-95ef-41aa-8edf-842bf1818414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a4fb17-8634-46c5-b9a0-740b16a223a5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e80797-42b7-4e45-971c-893388ab6ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbc2bec-49a0-4372-b886-6ba0abab0590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227495a4-be98-4f46-a52e-a8a8e4c5d142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e211b03a-0645-4ba3-bf40-0742cf2a7637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8574764-e128-4607-82d3-c93d40096e3f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92050d7-5f22-4e90-b400-2bc2fa80b909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c012af-19bb-46d0-82fd-37e0a729834e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60dfbc4-8206-4d70-a883-64694f3aa31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "62a77213-e306-456b-9a0a-0e664f9490ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c095e7-b4be-443c-978b-a37660781a73",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5b43bc-44f5-41d1-85df-8ce4a171fc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dfdd70a-5a9f-41f5-b449-26251d6dcf21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff7f9fd-bd11-45df-8cca-93523798f83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4acf2519-079a-485b-9ce4-0d294dcdb3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d7f049-d5f4-4ac2-8901-99948fceb8a1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cca9c9-28f1-4f18-bd0f-fd023d766016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "925e8496-603a-4c13-b259-1c8b046d94f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a079fb27-8188-4394-8634-fcaba2f189ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b308d31a-638a-421d-9375-ea69d0688eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6e6222-769d-4399-b9d1-096167e3e2c0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789e9564-16e4-46b5-a6b0-de2b451327df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891aabcb-5f1b-44a9-a1ee-2aec0f7bf0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9c1836-c3fc-4b16-bafe-4e7dc6435ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a78e80b-1d75-4613-955a-07306520543d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1213daba-7f16-4379-9f0e-50a07b6056d9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10792291-fa5d-4c56-9da0-6eb8df929ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce37611c-9d82-46e9-be59-ab36955aaa51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b14d68-7d66-4df9-8f24-3cd3be68664d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "99fc5d95-5c19-4a9e-9687-003e00a1ee4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63fb1734-39a3-4150-83d0-124902726766",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064d3b33-faa2-412b-862d-b0f106cd4d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dcaa54db-5eb3-495b-87e7-79cf12b598ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9147c0ed-f9cc-4691-b871-8525a71dfecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c001074-f603-4aa0-8a4e-84501b95d338"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dd515083-60e0-492b-80fc-6095e1a3cd0c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ee2f12b-9d4d-4dcc-bdce-88f3d0a91a5c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa35bf9-d22c-4116-8457-c5ae515bf7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aea7562f-1625-46a4-b46a-0776bf5ea278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bd1a6a-f1fb-47de-b3ac-267a5c0281fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa9c0f20-7ea1-472f-851c-289247177a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4016b70-5908-491e-a69c-8841feb6cb16",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22e4899-6b79-4e61-83dd-cf5afbeadffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9079f8e4-8968-476f-875f-5951573493b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e17a6b9-de58-4d5c-9a67-636c15f19a46",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa6d1047-53cb-42fc-94ca-522e2f97b0d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2caf032-d99a-41d2-8b13-89ce7f8ea3e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5770edbb-3005-4be7-870b-956066a4e683"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90e5fceb-1d7d-4a64-bb27-00100227be4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96a3379a-39e9-4fb9-91ad-93749d7cc6d2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b3c514c4-dc24-412f-9fd6-3ad24a240be2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08d0340f-5ef4-4f4d-a6dc-b44eeea0744d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "afa2ba08-1f39-476d-9507-5f1beaa1a58c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b3686db6-0353-4a32-bbb7-46a2bddae1e1"
                }
              }
            ]
          },
          {
            "id": "e8c95c80-198e-4fb2-a0f8-3f2e2f2aa86b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4d1ccbde-91ea-418b-9618-8f20f17726f8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9f92c71-e47a-4ae0-b746-3f6cca5cb7b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab8dd1ed-9620-4537-85c1-fa69d833559a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22f059b1-b1bc-443a-a22c-cecf09172deb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dbced2e2-5446-4589-bd57-69d5d8b88b3c"
                    }
                  }
                ]
              },
              {
                "id": "ac49dcf1-78ce-4ab9-bb90-9270db050c82",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0c6b1fb-bf0c-4597-82f4-d2b3e3deed50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "201424d5-a345-4104-aa55-e692c001bfc9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d65f8f13-a03c-433b-8faa-e4f904355d2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7f5b098f-a421-423a-b166-2cc71ab9d945"
                    }
                  }
                ]
              },
              {
                "id": "1809592a-eba8-423a-ad02-4972d9e224b1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c7c1d0e-b7e7-4930-b8f3-53649e8f486a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "99b73517-2fdb-4246-9fe1-bb7ad43ec31c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f6d391c-a825-41fd-86e2-f45404779f79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "05e2aa2b-2e36-406e-9e9f-2dd390caeee3"
                    }
                  }
                ]
              },
              {
                "id": "50038de9-e7ab-4141-bf77-ca502c8dd5a6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6825d15-76d3-4453-8ecc-fac324acbfb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e48e73b-2fe2-49de-964c-d653b3a82c24"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "870f1882-5607-4ea5-8b75-1c42c43a6b86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e862db9c-7fdb-4174-98c1-281412f19dbb"
                    }
                  }
                ]
              },
              {
                "id": "bf627b76-db28-4e08-bd8e-6f5f0997649f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19039eea-318d-47a5-b807-d576f0148bba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06a3c572-5c42-4fb8-9237-6adeb61b7697"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "034bdd12-6818-4bbf-94dc-9521813422af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9bbf5a0e-b4d5-4539-a2aa-2597508ebf7e"
                    }
                  }
                ]
              },
              {
                "id": "7b8ae765-14da-4cae-988c-26f1d815183d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "173eecb7-b51a-4c55-9c21-d71e35f0a1f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3437bcf3-6a86-420b-a252-58e1e04e31d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "baee665a-9b3b-4b62-953e-ef2011773206",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "53005e99-50c8-4387-a25e-facd8e2f165a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7b422b3-e6a5-4add-b7aa-088802b0ad8a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d5f4dd44-8ee8-4acb-a45b-ed8b29c1493a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "74ce3d1b-9d74-464b-9141-5b59c2cd3281",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef78a926-ecfb-42b5-9e2b-28033ff715d5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62778e33-c03d-4729-a3b6-d8722d8ae4cf",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "138e4a92-8773-49ac-812e-d69f38ec28bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9caa6042-a089-42f3-8fbe-cc51e6d24bf5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c0793d2-09b4-4958-bbc1-d96c4a819fe8"
            }
          }
        ]
      },
      {
        "id": "9e8e221f-8893-439a-9c1b-8ff73f7abfcc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5e3520c8-6de4-4896-ba3a-052561d3098b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3c6876a-be34-49c7-80c3-eb8aca2b8849",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3fa0f6a3-e7a0-4b3f-a431-739ab5d120b4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126e8daf-fed7-43a1-b4eb-d02963e88393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb024753-f5bd-42ae-9002-89eaea8366ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398f0e45-00b5-475c-a597-351004b3db79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed95391-d001-4a42-988f-7c23f1db8c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d2087e-57b5-4cca-b298-d74b634ee878",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198f3af8-1fd3-4306-9107-7fd6b8cea0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b64ce3-a5f3-4392-82a5-2ed046e63b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599fabaf-cd1d-439f-ba95-0790e0172983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be378374-b6ad-45df-be62-02d84d3751bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd65bce-05ce-4eb6-b48c-f68e8812cca7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c598b9d0-5ea0-42e5-8c4a-19b53e6dd579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5036903f-3ea1-4372-a739-4e6b43aaf76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085fef5d-3748-4a00-840e-dede136039c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b47ac01-12ae-44ea-ac21-bf827aeedb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fea6a7b-25f7-4988-9356-3dbe2bcac65e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e374d8c-7bff-4011-bd7b-289f744f7e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71bc741f-4b75-4863-a017-c4dabda35fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475f209f-cee0-4c3a-aeea-0b8856a00d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "550ccbc2-181e-4752-831c-4b7b2f127b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633acf36-3175-4d3e-842c-60276afaa48e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c243a1c-fdfa-46bf-a6a7-d734e8ba4e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5a16cf-db2e-4b5a-aa8a-5a3829b64207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d929f1-8e31-48c6-a5fd-77a0ce358e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdddffde-bab0-4169-9d7c-7c42c0f45da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff0c2e8-9225-4ecf-9d23-9eaa2c4b37f8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602dd704-2e9f-485b-8fa8-6ae8dea0d6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d18357-474e-473b-aa4f-caaa4a8fd2ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d75643c-8e22-4240-bb56-ae634b77a9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a82c6c-8867-4994-92b1-79e5510c9ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f747c5a4-9ab7-42dc-803f-670c3f1813b6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca4d2ad-fb39-44a6-8eaa-90a90fcd0237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6576e56-271d-43a9-b192-e9725aca1ba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc6e96b-6b57-49f4-a437-eb3c73fe4932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd3faa38-bd03-46a4-bb54-215ac1521ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cf56a4-bb74-4369-b014-8aa663fd0304",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117630cf-62a6-45c6-9b6a-0c5604dbefce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8da64b-ef66-4bcc-a54e-9110a34757b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8801fcf8-c9aa-4aeb-a5ae-c0be641561a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15208013-c5ab-4589-89ad-3cd050846ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4db093f-50b2-49b9-ac2b-e4807a789e1a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bd5e94-381c-4ee9-addb-1651470af9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf7fa9e1-a067-44d2-854b-7e757fecc383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e480a4-64fe-4fc6-a0c3-4857aaaee1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c2b6300-b174-4636-91de-a32ec703e315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f49c90a-6bc3-4f3f-91ec-42d691dd72d8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ee825b-8e51-4d90-bbd3-81dd9ae726c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c86bd36-e998-45b8-8ad7-527e7064e0fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16f4224-70b7-452c-a261-0a602ce155b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2854d507-db53-48d0-824f-a27e67c22315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3c19b8-d939-412b-b648-a74a47e0db63",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549e4f58-6a4f-4329-aaf6-6c8c4843d05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e85707e-bd2c-4d8f-b2ed-7e0f6c28451c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7987e4-3987-4dad-a7ec-1c2d1114afd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b213cc4e-bf53-4ccb-904c-d4535c2ba0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc4d573-154d-4976-8a6a-a9ae87865c8c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd6b7b0-4f6f-4f2c-b202-d437cf7a0d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fefe2238-c45d-481e-bd41-6d46fed70cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efafe6df-e314-4863-86f7-51f196272d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5f84c2-0942-48f2-97d1-6c20309dbc3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a54f55-abb1-4b9b-bcb5-ee12882abf23",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a2f175-e917-43f0-a3db-0302d06fb72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8dd1cd0-638a-4ab0-bc1c-99f4684dbec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2587a50a-5001-40b1-a1a4-7e1968279186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "150fd145-2e02-4f85-9539-cfb4700ad587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1aacf2-afcc-4d7e-81cc-d0761b77ea13",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f263ad-1f10-4c28-9910-e10604825f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479eaca2-b50e-4639-8c88-fca4ee6183ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a2a08a-7d78-4da0-b5e1-8a215f9b1975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d33c558-f452-48d1-a43b-473f7f486b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f742cdd-958e-401b-a4e5-78e87e58da61",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c945dfa-aa27-440b-a9e4-5817a08d069b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24fb8752-4291-4945-9c01-90fa64a79c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385565ab-b7f5-40cb-bdf2-fc146cc35d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea022bc8-c422-4dd3-85d1-2cfbd93b996f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5373fe5-63ca-4d64-9f1a-2fe9b158685b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ac5767-d063-4d4c-809f-cd02d563000b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d21478-d307-4ac2-a9ec-265cb35980fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8871d687-27cc-4173-bd86-05eb0aa3ad9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "027e0f38-eec9-4fa5-9178-a160416c2181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab94facd-1e52-4e3e-b77a-51de334ed4dd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b9c021-ebcc-41b2-9ec0-fd64c9931949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0fc7bc5-90cd-4936-86f7-7a9d58f1aed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6085105d-0874-46c5-a9a4-821efe4ca867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b48c171-1978-47ba-adde-1b608bbb3043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a154ed-8c8c-487b-93e2-2e59f30d5ea4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c52064c-71da-4f01-8bd2-4edbb6a9ecc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c87358b4-ecf3-45a7-92dd-0e682d1d8f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f04c70-db58-4811-9db7-7dbc595e3d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0dfc2e4-542f-4a11-95c6-da5be7d61e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5f52a9-b02c-45c3-99ec-7e65f6d46261",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1cbd68d-d2df-4da2-97d8-4fe8231af551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061ee6f3-47f8-496a-be1a-ee3cde930314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b11676-6b84-429b-bd72-b0c1fac9b814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75ca871f-604c-4208-b870-0cc4daa2f355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c093995f-6520-4c78-9159-545ec8dc6248",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd9155a-deb8-4720-8179-c1d48c23780a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c36a2cf-3067-40cf-be98-cf5080f7a4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6681761-11a9-4396-abdb-54b7d7581223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "391cc53d-b0f4-48d9-83ba-35373440e0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b713879-482d-40f0-8aa0-63cb1eb46948",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028bd7d7-9196-47eb-b8ad-ef136dfeaf65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfdb8ba-6cc2-4f9d-95fe-e5f40738d426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f450b6-e11c-471b-b6e5-c59d6f93946c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f09291fa-28f1-461a-8b59-97b17255423c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c12d83-422c-43ed-b0ea-c88aad1257ae",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a906245-bec4-4cf9-a152-8ea31b17247d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7981d40-b578-410c-bac9-bb72f02e2111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8544fb2-1b7b-4ede-bcc8-fb9e07264c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "778a39d0-9e69-489c-af71-1c60944f7af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092af921-1fdc-42fd-833d-f4c37709cee1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0cde0ec-03be-4d54-90e8-f0c52d8cfd39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed698c0-cf1b-46a9-af6e-4e2e218d4cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4101d820-a858-480f-9050-cccf4b9b9033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02b660b1-6c4e-440d-9cbf-d6c7c0bc13ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a65935c-cfc2-4ced-8450-a6da020b7e0d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a544dca8-0600-4b30-a7f3-0dcb5e3ec432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe73eee-130c-4d90-b215-ce904d14e2ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f14e2a5-79ee-455d-9945-0da318515a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccebbd25-d822-407b-b039-377c5043744e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a1f780-61fc-4415-bcaa-620f4d4629ba",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343230b5-d42c-400b-8461-09477fd1a164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b7cf00-3ccc-40d9-8b2f-7ae7f8a56143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542f1b54-33dd-42a6-9a01-f20ee3e9e152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62576c30-a79f-43b9-b604-e05942508e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab3309a-7d9c-419f-8e07-34d9f4b95c70",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1a5c53-c299-4276-b648-68c53a024dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c64b2ff-4511-4cc2-a514-1e7452b332bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5369d28-5b94-4b58-8f20-73d5e308366c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ada4d08f-00b0-40f0-b499-ea073d5bd894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bc2011-25c2-447d-93c9-30ed01aadcb7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0628a7ac-0eb9-41a9-b1f6-c30aca9f2816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ba974c-babd-4314-bffd-a7aac9a175a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bc380f-4f32-4022-b1a1-4dcfee8d9830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "481340e0-046c-42b9-a1f4-3ae656c7484a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7afb37-8a4e-40ce-bfcb-8254c482a7f9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2f93eb-0670-418d-9418-de16059a60a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9d5179-8cce-4cf9-b783-403ccbb0c9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41a0a8c-0bd3-46ae-a40b-0ba02af81d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5aca92-9101-425d-b433-d4ae62768382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4de4e2-af39-40b9-89d3-fc1e4f57e39e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40d56c6-4b20-44b7-9d4d-7eccf046cb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8336e5-874d-4aba-a173-e815105c7889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebc57dd-f453-4b20-a6cb-afe6b8c6b930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5350477e-7ee3-4220-8bb9-014653a3145e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cfbd9d-cc85-4c11-befb-eaac312d0652",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6390fe53-c8e6-4b17-bd8a-b06e17f847d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a352a51f-c857-4360-88a6-6f21ed4e3164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038b53f5-44ca-4f8e-ba07-f7a98990d337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff8feb9f-5063-4b01-b409-1e02a0687fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2164a5-3262-461c-8469-85a7d21d2473",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed44273e-d9da-4efb-bda8-f24c6b1d6add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef23135-d798-4716-be27-4c6531eb72cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fdd8328-72db-4a06-b907-51c9f61ce95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b10e62f8-6178-42eb-89bb-981e29411a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4deef7-7146-40f9-b8d6-f9bac0d4dfee",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08cddff-d37f-40d2-a7dc-b872e9c4bf68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797806f5-8bf0-497c-b89c-040751e44e98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717e71fe-0a41-4dc9-98a9-c822a77e946e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc06d3a-6360-4023-bf6e-2b8027e24475"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "144e621c-74cb-4632-a5c6-39d93b11827f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c177a6c9-c106-49fd-80cb-1df1059ef8e1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b04082-2cf3-446b-9808-d7c9b2663561",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bb9dd6d1-1d28-4279-96fa-d519965a441a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931b8059-4c4c-476d-9333-7a4cbfa10766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36922249-e4c6-4f96-a4d2-2b22722a9d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9172a377-5133-41d7-a84b-ad24aa0ace3e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5baaca-fff1-41f7-965e-dc9841d6df78",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "19b81d92-e84b-41c9-8414-78f45ff68d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d107a2a-a0c8-47a8-b15c-fe153d04ddbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b42eab3f-a22b-4749-9a08-6baa998638e6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9c4331b-be5f-4bfa-bff3-f9a6b188603d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1006cb26-0028-4927-90d1-c740c1f0d327"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "316146bd-e20a-44e1-ac3a-9884ffbd62fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54b4e1b7-b470-4862-93fc-8f7dec384c14"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55b92f1d-1be0-4db3-83ce-fd64258c5e22",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7e355a93-026e-4ec9-8154-b1f870bf6525"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa6a7122-cd7a-4dbd-95ea-807451fe6383",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e54f9aa-54a8-45fd-9194-dd3e5a7220d7"
            }
          }
        ]
      },
      {
        "id": "2429b34f-c60d-4350-9185-7386f8c40065",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "12fd0225-5db6-4986-8539-589bdde0a7df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b3cdf7e-daa2-401d-957a-87022e140427",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dbff4c3f-4f28-4fd9-a8d6-385ae7d4155b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6bd694-188c-4367-8ddc-39edd6797af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e91747-6471-4fbd-816d-8a424026dad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d577c2c0-187d-4530-aaaf-7a76fb82736e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af743150-ff31-4651-bc48-da4d670f4447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e04acb-f7b9-41aa-8351-0db7ab429b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a54b76-d3ce-4736-8c73-390a1aa5fde6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8169de3-7c70-4e20-9a78-5bd36a102ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91f81e9-bb76-4899-b1b1-7d3006e78d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2158a45-67f3-4e33-a95a-30e4bf03a6b7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82287ff3-2ef9-4243-8159-65d6d93f3d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494cad8f-c3fe-4ec2-994c-55d8d9cb4335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9003ac-a7cd-4d1b-b78d-3c5208e70751",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bece3fda-fb05-4e42-ad65-948c11081526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0096df-329d-4650-bdae-4dea3d25852d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5ce921-33ea-4573-be88-e187838b405e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00db2615-f1a2-4e38-9282-ce56c47cd425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2adbff-92f7-4cac-90dd-c320e9edf82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dea5fc5-3990-4078-8263-c223587ad19a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca8c939-7371-452f-a15b-105866b0ce28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "832ee7b8-c9d7-4068-8f4e-00077150f370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9cf7f6-5d1c-4de8-97bc-ff79b6f8ac1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d888ed1e-3d95-4fff-bfe7-c5159a8f2ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53babc3-8b0e-4503-8242-a3731a388f28",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c426455a-34a7-4cad-9906-6a5d43dfce6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4775410a-b374-4142-9774-499368a45492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3924eae4-c46e-465b-b5c5-1363f402abe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb06275-bb68-465d-8985-68112eead3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b12f94f-552f-4f44-959d-115436adb7be",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4347a43-847f-4ab4-b1eb-d9659d4912c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7030441f-8336-49e8-a9fe-ef2f1e58cbaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4ba813-e1bf-4edb-add2-055cac39391f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7238e1d3-32a4-4648-9afe-fdc097347f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9f0b2d-3dfc-4767-96dc-a4e41187fe4e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac38756-c7cd-4a48-b55d-e4bab3a6f5de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dce8de2e-67d5-45b1-a5ef-5b59b21224cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a16255-f183-4455-b071-f2dc2a8b5019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbd03fd-b577-4a91-bfab-d13410dbf980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9b11ae-d199-4759-a849-e61074e94ff2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4fbb7c-1988-490d-9859-d77f6fcdb688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7432cf8c-37f0-4184-935e-cf3c5c3e9a36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2173be60-8735-4294-b448-074d9e27b2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe05e67-d8aa-443f-8119-f0d944cdf574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c86dd4c-1e3f-40f3-b608-7b5f48f8ebb3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948bf33d-8bb0-4a69-a8e6-4aaf4c6465c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316b0fa4-a35a-451a-9ee8-19332660c0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2aca250-c880-4acc-8f59-230d9dd21e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce2b1e2b-4309-46ed-a6dd-d0f3f7af5c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b651b0-c32f-475e-b729-753657f50321",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b734e6-c7b4-4e9d-9ca9-e7183abaf2a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e366031-2805-426b-82dc-308e195063c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3598259-740d-4ebf-955a-f9be746b0419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4a49fb-b652-407b-a82c-8e79cfbb5e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cadec33e-b0cd-42b6-b544-d466a8cac0b1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92b4b5f-f8a4-4076-acc5-5096d73598cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1271561-f530-44e5-a9f2-5fab39765b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "902f67d7-f556-4fb2-920c-861791160f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f199ed46-7378-4e91-8ed5-83cdf0c5df81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c2ba4e-461e-4b3b-9165-d63e8a4e2ede",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a0307f-ea51-4c10-b080-4b7d6b778784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43a47a48-0424-4a9e-b6f3-b6f139d8619c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2fd583-efc4-4581-96ac-295980b80b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174a6511-b620-4f13-a744-119681467f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edded9b1-00ba-468a-a992-6183e80bed32",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c344b35-ce4a-4618-b9e0-9289230c49a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4630f1a2-b8e5-419e-9201-ac9fec68c555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b09320f-079d-4907-8d6c-c459470acb55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e40131-590f-4715-9d84-136d87e3b0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3758588c-6377-4c13-9f10-22e3f4adaa7c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a397e8-47fd-4844-91ee-a27ca2626076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a97ee4-0b62-43e8-bad6-8c3b4128a4da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba9a6e1-766c-4205-a06c-8922953cc680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83e5a99-330f-411f-bf65-b4d18272caa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595cd83e-a134-4cde-be91-3c6966f17e41",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c8ba23-05f9-4c67-8d66-6143af619828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c61465f-1504-4334-a528-44837654d36e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c815a52-534d-44e2-933b-137aec85211e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8450f087-40ef-4061-a248-4dcf2e6a4b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912ce576-bc59-44aa-afc9-493d3e1d74c0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96371f15-c4e5-4e20-9762-64b14c1bae80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40c237a-9148-4c9c-b122-190daf822107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f22719-a170-48a0-9979-8ac267864e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957378cc-95a9-4014-a8ba-6ae845683390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be078b2-15f1-4de5-87d7-fe4fabf39882",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b144ef3e-8827-4868-a83a-1527ff0d495f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50926365-8ee5-421a-8732-d4a0dafd0c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f101863-24e8-4821-8c85-ca5cdc0e88ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49787e97-bbb3-4162-9927-9f7493773410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336fc017-4eed-4cca-ac43-6201457b773e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592b8c0d-599e-4ce3-a86f-bd4b6d467b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81bf25a8-448b-4236-aaeb-19a520cedf69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32f555e-0f3c-4a8b-b2df-45a40857e50d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c93b9df5-56ea-47fc-ad4a-37f143db4859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59313944-34fa-436a-927b-acc9d6d7a20c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b88b09-7dc9-4673-8b20-4e87bdee4235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f81d12-54ae-4932-a810-8bfc9551597f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e980306-bfe1-4cd0-b02e-7da6605dce85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ed7b8d-5010-47cb-8ea2-22656dd5158a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee631eea-0a89-4353-a6f9-e559e0fed005",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d74d6d-8ff7-4996-8261-1dbd69673a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ec39ab-446d-4ee4-9c9b-bdf8c6bc9dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4596cc6c-2803-4f20-8b8d-5815ac9188e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9b85a9-f901-4c1d-8264-c9400a4ec76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12040ca9-8dbe-4f5f-8a86-2afe24e30507",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4490f3-db0c-4d21-b725-7d333412c4b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "decae540-58f8-49f1-859b-d79ac48aa616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52d0a6a-4697-4f2a-9397-be1af6f6b3bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6935d6b7-68ff-4c6a-957e-3887b4b9fd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bc2b9c-256a-4ac2-b82e-b18e68c9836e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37128fb3-96b6-4d3b-adff-b21c235915bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d171971d-d78a-4bbb-9e47-dca4faac704b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "865d668d-c702-4a77-aa9d-b15fa5f0b833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9522bbdf-e5b0-441d-a05c-f54e86e1e027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d136f7-a1fb-4b02-9ff1-9f7ef3a71a74",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34bc0758-ad92-4ad9-8568-476368333442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "937838c4-bbfd-4701-b9a1-e0d3381ad637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b4bc65-7fd4-4fdb-9d3f-9b1f91f22ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab6055f-3ab1-4dfa-9c1e-88ae0f2ad1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19574b9e-2e42-429c-ade4-5496cb425ad0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25608ca3-7990-438c-b9e9-46163d3e1304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "821bc970-53f3-412f-bd85-80f778e0a389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c8d2c4-7d4d-4a67-a860-233ea6339673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82e0a4bf-5c26-471c-a0b1-6d53a84e32ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136e1f41-4222-4426-b7ed-e1bff204d8cf",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34b10fb-e6fe-457f-8d66-fc01bcc3376c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cfd03e5-35db-4cc5-8006-0ed3a4b47f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6e7cf2-e128-4b6e-94a2-9261bd2ed8e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c419411c-43d6-482b-9519-ac62b1330df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9e3df1-771a-415a-b636-cdec8543d91c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60075677-d000-4e33-9587-c7ceaa4e6684",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "041934f8-85d4-4aab-8922-077c202f94cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe22901-1bab-4ffd-bf9b-5b29d860cfbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5fab4cc-6a4c-4d6a-bc78-cc2c373537c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0ccc37-0c33-439d-b7cb-0aa38f394d6e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1886711-d6d2-4734-bcbd-82ec08c3a433",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73a790b1-9ac3-48b0-a2a9-ba9061c65687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aefd7d8-f06b-4362-8954-3e93c1cb7a87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89466fa7-afcf-44ab-85d4-6b64a10eb32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764563fc-797f-4314-b244-c93872f2dc36",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0be637-3ffa-4ed8-9931-01d9764161b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6afe775-b3c0-44fd-88c1-0cf9c27ed746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "034e1434-b3db-43a9-aef2-38fd063df389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b437a64-b1d0-4dcb-a04c-bd76098cf0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61155d29-081a-49c9-b412-94cb160a9d7c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a08ba6a-3cc7-40f7-902b-7f9c4c8dd0ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9565f08c-1c13-4e7c-b034-cb09a772f5a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "302cadfd-a570-47b1-a08a-8dbf16479847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8aad7d-7b94-4f77-9369-4f82ecea142c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f868a1-792f-4f36-a476-9f232465975b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad26e293-5601-4932-90ed-e535aca084b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39bf0bff-cf1d-4911-8e7f-9cc3abdba34d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ae0527-9afb-468c-b3d7-810b2d1a5214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4757a582-5149-4106-b236-c396a73d0d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a41cd5-af97-49a9-a251-5474537f1754",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ced3039-0ac6-48c2-afb0-d90c8aa424c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47efd5e9-47a4-41a1-aa54-c2586218910b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb485996-b8fe-43d5-9f27-81387df4bc06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8f9ac4-f586-460d-a7f6-b699376eb721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1070515c-7a06-4e4d-aa95-97c00a29d348",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67012a52-79e7-4ba9-9411-9fb5a89a43b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f4bc2c-ff7d-466c-a059-c138b6664a68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7eeaaae-226a-400c-b21b-d0ab35a2ff07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2385a09d-c726-411d-a21e-1aaf12d9f11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a11c08-df15-4222-8aa3-bd5595906589",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6690d19-baf4-4528-8f58-883a2a67d685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5882c38b-d5c3-4a2d-8b1d-44d3b3ceb9ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fd0388-7e73-4097-ad2b-76378e1b616a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c42190-40b9-4df3-911c-a62cb82ed977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af26d876-0abd-4755-b56d-854e989c6043",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97237393-79f4-4bda-b780-74d09dd7cfcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96344bc9-50ec-4312-a39c-538406d0b52c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9be1f1-20a0-4982-8c20-4fe6a8e757cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecbf9c32-1b1f-4e6e-93c1-b41c2cf3031d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2713651-acf8-42af-ad23-c8aac62952a9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b813a2-b1e4-4435-bfb2-1d38793c655a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c59b3d-c387-4f93-8cc1-23f8ce7a845e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605b76fa-b826-43fb-ab4a-ca066eb21b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb179f8c-18de-4ddd-8553-01d2bf88ab71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea2453f-f113-4c93-92dd-0d7e873517ad",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96349ce-9bf3-4caa-9cfe-887f5d510405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09201f13-0130-448b-9eeb-78519e9bb558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47befb86-bde0-49d1-b008-dd57afe33765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c166c175-06d5-494c-995f-a378e2d091b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e9b8b6-acaa-4008-ac12-dab2703a18d2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108014f2-a37f-4efb-b681-773338ac2e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a4a2493-a29f-44b9-8c69-3a53552f1244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32b3e90-1b67-4a6f-a6c2-ae88a4671a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cefdb45-ac3f-452a-abb5-a2ac1462b638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdd32a4-effa-411e-9fd6-5f5769c8319e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb27831e-25c0-4fea-8862-d1729b9ba7a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4bef99-fd42-4496-9a02-49c1ca2431a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc37d90-5249-4523-8430-420d1b595ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e801eb64-2a75-465e-983e-2b2506d354d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495db256-ec4f-4439-9af4-e4c56b70a05f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e48d32-f77a-48ff-85f5-d1493eca4ed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a533c22-e1f8-4481-b56a-8d9cbb4dd42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db981aa-c771-4cf3-b75b-358417d8580a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc68006c-5b35-4ac9-b607-64a4cb8dbef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ee9c6f-af39-4c61-8f81-b2592132a2c2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad740c68-d968-472f-a9dd-965fb3540b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "060451ca-08f7-40eb-b78b-99144cd98ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79b30b4-2c6c-4818-9d69-f24ad2424097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1489727f-5ec2-4f2b-a59b-141f0284eb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857015ce-1d0c-4dfb-aea8-13dc00fd8cd1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad49b39-1fbc-477a-ab3c-5258ac9586f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40f409a-5af5-4de9-8c03-78c04f11dbac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7ce65f-a7d3-4d23-95b9-0d54d0c89e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b4d6eaf-1886-4621-97c9-5522b17399e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61bff6d-5541-4136-a3ef-5a625d8bbc3b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8331ff8c-106d-4f2a-84e0-89af880461c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484274b1-99d0-4019-bc07-cba9cb08ae45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e554789-7a15-41bb-bbb2-fb48d0c7a257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1695f713-df72-4301-8ba3-234ce7d4252a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4095441e-73ba-456f-a376-fde51f450fce",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3bf3ee-641e-44b1-a96b-177c4fb4623f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6378d59-aa0e-46fe-be68-d9c5e073781a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef6ab29-e4f2-4619-aeeb-8cba7efa1788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac97c6b-da2e-48c0-b776-4baf9d190002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0488ee05-e78f-4974-8955-aae24ff57c44",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d996848-8b47-45e3-b561-562dd5dacd5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8b3613-40a4-49e9-986b-e61df153a46b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c825fb5-3da2-41f4-a92b-5332f13b3cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac79675-6f19-4dfb-bbb4-09b308de701f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34618c7c-e7c8-428a-9423-e55c10ee6ed1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b670a3e-1b12-4c8f-84f9-58d1c169edd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec94635-46fa-4d71-8c46-960a5ba369d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2fcab3-c71f-4684-bdcd-0a78dd3bbc7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de06507-e7bf-4692-9562-217ea276a4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566b2ce8-cec6-4ea8-ba67-6d500e889543",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ba6d5c-2d19-4f17-8146-966ad5b46cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b1299d-f085-4e49-9e75-10ec0d47d242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8e886c-5b65-48b0-a3bf-57c45182af8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71be7496-2f38-44fb-b575-5f28b07eeb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969c4131-4636-40a0-8c4a-c3b12dfec633",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0092a55d-637a-4f55-8619-daeea19ce7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c3fa42-bc8d-4047-a9af-9d6a2fd0a729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d71539-c6ca-4f10-84e1-e6255aaffca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998be12a-2ecf-43a3-9f58-20047cb52eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a972b6-de79-4b90-825f-742faa8547db",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81194f0e-987a-43d1-895e-69c4b44e9649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a37cdd-49e0-4ab5-95ab-fb84565eb12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cb2567-dbd3-45e9-afb1-570443d95202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dec8c54-f81f-4162-9ac3-78c3daa7acf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307e60cd-fea0-454d-a0f2-a9bb93ade3ff",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900dfdd9-556d-48bd-abf3-ad7861703fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0feb9dbc-458c-498f-af9f-08e24b708ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e60f5f-ba12-4869-aeb6-2dd1af2bd6df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d6ae63-b5c8-4969-a59a-43dcdc146a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4db376-0a62-4943-86c6-defe6a81c3a9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af16f294-3066-4d94-94e6-6389f6fc88d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9594dd-6772-40d5-9b37-1e3791b62280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068754aa-c9e5-40da-ad86-6d55ba0f1bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ed0c4a-fa81-4a55-984f-e75d7454cbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a0a04a-854d-4723-b41c-d7ec6db3f272",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9229b9eb-c274-4183-933a-5c2439f18530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa0cb75-5ef7-4836-8d4c-520bf53101e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce7a3f1-41bb-43e0-baa1-2729254be446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f00beb0-fc61-44ef-aff6-c6afd5db7eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdbd7c5-304d-4709-8abc-6328147e9c8a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb13455-19a9-4466-94a6-977d051bd366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6601689-579a-40db-a683-c3540e226ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbefe7a4-3b46-4884-863d-da82c8a45dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86bbf8cb-3585-4e0d-98d7-63d5e5169e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1d6694-beec-4a82-a042-42d7aeaa2cbf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b4c3ec-18ee-4fd5-8202-2ea600f5f5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8846da-9adb-49fd-a4c8-722d86b459f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7a9361-4cef-48be-a340-5c0653566b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7103e5c0-d68d-4319-a308-78f0b13b68ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db41ef5-5ddf-40fd-8893-43b0e9571612",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77dbc643-c23c-475f-b4bf-df221b8fa1d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15d7a26-6f2f-4be6-87a7-2515e0490fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdea20ea-c846-4ab7-a34d-dd8823fd6a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a04d80-200b-4a80-a289-a0cc6cd7bf1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1296cdfd-f9ff-4e11-9a25-7aeb5f05da37",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c6f138-2059-4279-89ab-bf4df5b207a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af58769a-98a9-48e9-bb65-7091fa9a48bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d5e7e2-877d-4b82-bb28-be5fd0fcb899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888cb29f-585b-4a1c-a50f-6a2013418900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c3f9cc-4c09-4831-9278-0c6a8e938259",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c879f55c-a1bc-482a-8995-9835b425de76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a815f85-ccb5-4c9b-be7a-1613cdd526e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a161de6-e62a-45e4-8633-57210bfcc042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07b266b-cc16-46ab-89d1-d1540bd342a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f64bc6-e7ed-448d-9ccb-a10ef49ade8f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb4b706-bf01-41a4-be66-0ad4007824a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0ed0f7-a143-4e53-8802-562484965956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f155c0-5a70-43c8-a8ad-7abedbd27264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93387ffa-b72e-4611-b7cc-753797f43569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6953c68b-5882-401c-bec5-c805de9ec6ea",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4363a4dc-1765-4f7e-8ff3-52ea767a1200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9527be-f5ed-4c38-b19f-7831b5435cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3889e16e-e4bb-4730-a708-8a76ab9c3908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe0a226-c0df-4544-bad1-c37477243827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5fdccc-9848-4fcd-8a04-69fe770d5500",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d382cc6c-86b5-44ef-9ff4-7a86adbf2a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c4f3430-442d-427a-9c1f-6c617b0104cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b029f957-bee2-4ce7-81f9-3fbcea24f884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f1eed6-6965-49f6-9d5f-2376815b04f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebdb3a7-7892-4b10-9ed3-0b89388d8943",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994695f5-6d27-47e1-b48a-944774487186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe5c644-605c-4659-8164-1bdf7aec5668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cd4a42-a715-4b11-86fd-9f6ebabe6c9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842a2003-cccf-4eca-891c-5fd32926f06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d617cfe-32d4-400b-9230-98abee45afc8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "819a22ff-c097-428c-8031-341678209cd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20cac6f8-5f2c-4ad0-8d0f-a96394d468b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9047a0-9de2-4eff-9806-e028e9ecbcae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a619404b-e583-475a-8f65-0c0b9d4256df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f31e689-bb40-4367-8066-1d0e64cb81aa",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19aeba5-ef46-4ae2-ba9a-0c0c733534f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fe4ad97-27fd-4453-ab1c-309e51891d44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32fb34b-acc2-49e0-a169-96297c4f8014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a5c3b4-1d1d-416f-bc78-bfad717e9941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc605b4-a413-465b-9e2e-046adade50e4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8efb31-cb10-4384-afe6-944d720bf60f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b00e0826-fc9f-4f04-a883-e7c4736d049f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cce26eb-1dbe-4feb-979e-aa63e7a8b9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8e6e37-f1de-4148-9624-25dc87a8e74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79a8133-845e-484a-9677-b47cae31a410",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e382446-836e-4b3e-a1f2-1877e6137b53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c71fd0d6-cc78-43d4-ab6d-ffabc713f192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1542fe-5b43-420b-b661-a2328b8d2500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "609ba010-274e-46b3-8884-3318b1d4578f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1984bf0d-c826-47e0-9757-f8b1112cd90b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55d5435-d579-4076-9c2b-ba17a45b32e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2412c5f8-af46-488e-bf21-cf3aeff1c417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7ec887-a109-4c57-9ff2-7b6567c1380c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4555299-dfa6-40c6-a962-89aefe8267c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b4c79d-a838-4bf3-916b-c37fd871e714",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53c038e-7c68-4463-a3ac-b7fd2820fcf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06192c6b-2512-4c30-8c61-1793e0fdc3d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae5fd06-aa71-459b-9cb5-8ed4964ebc07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de2c4e99-bc0d-4823-bde2-9a0d08adea39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4c8897-25dd-4da5-8921-434f3ab528a8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e2adb5-34f5-4253-ba98-d1fe4b6455a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afd3cb9-73d4-460b-8089-6cfc4c0504f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c2b955-4af5-4100-a8d3-cef6ca632ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55685bcc-ac7d-424e-a9d5-fbc91593b732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b345c7-8924-4eb6-9b7f-9e18ba868e28",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981a1c9d-a527-4951-ba1a-5bdfb5d79343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5976126-f59a-488a-9b07-701d8860fffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7dbe00-19ac-4760-b280-aeeb1abc535f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a802a4e9-c491-48fc-8225-be63489160fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2b7435-4c31-482f-aaee-0e16e0765589",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa7873f-bf33-4b0f-b929-0b7c16cd71da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44ab6e68-662b-4a68-9394-669fe2cffdd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d806e2f-84d9-4095-a9ed-38b3b8e01e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd06b4d-702f-4f68-af61-ac235e96a639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a318cc-aa70-44ba-8daa-fe5e23e7acd2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b6466d-7c8b-49bd-bff6-a0d0caef8809",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53588b86-57b7-47a9-9a7d-752c97671179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58d2c08-32e3-4675-ad36-3ddfc6478eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f214b645-2982-46c9-a184-0b1d5746f10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ce98e7-0b00-4f03-9aa0-a027958f008c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5182f8-3141-4a44-b2d9-1a9999100570",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3357dbf4-364d-4e41-a47d-d608865ebf8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2013707-93f1-40bb-b8c8-8562e6228394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e39f05-5950-40ea-b47a-e7e6d9c3ded0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efcbaa5-5fc3-4726-8465-bcac8f349ecd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771bb5ae-5749-43ff-af58-c43c6865815a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6f3f2bf-0654-4159-9827-ae79d5bc919e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ec1ddf-5e18-437d-9e76-ffcba7971ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb05650-8405-4efd-a857-a1c241022373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5745df-8bf1-4416-9020-616add58963f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c9e4fb-8144-44c7-898a-5d318793384f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b24f0194-ac78-48ab-9a54-7cc145aa1bc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350ac25d-757f-4304-a735-bfc4cdb40278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285ef6fa-4b21-4775-84a5-eaaaf11b0a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb5e9a0-9f5d-4019-ad1c-260a779a6159",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e50f7de-3b8f-478c-918b-c0aeab3a54bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c8915a3-2a2e-4d6d-a9bc-da509e64ff4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "876284b8-34e7-4079-893a-db745c77e76c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee18d4f-34db-422f-96e4-e207c1d42596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cadb95a5-d821-4044-a6a8-944c6fdd911c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80ebf6b-78a6-4943-8a2d-88068bcf74bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf2792b-078d-46a6-a5d1-f90b01dd087a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f41fea-f197-4912-b42a-5cdaed20bbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea284624-3d60-494d-88ff-6472f1f773a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940c6057-53f0-446c-b4a0-fcc917d59625",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f9f283-5882-45e2-aa56-f6efe6d2414a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "971badca-daf6-40d8-b4d6-3209baebe892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3ab795-3daf-45d8-ac04-28b719b274b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4369ddab-8abb-41b9-9e69-9e337be1d640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8d6be2-d7e9-4252-80c2-0b18a8572137",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0981c25-0157-4e2d-9a2a-577ef1dbae3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2995f5c-1ceb-4d85-939f-b16316da20e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa9e281-5e37-4431-8828-3d19a4535fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05bc4b8c-403d-41fd-8a14-3929caebb437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007be99c-01f3-4607-b8b3-cc3c3e97754e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b5213a-4633-44b3-a3b3-043e67d85d9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e070fa-3def-4176-883a-83bd88747dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e89bbb7-d571-4074-ab3d-c67d0b8df9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0033e51-422c-4878-8a8f-7c6a7a8d3b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7543663-c07e-4368-8c6b-0f3b8778f313",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bce57d0-8325-4eea-891c-f2baf2e10c7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b01e29e3-ad50-4435-8707-35767ed2d3cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64194ffe-db5d-44d5-9e06-331dffcbbf03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a2faed-7c7c-46d4-8afd-5d0efaba785b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a68af22-c7c2-44c7-9d77-55c068d76f11",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3db38d5-b228-48eb-924c-e4baf8891086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "646613f9-3388-490b-bf85-1b3f2b0b3b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cf6f36-818e-49c1-9ad1-c613ed925bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "595002b3-f6f0-4d57-9054-dd49adb3c8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d1d37b-fe52-41c5-b041-60e0a6f2172e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971fc1ca-6279-41af-b8b4-6e0a76f3beeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8175be99-6b44-4129-ac33-36cffea77554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edfe433-2837-4c5a-9557-9b9956545767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9abb9084-d9d0-42b5-bdec-58a6b8244483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1683904f-9518-422a-aa2c-91a1f2f022d6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc0cdac-c815-48c8-9bb3-7e96555378eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8915eb08-df90-4506-a06b-b8be2ff454d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab4e5b0-729d-4347-9d90-49cbfe6bf565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181e1311-2772-414e-8dc9-d665c3e56b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0b8276-11c4-4317-b61d-fd237a47678e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d5aaaa-9cdd-4ffd-95e0-f52cf86b5301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b183ea7-0977-4904-a271-36f9879069be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e723a7da-1747-411a-a575-f22d969dee9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be21f30-6196-4084-82ca-17bb3fda1b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f3b368-3749-4a6f-a758-f54d54b4e214",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd1fada-1761-4af9-9bb0-b31c4db43429",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad5e1d84-52a3-4766-bf13-529e97cc827c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e978df-f5a1-42ca-b70e-8236b04c0ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40947d38-7c1e-4bbe-8d42-b2618fe095dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3214d23-4846-4e06-bf50-bcb05dfa4580",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4414b3b4-d834-466f-ba83-31c31eb1fb95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c824937a-0690-484c-87a0-419b3e2f6cae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4ff6de-cea9-4baf-a87e-ef53b3b45ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab87f46-8d1f-4839-8b67-c862c9ebd590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0540d2-7a3a-4757-af8f-efe7b8e0b546",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4413155-68a9-4e50-96b5-37aafd539bf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3419788-2060-48e7-a421-8d2b74dfa419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042e5395-766e-4be2-bb25-a93e5c3c367b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c317152-6e36-45e5-a4f9-347ec3bda3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36511709-1fd5-4f4a-a981-7446a31dbda6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7853f5b9-8e4b-42a1-847c-4f3b2a0de08a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd5e1a80-bf5c-4dec-9b9e-751e9959c36b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0232f9-b918-41b8-aca0-9bc275eac09a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d63504c-8870-4039-b125-ca367070ea31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb02455-eeb3-4ff0-8b40-47d549036110",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e4ec78-4109-40b7-8371-8cd8da4c333c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "878a3b0d-1772-4166-9688-50e190ab4894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70c6682-2296-4306-af6c-2b0366f755c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b59843-0a3b-4c72-88dd-b62d6753a0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425f35d1-7dca-4ef6-9c28-3e6632b7d684",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2e6e0c-80b6-4f0c-838a-0444c1e74d9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d360034a-6465-4a7e-a2e3-ce76b27b959e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7275eabd-6fd8-4c38-b639-cc1979c9d9f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc619f74-6a1a-481c-80ed-0f8748126893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ad5953-c60c-4aa0-999a-7d381607870a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de8808f-113c-437c-9e57-8ada862f9651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4b779d1-f720-402a-a62d-fbec81620058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b484ac-2700-4ad9-801b-fcdee630c91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38264795-6512-458e-9631-6838efd99eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2add33-171c-4a6e-b205-c4adc420bb3f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318b9276-3bdc-469b-9c3d-930c65e9b3ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ca553d2-7c22-407b-82f1-f0f045cd3f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb48bd7-52a2-4082-a93f-4ddd20b71d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e4ef93-fb3c-4eb1-a054-96e0c559e632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ca5a15-2c0b-4995-9e09-c5d5b007e2e5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a464a1-c708-4d4c-b71a-3de63686881a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0ab3aa2-8242-4004-a8a9-acafd0cbc708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95ada42-5378-4ac4-a2c6-aecfb541d0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce5dd06-88c5-4e48-b88b-6075ff5f4c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68faf46-7add-40dd-82a7-c2bddedb9497",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801cea01-5522-434e-b16c-3fc2bee78ad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c2bb792-d411-4aad-aec8-5a0fe3961120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64b495e-3c46-412d-b16f-159acc7b922d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af957920-4f3d-4d0d-a30a-a2a119caf7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17300d03-6659-4693-b233-2e4ea6900b22",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7a1cd6-697a-498a-a782-95704eecf290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5f5e6d0-fa8f-4c49-9390-e6455be7a275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9524b9dc-0700-4ceb-97b5-98ce5c6bdc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95c7ded-abca-482b-a01e-90facd51ff48"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1bc84a8-b1e4-4615-b8f4-62942036c234",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a938958e-a4ba-4892-ad23-4b13be971e05"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac9e404f-b401-4766-a5ee-3f3bc3111776",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5c8581b-8625-4715-848d-79ff8df8e94b"
                    }
                  }
                ]
              },
              {
                "id": "efd4458d-2ed3-4004-914c-a3afab9d7b13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9cbecab8-fc6d-41ea-b513-92c81c1c3857",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da25478-8628-43f9-90b7-8b47de596a73",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a6bddacd-5d0d-4e34-954d-0740fa2be4fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "949fc40a-b3dc-4558-8376-efc7ffb6a8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d365925-741c-44ef-a3ad-af0053152d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180a8bef-2f08-4683-a614-a3b57e01a524",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1051d9-cfe5-4d47-9358-222451c57982",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6acf6f73-8033-49c9-add1-0e183aef6dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "666dc515-c2fb-4a5b-8142-0b01e3329817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90096ebe-ef4d-47e0-aa6f-e35d0e26f498"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65b24f5c-2f31-4f93-a47a-4672ed615707",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5216f5f-f991-4168-88bf-7875e8b98244"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e672f99f-f36b-4f8b-90b6-864597748927",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "298dc816-4b78-432b-8c29-5bb377cb1603"
                    }
                  }
                ]
              },
              {
                "id": "8196482e-dc8b-411e-a3e0-8e05c7b067a2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d7469332-9de7-4029-9538-1fe9920603ee",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62317137-035d-40b0-a7d1-7a2f6a801687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "16bad2f9-c42e-4525-946c-852ff90fc30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9259893c-757e-495a-8d27-e6ca02ee8859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c97a012-fe09-41e7-a3fc-dc1a061ffc1f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cf3c11c4-5711-494a-8df1-19f8ed725d97",
            "name": "Positive Testing",
            "item": [
              {
                "id": "405500e1-21ac-4f1a-9052-5ef4e219ec5e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc8011e0-18b3-4d48-a38e-85b0cbf49319",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0ed1f2a5-27a2-4d93-8977-596f9010186d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7aa1370c-72eb-40ed-90c6-31ec41d87009",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2abf04d-d0f6-4b94-8ed6-b8820b5f3941"
                    }
                  }
                ]
              },
              {
                "id": "3238dc04-d892-446f-aa74-c3d261eff0b7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "281839f8-f498-469c-814f-c485fe195a3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b6e88008-96ca-43cf-b97c-ebcae153593b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b09f523-d683-4ea7-a7ed-1714166f5d1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa13b6cf-77b9-4261-8a23-44bd140b5e76"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ef2d2bc-fb5e-4be4-a270-518279c2d13f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b8fdbc4f-b015-4b8e-bd1f-222cfb22ba6d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83232724-8244-4d92-9c0d-8b7a0bd25605",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bcb0631d-cfb6-4e94-b001-7d33f2964123"
            }
          }
        ]
      },
      {
        "id": "4cfd919f-f040-4800-952c-ceef68f3a929",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f8f28c8f-96fc-4136-8c62-255a4ad0dcd1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24e65c71-94c3-4db6-9d7f-73244f55a4ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "15b89006-3aba-4523-9735-4cf0620a2cfd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a36b67-e0d8-403c-ae08-bba0df8604ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fc501199-00b6-4ef9-88e6-b11b5336daa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e40fea8-5ce8-412a-9985-40a2d37de229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3d22165-ce3a-43a4-8a8a-9f0ead5cbaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebbb167f-2735-413b-84a8-05c792b5a74c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5522ad-257a-48d2-a036-bb1e3205ec38",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a285cf83-ea7b-46b7-b2f0-f038dcf74064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c56c6b-f8f4-476c-879e-5588af7e1c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6826d52-9959-4b12-9f58-097abe8653e2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46d17049-6908-4bad-a300-9f777016dfa9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d33aa73d-36da-45cc-8b89-db94390dbe41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8b4a78f-abb2-4aee-86f6-5763a8074835",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48e107d8-8aff-45f5-af34-f0a0e0d25edf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26df3c95-ff96-4648-a850-39ce782c259c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "99065fef-3fc8-48c8-b20a-0d56a78d5f15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eee28163-2996-4725-97bd-0dcdb8adcbee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37e28f6f-66cb-4007-b5c9-293de8507d62"
            }
          }
        ]
      },
      {
        "id": "df2c0c6b-52e8-483c-a967-c415715b94ee",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "cf5c5b3d-1a6e-4e93-9423-4b9fc69a714a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf17ee2a-5d72-445e-be51-94844d9c8004",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "362db55d-43e8-4e63-b17c-3c899fa29b70",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "393c036c-d761-4f47-be4e-cd5d6e46cd1f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19014545-290e-4236-869d-0413f2137926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc8dcfc-c9b3-46b5-90d3-6aadaf70c38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3131a32a-d646-495b-bb0b-54f6233581ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd77baa-4a78-4d85-8150-0a7d91788f2d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ac818b-9219-4c3a-9c2d-fcafb752aa82",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd120da-e7a9-46a3-a655-e412ff2c9f8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "656276c2-a286-4c3f-8061-9c8d8592ad60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17f5dc32-45db-4c2d-9cab-014902351128"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8ca66fc-a6b7-49f9-ab9a-f7881acfcf60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10bf9bfe-50f7-42ac-85af-e72933d50cf4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00831dca-a06c-431c-ae43-429ac0f7fe61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfa71fa0-3adc-4f7f-9d11-7104f56ad836"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4907748-8bca-4fca-8329-d250b7b44cbc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7616e986-a321-48f6-b47f-7f07850888ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a14addab-ceac-4690-bfaf-b721b92a50a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4815425f-fa93-45ee-bded-b887bc1795f2"
            }
          }
        ]
      },
      {
        "id": "d0f5ded9-d46a-4470-b3fa-2ba5b876ec44",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3dffc3b7-0b1c-45a0-a0e7-7b5a4edb0fa9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fc0f0819-c724-40b1-99e0-9bf0ac23c824",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e069178c-2928-44b8-a3af-e14ecef61a8d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b1f1fe-2039-434e-85ee-59eb65fe3c38",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e8d6d23-bb55-4209-a190-77d5e0bbfc6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed13ece4-b57b-466e-a89b-9a98c84ebe3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6bc3a7b-a578-445b-a891-6f8fe36329f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d06b67c-ebf1-47cb-94da-461ca1b6b57b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5896f7-96a4-43a6-ab36-087a71d5d56d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "19e0f11e-0cc8-4d31-8cc2-4d49383245a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af977211-7225-4d9a-bcb7-a2c902747696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5311db24-a7ee-4b29-9a70-838dca8c1b9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14fb8c81-2344-4ead-a537-512e4c8917c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9499b5d7-e285-4171-afb0-4409c6619deb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dae44a5c-c6da-4015-8a48-0ca0445cac09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69f8815b-2d27-4311-b482-182f81b15335"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff0c145c-1b7f-4431-ac43-5955c63e6f90",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6fb00acb-58f2-4db2-93f0-5c004fdda720"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d5fed88-e640-4d5e-b322-a52591bce7df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "130b4787-fb35-4cbc-a5bc-1bbf258c590a"
            }
          }
        ]
      },
      {
        "id": "cab23466-2ae7-4082-bda6-c141344ecb02",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0539a00-0495-48a3-a036-e1f2c39927d7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "553d9281-d779-4af1-aeb7-319dcd6984dd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "14082a91-2af2-4a47-803d-96d3a7b3d3ba",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07d171e9-c1e2-48e9-b7e6-cca44ca2c3e8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b26486fe-27f7-4ba6-ba80-48437b7d99d6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 254.3615384615384,
      "responseMin": 10,
      "responseMax": 6421,
      "responseSd": 752.6417474862612,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679704658562,
      "completed": 1679704735371
    },
    "executions": [
      {
        "id": "ca4fd882-65cf-4898-964b-c90050ddb2d1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "727fad75-9baf-4ee8-afeb-28d964165a6b",
          "httpRequestId": "90e6fbfa-1925-4779-af55-b4138fc7547b"
        },
        "item": {
          "id": "ca4fd882-65cf-4898-964b-c90050ddb2d1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3b565ce2-eca0-44db-9cd5-f7d9ffb8033b",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "e670da34-1039-405a-bf33-a3eb890737f1",
        "cursor": {
          "ref": "17f35644-b203-4a33-a050-334ecc9b013b",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "98951fe3-12af-46f8-a1a0-2d29c227e7be"
        },
        "item": {
          "id": "e670da34-1039-405a-bf33-a3eb890737f1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "13c02770-2223-4361-9d65-c913788abace",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "65c0b063-f355-4028-b726-6c378fec4a18",
        "cursor": {
          "ref": "79941936-b7ad-4def-ae47-68aefb899889",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c5e94bb3-c4d6-4d81-988c-d78e78a3b7d9"
        },
        "item": {
          "id": "65c0b063-f355-4028-b726-6c378fec4a18",
          "name": "did_json"
        },
        "response": {
          "id": "13b187b0-f72f-479d-ab56-db4be318714d",
          "status": "OK",
          "code": 200,
          "responseTime": 378,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe5ce9e-999d-438f-b1ae-5ec79fca69cd",
        "cursor": {
          "ref": "102cd6ca-0357-4090-8629-2f4d264726a3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6dddff46-57b4-4d27-bd9c-3b6ed539adf2"
        },
        "item": {
          "id": "cfe5ce9e-999d-438f-b1ae-5ec79fca69cd",
          "name": "did:invalid"
        },
        "response": {
          "id": "c43026f2-d116-445b-a3a9-e45923fbf123",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1530,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cfe5ce9e-999d-438f-b1ae-5ec79fca69cd",
        "cursor": {
          "ref": "102cd6ca-0357-4090-8629-2f4d264726a3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6dddff46-57b4-4d27-bd9c-3b6ed539adf2"
        },
        "item": {
          "id": "cfe5ce9e-999d-438f-b1ae-5ec79fca69cd",
          "name": "did:invalid"
        },
        "response": {
          "id": "c43026f2-d116-445b-a3a9-e45923fbf123",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1530,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bb305144-ab2d-4a9d-840d-9aece581ec01",
        "cursor": {
          "ref": "4873452d-9063-4d70-a6ba-38a0ac0c5d42",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8dc0b409-269a-48fa-b9df-1fc0aeca2a27"
        },
        "item": {
          "id": "bb305144-ab2d-4a9d-840d-9aece581ec01",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "473ef16e-34a5-469e-9b8c-3f1a7b1ac31e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 54,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52469f49-0e9f-41ac-a3fb-3b1c2c33836e",
        "cursor": {
          "ref": "4c63169e-3f03-48ec-82f7-8343779d2702",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "68dd5f5a-fc07-473e-b12d-67aaa0ad89aa"
        },
        "item": {
          "id": "52469f49-0e9f-41ac-a3fb-3b1c2c33836e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4e889a70-7f49-43ec-8c12-53b796e1780b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e713d34-fe0b-4a08-add5-593028a307ea",
        "cursor": {
          "ref": "6ac3f163-d996-4174-aa12-786e54f6984c",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6d88e559-1455-47c3-8818-776230e8ee4a"
        },
        "item": {
          "id": "1e713d34-fe0b-4a08-add5-593028a307ea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "90eaedc1-f995-4806-bf69-d1c3a8dd87e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a9d6ed41-5de4-4c41-94ee-5c53eec7f8df",
        "cursor": {
          "ref": "9bfadacd-013f-4281-ae1a-784b22daccf4",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "04536a4e-c617-44a3-be10-8040c69b5302"
        },
        "item": {
          "id": "a9d6ed41-5de4-4c41-94ee-5c53eec7f8df",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c3d2afb2-db35-48b4-a0c1-d644c28f7603",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a9d6ed41-5de4-4c41-94ee-5c53eec7f8df",
        "cursor": {
          "ref": "9bfadacd-013f-4281-ae1a-784b22daccf4",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "04536a4e-c617-44a3-be10-8040c69b5302"
        },
        "item": {
          "id": "a9d6ed41-5de4-4c41-94ee-5c53eec7f8df",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c3d2afb2-db35-48b4-a0c1-d644c28f7603",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "91b23073-6aca-4953-b327-4d979a37fb81",
        "cursor": {
          "ref": "630de985-d289-4578-8b3e-5cbc5bd0c6ca",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fb3328fe-9057-4833-90e9-6c40460c5458"
        },
        "item": {
          "id": "91b23073-6aca-4953-b327-4d979a37fb81",
          "name": "identifiers"
        },
        "response": {
          "id": "3ebbc6a4-2035-4124-ba33-b0a73ae89a98",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c9d31c-6b1a-4d5f-88e1-d0d1c8399ffd",
        "cursor": {
          "ref": "f97b4be3-0018-4de3-bc2a-0c4ae06f3608",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "93a85d20-70a8-4f32-9c36-e221ed145fdc"
        },
        "item": {
          "id": "06c9d31c-6b1a-4d5f-88e1-d0d1c8399ffd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e593a086-7d3b-4b9c-884e-0734de9720f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c9d31c-6b1a-4d5f-88e1-d0d1c8399ffd",
        "cursor": {
          "ref": "f97b4be3-0018-4de3-bc2a-0c4ae06f3608",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "93a85d20-70a8-4f32-9c36-e221ed145fdc"
        },
        "item": {
          "id": "06c9d31c-6b1a-4d5f-88e1-d0d1c8399ffd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e593a086-7d3b-4b9c-884e-0734de9720f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc355b6e-0a94-4e9b-8352-9d0c9fbc2feb",
        "cursor": {
          "ref": "d57bcc42-6d5c-449d-9d99-b25bdb912c4c",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "40c55af2-4073-4eb5-9a4b-17591c6b04e1"
        },
        "item": {
          "id": "cc355b6e-0a94-4e9b-8352-9d0c9fbc2feb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7c62d956-bd92-4a70-94ac-d92335ce5f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ccfb729-09a5-4a0f-94c2-9dbdca1a7f6e",
        "cursor": {
          "ref": "2c815be8-d48b-4e9a-84d6-2d82c26bd4ed",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8df84cd0-4959-4363-aa22-0e1a26382055"
        },
        "item": {
          "id": "3ccfb729-09a5-4a0f-94c2-9dbdca1a7f6e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2fdd91ac-70c3-460b-8e94-5f5275778b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1f93f7-f3ee-4c56-bcf4-08264887fbf8",
        "cursor": {
          "ref": "7262fca9-5e16-48ea-9be8-41a903326bab",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "21317800-68b1-491a-92c5-7abf0ad9ef22"
        },
        "item": {
          "id": "0c1f93f7-f3ee-4c56-bcf4-08264887fbf8",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "72178ecf-4371-496d-875f-196a226d4ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fb71e8-3567-4db7-9f96-fd0e5ee10044",
        "cursor": {
          "ref": "2f60cb19-6ec1-40bd-8513-7f2434b829d6",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5e17b355-74ea-4fb1-8355-d464dc905016"
        },
        "item": {
          "id": "b5fb71e8-3567-4db7-9f96-fd0e5ee10044",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3464087a-69ee-4185-94ad-b3e4d51689f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1d62d5-190c-4267-a957-fb1b246592c6",
        "cursor": {
          "ref": "026eec9a-5b5f-4656-8260-77d2f87ad705",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cca67117-c59f-4ed5-97e3-f35357513a42"
        },
        "item": {
          "id": "6b1d62d5-190c-4267-a957-fb1b246592c6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f83ffb24-1e2a-4ba1-8799-89480fbf65e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d3ce4b-ce5a-43d2-b6b3-5fd72438903b",
        "cursor": {
          "ref": "6fccbe3b-7537-4202-8f2d-eecc665df265",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cf7df231-7980-4d46-ae6e-b6e1a34a65d4"
        },
        "item": {
          "id": "16d3ce4b-ce5a-43d2-b6b3-5fd72438903b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "73c9bf1f-8101-4a25-b4a9-7650e2799dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3acaaa3-19dc-417f-bfd0-b419639de152",
        "cursor": {
          "ref": "81759eb5-9f63-4605-ae5e-6474c109ccb1",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3b3d0e5a-2a6f-45c5-8159-ea52920b3343"
        },
        "item": {
          "id": "d3acaaa3-19dc-417f-bfd0-b419639de152",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8b15b3af-b727-4d30-90dc-4efc9363e840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cf617e-9501-42e3-bdb9-e656abdafc81",
        "cursor": {
          "ref": "2155050f-f3af-488a-82d9-73b7d625bd22",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d437183e-568a-4bef-a060-57831aaef592"
        },
        "item": {
          "id": "f3cf617e-9501-42e3-bdb9-e656abdafc81",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4e1712ff-0c4d-4076-91a2-2e0b96c7e5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911147a2-8439-4f1d-999d-23a299d052ea",
        "cursor": {
          "ref": "101cf711-6af0-4232-a8c2-ebee3f6d319e",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ee38fb73-8d1c-4b8f-9d3a-d49cf7ebe40a"
        },
        "item": {
          "id": "911147a2-8439-4f1d-999d-23a299d052ea",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "185ea280-d67f-4634-b2d1-124cdfdcd4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16883602-4882-4c89-b4c0-071dfbb7709e",
        "cursor": {
          "ref": "1a877384-0c56-452a-a58f-87462df4be6e",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4da5e5d5-4957-4ab6-bad4-8cc6d890458d"
        },
        "item": {
          "id": "16883602-4882-4c89-b4c0-071dfbb7709e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0e848de3-01c9-4fe5-b819-07d23235f188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4df70b0-cfe5-4f8f-8c21-1bd4c30f09d0",
        "cursor": {
          "ref": "7549884e-47d2-4fb9-a3fd-cb020cd7b168",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3c6d4348-121a-49d1-8f2a-04fa972ae809"
        },
        "item": {
          "id": "b4df70b0-cfe5-4f8f-8c21-1bd4c30f09d0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "dfa56c49-8084-4cc3-a373-d458d7db7349",
          "status": "Created",
          "code": 201,
          "responseTime": 1215,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "4ef74a2f-b435-403d-b170-a5b64f4d10dc",
        "cursor": {
          "ref": "a1680cf4-82bb-4a41-9127-e2f30ef16e38",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ba1728d9-670d-4a1e-aef3-c688924543d1"
        },
        "item": {
          "id": "4ef74a2f-b435-403d-b170-a5b64f4d10dc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e7747f04-8fb9-4ac5-8fe5-2a9c7c023764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b124aa-5e4a-407a-acb2-76059e7636ce",
        "cursor": {
          "ref": "15f6dce3-5034-42f2-a052-d668c4541c6f",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "22931caa-c80c-4f3b-8531-47ab86630d86"
        },
        "item": {
          "id": "98b124aa-5e4a-407a-acb2-76059e7636ce",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "280f79db-a26c-40a1-98da-995688287df9",
          "status": "Created",
          "code": 201,
          "responseTime": 3700,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "45f95ff9-d2bb-40f1-bf79-6de56653777c",
        "cursor": {
          "ref": "b71249f4-d39e-424e-8ae6-de90b4a9f5e2",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f34f6756-c9c2-4e49-ad67-0371abb1417a"
        },
        "item": {
          "id": "45f95ff9-d2bb-40f1-bf79-6de56653777c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "32ae5ef9-2f14-4318-ae4e-a198efb4cb4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd09fd70-4b66-4066-a214-286bbe63ff3b",
        "cursor": {
          "ref": "dff90dc4-e50b-4dca-86ca-5235c32dec0f",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "56928987-fc88-4d69-b2f9-33fdde8e4f1f"
        },
        "item": {
          "id": "dd09fd70-4b66-4066-a214-286bbe63ff3b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "907ec086-8e87-47af-99f8-a1d9b12233aa",
          "status": "Created",
          "code": 201,
          "responseTime": 6421,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b0becefa-1ca6-4d9a-a030-505a50887136",
        "cursor": {
          "ref": "2b66abc5-12bc-4c17-81a1-56e058d53a37",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8e21cce9-a020-4bc3-91c7-d64a2c3c5252"
        },
        "item": {
          "id": "b0becefa-1ca6-4d9a-a030-505a50887136",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "97e4e45a-095a-4302-a176-5354760a0c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f6b641-3165-4521-b52a-6f080e110bac",
        "cursor": {
          "ref": "069c6310-5a5d-4077-9463-0d4242db7817",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "57104445-c193-449c-b61b-d036c2180c93"
        },
        "item": {
          "id": "83f6b641-3165-4521-b52a-6f080e110bac",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "695eab2a-4b7b-486f-b56f-90151d99b0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67cb7f5-508c-4e2f-981d-08699c627dee",
        "cursor": {
          "ref": "ea35b7df-b4d6-4ef4-b551-57f49dda0ba1",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "24d0153d-7f5f-493e-880e-2e0077994599"
        },
        "item": {
          "id": "b67cb7f5-508c-4e2f-981d-08699c627dee",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9b79f235-4a6d-4a49-95df-df13b3efa553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f66359-0a40-4fca-a9be-d2d6c7ce09ac",
        "cursor": {
          "ref": "1f683c1b-5daf-4b65-8426-bdd9c0235af2",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "19571cf0-3d12-4975-97e1-308ffc64c090"
        },
        "item": {
          "id": "a0f66359-0a40-4fca-a9be-d2d6c7ce09ac",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b7f4f284-cc79-475d-b98d-ac6120946319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b376b50f-76ff-4a25-b3a8-40e404422675",
        "cursor": {
          "ref": "e015b706-b431-4177-832f-d7a46099c21d",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d9238744-debd-4fd5-b6f2-133a673628b0"
        },
        "item": {
          "id": "b376b50f-76ff-4a25-b3a8-40e404422675",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e4e60a2e-994a-422b-b9ce-60510ead62fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6988c50a-48cf-4853-a03f-45b3a9b5c5f9",
        "cursor": {
          "ref": "454f624a-965a-478d-81b9-76c3c33e32b5",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c9cf8fe9-c0d0-4f0e-8004-02d6793fb65b"
        },
        "item": {
          "id": "6988c50a-48cf-4853-a03f-45b3a9b5c5f9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0c869ad2-d314-40ae-9751-f321ed674b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1059e9-0cee-4e37-89a0-8dfd7f65a7ed",
        "cursor": {
          "ref": "0f7e0afa-1de6-4f64-8b1e-1fadf1e25c0c",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0fdd1063-fc96-434f-a10b-94bd57d5cba5"
        },
        "item": {
          "id": "4a1059e9-0cee-4e37-89a0-8dfd7f65a7ed",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "aa0ea31a-83a1-4600-b218-96f47c2f43ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29aa59af-617e-4cfc-91c1-50c9ef1e2c56",
        "cursor": {
          "ref": "cb144df3-97f1-4661-8d81-3cc39313e586",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1389e071-bcf8-4170-a70e-d90fb8054a32"
        },
        "item": {
          "id": "29aa59af-617e-4cfc-91c1-50c9ef1e2c56",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f4621ded-3372-4996-aa71-83a85390e7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2668908a-ef50-4bef-89f7-fa014e5973d8",
        "cursor": {
          "ref": "db238bd4-6604-41c3-9dec-710cc31dd967",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "98db5a65-c08f-42a4-af7c-88612725dfa6"
        },
        "item": {
          "id": "2668908a-ef50-4bef-89f7-fa014e5973d8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1ae94f5d-f3ed-4279-abc4-da08e3542194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602619a2-c257-44dd-a37a-00d0d2482d2e",
        "cursor": {
          "ref": "4eaafedd-50d0-4777-99e5-83b9ace9293a",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a3813e5f-53e6-4ea2-b747-3eb3adfb7ccb"
        },
        "item": {
          "id": "602619a2-c257-44dd-a37a-00d0d2482d2e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6d1102da-3398-41c2-9db6-fa8535a66d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cd07c5-710e-4eb2-a96c-f994549f5ff3",
        "cursor": {
          "ref": "80e2f281-b327-4ff4-91af-cdd510c5fca1",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8b67fd3e-ff0a-441e-8a8e-892ba26c4efb"
        },
        "item": {
          "id": "b0cd07c5-710e-4eb2-a96c-f994549f5ff3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4113a807-21f9-4798-a21d-443d0ec206c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed316c7-4f34-4521-bd95-90cb9c29d574",
        "cursor": {
          "ref": "78dc1cbc-622e-4c0b-84e5-e074210a7ce3",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8c0d373c-e706-4389-b79a-e0681a4f28ee"
        },
        "item": {
          "id": "7ed316c7-4f34-4521-bd95-90cb9c29d574",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a1f8549b-cf6e-42db-bf04-9f4bf8ed8055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57d5282-57a1-47c1-af6b-f7f0705118fd",
        "cursor": {
          "ref": "9c6ecb84-fca3-4c96-bbc6-66e6637e818a",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7a7f4362-8403-4407-80a7-6b5ffa86a791"
        },
        "item": {
          "id": "c57d5282-57a1-47c1-af6b-f7f0705118fd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "de09cc3a-d2ed-454f-bdb5-089c84f265a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113f04aa-39af-467c-9e38-5a50f3dc3140",
        "cursor": {
          "ref": "e19d3e29-6d58-48fc-9f14-a28e1be72c24",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6a984f9a-0b38-4559-a51a-9ff54f06d519"
        },
        "item": {
          "id": "113f04aa-39af-467c-9e38-5a50f3dc3140",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "46c41b6f-113f-453e-bd41-13be81f96712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a49f54-3417-499b-9217-01f23704ef49",
        "cursor": {
          "ref": "4cf100f4-c7d2-4b7c-98fa-fdc1f0050fe2",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ba4926f5-c6ba-49ff-af86-d8da0fd542b1"
        },
        "item": {
          "id": "26a49f54-3417-499b-9217-01f23704ef49",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b6fcd87a-5dd9-4c68-a4b2-49694a2138be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abc3a56-8053-45a0-a8f3-f0c30f5c67eb",
        "cursor": {
          "ref": "adaa3e8a-9258-48e3-96fe-c5ecd242fcbf",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c5477d75-9042-4620-b7b2-4519e798c630"
        },
        "item": {
          "id": "6abc3a56-8053-45a0-a8f3-f0c30f5c67eb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2a5e9e46-e41f-4909-b99f-752a60626207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c131d98-23bd-4078-8ec3-b8e104c19081",
        "cursor": {
          "ref": "c26da8b7-b4f9-4378-8a4c-3a818914a587",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "afeab648-9448-4460-a01f-ea649a1e83b7"
        },
        "item": {
          "id": "3c131d98-23bd-4078-8ec3-b8e104c19081",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1205bde7-4e7e-4193-874e-87876e269064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c931f8-d68f-4ba5-b5e3-a68a8ff50bf9",
        "cursor": {
          "ref": "73fe5eef-ca76-4c45-8139-a268d271c75c",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dc098980-2fab-4db0-aa1e-aaa172ca329c"
        },
        "item": {
          "id": "75c931f8-d68f-4ba5-b5e3-a68a8ff50bf9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6c66c079-7823-4836-9a8a-b0b24991306e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7059588e-87b8-4856-9759-87b4048a1de0",
        "cursor": {
          "ref": "03acc799-f62a-49fe-8dfb-b43cd4ea4563",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "05b2b7bd-fd11-4d37-8710-2b563fa4fcc6"
        },
        "item": {
          "id": "7059588e-87b8-4856-9759-87b4048a1de0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2b52875a-58de-4f7e-bbd7-47789b454d57",
          "status": "Created",
          "code": 201,
          "responseTime": 3498,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "cd2bf63b-971b-4eda-993b-a8a0936d95a1",
        "cursor": {
          "ref": "15c31de9-31f4-4188-880f-1a527942afe5",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d8ef8ca2-3b14-4c82-b7ce-f4bedfac9e0b"
        },
        "item": {
          "id": "cd2bf63b-971b-4eda-993b-a8a0936d95a1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "07927edf-d20a-4748-8cde-ae2b3984f86a",
          "status": "Created",
          "code": 201,
          "responseTime": 2903,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6f489f41-8e0d-41e8-9886-2d118f344d4e",
        "cursor": {
          "ref": "c8181d8d-eda5-42e9-9015-2196f84400a4",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "08a403f5-fecc-4ce6-8adb-d2ed07b151c1"
        },
        "item": {
          "id": "6f489f41-8e0d-41e8-9886-2d118f344d4e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8a3d3845-5bfc-49cf-991c-f09bab3f1de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8eba8f3-3c3d-4249-8796-46a4c5f4994c",
        "cursor": {
          "ref": "768359df-ab1d-4ab1-8fce-f498aeaec3a3",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a4901622-494d-4d7c-ba84-1d07a3d2743a"
        },
        "item": {
          "id": "e8eba8f3-3c3d-4249-8796-46a4c5f4994c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "055a0249-8071-4aae-8dd1-c3ae2444d78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691358c7-8805-408d-a9ca-9d012197adbf",
        "cursor": {
          "ref": "8cfda330-87d4-4a04-b678-02c71da3f5a4",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f87023cd-8013-48fb-87bf-c2e5928be038"
        },
        "item": {
          "id": "691358c7-8805-408d-a9ca-9d012197adbf",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "30c92bb1-67e7-4291-b51d-20a515b2f846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8632fe-f26b-42e3-8dae-294f234f67bb",
        "cursor": {
          "ref": "1bb1bcdf-b98a-4dde-bf4b-4e53f12dd066",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "21265f67-e811-4f21-8c60-1336a459fbcd"
        },
        "item": {
          "id": "ce8632fe-f26b-42e3-8dae-294f234f67bb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b119ac13-6266-4546-b776-dace58362b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7c9e5a-b5be-44e8-a4af-32e3624d233f",
        "cursor": {
          "ref": "2bd6e628-fdb3-45c2-84bc-4616c2beedd2",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6120a44f-2487-44e6-ab41-812d7033240e"
        },
        "item": {
          "id": "eb7c9e5a-b5be-44e8-a4af-32e3624d233f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "78c6b8ce-b70a-4b05-afce-166323957f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b15b64-6f3e-488e-b2f2-a47aa53b3a8e",
        "cursor": {
          "ref": "488e7ff1-5c3b-4e88-a31d-5c9e2ae057f4",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0e941a4c-004b-44cd-a67c-0565a7b8b1ec"
        },
        "item": {
          "id": "c9b15b64-6f3e-488e-b2f2-a47aa53b3a8e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d5633b2b-7880-4373-ae4b-5cbc8f20145d",
          "status": "Created",
          "code": 201,
          "responseTime": 2695,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8ffe606c-dce3-4b75-97fe-ffa774b81a03",
        "cursor": {
          "ref": "abb951c0-3eff-4be5-8f0c-a91ca7ea0e47",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6ae96e71-3ecc-46e2-9f18-39d8f13434c5"
        },
        "item": {
          "id": "8ffe606c-dce3-4b75-97fe-ffa774b81a03",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c226132a-9a64-47d7-b1da-287cff66e018",
          "status": "Created",
          "code": 201,
          "responseTime": 2784,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "bf2ec086-28d3-48ac-88fa-e92e77c17375",
        "cursor": {
          "ref": "dfca1257-db4a-477c-b748-89e9260ef055",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e2a2af51-ea2b-4e2d-9fef-bfe7768a7e72"
        },
        "item": {
          "id": "bf2ec086-28d3-48ac-88fa-e92e77c17375",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "50e4d336-5afd-4881-be6a-bb06315f6d1a",
          "status": "Created",
          "code": 201,
          "responseTime": 2827,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "de54ce5e-ea7c-406a-b71d-adadf5fc3d8a",
        "cursor": {
          "ref": "956d29e6-7ec9-4c61-becb-01da1a3f2152",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7d3674c1-b346-455e-8a00-358d3db5c546"
        },
        "item": {
          "id": "de54ce5e-ea7c-406a-b71d-adadf5fc3d8a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ebc2c462-2a87-48f7-9beb-2704997aae85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc95990-c658-4a8c-8eaa-9d37b97e1c05",
        "cursor": {
          "ref": "4869025f-30c4-4333-8541-232a79e384ad",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1caf5cfd-8819-43b2-a2fb-39fff0da5f7a"
        },
        "item": {
          "id": "afc95990-c658-4a8c-8eaa-9d37b97e1c05",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "de00ec43-93c5-49db-834f-7db58956de2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5658adc-341e-482c-8148-e86ed9ec5436",
        "cursor": {
          "ref": "11cc6b62-0881-4fbf-938e-2fb58c422a49",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9bc7a3ff-6ea7-4626-bd70-53af31703a75"
        },
        "item": {
          "id": "e5658adc-341e-482c-8148-e86ed9ec5436",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "39c2320e-7e43-46e6-a4fd-f35ed08b3d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc8f941-12cd-4861-8610-7b24c90fa62a",
        "cursor": {
          "ref": "d946ace3-fd94-4f5e-8096-34869459883d",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6e521b64-4b57-478d-bb9f-3c3694e8a85a"
        },
        "item": {
          "id": "ddc8f941-12cd-4861-8610-7b24c90fa62a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d64f2bb2-cf4c-4e7c-a674-d4bc8911d1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34aed4da-8241-4c3b-95b5-d39021abbdc2",
        "cursor": {
          "ref": "94c69867-f1f2-430f-b093-15a02d24d032",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c742a639-b9ba-47cf-a840-03cb02d5ae1c"
        },
        "item": {
          "id": "34aed4da-8241-4c3b-95b5-d39021abbdc2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3d2b2bad-e54c-4740-9b3a-0e8f7a843762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a82b32-1c40-42a8-a193-5d54cc89dca2",
        "cursor": {
          "ref": "ac9bc1b5-2262-4bc2-8803-23231df72d38",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6c212f1c-3da2-4882-a18a-f527a4c9c363"
        },
        "item": {
          "id": "b3a82b32-1c40-42a8-a193-5d54cc89dca2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "801e4cb3-1467-452c-a4f1-ab8a2434fbee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2282da-5ed8-4d43-b9b9-ffdbd0155959",
        "cursor": {
          "ref": "984c3320-b2d7-449a-b64a-f9bd2be4fda7",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4804bc1f-7f24-42d5-85fb-f2734d6caadd"
        },
        "item": {
          "id": "2a2282da-5ed8-4d43-b9b9-ffdbd0155959",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b67e4f15-4c79-4458-b45e-0c58eca66c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a362a0ea-b237-4fea-97d4-0850dcedd4e3",
        "cursor": {
          "ref": "f54d2bc4-8382-47bf-a194-c66bebe66a01",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "697bf9cc-6ff7-4b97-afa1-00b55109ee97"
        },
        "item": {
          "id": "a362a0ea-b237-4fea-97d4-0850dcedd4e3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "dc06f97d-668f-448b-8409-1d5758c5933e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b09e48d-7c18-4ccc-a6db-4c9c0f28507a",
        "cursor": {
          "ref": "bacd93f2-5668-4b29-9e14-02f4be9e4c3f",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "096f4bee-4e7f-433b-9f89-61ece34270e5"
        },
        "item": {
          "id": "1b09e48d-7c18-4ccc-a6db-4c9c0f28507a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4c155952-75f9-45aa-bed6-b10f1fab1576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b38dfc-73c4-4cfd-a42e-57b1f28959bd",
        "cursor": {
          "ref": "59de1b46-46ce-4b72-b8dc-666c22cd0188",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2c9af703-2a71-4bb8-a46e-39d22f46d62b"
        },
        "item": {
          "id": "63b38dfc-73c4-4cfd-a42e-57b1f28959bd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e31198e7-f13e-4ce9-875d-c19dc96a179f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b3c96e-ac9a-4ae5-a531-7b58b6fe1b72",
        "cursor": {
          "ref": "cba23521-54b7-4810-866c-16f44fec205e",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "671a431b-b9ba-4731-8223-2cfb2a496b63"
        },
        "item": {
          "id": "67b3c96e-ac9a-4ae5-a531-7b58b6fe1b72",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5f868584-15bd-42aa-ab4b-57a55af060ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fa8fb5-b59e-49fb-a55e-c1b768460d5b",
        "cursor": {
          "ref": "96abc2e3-bab1-4914-95c0-c4a8066e9499",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "27c425a0-708c-4d4c-8f21-f6274d15b0b0"
        },
        "item": {
          "id": "70fa8fb5-b59e-49fb-a55e-c1b768460d5b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f00ca9ab-7740-4ee9-9c96-49d08b2756b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da666ea1-6402-49d1-84f0-e80b3da9abae",
        "cursor": {
          "ref": "ea197537-dc8c-4fcf-aed8-6b6f4a170019",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "72fbffcf-400d-4172-9769-5be13dcd6b73"
        },
        "item": {
          "id": "da666ea1-6402-49d1-84f0-e80b3da9abae",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d2237c05-8212-4c6c-a307-99035ac60c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba41681-721d-4344-bfbf-06aedc283e64",
        "cursor": {
          "ref": "418d8209-6d1a-4493-9b3e-809adfe5e569",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5aa8a60b-65f9-4d55-bd3f-019501a521b5"
        },
        "item": {
          "id": "6ba41681-721d-4344-bfbf-06aedc283e64",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e1949d2c-9aae-4bba-b64a-5e2f30f3169a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e708be-b91b-4fe9-b47b-2be3eb0e0ee6",
        "cursor": {
          "ref": "0126cc30-cf62-4b38-a55d-86539b18dfaf",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6dd62417-2c66-401b-947a-3d38f6e9f2c7"
        },
        "item": {
          "id": "48e708be-b91b-4fe9-b47b-2be3eb0e0ee6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "575a274e-f651-4c04-805e-9c74823e044c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccb8462-49bd-43f5-9228-b5d9809463ca",
        "cursor": {
          "ref": "57318e8d-5338-4a2d-9828-80c11f3b97ff",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d888e664-4896-4d85-b834-3e96a6ecc6e1"
        },
        "item": {
          "id": "7ccb8462-49bd-43f5-9228-b5d9809463ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "07d84235-e37c-403b-ac26-c8261493e400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bde0a0e-162e-426a-ba3d-60096108eae5",
        "cursor": {
          "ref": "5c593937-17ee-488c-a18c-61c02cb74b2a",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4b4ae279-58de-4b91-b80a-bb1dc831ee06"
        },
        "item": {
          "id": "4bde0a0e-162e-426a-ba3d-60096108eae5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4fb10d26-f8b2-4b17-bb47-8f668e1b0364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8419bb3-e357-4cc3-a18a-80e91ce2ba53",
        "cursor": {
          "ref": "5a7e0aa5-a675-448a-893b-6d0fc3c0929d",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "dcb98d33-40ea-410e-a3fc-0f9e26ecefac"
        },
        "item": {
          "id": "d8419bb3-e357-4cc3-a18a-80e91ce2ba53",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "76e54cf0-ce5c-4461-837d-890b11ee8010",
          "status": "Created",
          "code": 201,
          "responseTime": 3151,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "cb01e1db-1c3d-4bf7-8ed8-490740fabb3d",
        "cursor": {
          "ref": "c6c58ab4-3ca3-44e2-85f4-d4fbca6b58cd",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "611ea861-ccfe-466e-a4a4-108aa6d31809"
        },
        "item": {
          "id": "cb01e1db-1c3d-4bf7-8ed8-490740fabb3d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "59bb777b-6e03-4f7a-9c3a-90065978b15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae6080b-cfe7-4943-9e24-da72f54d8fad",
        "cursor": {
          "ref": "1afa3b35-2d70-444e-972b-d8f006214638",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d7caf52f-b020-4801-a1ca-d6c24439243a"
        },
        "item": {
          "id": "4ae6080b-cfe7-4943-9e24-da72f54d8fad",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "60c8772c-175b-4f85-b38a-0b279b79d87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99979f9c-bb16-45d4-8344-ced833d8ed21",
        "cursor": {
          "ref": "e5c86fb3-a33d-421d-b314-0d32666e760a",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5d457513-35e5-4cb6-a00f-881ed2ebb359"
        },
        "item": {
          "id": "99979f9c-bb16-45d4-8344-ced833d8ed21",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "503ec3ec-6302-47a9-abf3-88f4e9e40554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b397058-3129-48c9-8482-873a7a28cca4",
        "cursor": {
          "ref": "043fce55-194d-43b8-ad01-ff173b963595",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9fca5979-0759-40ae-b8fd-e7f1fdc8233c"
        },
        "item": {
          "id": "1b397058-3129-48c9-8482-873a7a28cca4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "68acdc77-5b35-4da4-b326-0fa84e88e3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a023c2-bee9-4c97-940b-659d995bd286",
        "cursor": {
          "ref": "8ed82c39-20f0-453c-ad81-5acd0d3f01ca",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "68a58c23-4d5b-4f33-9369-c68a7749bfd1"
        },
        "item": {
          "id": "81a023c2-bee9-4c97-940b-659d995bd286",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "979aac3e-ce77-49c3-81c0-e06f261f5aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cfdbea-acb4-498c-8b2a-50930b790520",
        "cursor": {
          "ref": "549f44c8-da20-4c69-9887-e0ee9793527e",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e4a444c1-b41a-4155-9793-91432d507a36"
        },
        "item": {
          "id": "17cfdbea-acb4-498c-8b2a-50930b790520",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "10070cdd-63ad-4419-be13-3460d37b61cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a86c0f-11ee-402f-b699-bb57449a4bc9",
        "cursor": {
          "ref": "f353654a-c434-4a65-9821-cc5927e01104",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "98149858-a631-4c72-82b8-88fdf76f1a60"
        },
        "item": {
          "id": "78a86c0f-11ee-402f-b699-bb57449a4bc9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "31c5375a-1988-436b-8540-00923f7427d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27711d6b-a50f-4695-ad84-cc7dba6d45ff",
        "cursor": {
          "ref": "a866fc3b-b37f-42aa-9bf9-b470d75ae7e3",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fbec548a-f9ff-4e11-bb7d-fdbc9f75f77b"
        },
        "item": {
          "id": "27711d6b-a50f-4695-ad84-cc7dba6d45ff",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "13e835d5-cc45-4a8c-8301-7c57f062bc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c775f9-5aae-414e-be83-df7db8f3ac62",
        "cursor": {
          "ref": "65622c30-81e3-410e-a473-c66e99864a89",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "131730c4-6e31-4025-a0af-66601c8833b3"
        },
        "item": {
          "id": "89c775f9-5aae-414e-be83-df7db8f3ac62",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a538b4e9-5618-4cf3-9666-4382389de73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7ea037-a016-4698-ab55-338c8a65b1e2",
        "cursor": {
          "ref": "20a55ef6-07c5-43e9-bb83-f51ad71a392b",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6f80aa99-117f-4567-b7d9-4acd1185407e"
        },
        "item": {
          "id": "6f7ea037-a016-4698-ab55-338c8a65b1e2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "55982d84-ec14-4af5-8e2e-cae14ebe2790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048444cb-d474-4da9-8dc4-6239721cc770",
        "cursor": {
          "ref": "32ea3613-7c10-444b-84b2-900d42b8ae3c",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3e418c35-f500-44ec-aca5-27837b5f80d8"
        },
        "item": {
          "id": "048444cb-d474-4da9-8dc4-6239721cc770",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "85bb7c74-0549-43bf-b3c2-decacc95fd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4659b3-4d9a-41ca-a478-9b46ccbfcbc2",
        "cursor": {
          "ref": "14b3cdad-9ac0-4744-9fd0-2b7ac0ccf105",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2a9ebd3e-6787-4803-a986-5c254fe4773e"
        },
        "item": {
          "id": "0e4659b3-4d9a-41ca-a478-9b46ccbfcbc2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "84c20549-92c4-4693-b1f7-7fde46a62187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac33c43-1f70-4cd5-a634-fcc9a75d4d8d",
        "cursor": {
          "ref": "c8004464-ab34-4135-b8c4-2534ffd45329",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9690768e-2f3e-48e2-8c12-2d27b9c93642"
        },
        "item": {
          "id": "8ac33c43-1f70-4cd5-a634-fcc9a75d4d8d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c6caaeaf-a86b-4244-9e4e-4b4b28d23f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056d868a-e37e-40ac-9d81-68dfb747a532",
        "cursor": {
          "ref": "4bf75835-ffda-44a8-913a-18a664c7c04a",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b9ab8fa3-97d7-40d4-aadf-c78e4a2026ec"
        },
        "item": {
          "id": "056d868a-e37e-40ac-9d81-68dfb747a532",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a75fa9ad-fd07-45b9-b8a5-c18a69d27baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984bf2d2-9d8f-459e-99c2-c6d98377076a",
        "cursor": {
          "ref": "4e7e80a0-483d-470b-b284-141fab18e578",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3cd49d4a-fd31-47c7-9dcb-87639b19e740"
        },
        "item": {
          "id": "984bf2d2-9d8f-459e-99c2-c6d98377076a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cfef4e09-7c30-4497-87e9-3aec5d976d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49eff876-062a-4cb0-9d91-3a7f71d45548",
        "cursor": {
          "ref": "d674185a-d592-4985-b388-7433aa0be905",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e04a0fd0-59a5-44dd-b31e-b3a364ebcb73"
        },
        "item": {
          "id": "49eff876-062a-4cb0-9d91-3a7f71d45548",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1f571294-6821-4450-a2e6-ab535ce39eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c033dd-07aa-42d8-b6bd-290811880acd",
        "cursor": {
          "ref": "38e89e12-13f5-4075-a9f1-e1c29e1ff645",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3a75c8bc-3fc2-4340-acff-efb008ed1f3a"
        },
        "item": {
          "id": "53c033dd-07aa-42d8-b6bd-290811880acd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e1f83cb1-d37a-4a87-8ed7-fae93f77cf3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a328527-5d64-4302-a7b4-0940647ac008",
        "cursor": {
          "ref": "fd376ea3-4c57-4c50-a2dd-092dab393750",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e47990b5-1eac-4495-808a-8915553c5a0c"
        },
        "item": {
          "id": "7a328527-5d64-4302-a7b4-0940647ac008",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ffd23bcf-7c0e-4d56-8d7e-ad3922a85478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e520f9-079e-4153-ae40-52c8f029bc9c",
        "cursor": {
          "ref": "8762ec61-0791-43db-a314-9c9863bacecf",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3710f03e-c0e4-4c45-a8b0-f7ef959df537"
        },
        "item": {
          "id": "b4e520f9-079e-4153-ae40-52c8f029bc9c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fb93bdea-f59d-4537-8584-50cd8ecaeeb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee3e0ea-cc75-4f1f-b758-ca56005aa07f",
        "cursor": {
          "ref": "9c9520f7-5ce4-4a41-9309-62262fb7dc37",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "61984f06-f870-4aca-8cad-7752e1f3ebe1"
        },
        "item": {
          "id": "6ee3e0ea-cc75-4f1f-b758-ca56005aa07f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cdb49b30-02ee-44d4-bdb9-f1cb09bb28e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30df56b8-5df0-489e-b2af-ca7a8201e4df",
        "cursor": {
          "ref": "6936c1bf-b06d-4951-a70e-c00bbbaf9063",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9b5e50a5-5012-4df9-bb16-903e04ab0901"
        },
        "item": {
          "id": "30df56b8-5df0-489e-b2af-ca7a8201e4df",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a37fa2ad-b295-4201-b305-10bb4189d2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7188fd01-c4fb-4fbc-a788-c7613c32a27a",
        "cursor": {
          "ref": "68f80c67-fc95-4c1c-b2da-61dde8ecbc86",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7d885e8a-8774-4f13-92ad-65ed7800ab46"
        },
        "item": {
          "id": "7188fd01-c4fb-4fbc-a788-c7613c32a27a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cd7a1197-c210-4159-bf86-251245c59531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f950f8e-8947-4058-9c82-ce83b308b855",
        "cursor": {
          "ref": "4cf7d635-0141-4ccc-a30f-a05534576a89",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4df06215-f71d-4498-9011-477af8aa99e9"
        },
        "item": {
          "id": "2f950f8e-8947-4058-9c82-ce83b308b855",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "89bea299-78c5-4530-bb6c-90cfea9f136e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a4fb17-8634-46c5-b9a0-740b16a223a5",
        "cursor": {
          "ref": "c84ae7bb-5650-48d0-ba19-f2d93545d6b0",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "696a7096-595c-4224-98dc-cee5e2edda26"
        },
        "item": {
          "id": "86a4fb17-8634-46c5-b9a0-740b16a223a5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a7579568-bd80-473a-82c2-388f1ecec8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8574764-e128-4607-82d3-c93d40096e3f",
        "cursor": {
          "ref": "811b5965-e4f4-4f2d-8ce8-00d139a803bb",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "efc58d4c-0752-4c32-b0de-fbc98bd071f7"
        },
        "item": {
          "id": "b8574764-e128-4607-82d3-c93d40096e3f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0f89bc2f-d370-496f-854f-5ca64fc98688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c095e7-b4be-443c-978b-a37660781a73",
        "cursor": {
          "ref": "6b19569a-4be0-4802-a53d-dc516001cbb6",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8f205dc8-bb75-47ab-af23-874a83fbb0e3"
        },
        "item": {
          "id": "93c095e7-b4be-443c-978b-a37660781a73",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4811949a-94ab-466f-813a-8bd45a8f3af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d7f049-d5f4-4ac2-8901-99948fceb8a1",
        "cursor": {
          "ref": "0c74eab7-937f-49ec-9906-438b8f5777c9",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9b1a8c96-e058-4d89-9a58-270f164f4baf"
        },
        "item": {
          "id": "e6d7f049-d5f4-4ac2-8901-99948fceb8a1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "299cea21-580f-468f-bbf4-9ca209ef0e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e6e6222-769d-4399-b9d1-096167e3e2c0",
        "cursor": {
          "ref": "0f162ef0-2fa1-4db6-9705-b2e03bd7d980",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d121fc97-00b9-4b51-a6e8-48ec10b5b086"
        },
        "item": {
          "id": "7e6e6222-769d-4399-b9d1-096167e3e2c0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "798070a5-8855-4699-80f7-ed00ebd79345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1213daba-7f16-4379-9f0e-50a07b6056d9",
        "cursor": {
          "ref": "0f48493c-7f99-4911-9139-5c49f97f6a08",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "39a6bad4-8641-4431-bf43-e6d68e8bac0e"
        },
        "item": {
          "id": "1213daba-7f16-4379-9f0e-50a07b6056d9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e35120ba-15b7-4f1a-b3e8-b5d38287871a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63fb1734-39a3-4150-83d0-124902726766",
        "cursor": {
          "ref": "e4e7fb6b-d9b4-40b7-883b-aa924a89ab81",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0933522c-21b2-4c8c-ba1d-0057ce12bb9b"
        },
        "item": {
          "id": "63fb1734-39a3-4150-83d0-124902726766",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a2b1b1b6-5c68-4e2e-a8e4-ec3c2ab40374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee2f12b-9d4d-4dcc-bdce-88f3d0a91a5c",
        "cursor": {
          "ref": "5aa89f72-c439-4304-91c8-ecb42cce5be5",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0dabc394-3e37-4f1a-a830-c34187660d53"
        },
        "item": {
          "id": "3ee2f12b-9d4d-4dcc-bdce-88f3d0a91a5c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4c377c6c-49e6-407a-9017-8af30bb5881f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f4016b70-5908-491e-a69c-8841feb6cb16",
        "cursor": {
          "ref": "723c7cf0-cdf4-495a-99bf-ec077d43a146",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8d03d28a-430d-4716-867f-149acb43e128"
        },
        "item": {
          "id": "f4016b70-5908-491e-a69c-8841feb6cb16",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "1229717c-ec31-4bb8-a8da-fd51f7b882c3",
          "status": "Created",
          "code": 201,
          "responseTime": 2008,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4d1ccbde-91ea-418b-9618-8f20f17726f8",
        "cursor": {
          "ref": "4fb1db75-748c-4e2b-b372-2da13240b7d6",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c2d74c9f-cfb6-43f2-906e-6b29b48fb680"
        },
        "item": {
          "id": "4d1ccbde-91ea-418b-9618-8f20f17726f8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c36600a9-3e1c-4d30-be3c-cce2f074b763",
          "status": "Created",
          "code": 201,
          "responseTime": 2353,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac49dcf1-78ce-4ab9-bb90-9270db050c82",
        "cursor": {
          "ref": "d623da7e-a96b-44fe-8326-9115df0bdba2",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4eee4500-3e15-4505-9176-f13d329400bd"
        },
        "item": {
          "id": "ac49dcf1-78ce-4ab9-bb90-9270db050c82",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a04bbc80-11e4-4ceb-8ed9-454c27b8d511",
          "status": "Created",
          "code": 201,
          "responseTime": 2519,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1809592a-eba8-423a-ad02-4972d9e224b1",
        "cursor": {
          "ref": "68a8bf21-9e11-43ae-a2ef-7a91b0db360c",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6b973486-28a7-402d-a48c-9526282b6cda"
        },
        "item": {
          "id": "1809592a-eba8-423a-ad02-4972d9e224b1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2a90495f-2d82-4956-8edf-c2199d6f7c08",
          "status": "Created",
          "code": 201,
          "responseTime": 2540,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "50038de9-e7ab-4141-bf77-ca502c8dd5a6",
        "cursor": {
          "ref": "6cf34990-c6a0-4668-88e6-4180fff3a431",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d9b4a564-5ab2-4dbf-a3ba-1047968bd34f"
        },
        "item": {
          "id": "50038de9-e7ab-4141-bf77-ca502c8dd5a6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cb9462d9-216f-4904-8236-a02e66004b71",
          "status": "Created",
          "code": 201,
          "responseTime": 2398,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf627b76-db28-4e08-bd8e-6f5f0997649f",
        "cursor": {
          "ref": "d4840135-828e-4766-a620-9bf709bdc61b",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "79b01b84-ef07-4c70-bdfe-b740c14176e1"
        },
        "item": {
          "id": "bf627b76-db28-4e08-bd8e-6f5f0997649f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "947aee23-a376-4b88-a18c-efe95a618619",
          "status": "Created",
          "code": 201,
          "responseTime": 2205,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-25T00:38:33Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-25T00:38:33Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "7b8ae765-14da-4cae-988c-26f1d815183d",
        "cursor": {
          "ref": "b2a5e9e1-fd0d-4842-b853-2f12da782c12",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e07cf3e1-3e76-4d30-88b2-498db52ed9cf"
        },
        "item": {
          "id": "7b8ae765-14da-4cae-988c-26f1d815183d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0779b2b8-f35b-42a7-a0bc-48f180cda2a8",
          "status": "Created",
          "code": 201,
          "responseTime": 2443,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa0f6a3-e7a0-4b3f-a431-739ab5d120b4",
        "cursor": {
          "ref": "8c46bc33-3d6f-408b-83b4-7e5a01d299a1",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7fd5791f-97a6-4849-9276-af19f90d660d"
        },
        "item": {
          "id": "3fa0f6a3-e7a0-4b3f-a431-739ab5d120b4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7e5d5ab1-89da-473f-983e-dd6dd1aaf8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa0f6a3-e7a0-4b3f-a431-739ab5d120b4",
        "cursor": {
          "ref": "8c46bc33-3d6f-408b-83b4-7e5a01d299a1",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7fd5791f-97a6-4849-9276-af19f90d660d"
        },
        "item": {
          "id": "3fa0f6a3-e7a0-4b3f-a431-739ab5d120b4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7e5d5ab1-89da-473f-983e-dd6dd1aaf8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d2087e-57b5-4cca-b298-d74b634ee878",
        "cursor": {
          "ref": "3c638775-b1f9-4694-b4a7-1d819daa74b2",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d6339b53-47df-46b9-9b0d-27ffed7cb5a0"
        },
        "item": {
          "id": "b1d2087e-57b5-4cca-b298-d74b634ee878",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f81f20d3-f850-46e7-bda2-82b06dbe143e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 678,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd65bce-05ce-4eb6-b48c-f68e8812cca7",
        "cursor": {
          "ref": "e71c6e99-ade4-44be-88d1-db08a739795b",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e2f50646-c250-462e-a342-5acd1129256a"
        },
        "item": {
          "id": "2cd65bce-05ce-4eb6-b48c-f68e8812cca7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e6bc60b1-4a15-4678-988a-da1a12cee449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fea6a7b-25f7-4988-9356-3dbe2bcac65e",
        "cursor": {
          "ref": "28502961-ed75-4a6b-960d-2d8d192c8ee1",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8133fec9-c9dc-4945-940d-39815b2188ba"
        },
        "item": {
          "id": "3fea6a7b-25f7-4988-9356-3dbe2bcac65e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8971f06f-9552-4310-9420-7f49655f7a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633acf36-3175-4d3e-842c-60276afaa48e",
        "cursor": {
          "ref": "f26a64df-ea95-4048-9a53-8c8615e9593c",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "41134e3c-b4a6-4de6-9878-3909e2cbecc3"
        },
        "item": {
          "id": "633acf36-3175-4d3e-842c-60276afaa48e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b5b41e91-1c61-45c6-96b6-9f70ad84993f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff0c2e8-9225-4ecf-9d23-9eaa2c4b37f8",
        "cursor": {
          "ref": "52cc6bc3-19d7-4b89-a29e-d163034381cd",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4efd3df9-11dd-4af7-a9d1-b73346d518f4"
        },
        "item": {
          "id": "9ff0c2e8-9225-4ecf-9d23-9eaa2c4b37f8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "33c443f4-d132-468e-9014-27a6dc6cb291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f747c5a4-9ab7-42dc-803f-670c3f1813b6",
        "cursor": {
          "ref": "0c031601-5fba-4d59-8ffe-97eb98d6562f",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c9165f57-6961-4c1f-b4aa-aee6aa374ee6"
        },
        "item": {
          "id": "f747c5a4-9ab7-42dc-803f-670c3f1813b6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "285b60d0-9f25-4771-a0ec-e280d88f6a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cf56a4-bb74-4369-b014-8aa663fd0304",
        "cursor": {
          "ref": "c41a0cd3-ae7a-459e-abf5-239bed1d4600",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a7096b3e-97a4-4523-a0c9-05dbd132b2f5"
        },
        "item": {
          "id": "83cf56a4-bb74-4369-b014-8aa663fd0304",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2b529281-3191-4559-b204-387669e11adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4db093f-50b2-49b9-ac2b-e4807a789e1a",
        "cursor": {
          "ref": "0dabaef1-8a97-4dbe-8066-a090af53eb83",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "43ee2801-6cee-4c5a-afb8-3b3ed60de99f"
        },
        "item": {
          "id": "d4db093f-50b2-49b9-ac2b-e4807a789e1a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4f2b914c-af8a-4ea1-8589-647121cc95de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f49c90a-6bc3-4f3f-91ec-42d691dd72d8",
        "cursor": {
          "ref": "bf466974-5605-405f-a24a-db1849e23705",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8e7e069a-9fae-4e48-9229-5d831a4fc342"
        },
        "item": {
          "id": "2f49c90a-6bc3-4f3f-91ec-42d691dd72d8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "06573918-78b0-4c19-be35-a36c32f85a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3c19b8-d939-412b-b648-a74a47e0db63",
        "cursor": {
          "ref": "d169a3b8-f678-45b9-934a-716efd09d6cb",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "df23994f-8498-445f-be3d-9447db5e9632"
        },
        "item": {
          "id": "ba3c19b8-d939-412b-b648-a74a47e0db63",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "24769a03-b4c6-4d87-8f7d-782f4b6283b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc4d573-154d-4976-8a6a-a9ae87865c8c",
        "cursor": {
          "ref": "cc3e9886-33be-425a-b1ab-4bd62851fe0f",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "98873566-1058-4724-a54c-21edc9871ecf"
        },
        "item": {
          "id": "4cc4d573-154d-4976-8a6a-a9ae87865c8c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "70b991a2-6fb5-4524-b6a9-f69ff1915445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a54f55-abb1-4b9b-bcb5-ee12882abf23",
        "cursor": {
          "ref": "7b1fa783-a2f4-4199-8a5d-43cbcbc7d031",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "941d7178-8f5c-4bdc-b980-a9ce42a8e0c8"
        },
        "item": {
          "id": "55a54f55-abb1-4b9b-bcb5-ee12882abf23",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "46c63b37-0802-41b7-8162-28f4e894968f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1aacf2-afcc-4d7e-81cc-d0761b77ea13",
        "cursor": {
          "ref": "e27bb8ae-577a-4ac7-9aad-58888f74e910",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "11a52550-d1ed-4753-a50f-1f60486b2c95"
        },
        "item": {
          "id": "bf1aacf2-afcc-4d7e-81cc-d0761b77ea13",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "85d64d03-a9ce-4084-84f1-a4bf6917de38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f742cdd-958e-401b-a4e5-78e87e58da61",
        "cursor": {
          "ref": "be415dbd-2288-49ea-9ecb-9b27dbffd255",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "09e1e537-e7c0-424e-8d5b-5eb2fa962a83"
        },
        "item": {
          "id": "8f742cdd-958e-401b-a4e5-78e87e58da61",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e736daef-2228-49ae-b956-8f7e9a1a5a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5373fe5-63ca-4d64-9f1a-2fe9b158685b",
        "cursor": {
          "ref": "a4e2ee75-35da-4cdd-8ee8-4f62ce05c301",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d39f75b6-b88b-4f6c-9b40-54a2a4e09b74"
        },
        "item": {
          "id": "a5373fe5-63ca-4d64-9f1a-2fe9b158685b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "adbd3108-4bce-41d9-b431-d29e85cc306c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab94facd-1e52-4e3e-b77a-51de334ed4dd",
        "cursor": {
          "ref": "341b1470-1df2-461d-9ddb-016b1bb654b5",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4dd5b119-6b3b-46e8-9579-2804a3f09d1b"
        },
        "item": {
          "id": "ab94facd-1e52-4e3e-b77a-51de334ed4dd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ed4fa353-3dd6-46ea-8ff6-40a6fe03db33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a154ed-8c8c-487b-93e2-2e59f30d5ea4",
        "cursor": {
          "ref": "0eca16d2-8e58-47f4-8113-a8341c58699f",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8814df34-af6c-494b-b36c-b1eecd67976c"
        },
        "item": {
          "id": "b8a154ed-8c8c-487b-93e2-2e59f30d5ea4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f72867ae-fb1d-469d-b019-895060e482bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a5f52a9-b02c-45c3-99ec-7e65f6d46261",
        "cursor": {
          "ref": "dd1c2272-97bd-4ab0-bbdb-5502fc66435e",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d3bdf661-9dcd-4b6f-a1ad-7e71a63cdfb6"
        },
        "item": {
          "id": "0a5f52a9-b02c-45c3-99ec-7e65f6d46261",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "95de0a6d-4141-48ff-84df-06e374ba25a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c093995f-6520-4c78-9159-545ec8dc6248",
        "cursor": {
          "ref": "2587932e-5486-4018-bc1d-fb507e6dd815",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "11a30570-95dd-4e93-baa1-351fb3cb3bb5"
        },
        "item": {
          "id": "c093995f-6520-4c78-9159-545ec8dc6248",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c3d8869e-821b-42df-96c2-7fd19c6ca042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b713879-482d-40f0-8aa0-63cb1eb46948",
        "cursor": {
          "ref": "4c9f620a-b260-4d0d-b97c-57be42b65192",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "db16d478-c087-4630-b350-84eaab173078"
        },
        "item": {
          "id": "9b713879-482d-40f0-8aa0-63cb1eb46948",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9e6c1d1e-3599-4daa-9593-9bc62d64e9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c12d83-422c-43ed-b0ea-c88aad1257ae",
        "cursor": {
          "ref": "2846308a-e0f8-49df-a23a-00b96e2f46bc",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3c9a94aa-d349-45c6-b8e1-e331e2dfaed0"
        },
        "item": {
          "id": "74c12d83-422c-43ed-b0ea-c88aad1257ae",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "11566e33-e1c1-4151-aa27-eaf8d69efc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092af921-1fdc-42fd-833d-f4c37709cee1",
        "cursor": {
          "ref": "2f5621f6-e765-4c01-a5d2-22be84c30ca2",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c840c6fa-7459-4b75-b597-d6f46ee86177"
        },
        "item": {
          "id": "092af921-1fdc-42fd-833d-f4c37709cee1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "67a55d3e-b6f8-488a-b464-090db078a772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a65935c-cfc2-4ced-8450-a6da020b7e0d",
        "cursor": {
          "ref": "fa8a6fd9-1ec3-488e-8d61-bc666a6ecc17",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d7e702e7-a2a9-44fc-88a8-b977f7db27bc"
        },
        "item": {
          "id": "2a65935c-cfc2-4ced-8450-a6da020b7e0d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4bdeccd1-c155-4cf6-9103-072c913f8055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a1f780-61fc-4415-bcaa-620f4d4629ba",
        "cursor": {
          "ref": "c3b8b0ad-00a2-42e7-83ad-d05875ac57e7",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b95feff6-10f6-4669-a4f4-d69a1eba9e2e"
        },
        "item": {
          "id": "53a1f780-61fc-4415-bcaa-620f4d4629ba",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "51aba412-44b5-46a1-92e4-daa3f1c5516d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab3309a-7d9c-419f-8e07-34d9f4b95c70",
        "cursor": {
          "ref": "be8342bf-255b-4f17-91fe-35687b2a99a0",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d916bcd3-0e02-4ef7-9a7d-7182f2032ae6"
        },
        "item": {
          "id": "2ab3309a-7d9c-419f-8e07-34d9f4b95c70",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d81d8901-30b6-44f1-83f1-43a32a3109f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71bc2011-25c2-447d-93c9-30ed01aadcb7",
        "cursor": {
          "ref": "564290f7-be03-4bb7-a961-5ef81410d23f",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fe70c127-3a1e-4951-a886-d1836b2bfc36"
        },
        "item": {
          "id": "71bc2011-25c2-447d-93c9-30ed01aadcb7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "66d9cd69-2b95-4c1d-ab7e-390435fac6b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7afb37-8a4e-40ce-bfcb-8254c482a7f9",
        "cursor": {
          "ref": "0055d81d-f787-44b5-a726-7a1f1e196b7d",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ef3d3fa6-6558-4d48-8e82-60bbc9da1f51"
        },
        "item": {
          "id": "6b7afb37-8a4e-40ce-bfcb-8254c482a7f9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3d076ac2-577b-41d0-a36f-38553c5eb4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4de4e2-af39-40b9-89d3-fc1e4f57e39e",
        "cursor": {
          "ref": "160058d6-42c1-41a4-8100-b5f1fa6b02ff",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f77d4a96-5006-462b-8c08-20afaa82aa8f"
        },
        "item": {
          "id": "eb4de4e2-af39-40b9-89d3-fc1e4f57e39e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2a686ae5-1c42-4ebf-9399-53795a5bca78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9cfbd9d-cc85-4c11-befb-eaac312d0652",
        "cursor": {
          "ref": "89d9b1a4-53b9-44dc-9210-cc9f85d45f3d",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3f7370cf-2d6a-4a82-b1f0-765e0e451f45"
        },
        "item": {
          "id": "d9cfbd9d-cc85-4c11-befb-eaac312d0652",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e20f3dd2-bfd3-4648-8dc2-72a51d3ac6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2164a5-3262-461c-8469-85a7d21d2473",
        "cursor": {
          "ref": "fab4a938-ec43-4047-8f68-29c32dabd5d1",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e939e1e2-a202-492b-ad2a-78639962b2a4"
        },
        "item": {
          "id": "cf2164a5-3262-461c-8469-85a7d21d2473",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9e2d4351-e25f-404b-a809-445126e46a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4deef7-7146-40f9-b8d6-f9bac0d4dfee",
        "cursor": {
          "ref": "269ffd8b-5a69-4290-8441-681e79b632b1",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ab71eb19-a089-4748-8203-4fa8698748f3"
        },
        "item": {
          "id": "5a4deef7-7146-40f9-b8d6-f9bac0d4dfee",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "28fde75e-5647-40b0-aff8-3c675c04010e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c177a6c9-c106-49fd-80cb-1df1059ef8e1",
        "cursor": {
          "ref": "00415c58-b25a-407f-8ee3-55a7051909bd",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "38cea033-8a5c-4e78-882e-e9ff628d423a"
        },
        "item": {
          "id": "c177a6c9-c106-49fd-80cb-1df1059ef8e1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "39ad5126-c979-428e-94f7-60f68863282c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "9172a377-5133-41d7-a84b-ad24aa0ace3e",
        "cursor": {
          "ref": "aa3316a4-f647-46e5-b22a-d9e44ba010da",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "eeac568a-4094-4baf-b41f-98cf35c20e3a"
        },
        "item": {
          "id": "9172a377-5133-41d7-a84b-ad24aa0ace3e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6a0db645-4878-4734-b7f4-6817e4e5bb07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "dbff4c3f-4f28-4fd9-a8d6-385ae7d4155b",
        "cursor": {
          "ref": "150a3646-0d45-4154-9c32-c0ff5f84907f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b6751b8c-eb0f-417d-b364-1fe87b848dae"
        },
        "item": {
          "id": "dbff4c3f-4f28-4fd9-a8d6-385ae7d4155b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "719433b8-26d0-4659-a952-ccbccc9ae15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbff4c3f-4f28-4fd9-a8d6-385ae7d4155b",
        "cursor": {
          "ref": "150a3646-0d45-4154-9c32-c0ff5f84907f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b6751b8c-eb0f-417d-b364-1fe87b848dae"
        },
        "item": {
          "id": "dbff4c3f-4f28-4fd9-a8d6-385ae7d4155b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "719433b8-26d0-4659-a952-ccbccc9ae15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d577c2c0-187d-4530-aaaf-7a76fb82736e",
        "cursor": {
          "ref": "96b8a507-89d4-49f0-902a-4a5a9d47e8bf",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c710130d-36a3-4328-8616-bcc8618d61d7"
        },
        "item": {
          "id": "d577c2c0-187d-4530-aaaf-7a76fb82736e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c4020c2b-9f5c-456a-a9b7-f568d1a568f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a54b76-d3ce-4736-8c73-390a1aa5fde6",
        "cursor": {
          "ref": "a8dbc454-8ec5-4eb0-aec2-e22639c65ae4",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "070bb345-4bec-4434-9936-dd4946731057"
        },
        "item": {
          "id": "75a54b76-d3ce-4736-8c73-390a1aa5fde6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "17f155a3-b67b-40b6-9f3d-a56feb2debb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2158a45-67f3-4e33-a95a-30e4bf03a6b7",
        "cursor": {
          "ref": "2d61f820-72dd-434a-bd49-e8af72fdddec",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ce2f1bb6-8a08-40aa-97b6-79216a59d18c"
        },
        "item": {
          "id": "b2158a45-67f3-4e33-a95a-30e4bf03a6b7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "afbd4b05-659c-47aa-8a20-2101f8cfee9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9003ac-a7cd-4d1b-b78d-3c5208e70751",
        "cursor": {
          "ref": "002823af-0052-405a-bdd5-37d32a45213b",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9c4a3cea-1b07-47ec-ac58-48a857d5beef"
        },
        "item": {
          "id": "db9003ac-a7cd-4d1b-b78d-3c5208e70751",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7af49271-df4e-4e7a-b396-66809440fac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5ce921-33ea-4573-be88-e187838b405e",
        "cursor": {
          "ref": "b65f7ab0-bca7-48cb-a6c7-60c005eee7e9",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b684feba-a46e-479b-94b0-5f760973e8ec"
        },
        "item": {
          "id": "9b5ce921-33ea-4573-be88-e187838b405e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "31bdab30-9130-4ddd-8487-7ad014e1516b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dea5fc5-3990-4078-8263-c223587ad19a",
        "cursor": {
          "ref": "bfc10667-c625-456e-a501-1255e79149b7",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6fcf4a10-58a1-4dd0-81c2-4bd3e9a87560"
        },
        "item": {
          "id": "3dea5fc5-3990-4078-8263-c223587ad19a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "907b6644-01f2-4463-b322-21a06abf6a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53babc3-8b0e-4503-8242-a3731a388f28",
        "cursor": {
          "ref": "ed064ca8-aefb-4b54-ab75-59db5e2b1d04",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "db567087-e7a9-49c1-b13c-b8867a61e986"
        },
        "item": {
          "id": "d53babc3-8b0e-4503-8242-a3731a388f28",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "35d3f519-37ee-4a39-bcf2-96459ecdfef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b12f94f-552f-4f44-959d-115436adb7be",
        "cursor": {
          "ref": "10c31502-4eb5-4f11-a1dc-8b139b4e0583",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5bdd9aa8-6af4-4f32-8acd-6f3f7c1051bf"
        },
        "item": {
          "id": "7b12f94f-552f-4f44-959d-115436adb7be",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0d1a0fd7-ba4c-46ee-a995-3e2782701c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9f0b2d-3dfc-4767-96dc-a4e41187fe4e",
        "cursor": {
          "ref": "d1d9a98c-c96d-47e7-88fd-fa9d7007a106",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1f870ac5-4c4f-4a7c-99b3-6fb425a8b89f"
        },
        "item": {
          "id": "6e9f0b2d-3dfc-4767-96dc-a4e41187fe4e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bf543b82-21f4-4eb2-8b9c-aa83218a11dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9b11ae-d199-4759-a849-e61074e94ff2",
        "cursor": {
          "ref": "d0ba2783-6a40-4963-9038-83b0dfc546c9",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "62fe3876-a8e9-49b1-8aa4-060dbd95d9ac"
        },
        "item": {
          "id": "be9b11ae-d199-4759-a849-e61074e94ff2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d0450426-5acc-410c-96c1-a739228922f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c86dd4c-1e3f-40f3-b608-7b5f48f8ebb3",
        "cursor": {
          "ref": "14bc1eed-2441-4433-aea5-b79b4c771fa8",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "056154ab-8d4c-49f8-bd7d-323fa1e12857"
        },
        "item": {
          "id": "6c86dd4c-1e3f-40f3-b608-7b5f48f8ebb3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2ec2e353-77b1-432e-9ab1-209da8aed708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b651b0-c32f-475e-b729-753657f50321",
        "cursor": {
          "ref": "92889d81-c6c5-4b5d-ba6f-8e66cb9eb350",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cb2cb710-ae46-4680-915b-9167345b7709"
        },
        "item": {
          "id": "c5b651b0-c32f-475e-b729-753657f50321",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bf8c87b5-ab93-4df2-a170-ef2224cc3dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cadec33e-b0cd-42b6-b544-d466a8cac0b1",
        "cursor": {
          "ref": "db9c0855-7565-49ac-b8b4-5ff3ae35002f",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "78b21e99-f3da-48ba-952c-c3f7f0e57559"
        },
        "item": {
          "id": "cadec33e-b0cd-42b6-b544-d466a8cac0b1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d2bd1083-100e-47ae-b497-413b277a3f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c2ba4e-461e-4b3b-9165-d63e8a4e2ede",
        "cursor": {
          "ref": "0a26c7fe-16a0-4954-9225-73b9bd148fc3",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b816c55b-d21f-4a64-a326-34d38d179cd1"
        },
        "item": {
          "id": "24c2ba4e-461e-4b3b-9165-d63e8a4e2ede",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0d88bfce-7e13-42fa-b910-41a32020941c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edded9b1-00ba-468a-a992-6183e80bed32",
        "cursor": {
          "ref": "94e8e79f-f23d-458c-96a6-d627a7f8c870",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a05e7b7a-979a-45df-b107-40fa3ccba433"
        },
        "item": {
          "id": "edded9b1-00ba-468a-a992-6183e80bed32",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3c9a4678-ff12-42b8-a25c-79395252aff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3758588c-6377-4c13-9f10-22e3f4adaa7c",
        "cursor": {
          "ref": "036a61f6-23b1-4e7f-bc4f-996db07110dd",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7e0a609b-b7de-4d9a-b16b-84bc9f71b868"
        },
        "item": {
          "id": "3758588c-6377-4c13-9f10-22e3f4adaa7c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c539eac1-7ebc-4e93-bb13-8406b5b4874c",
          "status": "OK",
          "code": 200,
          "responseTime": 255,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "595cd83e-a134-4cde-be91-3c6966f17e41",
        "cursor": {
          "ref": "53241ae6-919b-428b-a781-46d4c16a3dad",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3e10b052-6241-4c03-a529-c009869334c9"
        },
        "item": {
          "id": "595cd83e-a134-4cde-be91-3c6966f17e41",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9d8bf8d1-b3e9-43ac-a25b-c3382f586e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912ce576-bc59-44aa-afc9-493d3e1d74c0",
        "cursor": {
          "ref": "f846afdf-5232-4828-b0c3-2811f3ed210b",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "064770a8-ba41-42ed-9b55-63e13688a495"
        },
        "item": {
          "id": "912ce576-bc59-44aa-afc9-493d3e1d74c0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "61f84ee7-079a-4516-83ff-f35e3daec171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be078b2-15f1-4de5-87d7-fe4fabf39882",
        "cursor": {
          "ref": "2f57dd27-f61a-4829-9cd4-256917196d59",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ff72e132-8c7c-4bc9-9df0-48447b376889"
        },
        "item": {
          "id": "5be078b2-15f1-4de5-87d7-fe4fabf39882",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "855fa25c-a6b9-424c-9cc8-b731fe961640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336fc017-4eed-4cca-ac43-6201457b773e",
        "cursor": {
          "ref": "551fc5a8-13f1-4334-951a-2b4f5f76aa23",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "48b37b10-a0eb-45f9-9744-aa2aa36a0fb0"
        },
        "item": {
          "id": "336fc017-4eed-4cca-ac43-6201457b773e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "821a1c71-51ff-4d16-8460-3a2e7d9e4456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59313944-34fa-436a-927b-acc9d6d7a20c",
        "cursor": {
          "ref": "c3d6bb9d-5c21-4510-a5e8-98818a565579",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f57cf9fc-4ca2-40c6-9d8b-00d49bb21e5b"
        },
        "item": {
          "id": "59313944-34fa-436a-927b-acc9d6d7a20c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6910f124-9311-48ab-95c7-c0b792b349b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee631eea-0a89-4353-a6f9-e559e0fed005",
        "cursor": {
          "ref": "734922cf-2a96-4dc0-84df-9c9f6ea7c777",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e816286e-cbf4-4aba-9701-09e19fa2c1c7"
        },
        "item": {
          "id": "ee631eea-0a89-4353-a6f9-e559e0fed005",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d844391f-c617-4e8b-aa87-7f9b5dce6779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12040ca9-8dbe-4f5f-8a86-2afe24e30507",
        "cursor": {
          "ref": "b32d5ce1-502a-4508-b823-5c1c63d7a752",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "38f3c163-296d-43c7-8a26-33de91cadb6a"
        },
        "item": {
          "id": "12040ca9-8dbe-4f5f-8a86-2afe24e30507",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4fbe39ce-cdd5-4762-889d-8475bba89966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bc2b9c-256a-4ac2-b82e-b18e68c9836e",
        "cursor": {
          "ref": "a1bdf289-5403-4d53-b584-b0e573372471",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "df1030c9-b1ef-4ff2-ac6f-abbb7cc9c609"
        },
        "item": {
          "id": "95bc2b9c-256a-4ac2-b82e-b18e68c9836e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "812917b1-75b7-458b-853e-39801885f89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d136f7-a1fb-4b02-9ff1-9f7ef3a71a74",
        "cursor": {
          "ref": "ebc42ba5-7595-4f4c-b99a-6dc279a483d3",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6a35f3ae-5b4f-4030-8562-3ed57529da56"
        },
        "item": {
          "id": "b1d136f7-a1fb-4b02-9ff1-9f7ef3a71a74",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "40ca72a8-7386-4a29-ad89-6911ee2b08a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19574b9e-2e42-429c-ade4-5496cb425ad0",
        "cursor": {
          "ref": "5b6e37a8-b1b1-431e-ab64-094170082eda",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3117cf15-bb4a-402d-a681-a87213acc03c"
        },
        "item": {
          "id": "19574b9e-2e42-429c-ade4-5496cb425ad0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cf4017f1-ad9b-477a-982e-58bf8075a9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136e1f41-4222-4426-b7ed-e1bff204d8cf",
        "cursor": {
          "ref": "5a93ae18-9b60-4988-9dd1-aab3ac4f08c7",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b1469816-7132-4ea9-9c28-448797a788cb"
        },
        "item": {
          "id": "136e1f41-4222-4426-b7ed-e1bff204d8cf",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9ef8e81d-b6e5-4c52-aab9-5bf8fb49bb9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9e3df1-771a-415a-b636-cdec8543d91c",
        "cursor": {
          "ref": "85c7d553-3191-4d4b-a977-05062a577179",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3d99a2d4-1c6f-475e-a7c8-7508536baaf7"
        },
        "item": {
          "id": "fc9e3df1-771a-415a-b636-cdec8543d91c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ea865708-9757-4ffd-979a-cf9c0f94a406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0ccc37-0c33-439d-b7cb-0aa38f394d6e",
        "cursor": {
          "ref": "56e40194-3d98-4e61-a422-a39d7742e92b",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3f983bde-daa1-42c8-8946-dce1625c2f4f"
        },
        "item": {
          "id": "6a0ccc37-0c33-439d-b7cb-0aa38f394d6e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4776cfc6-708e-4c0d-bc3b-cd5256b76dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764563fc-797f-4314-b244-c93872f2dc36",
        "cursor": {
          "ref": "a5cc687f-224e-4538-afae-2920e52071ee",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "95624b39-97f3-4d72-b168-e380cf550b1e"
        },
        "item": {
          "id": "764563fc-797f-4314-b244-c93872f2dc36",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cfd4aee0-0d01-4f57-8e85-da26fa28f001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61155d29-081a-49c9-b412-94cb160a9d7c",
        "cursor": {
          "ref": "562f9655-c3d8-4ee9-97c9-f4febc589cd4",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fb75d42a-3f7d-486c-8416-270e32395704"
        },
        "item": {
          "id": "61155d29-081a-49c9-b412-94cb160a9d7c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3cc557e2-fde1-40bd-9ae1-2b9d30d13138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f868a1-792f-4f36-a476-9f232465975b",
        "cursor": {
          "ref": "dbf01bc5-61d5-4466-9e68-874849624d28",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0dfee96f-8c3f-446c-a429-22028ba8e2d8"
        },
        "item": {
          "id": "22f868a1-792f-4f36-a476-9f232465975b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6a8c3049-1dc9-4f3a-a840-11ae8ea93708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a41cd5-af97-49a9-a251-5474537f1754",
        "cursor": {
          "ref": "2f67f639-c4a8-41de-a9ee-dbc4ab0c3b95",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9b2bb3fb-d699-455d-b36f-b3fa2408bc89"
        },
        "item": {
          "id": "62a41cd5-af97-49a9-a251-5474537f1754",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "02c36d81-00cd-40f8-8738-9aa3eb8670b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1070515c-7a06-4e4d-aa95-97c00a29d348",
        "cursor": {
          "ref": "895c456b-9105-49f6-90fb-ba36dc8a056b",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "047a6a50-9a4c-46c4-86a4-481b26ba46b3"
        },
        "item": {
          "id": "1070515c-7a06-4e4d-aa95-97c00a29d348",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bedb4521-a868-427e-aa4b-c052f3c408a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a11c08-df15-4222-8aa3-bd5595906589",
        "cursor": {
          "ref": "a923dfea-64b8-42cf-91e9-dddb86395588",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "403ce979-155e-4195-a8cd-060070368e63"
        },
        "item": {
          "id": "18a11c08-df15-4222-8aa3-bd5595906589",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "42704f8b-0f4e-4eb6-aa58-2785977c09eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af26d876-0abd-4755-b56d-854e989c6043",
        "cursor": {
          "ref": "286b04ea-4438-4e9a-b026-381356854a0e",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "92aa9799-dfb6-4a2e-81c7-df86f0793a2f"
        },
        "item": {
          "id": "af26d876-0abd-4755-b56d-854e989c6043",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f565da75-f776-499e-964f-49d6c48b0581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2713651-acf8-42af-ad23-c8aac62952a9",
        "cursor": {
          "ref": "cf809977-f864-4276-9f48-bfdb634a87fa",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fa0d0914-4b96-4447-9410-d903c870c8dd"
        },
        "item": {
          "id": "e2713651-acf8-42af-ad23-c8aac62952a9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "00a4c1db-fc61-4074-87e8-fd30abf76173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea2453f-f113-4c93-92dd-0d7e873517ad",
        "cursor": {
          "ref": "fb962bdc-a2dd-4ab4-8443-28a27819207a",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6943d200-5437-4cd6-9a35-4f6f9640b445"
        },
        "item": {
          "id": "bea2453f-f113-4c93-92dd-0d7e873517ad",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "36fb3cb8-5947-4106-825b-be3b9fe0b325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e9b8b6-acaa-4008-ac12-dab2703a18d2",
        "cursor": {
          "ref": "4693cbae-8aac-451f-a030-f8bb30b10641",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6d4b68db-00af-48db-a69f-daee6887df34"
        },
        "item": {
          "id": "c6e9b8b6-acaa-4008-ac12-dab2703a18d2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "86660bc6-6ae1-4eb6-9733-8a6fbe527f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdd32a4-effa-411e-9fd6-5f5769c8319e",
        "cursor": {
          "ref": "6d2d5609-fe69-4d7c-8e4e-d855d42f769b",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "02cda033-2375-4e51-99af-98bf1e58d57d"
        },
        "item": {
          "id": "9cdd32a4-effa-411e-9fd6-5f5769c8319e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "25010946-5907-4706-bd78-1f875c9ffc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495db256-ec4f-4439-9af4-e4c56b70a05f",
        "cursor": {
          "ref": "606507ed-6d9d-48e8-951b-c53126bdef19",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "367cdb2a-d4a7-4d18-a648-81355d6fb788"
        },
        "item": {
          "id": "495db256-ec4f-4439-9af4-e4c56b70a05f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7454e2ea-e9e0-45f9-8fb6-8872b45926c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ee9c6f-af39-4c61-8f81-b2592132a2c2",
        "cursor": {
          "ref": "15a7f82f-c496-4d59-b770-d11f54677160",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5a1a1a1c-3335-469a-9267-27461a869082"
        },
        "item": {
          "id": "f8ee9c6f-af39-4c61-8f81-b2592132a2c2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "98e1f7c3-b975-4ce8-96ef-69f4bb20080c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857015ce-1d0c-4dfb-aea8-13dc00fd8cd1",
        "cursor": {
          "ref": "9ce8b39f-0434-4851-86a6-80778e1f1efd",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e4f67b86-f3f0-41e7-a845-3198be78093e"
        },
        "item": {
          "id": "857015ce-1d0c-4dfb-aea8-13dc00fd8cd1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6e88471a-d347-424b-8c56-540dc2b56505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61bff6d-5541-4136-a3ef-5a625d8bbc3b",
        "cursor": {
          "ref": "033a030d-edce-44f9-ac5c-6c311666766e",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6003e4a5-b971-43ad-8a8e-b0bc5ec071f4"
        },
        "item": {
          "id": "f61bff6d-5541-4136-a3ef-5a625d8bbc3b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2ad67275-50ee-422a-ae22-d8973f39966a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4095441e-73ba-456f-a376-fde51f450fce",
        "cursor": {
          "ref": "03fa1f89-643c-45a7-97b2-fc9ac89f64d5",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c4acf284-aa20-40cf-ba24-a9dac589a998"
        },
        "item": {
          "id": "4095441e-73ba-456f-a376-fde51f450fce",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4e120fd9-d229-41f0-9c95-ac109fdade95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0488ee05-e78f-4974-8955-aae24ff57c44",
        "cursor": {
          "ref": "a37b19e6-34a8-4aaa-b05f-d41e43a37f91",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b5270830-a019-4a9b-9887-b0fe1098fb36"
        },
        "item": {
          "id": "0488ee05-e78f-4974-8955-aae24ff57c44",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1e94822b-7112-4a5d-970e-014ea0d5ce01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34618c7c-e7c8-428a-9423-e55c10ee6ed1",
        "cursor": {
          "ref": "f205a34c-6dc4-4636-9c49-4d81311435fd",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8e4cdffd-36bd-472d-873c-9ed39acb9dad"
        },
        "item": {
          "id": "34618c7c-e7c8-428a-9423-e55c10ee6ed1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "95ad0059-f25b-4de2-b742-485025b63b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566b2ce8-cec6-4ea8-ba67-6d500e889543",
        "cursor": {
          "ref": "05770070-cd29-4d58-9fc3-44728fa83a15",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6a8f12b7-a498-4578-9681-31872323b1ef"
        },
        "item": {
          "id": "566b2ce8-cec6-4ea8-ba67-6d500e889543",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b75ae2a6-6084-4540-b6fa-a2a51c6b7b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969c4131-4636-40a0-8c4a-c3b12dfec633",
        "cursor": {
          "ref": "b46c28e1-47b8-45e0-a3b7-f8e125694b8e",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "203f9282-56e2-40b2-8123-7e4c026d5100"
        },
        "item": {
          "id": "969c4131-4636-40a0-8c4a-c3b12dfec633",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "07ca4bd8-6e95-4fbb-88d5-c92ffe7c09ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a972b6-de79-4b90-825f-742faa8547db",
        "cursor": {
          "ref": "a01a4ac1-ab79-4d39-81f5-f5d037f39215",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f28c2aaf-083a-42e4-b31b-5e7add561fdb"
        },
        "item": {
          "id": "41a972b6-de79-4b90-825f-742faa8547db",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dede3505-f41d-4740-b521-b4fed89bdf88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307e60cd-fea0-454d-a0f2-a9bb93ade3ff",
        "cursor": {
          "ref": "b7deceb4-e628-4cb6-a00c-e9ba1335cc79",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "90e73acc-1257-4025-be38-125b6eb8eea1"
        },
        "item": {
          "id": "307e60cd-fea0-454d-a0f2-a9bb93ade3ff",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "561599c6-3b02-4935-8239-c7adbc700b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4db376-0a62-4943-86c6-defe6a81c3a9",
        "cursor": {
          "ref": "d4f58cfb-49d1-4323-8fc8-e0308594588f",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d9183297-c9af-4417-97c6-d0519e1e86d5"
        },
        "item": {
          "id": "4a4db376-0a62-4943-86c6-defe6a81c3a9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7e498eb6-e99b-4580-931d-1119580aa57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a0a04a-854d-4723-b41c-d7ec6db3f272",
        "cursor": {
          "ref": "317c579b-8426-44e4-b5e7-3b6a932f9cff",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5c0aebe9-ecdc-4408-94c0-4b34f432a6ce"
        },
        "item": {
          "id": "60a0a04a-854d-4723-b41c-d7ec6db3f272",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "05e277af-768a-4118-9e04-ec8dd09fc251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdbd7c5-304d-4709-8abc-6328147e9c8a",
        "cursor": {
          "ref": "c9527428-1694-4693-80d8-25bf15059f3d",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4fe40d46-b06e-4778-9f39-a20365b281e5"
        },
        "item": {
          "id": "3bdbd7c5-304d-4709-8abc-6328147e9c8a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "85b8ef5a-f846-4111-af39-bdccb8ae23af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1d6694-beec-4a82-a042-42d7aeaa2cbf",
        "cursor": {
          "ref": "75c65fa8-1779-437f-ac7a-5615a3bd4f57",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "65d8ddce-53ab-45fb-baaf-d0d3cb431f49"
        },
        "item": {
          "id": "db1d6694-beec-4a82-a042-42d7aeaa2cbf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7b2d7ec5-3abf-406f-a5c4-26ab102ac4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db41ef5-5ddf-40fd-8893-43b0e9571612",
        "cursor": {
          "ref": "5763558b-4b3d-45ed-938a-9773369bd92b",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6c11d8f8-9c20-4f8d-aae4-0e7c1757a1c6"
        },
        "item": {
          "id": "3db41ef5-5ddf-40fd-8893-43b0e9571612",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f83cacde-d91f-4ca8-9a9d-05bbe8ae0151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1296cdfd-f9ff-4e11-9a25-7aeb5f05da37",
        "cursor": {
          "ref": "8c59c0e6-46ea-4005-bff3-b831e340973b",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fd730842-3102-4429-9604-ed20be38c9a1"
        },
        "item": {
          "id": "1296cdfd-f9ff-4e11-9a25-7aeb5f05da37",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c6311f88-778c-4e93-b6b6-555422fcff66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c3f9cc-4c09-4831-9278-0c6a8e938259",
        "cursor": {
          "ref": "f7eac099-d735-4372-8f60-3e88a53e2c45",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6dffbf19-0318-46c6-84ef-bb044455e24a"
        },
        "item": {
          "id": "37c3f9cc-4c09-4831-9278-0c6a8e938259",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9f559841-d6d5-486e-a69a-25f593d31cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f64bc6-e7ed-448d-9ccb-a10ef49ade8f",
        "cursor": {
          "ref": "813dd715-df22-487c-ac31-abb8af580976",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "75aea063-76c7-4571-b260-28d4c6aafbef"
        },
        "item": {
          "id": "51f64bc6-e7ed-448d-9ccb-a10ef49ade8f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2655ecaf-7126-4764-9f7a-0016f86daf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6953c68b-5882-401c-bec5-c805de9ec6ea",
        "cursor": {
          "ref": "38b32ffb-ed3f-4b63-aae8-4a69dc7767e2",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b75ba5d8-c6ba-42f1-b73e-e30c34bc07e8"
        },
        "item": {
          "id": "6953c68b-5882-401c-bec5-c805de9ec6ea",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8512f8cd-fc78-4be7-943b-0e76aadb9a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5fdccc-9848-4fcd-8a04-69fe770d5500",
        "cursor": {
          "ref": "c61ddd15-26fb-4832-ba45-5ae7a6b6d2d8",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d9e2117d-bba4-44c6-862a-b1b23aa393ef"
        },
        "item": {
          "id": "eb5fdccc-9848-4fcd-8a04-69fe770d5500",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ff3a9da3-e1a7-45c5-9a51-be6d49bccc3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ebdb3a7-7892-4b10-9ed3-0b89388d8943",
        "cursor": {
          "ref": "537f8ecd-c054-4bed-b7b1-d7dbf88bc27f",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "848ab9e7-b2f5-4ad6-a371-684f03d3ee4a"
        },
        "item": {
          "id": "9ebdb3a7-7892-4b10-9ed3-0b89388d8943",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0fec267d-9e5a-425a-b296-eceb848107b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d617cfe-32d4-400b-9230-98abee45afc8",
        "cursor": {
          "ref": "0d51caf5-0e7f-4bc3-9f6a-806652cd154c",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "850248c9-17b7-4173-adaf-50f2005534fa"
        },
        "item": {
          "id": "4d617cfe-32d4-400b-9230-98abee45afc8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c94a3300-f046-49ed-abec-43e5f1126c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f31e689-bb40-4367-8066-1d0e64cb81aa",
        "cursor": {
          "ref": "65124afd-c719-497c-b5d0-63d5b5adf8a5",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fdf1f959-cd64-40f4-999b-504df63c8c6c"
        },
        "item": {
          "id": "4f31e689-bb40-4367-8066-1d0e64cb81aa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "db832df4-d81e-4a1a-8efa-2f8af843a99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc605b4-a413-465b-9e2e-046adade50e4",
        "cursor": {
          "ref": "6d3a9719-4ac4-4ab7-bfa9-fbc1b2c15aeb",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "95f2bcf0-7fe2-4710-9592-ca1ed9caeb1a"
        },
        "item": {
          "id": "4fc605b4-a413-465b-9e2e-046adade50e4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1d672ba4-895f-4f84-9a63-ace981b99345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79a8133-845e-484a-9677-b47cae31a410",
        "cursor": {
          "ref": "32f5c18f-6de8-4ae7-aead-17073498b85d",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4f9c3b62-141b-4bb2-9cab-2704734d98ad"
        },
        "item": {
          "id": "c79a8133-845e-484a-9677-b47cae31a410",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d70cc944-0b23-4c1a-af99-a5e4b8a58d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1984bf0d-c826-47e0-9757-f8b1112cd90b",
        "cursor": {
          "ref": "e5e936bf-a002-40bb-8b00-76726ab9b748",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d0a1d89f-18d0-4e9b-a48c-4288a057fab6"
        },
        "item": {
          "id": "1984bf0d-c826-47e0-9757-f8b1112cd90b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3c179cce-f529-4d66-95aa-730e89b92c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b4c79d-a838-4bf3-916b-c37fd871e714",
        "cursor": {
          "ref": "1037ab85-00db-431a-94bb-20118f343f4f",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bd9c7d2f-386d-488f-b1d2-1b23abd6cea3"
        },
        "item": {
          "id": "d0b4c79d-a838-4bf3-916b-c37fd871e714",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e722b0ee-bae1-466c-b14a-47df96dc418a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4c8897-25dd-4da5-8921-434f3ab528a8",
        "cursor": {
          "ref": "887580ad-7780-44b0-9bf9-3a0232bff6b4",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b5f29442-83e6-4acc-b0b1-7dba30aa419e"
        },
        "item": {
          "id": "cb4c8897-25dd-4da5-8921-434f3ab528a8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ea0ab3ca-604c-4a7c-8389-9c9c2be315cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b345c7-8924-4eb6-9b7f-9e18ba868e28",
        "cursor": {
          "ref": "85c5232d-d48b-4a58-8600-6f40fc04f862",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "67504e1c-fa9e-4586-af35-6df66258dc03"
        },
        "item": {
          "id": "94b345c7-8924-4eb6-9b7f-9e18ba868e28",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "850ce86c-25af-4aff-bc3c-cc8917292523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2b7435-4c31-482f-aaee-0e16e0765589",
        "cursor": {
          "ref": "8bb6e73c-2815-4b8b-957e-2296601dde7b",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f7044033-6a96-4e67-84c1-150ebf0aaacd"
        },
        "item": {
          "id": "6e2b7435-4c31-482f-aaee-0e16e0765589",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d50cc555-018b-4fd3-98d1-9dacf6e0b92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a318cc-aa70-44ba-8daa-fe5e23e7acd2",
        "cursor": {
          "ref": "02a7fde5-279f-4a47-90d8-6d6e65dbb5d3",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "30ccbb77-d82e-40b3-81af-04c4d33f379f"
        },
        "item": {
          "id": "13a318cc-aa70-44ba-8daa-fe5e23e7acd2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c5f35333-07cb-4427-80a1-92f66637af02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ce98e7-0b00-4f03-9aa0-a027958f008c",
        "cursor": {
          "ref": "475834f2-9742-4341-b92f-25224d9da222",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7298cb49-ef88-4137-bebe-a900253b00e5"
        },
        "item": {
          "id": "13ce98e7-0b00-4f03-9aa0-a027958f008c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ed4c4026-3693-4a70-8c23-3c70a21b6230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efcbaa5-5fc3-4726-8465-bcac8f349ecd",
        "cursor": {
          "ref": "81b87158-c4ba-4b1e-91c0-2c7f68e292a8",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "21d85437-b0a0-40dd-b6cf-3b2fddffd12d"
        },
        "item": {
          "id": "2efcbaa5-5fc3-4726-8465-bcac8f349ecd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "190e730b-72b1-47b2-bfb8-9fc6a73aecc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5745df-8bf1-4416-9020-616add58963f",
        "cursor": {
          "ref": "98e907ed-6863-484f-afd2-99f7426ee5fc",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4d346930-17f0-4857-baee-613e628a7bc8"
        },
        "item": {
          "id": "4a5745df-8bf1-4416-9020-616add58963f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9b86ee1e-60b7-4b28-be8c-60afe7039795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb5e9a0-9f5d-4019-ad1c-260a779a6159",
        "cursor": {
          "ref": "836c8f35-18f4-4375-bf68-f184657d5cd4",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "28fc9861-3196-402c-9493-9ea741fba0a3"
        },
        "item": {
          "id": "6eb5e9a0-9f5d-4019-ad1c-260a779a6159",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "798592d4-bae9-452a-9de1-f03b83c2c105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cadb95a5-d821-4044-a6a8-944c6fdd911c",
        "cursor": {
          "ref": "74451843-0b21-4897-aa5f-c44e1bd01024",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6259fc47-bed3-4778-a86e-ec57668418df"
        },
        "item": {
          "id": "cadb95a5-d821-4044-a6a8-944c6fdd911c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f69aec3a-caf6-4159-a6f1-d08f1a7d6f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940c6057-53f0-446c-b4a0-fcc917d59625",
        "cursor": {
          "ref": "0729f738-f786-4d59-b825-8fab796772f1",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d0803b99-82d1-4972-9a65-e7f408ec8c10"
        },
        "item": {
          "id": "940c6057-53f0-446c-b4a0-fcc917d59625",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "618adb93-06ea-4465-9484-9e3c6da3b746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8d6be2-d7e9-4252-80c2-0b18a8572137",
        "cursor": {
          "ref": "bf749390-fd9d-4cfd-8bd3-7b6e7602d3fa",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1c49a01a-e019-44c4-a445-1f9a2c48e547"
        },
        "item": {
          "id": "7f8d6be2-d7e9-4252-80c2-0b18a8572137",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6f60afb2-b6d8-4a03-9479-10d4e73ee33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007be99c-01f3-4607-b8b3-cc3c3e97754e",
        "cursor": {
          "ref": "c66d45e2-7e70-48c9-8501-e4790747a8ed",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7d210a90-e932-4e23-a1a9-c5e4166a70c6"
        },
        "item": {
          "id": "007be99c-01f3-4607-b8b3-cc3c3e97754e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2dc9985c-3b30-4ecb-ace9-b1f621177710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7543663-c07e-4368-8c6b-0f3b8778f313",
        "cursor": {
          "ref": "7894e14c-0561-4655-8dd5-c792626cfa6d",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0752a105-c38a-4268-9173-cc56b4f8a1b5"
        },
        "item": {
          "id": "b7543663-c07e-4368-8c6b-0f3b8778f313",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "74080df7-8922-47ff-acdc-9f80515fab5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a68af22-c7c2-44c7-9d77-55c068d76f11",
        "cursor": {
          "ref": "e5e0c09f-b1f2-4fe2-b140-c7ea2da85e7e",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ce819846-4e6c-484c-afb9-476028dbe0dc"
        },
        "item": {
          "id": "6a68af22-c7c2-44c7-9d77-55c068d76f11",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ab147d36-1723-40ee-b858-8b69e7e658e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d1d37b-fe52-41c5-b041-60e0a6f2172e",
        "cursor": {
          "ref": "26e80d00-d528-474b-8d6f-85e868aa881b",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8bf94dbd-b901-4503-b2f7-733ff9cd7f17"
        },
        "item": {
          "id": "42d1d37b-fe52-41c5-b041-60e0a6f2172e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9fafd32a-f69f-489d-bc56-82a73864dd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1683904f-9518-422a-aa2c-91a1f2f022d6",
        "cursor": {
          "ref": "dfeb7cd2-ce69-4eeb-8375-9864f4d98f18",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "91680040-c4cd-4575-913b-77359008e581"
        },
        "item": {
          "id": "1683904f-9518-422a-aa2c-91a1f2f022d6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "88518520-0af2-4ae9-8f98-f061705bdefb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0b8276-11c4-4317-b61d-fd237a47678e",
        "cursor": {
          "ref": "66209b2a-cf62-4f5c-8b96-68ff8445ef75",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "320ef0cd-8751-4951-bdd8-66332c9298a9"
        },
        "item": {
          "id": "4d0b8276-11c4-4317-b61d-fd237a47678e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "eb6b033f-52d6-4530-b4cc-f1d1958e63da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f3b368-3749-4a6f-a758-f54d54b4e214",
        "cursor": {
          "ref": "2cc954c6-03f0-4170-96e8-62efda14cfca",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e579b64a-e9fd-4cbf-b89b-b63518402bd3"
        },
        "item": {
          "id": "d6f3b368-3749-4a6f-a758-f54d54b4e214",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ee16d44c-7ffa-48bc-9038-a2f280ef4b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3214d23-4846-4e06-bf50-bcb05dfa4580",
        "cursor": {
          "ref": "edbd57ff-f74d-4ca9-8c30-ac9de35f17dd",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "972fd24a-9df7-4848-a38e-06a30067da2f"
        },
        "item": {
          "id": "a3214d23-4846-4e06-bf50-bcb05dfa4580",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bc780792-8cfc-409e-8649-7ec9631153a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0540d2-7a3a-4757-af8f-efe7b8e0b546",
        "cursor": {
          "ref": "22be2806-23d0-48f2-b9e9-65fc76c055b7",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f095649d-de68-4ee6-93ce-062508011d69"
        },
        "item": {
          "id": "cf0540d2-7a3a-4757-af8f-efe7b8e0b546",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c6c99a23-95e7-4bec-9b11-c7a06fe3d812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36511709-1fd5-4f4a-a981-7446a31dbda6",
        "cursor": {
          "ref": "91d14c53-a8ca-417a-8dbc-da426248215a",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ff89e90c-3995-4a29-abb8-e772c0192569"
        },
        "item": {
          "id": "36511709-1fd5-4f4a-a981-7446a31dbda6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f834f6f0-9f7f-449c-8b6a-e296455efddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb02455-eeb3-4ff0-8b40-47d549036110",
        "cursor": {
          "ref": "2716774d-e6db-4fb2-a3ef-ae4dee775f4f",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8e0c1b91-90ec-4f32-86c9-c17ed2cf34ce"
        },
        "item": {
          "id": "4bb02455-eeb3-4ff0-8b40-47d549036110",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a66a31f4-87e0-4cbb-a47e-0d394fac51b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425f35d1-7dca-4ef6-9c28-3e6632b7d684",
        "cursor": {
          "ref": "5fe3a33c-9cef-4237-9005-cec50324c39d",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "581a9a5e-46fe-4385-a54f-85ea96c0b29e"
        },
        "item": {
          "id": "425f35d1-7dca-4ef6-9c28-3e6632b7d684",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a6a1eb3e-c1c5-4e4a-ba7c-68ce4156ba47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ad5953-c60c-4aa0-999a-7d381607870a",
        "cursor": {
          "ref": "22f35048-2ed3-42a4-8588-51cdd244e9a7",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d4d36b7a-5329-4a43-aeeb-817655378825"
        },
        "item": {
          "id": "43ad5953-c60c-4aa0-999a-7d381607870a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f5405a41-9f56-474f-b8aa-9ea9292109d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2add33-171c-4a6e-b205-c4adc420bb3f",
        "cursor": {
          "ref": "c180e4bb-828e-4662-94e2-54a09618d7a4",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4bc8ae98-f225-4d73-a199-89101b8636bc"
        },
        "item": {
          "id": "2c2add33-171c-4a6e-b205-c4adc420bb3f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2b80752e-4684-4a73-9e2e-0d1d89e8bc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ca5a15-2c0b-4995-9e09-c5d5b007e2e5",
        "cursor": {
          "ref": "529fce06-7816-48e0-b16e-ba551f0eebbc",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e7f71e55-2dbb-4ad5-8ac6-7454e0270ea6"
        },
        "item": {
          "id": "24ca5a15-2c0b-4995-9e09-c5d5b007e2e5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ec7e71b7-7252-4fec-b103-c5ec4e3b2874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68faf46-7add-40dd-82a7-c2bddedb9497",
        "cursor": {
          "ref": "8c2f7740-5dc9-4cc4-8b7b-bf44d2b54647",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9db794a2-70f4-4b3e-9238-ebef33e6a381"
        },
        "item": {
          "id": "a68faf46-7add-40dd-82a7-c2bddedb9497",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1b32ffa7-37f8-43e8-8e99-2b5448cb70d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17300d03-6659-4693-b233-2e4ea6900b22",
        "cursor": {
          "ref": "52f400df-71e8-44c6-a849-bf705353c95e",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6d9039d0-5da9-41b8-bcdc-ae5ac5046d46"
        },
        "item": {
          "id": "17300d03-6659-4693-b233-2e4ea6900b22",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d6ec3e70-1347-4b72-8a36-c029b19bfc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbecab8-fc6d-41ea-b513-92c81c1c3857",
        "cursor": {
          "ref": "cc973ea2-dcd8-4784-b9fc-df35870db907",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "83c07c1b-e3c8-4806-98ac-515fe6ead5d9"
        },
        "item": {
          "id": "9cbecab8-fc6d-41ea-b513-92c81c1c3857",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "304e73f7-b37d-429f-9cde-55fce9f55a6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "180a8bef-2f08-4683-a614-a3b57e01a524",
        "cursor": {
          "ref": "c08fc029-c4ca-4be2-8949-8bfc1ba2c76e",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "352fb946-e936-49ac-94df-b698826b01ef"
        },
        "item": {
          "id": "180a8bef-2f08-4683-a614-a3b57e01a524",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "59b2ace2-288b-4464-ba82-a8eddc357318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d7469332-9de7-4029-9538-1fe9920603ee",
        "cursor": {
          "ref": "00070aac-7a45-467b-b24d-aba1cf8c5fb3",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "bd616064-cb11-447d-932f-e2a46d56fb98"
        },
        "item": {
          "id": "d7469332-9de7-4029-9538-1fe9920603ee",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f8d24e49-342a-41a1-ae5b-aad8dbb1b337",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "405500e1-21ac-4f1a-9052-5ef4e219ec5e",
        "cursor": {
          "ref": "2f419612-816f-4362-8901-1d179ef601df",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a0ee917c-a015-4642-9abb-7bddc32f1103"
        },
        "item": {
          "id": "405500e1-21ac-4f1a-9052-5ef4e219ec5e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dced80c3-9185-4b2e-b759-4ccf785451fb",
          "status": "OK",
          "code": 200,
          "responseTime": 1846,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3238dc04-d892-446f-aa74-c3d261eff0b7",
        "cursor": {
          "ref": "2fd5254a-1860-46d9-a4e5-188821d5b7fd",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b6e10e58-10bd-4e09-ac7a-9ce004743789"
        },
        "item": {
          "id": "3238dc04-d892-446f-aa74-c3d261eff0b7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1932d1e3-5c08-462e-b61d-9ab0046275b4",
          "status": "OK",
          "code": 200,
          "responseTime": 2296,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b89006-3aba-4523-9735-4cf0620a2cfd",
        "cursor": {
          "ref": "9a9b9488-bd1e-40d2-8b27-cf1dc93f9289",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bce6ebe5-cfe3-4196-9133-33955f0a2a1c"
        },
        "item": {
          "id": "15b89006-3aba-4523-9735-4cf0620a2cfd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4513cadc-2e5a-49bf-a22f-0465ab8a10fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "15b89006-3aba-4523-9735-4cf0620a2cfd",
        "cursor": {
          "ref": "9a9b9488-bd1e-40d2-8b27-cf1dc93f9289",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bce6ebe5-cfe3-4196-9133-33955f0a2a1c"
        },
        "item": {
          "id": "15b89006-3aba-4523-9735-4cf0620a2cfd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4513cadc-2e5a-49bf-a22f-0465ab8a10fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "15b89006-3aba-4523-9735-4cf0620a2cfd",
        "cursor": {
          "ref": "9a9b9488-bd1e-40d2-8b27-cf1dc93f9289",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bce6ebe5-cfe3-4196-9133-33955f0a2a1c"
        },
        "item": {
          "id": "15b89006-3aba-4523-9735-4cf0620a2cfd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4513cadc-2e5a-49bf-a22f-0465ab8a10fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ebbb167f-2735-413b-84a8-05c792b5a74c",
        "cursor": {
          "ref": "e404d5ad-fd83-43ab-8b75-9be7f9d54e27",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c0b11d96-60bf-4606-8271-de3085a485e4"
        },
        "item": {
          "id": "ebbb167f-2735-413b-84a8-05c792b5a74c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "852f7ab1-e486-4927-9e4a-2e4839b28b13",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "362db55d-43e8-4e63-b17c-3c899fa29b70",
        "cursor": {
          "ref": "d96c001e-40c6-47fa-84af-971944ee74f1",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2d5e544b-e1a4-4741-8ff9-0eb0d04346a3"
        },
        "item": {
          "id": "362db55d-43e8-4e63-b17c-3c899fa29b70",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "610e48aa-13ab-46e9-81d6-a891599f3c18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "362db55d-43e8-4e63-b17c-3c899fa29b70",
        "cursor": {
          "ref": "d96c001e-40c6-47fa-84af-971944ee74f1",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2d5e544b-e1a4-4741-8ff9-0eb0d04346a3"
        },
        "item": {
          "id": "362db55d-43e8-4e63-b17c-3c899fa29b70",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "610e48aa-13ab-46e9-81d6-a891599f3c18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "acd77baa-4a78-4d85-8150-0a7d91788f2d",
        "cursor": {
          "ref": "fa89dfe7-9758-466b-9f11-c63b57856378",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "266daf36-cef3-444a-ad79-f43aa074835a"
        },
        "item": {
          "id": "acd77baa-4a78-4d85-8150-0a7d91788f2d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c9879b16-9d31-4760-9f93-a93ed514089a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e069178c-2928-44b8-a3af-e14ecef61a8d",
        "cursor": {
          "ref": "495abb1e-e48d-4c52-9bbb-61dc89bfbcf0",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b1f09589-9935-4bce-9e9a-853249d73bf2"
        },
        "item": {
          "id": "e069178c-2928-44b8-a3af-e14ecef61a8d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9b79b421-8b7b-4813-924d-aa81318b7cc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e069178c-2928-44b8-a3af-e14ecef61a8d",
        "cursor": {
          "ref": "495abb1e-e48d-4c52-9bbb-61dc89bfbcf0",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b1f09589-9935-4bce-9e9a-853249d73bf2"
        },
        "item": {
          "id": "e069178c-2928-44b8-a3af-e14ecef61a8d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9b79b421-8b7b-4813-924d-aa81318b7cc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9d06b67c-ebf1-47cb-94da-461ca1b6b57b",
        "cursor": {
          "ref": "4894873c-6f21-4077-ae15-e16516b9c2ed",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3368f07c-8498-4060-ac65-b244112f46e0"
        },
        "item": {
          "id": "9d06b67c-ebf1-47cb-94da-461ca1b6b57b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "622044cd-8d88-4358-8f92-ff7a6c7db4ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}