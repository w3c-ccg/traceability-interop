{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "57ad9373-703b-4228-ae49-40c520511325",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e6479baa-61d2-4799-84c3-1a46aa1806be",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "82cf6555-545f-4597-a0ab-5572862a9141",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2b1e62c1-fa4c-407e-b01a-5379e57f0328"
                }
              }
            ]
          },
          {
            "id": "2bc9aa18-d648-4a00-ad8b-fee6bdce1496",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4760768b-0a47-4d35-874a-b7707f4272e8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1bde6785-605b-499a-9eb6-4aa0b5d1f190"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "38e58f06-1a1e-43db-9149-b63cdc987a9c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c3e35782-0af1-4683-8750-eba056499fbf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6b02fcda-2a2b-4a79-b87b-a19c482fb5a0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "928d99d2-a1d2-4731-a566-17986f97c41c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97f02f3f-b27d-4eee-a18c-05ab89816492"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "595dd8a3-8a31-4b44-8be4-46be56c27f90",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f6b06ba-bc56-4a51-b157-9fba1ea1847c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fb96485c-7c5a-444d-9630-0fe7e52d391f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e455f537-ddc4-490b-bda9-11c1a9311543"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c65e715e-3579-404f-8245-d7b36ce6b9de",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "99898313-edfb-4b21-a236-d6e96e2eadff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ad1f858-6282-41a0-8264-793c6340e151",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06238391-0e17-4e05-a6c4-74548781aabf"
            }
          }
        ]
      },
      {
        "id": "cadab538-e48a-4f3b-97ab-e8cedf6cfe14",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "26259db6-56a3-4ab1-bb94-94ae3268149f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "efa45bae-22fd-41c3-a2a1-0299ffd24566",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e8d91aae-ab43-4811-8808-3769b1844000",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f1d437-a5df-400e-9f02-36b0a813ae9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09ca8578-fa39-4b93-8ed8-902b46d9862b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffba67a-39eb-49ff-9555-a8db921dd130",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef0b524-c4d2-4f31-8715-6843a482ccc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a447bac-e343-4961-96eb-b1137765e0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11718085-b526-40b1-a9c1-6689274018a5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59c7857-f4e8-46c8-887e-fd0cf6430485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d81a5d46-4799-4b98-9a50-8ddb31390e65"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "63318a19-8694-4a04-8a41-688fc6dd6aa2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0b097d8-0751-417d-b6a3-0efade0d7e1c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afc9207-584d-4155-a200-ab7619aefe9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df063c80-35cf-4045-8c8f-44143f4f38df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913409b6-6ffc-4eb5-b431-a52164315f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f7db0c-48d0-45dd-bca6-85279d1c6b3f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "74c3e785-d13d-4181-9be5-2b51e7473db9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14ff113c-2662-4cb2-88d9-234995a9e614",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0b24f51-13d5-43d6-a8bc-2d9f105b4404",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fc60b661-e6ff-41db-958c-531ca5162e90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74fb41c6-fbf6-498c-ad2f-ec80667a3464",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b7074b02-850e-4239-b7d6-e246d3ebf9dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d362526c-aa33-4752-a968-f078d3c1fb37",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "753bcb0d-25cc-4dcf-8828-bf664310badd"
            }
          }
        ]
      },
      {
        "id": "ae5b3d98-8121-4202-ad98-3d639208c757",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "14243a8f-5a06-4b7a-a180-324abdf04ea2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "975cee8a-2aca-4946-b594-ddbdb1e85af2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6df2ee30-f8f7-466f-8531-5e440f78ddcd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c121b3f-97d7-4ee5-9a81-a9ddfe2e826f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6845994-86f7-4782-b166-d4b31bd0b6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5afd7e-4b43-4fa3-8296-604c5a429d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38fb2458-c78b-4f00-8340-5eaec3f5946e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db16810b-6afd-4ac1-99eb-6e353236d377",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396073cb-5c59-41cc-9cd3-2a410c825103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c51235-2d39-4f99-ab54-0e3d043cfd46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f24969b9-c093-4a65-b03c-41420d95320e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d993a98-dbe9-46f9-92cc-816283f77d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436a0ee4-883f-403a-9e93-605aaaa3ceaa",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2037ab-ec35-43d8-b653-85098f297fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d5b0b0c-f3bb-4d39-814e-be340ba4b7e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cff1742-8e9f-4bda-99de-f75e824afeef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a736572-2741-4d53-be39-8b956408ad36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c506c0c-e545-4211-a499-1ca497a6d65d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a7fb34-da82-424b-9793-2dcb6e17d11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404c3245-d4b0-4178-9d6d-36336734e128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a2507c-7a76-4331-a539-6e8edc15b298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0adc4790-c324-49b7-a0f3-14d659f14866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8b2f2a-1ceb-44ab-a70c-3d58b332b27a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a77f752-25ac-4fbc-8865-f95d2d8fe22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b79caf-4237-42e5-8f81-46c23a359a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3141d287-8e48-44b8-98f4-d06a2bc9bd39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "496e17d1-9905-497e-ae94-799496e8f4f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2808db39-01a8-4952-a97c-db958ea8c9b5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5435c6-bb28-4841-aa89-151969617f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b02bdb16-9086-4104-bb37-90cc32752deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef7ee81-edb6-4ec4-9a85-1ae4055ee306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bfc243f-a4a8-409f-9506-c2781c37e791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec07e46-9cff-4709-8eaa-6ba3784d2512",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e989c928-a0e3-4afd-94bb-03d8f348d220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390ba618-604a-4a02-98c4-fc4e5ab20dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99224c79-1340-4522-b243-f86584846fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6df8f75-c2f3-4f0a-b54f-9a6c0b0f60d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ae4cdb-f088-470c-a40c-a8c7c26bd9be",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc081b1-0243-42cc-adc1-a7c3c27c5fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c4fb040-68c2-445d-80f6-dc7bd6a4bcb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9625d08-3687-4df9-9b7b-72733860337c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07fd2569-af9e-4abe-9448-624f5eebbf40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af415a07-1a3d-42e2-bdf7-75feae45d8da",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58445e3c-75c2-42f8-ba7e-519fc373fed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96827d46-52e7-43fa-875a-ce5da7a86144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a54def-7b0a-49fd-9158-d38caff22c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec9d5443-66c3-45cc-8aaa-5e2afa9c3b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9062490-66ee-49dd-a97c-2a506cdb7d1b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8422175a-42e9-450e-bc8d-1c66bfd63927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a750b41-36c1-40c4-986d-9e61d4b89bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89155cb9-62e8-4e8d-b4fd-9fa35c0a78d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b8a0eb0-2fae-4c60-adfc-dbf902f0f9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f373d17-0cde-481b-bf71-32958241e255",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84647f9b-f6dc-4efd-bc53-43b9e7e598d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ca146e-584e-4cac-a609-b1d8268e4ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013d4837-4af8-4607-8d21-feed9ecd445e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0739f52a-8dd1-482c-820e-bacf6702713a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a570b3ea-3616-4a59-b554-dfa08f861228",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5866487a-d952-4613-93e4-c6c9ad1b3545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3f85bb-17ac-4a7a-b5db-81e836f728d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05590842-427f-44d7-80b3-725f5fea0a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e56b69db-3173-4e30-b168-46f2593b140d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2502085-3475-431e-83d1-84b1f383af3d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297c69b1-8c3a-449c-bc25-406532cea1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a33dd795-4812-4f2b-a767-7be0a69384e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e4969d-0152-4310-84eb-17eeda55a075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d884147-dc07-4860-8bd6-b1ea3ce64533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90d030b-0ad1-4606-9000-b3e787b44baa",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820be2dd-8078-44c0-b997-b027abea469d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4712a10c-46db-4530-a92b-3146949af046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4603fb47-0bca-40e6-afd8-1d6bd5006d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07c402b0-58a5-4547-ae75-c0ad780eec5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2ff9ab-fae5-496c-bd6e-076ddb919ab8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff2f6cd-460b-4eb1-afd8-bcc5ad250ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d22e85e-0300-4fd3-806e-6af376be9e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9accef-af36-4423-9ec5-49f9ac0e57e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d902df6f-968c-4e4a-a445-4c74231287da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dcdce0-100e-4280-8dc7-0d33fd85796d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb69e225-7f04-4ab7-b694-ed0c9bd305f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a2ea74-c359-4d0b-a6fc-0ffc9512cf17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b870d8bb-5568-422f-88ea-0fb07dfe9620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88c591e1-f21b-45ff-aac0-d0304c1e0404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b62dc8b-5f3d-4a87-8024-cbb5cacc5028",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9a0b4f-e0c0-467e-b430-65dce0e2f17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54383837-a2c4-4db4-a6c8-e8ba61a1a292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd622a1a-5850-428a-ac74-5496716c84e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "645a8b6e-6fc1-42f7-8122-043db32c6333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdc0b08-e16d-46e2-a300-95deb38fb140",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f457ec6-5c7e-439f-9383-691ca23fc093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9511bf41-f2cd-4975-8a7b-2ee46eb97005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f5117b-ec56-4959-bf9b-ec5d74fe9fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4984bf6-7591-4f72-9a35-ea2e31b11886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4ddd15-2b8b-4e80-b368-f2c918a78a6e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d2b6b2-7569-4efc-a537-d3d45b8bb0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119a6a6f-0800-42f7-8948-56a0771e3a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10d8df3-7308-43c3-9e35-0f55a47b57ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5019084-d9a0-4539-9ab9-fbfe86f50b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76c11fe-5161-47f9-b662-3c6f7b1f0a99",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554a2e49-171d-4981-877c-46a8ce3ceddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06387ca8-596c-4024-94d6-f526f74fe89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdc8a47-f5a0-43e3-b3b5-d4f62750e7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b18c5864-37e1-43c2-af88-14b7fc2cd74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcd99b3-0f6a-47fa-bf6e-7aa3cf6bfd38",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060a58df-6d75-4b18-8fb3-36fd1c08289e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f969a04b-565d-4153-b032-594ad0a7a814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff0d3f9-0262-4e4d-8f38-d9b147c5334d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd579c0-adc0-41d5-81aa-01a923976c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9993565-1719-4d43-9d4b-820ed7915b72",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d569d32-88d9-44ab-a703-5cebc69be814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0334c4dc-c768-451e-a6ba-420600c43de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ad4f12-f301-4b99-bab8-bf18ae569e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c606d25-fb80-4478-b4b7-b8aab777c5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfb7bea-cd77-4d63-b0c5-003f6f49fc75",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d40bfd-e045-49f2-8962-d2c1ffd47028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87efc8f0-e507-4c9b-a225-f0af1a3e4df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52bf943-348c-4db4-accc-7928b856d66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54fc7ed1-0b7a-4f4a-810d-10903b854b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670a83ed-8015-4bbd-aace-94a6a99b469d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd194c3-b115-49d1-86a9-1c8540f6f218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64bf1c6f-c9a3-4a46-9658-d26a9bb31e1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5e1547-62f8-402a-99f5-0e4261efb572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa33529a-29a4-49bb-b997-5aa2c158a1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdc6346-d5d8-4742-a053-4fb9cb958e96",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d48d54a-7c8d-46f2-9755-5a23eee3d529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1518abcd-edb1-485d-be56-8b2499baa427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e05336e-6fc2-4772-993c-8be02dc4300e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a492d3f-c072-42e7-87f5-64925361ebf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd48fa48-75de-4222-99ac-f1388aab276d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579ac4e7-7fad-4311-81f8-ba27f223d20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f54105f-9cf7-4cd0-99b1-c68608689417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c07816c-706e-438b-a844-ce57703c26ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a352b98-01f0-4b74-bbb8-89ed677b2c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d09772-cc17-4a60-bd63-6682bad20298",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d609e8d-9831-4af9-81ba-12dc31719dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "035b9d81-1084-4dd2-a1f9-601c0b268a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55830fa-a38e-4323-8f48-69d666cba6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83eea388-4c28-4974-a1b6-ba3615385f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c6a7b5-3749-42e2-b54e-4c683a56b931",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a95c22-6658-433a-a0a9-c05537829e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4af917-2e87-4ac9-805d-b6a1d265de76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afab3348-1d76-4ad5-ae1c-3fd1fd636f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe9a22b-7b46-4467-8b8b-11be4a803abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7989435c-db09-41e7-a113-bfb1be9595e4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c42fc2a-308d-4873-8c13-0fbfe12ca249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3462aa4-432a-44bc-aa38-98a2a3d02f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636e0c07-8fd6-4c3c-b563-d541acb04225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9db95ff6-17bf-4de2-9a49-16ee03b35573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda05c80-4b30-4ee3-b1f4-b16d369d3dd7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a7fde8-1f2a-4afb-983b-bc615a3929f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf7837a-d2c3-4c24-aade-ee8869786f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d676d2de-de6d-4215-8f61-c1978bb9eac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "881fc50e-e7f5-4868-8e65-2f35c9be4faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213887a1-509e-45ee-b121-ade1a81263f0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30899b9-bdb3-47c0-88a3-9d7ad4478646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c4948a-c490-40b1-8402-698d0106ae8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ac851f-7444-46eb-aebc-0b5bbf39a8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b61c707c-384f-4200-9e20-9c11f36a8714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2035d3a-6844-480b-80d7-4a12906b0e13",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a390de-f38a-485f-98fa-0933b49c7736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca9d9e7c-baf3-4a18-bc7f-8f95b71f5452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e37c4d1-58d0-4b93-96e4-6bddfd617e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe51e5b-83ef-447b-87da-9dfb28299735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e892d8b-9854-4276-9057-9217ecd82204",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2b7853-295b-4b2d-8d1e-6597d37fa741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aacbeea2-07b4-41ba-b0a7-3732859120b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c97abf4-3dbe-40b3-9179-56e9522c4294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37946bfb-c704-453a-ae61-86197f01697e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebcfda8-2350-49df-8027-a64ff675a09e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a7ed35-43fc-4939-8b25-94b7a762d85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "145b7f99-6738-48cc-8129-85d0332c5795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b054808d-959e-459a-a2ee-8a0433f5b4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a78244-a4f8-4773-8471-540bd0597743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b7addc-ec86-4502-a52b-25092f9dd1e4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67545f8-2dfa-4de9-977d-7b836cd24739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da204964-ecdb-4097-91e8-34d107af7e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b58e97b-d08b-4eec-814f-cdfa5cd6ed51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "09c4409a-215a-42bd-abec-389c65471b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e7175a-ebfc-48ac-b3eb-40da3389bfc1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f000cf3-2286-41cd-94de-d724d22a0884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fca1b3a-62f8-4d98-a22a-50d05be0d5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9a2e5c-e728-4320-8786-088ed4efad44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3aff2689-630e-43e6-b1ed-31dc8bef9aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5543e1-d257-468a-8a19-44bcd3f2755b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd228f2-dfbd-4c34-ab9e-fbf8c029f9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2210b25-539e-42ea-98b4-de3fb3b1c41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557c5cd6-af05-4e5d-8e94-ca224124b499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cd2c0e-73f7-4874-91ed-489cdb26b343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2783bc25-aaad-473b-b2d6-c924b94ff994",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed98fa92-61f5-46f7-bcb4-859574a0a6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ef78e3-a7a1-4137-8471-8d195aa7cd6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d6c21a-003e-47ca-a586-e6819db3ab0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "26ed56e1-4f93-4830-b59e-e43cc328c413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f318e5-eb7c-418f-a25d-07aa3ad3cdf3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036dcddf-0fa8-47c4-8b06-6db86b26c4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed3916e-9f3e-412a-b137-828c50cca10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0316500-686a-4c64-b9a2-ce59f63231a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e42c2fcb-5f90-47c0-a2b9-bb2b06d645ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912b7878-e47d-45d3-bab1-559f06b688f5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c73e05-9d5a-45c9-9cdc-ed05fdb1c2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab77cdcf-652b-4bc6-86bb-bced5b0c5f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017e656d-d50d-4568-a15d-0773e258afd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b96e372e-cb26-4c33-b98a-a71acca8f397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e749496c-0324-42ea-878b-37fd750eab03",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fda0bc-729a-423b-bcff-2113305ff5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "092229d8-176e-4cb2-b746-0be224f724fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039de418-3b78-4788-bb9a-7eb701950587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b06d6f8c-bf21-4a74-9b5e-4c28740d7d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79d7880-bf5d-450a-88c9-16a8a436f158",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b80912-8f1b-490c-996b-1bb90438eace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600f6f5a-2b6a-47ee-b45c-ef8909c19fe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aafe085-ee97-445a-bf3f-fb0b4a7f48c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e2cc0c-23d8-41a8-89c1-a78e6923f323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5a3286-3859-4352-a33c-6c51abc743ec",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86c63bc-13a5-4fdf-bd48-7dcb293ff83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaca1437-a02e-415a-a231-e7c35ccba23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4dfdb3-6a58-4166-8fe2-6cd2c72e6248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd2150ca-ffe0-4a0c-870f-78763994da91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054b0910-7232-46fc-819d-2025165474e8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe47444e-8105-4b7b-99cf-88aa1862635f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b486d9a-7483-40bb-a0a9-abf9ce701109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f74febc-e08b-4202-af58-20d89c47c634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e152210-10a9-4f50-8ced-02be3c3e2ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6424e3d-4a28-47a8-b4ca-188b415f8b76",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d88fcf-a1de-4387-aab0-9b709d942aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b15ce46-6ea3-42b7-9201-9722f9cd8140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec8e4d7-a4ee-4ea0-98b4-9c024e24b1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "babf2629-ac4a-4473-a6f6-1e911d10b8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d340d3-ea63-4871-a7d7-c2110a4b5804",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498fc289-3ce8-4547-9c31-7a42760844c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24bb78e-6796-418d-9171-8be101941f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ecafe9-0a31-48ce-9591-5d655b7e2b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85b58f06-5a96-4cf3-8d76-262123498ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b569c35-a710-43a4-9492-b45c6e128200",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3228db8-b516-4efa-af17-8243e1fa20b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c1a730-1ace-4419-87ee-af13dee93d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6fd7d0-4cec-4cf1-9062-12472a7ca279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "287cd2de-752c-46c7-9bef-6c5f220b3907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ed2524-f4db-420a-b16a-77a526e867d6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3e9a88-d718-4298-923d-cfa302107f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99e54ff-140e-4c1c-b787-0ea8f77019d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9695ce-7301-4971-b510-48f91a24c45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9134547-eb73-49bd-92e8-41e8470c9a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7be779-979d-47d5-89c0-cf998bfa77a1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfef8edf-b6ad-4d42-be17-1650b4151792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd655e16-82d4-404b-8455-3b39b50652a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e523ae51-1721-4c2a-b6a5-4768ba4178d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c004af-c841-4978-b5d5-faf590e2f6a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bab35c5-b3bb-4b61-ade6-917046a8d962",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9f60ff-4fc9-4488-9727-fd2ab15075ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efbcfcc1-2d2a-451d-85a6-6286ee79a846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f914e1ed-fda9-43f7-9271-a8c34b8fe4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc9e9ac-94d7-4cc0-aaef-37fd6e1789eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0bfb212-a936-401f-a40e-e4f62afea0db",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db330f3-e91b-4c91-8da1-fcafce314c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652921e9-18f6-4aa5-b544-eab0ddf7ec37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d3d121-511e-4303-a347-5d2ebf253ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "621a0bba-9164-4491-8919-8335184bee62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a1c657-20a9-41f3-a0b8-9f26cf5f1a11",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cb5f5d-88a1-4568-a9f7-c3f942723579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e64c263d-3aba-4ba8-b341-31f5b79a95fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191b1442-15c4-463a-b12f-238a4d3e4214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2468e4e8-cf92-4e2b-a7dc-c9ebfeec0b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3c0cb3-2754-4ada-b45b-fac2780601d2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91361f4-8eb3-4710-9d3f-424a3eb4b524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8a6542-7b59-4e2b-a5ca-28e3cbe95dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eabda61-f41b-40fc-b17a-7f620223b052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04e94498-b436-4ce6-8d09-2024c4ee00f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971a3495-70a5-426f-b3c9-2596330ab08e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69805df2-95e1-4165-8bf1-a80d5575d1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6b928bd-087f-445b-bed5-d132574cb1ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bcb50c-4967-4402-943f-951d765ec23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d85ad2-a510-444c-8e45-47d8d34f3996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd767cb3-352b-4a3c-ab44-629260ec220c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa37398-b080-4c99-a244-0a10d4ddc723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5db0022f-ee1a-41b2-bad5-4f5cfa594794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789be3c5-be67-4dd0-9d75-8a67516863ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0089bccf-1691-45a4-8a2c-d607bc8dd3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8430f4a-2677-4be5-99ed-557c2d47b747",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e462997f-7e5b-4487-9961-78b2b74e0a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5117bb2b-0d5b-4b71-9dfc-315d7a952d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b64f89c-9a79-4534-a208-114720a95f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b30869fe-46a1-432f-9d8e-e82bf0cc67ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f53b376-8b5e-4fc9-815e-8c56e2594cc8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0f983a-bf4e-4d88-a843-52f37b89c750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67919957-ea31-4bcd-9d83-06cf35550933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d676b1-5f66-4bdc-8ff9-820965217ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe34f28-439a-46c0-968f-07ca513bbd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad8b262-1f1d-40cd-b5bb-2f6eed7c960d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ea16f5-76de-4b6a-88f0-ba7128652e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7837fe6b-3268-4029-a951-e3227790487b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd17230a-68e1-4209-9410-5286ca1b65d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a33cedc-2434-4b13-b4f3-567e92c22222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1861f0-082c-449c-a5a0-be4a9b79e9d0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6833366-151c-4e29-92e3-515e85652991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ec8d88-b76b-413b-b1e3-9d33b5a4b934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de29a429-34d2-4dff-a92c-a9112d83d585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "691f533a-1092-4e2a-a721-c29088388366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39886e86-6f4c-4a92-887c-50febde73fa5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3cf7018-c995-4ee1-91f9-f902af225aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7450db-b487-4ab4-a7be-c80107908ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fbdff4-98bf-4a09-b5bd-338bf0141751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3816ebe4-16bf-47f2-8b72-a5bcee83562a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d6d488-f9c4-4d7d-af51-5fbcbd76b5ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca61fe3-1625-4b15-958e-4be35c19fb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b917ec3f-86ae-4e09-8b8b-d37133f92f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd4e092-8d64-4d24-bce7-5cc9385a35ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2bfadb0-76b4-4a98-89ad-3f4bd85db4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7184164a-c5a7-4d9a-a391-a7a0f9a1be27",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0ad278-83a6-4e21-bf44-d93d8038f2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89333ab4-c5ec-4129-8102-9aee42cb7aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f93270-bb36-4fb9-b40c-8ea193f0f507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5af4d600-684e-4faf-9d6e-77f18de21c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20818d1c-e497-43fe-8c71-33c60ee169fe",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24bfccfa-0dac-4402-afa5-ee85dbae9082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7783790-ee55-4033-94d1-95a78b762683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9abf4d-1f5d-473e-a1e1-3fca159b895e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc47079f-d708-4bb5-85d0-6e43f25bb261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdced5b4-5df8-46cc-a3ae-e6a848fa2797",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c4581f-a915-4e2d-9809-63ed91c785ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecdc57db-9580-4100-8564-9c0b23ba0449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d2802e-fb33-4518-905a-951380383a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb653ea-2bd1-4080-8e7b-704e64b2e4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085f0262-b3c0-418d-953f-cde03617a667",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431be77b-5b3d-4a23-87b3-7981e65134b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced690ae-6c24-4984-a70b-587d32c00059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181fbeb5-e258-4d40-a52b-d4074f5630c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08f538b9-9825-438f-a502-a0193ff308ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffaa8f9-67f0-458d-8d87-f0208d1d635e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65decd7c-c719-4581-b3c1-8ad2d96d5cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a256eb99-e4e8-45fd-bc67-5b7deede07d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755331d6-12d5-48a7-9e30-e0de7d63c7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "516c2b36-8e76-4a18-9bad-5e978f303a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1d2103-f391-4e43-839c-b9bb8b8c20f0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59938ed-3e46-4f64-9a81-71fcf2764eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7063cf-348f-47a9-8b07-08770698e05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43beea1b-39c2-46c3-939e-82aec726cb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04f1c400-356f-4680-a225-190e6d8f5b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3b38d8-435f-4cee-9293-8264e6996591",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8c4971-7117-4342-9495-2809a2e30128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18daef8-a587-4ba0-bc93-67b767297bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba202642-e3d6-4900-81b9-17555dcdc5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "99a912a0-6445-469b-93d7-fe28142c2e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6642da87-0fc0-4752-acf1-b9a8d702384b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4869e03-370a-44ae-9527-331e929f99be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3434159a-6836-4985-9cce-64221a98f234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8951d16-8b61-4e5a-8ba3-2d8777db1685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "70aa7c30-6ed8-463a-864b-f68fbd0fb211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc18256-0813-4696-9efd-ff43e4b50b43",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12092089-b63d-4ba4-9d5d-c80e97743b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb36deda-aacf-4213-9f8a-73e2be89072a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b9b23c-d905-4957-9fd5-4ae4396e1f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a953f77e-7a86-41e9-bc5d-853a465c8bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f10edb-45e8-4fbd-a1a2-61239de770b0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bb118e-85cc-40a5-a0a9-ed62827a760f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b260cf0-57be-445a-a18e-c111761231e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d10227-0eea-4f55-9a92-438840dc2034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb179a7f-aa6c-42a3-8b01-45f1b6f171dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b975d743-3113-436b-b9c0-6767c73e115a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d08258-c17a-41bc-9d63-9a2f35c47c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ecd089-3082-4323-a11a-fdebd1348108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afea6ea-fa6f-459d-816d-0a05d47b46ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d70067ee-8f88-4e1e-aa4e-7e937ed54a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef45070a-4909-46d3-abdf-2345d49ffc07",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7eb85d-e0ba-4fd1-9311-1459d79cf852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ddf958-fa08-45a3-8710-754ec346431b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5c3422-3a12-4d1f-b333-1a277de8b6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "632e49f2-10c8-4b77-9e93-e47c5dfe6e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4e50a3-a337-42fc-9a5e-90914c3350ed",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d17778c-97ef-4740-a05d-eab807e4c01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e6e16f-9af3-4bb1-8236-e541b9ff69f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480f33cb-e149-4fe1-a399-138d46977966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62dab7d9-ac0c-4fa2-b798-01de71817e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f89d4b7-5072-44e0-8f51-ff71ffa9f1d0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc11258-b4ec-465e-a747-6ef73b33669f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a666b56b-e0df-4bf9-8963-5c4562f23f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a473a140-d487-4cc5-ae32-d766b988b8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c30b94ce-4e48-4563-83df-d3d95077f428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a97f89-21b0-4051-a025-9dd53eeb66d7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec1e029-cb85-406b-b6cf-758723a35317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c4adcff-b86a-4db2-90bb-7ae7b0c34480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcd8340-e1c2-404a-956e-3c3523539603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4726918a-e759-45ba-ab2d-f846ed32ab09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee51caba-3d38-469a-82bf-4c89815bdcac",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca3943f-ceba-443d-a528-ff63d54e8923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2ff6a5-33f3-4827-8ec0-82669d901c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230dbb2d-9067-4dfc-be0a-6cb9c30a1188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59a08add-5951-4ac8-a897-8cfa008e22b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3327dd7b-7b01-4c00-b231-ec1f8264c9ef",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378ff293-9b6c-4344-a680-92525344b533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c782d946-e3fa-4a9b-a480-8125e240e195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65745e5e-fd79-43cf-89b9-06dcf586f914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "693e16f8-d073-4311-b900-f9aa23b609a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28231aa5-7aa5-440e-85ed-15f54cb2f8df",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f18381-6bd9-4b41-bdfe-f1fcc827fa9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01fa8040-f6c2-41bd-94b2-d42446197371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892f0e5d-1e9d-4ca3-93c7-5d10dd3e942f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e942da5-c175-4acc-aa8d-46ef43db0a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3999f531-e0d4-4db1-a62b-f3f2d538fac7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4bc8c2-7db9-4a2b-807f-4652d241b914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7be1970-b5fc-47d5-bfb4-6eda65e585fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67900528-be83-4fd4-a24a-134f4c142408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca2eeb63-4dcc-4bf7-b4a3-00fd02afcf20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fc86cf-3b06-4016-a3a2-085613235776",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fe7e26-1f23-40c1-b359-5331e5fa52de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f15a396-0797-4437-9dc3-6c1133053bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a116fef5-d414-4267-b3e8-d309bc9f8af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b409bc9-63d2-4eb7-9447-5b1c9d476273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28312536-2723-4216-94b4-8e9c913a6d9c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc05df4-35a3-4c1a-94b3-4b5360ff1c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d1f091-d9b6-4f0b-bb9c-e047880b450b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bb7282-2c07-4777-8c5b-c9be9e806bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc6ff9d-e76e-4318-8040-1b337f0acc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb41d70-85de-417b-bee1-1a59262c9ec5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfec8fb-8bf1-401c-87fd-248421cae459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29efc7a-48bd-499a-b491-cfbd95969a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b4f68d-36c1-4c56-9c3f-10923ad5eb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e26cb69-0683-48ad-b986-e3130f8decc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad714f2-a3ab-4af4-aaa8-d9fe205ca776",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ec9b1f-0726-469a-9283-a116e42df228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01b6fab9-b8e4-4dad-92cd-c01f707c102f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb8e686-78fe-44b0-a0dd-689a0fbd71c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e267e97-f6d1-4c91-9cc5-a99af7b0d420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb2b06f-df7a-45a8-b57d-cdf7f90275f5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4979a1-7bad-4a51-ad64-2a6151a03060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f458cc8e-bb12-4675-95b0-2d6fdbfe9414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9bb4aee-d434-442a-908f-ae3af8050a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d453c4ab-ed06-49f6-9a85-5e5f5698ab2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b9f157-8f4d-4af5-94ab-98ae94967a61",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d876117-1819-4673-b24b-4ef9d7be1fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc12846-83a6-4a8d-8867-3854dbf8403e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bac13d2-2953-4784-9a63-669a019a5589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f54f8e-9321-4863-b682-12ba8de18aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05253ef-d558-4e9a-8fe2-c8eec1ed230c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd6b397-19c4-4259-bd1d-2733168ee19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4ed62b-2998-4de4-98cd-92b0b2cb11b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5071bb45-6fa2-4a46-9f7e-0010639d0656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0711b04b-f4c8-4dcb-9b2c-0d8efd79ff39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48531a70-3d70-4c27-9420-81ef50fc84c7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eabe26a-e935-4b41-9af0-6faac9819979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5787bd7e-33a4-4aa4-a0cf-edf52ddee713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02aab327-77d7-4bb1-a44e-93cc073e32ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d144b7-1a08-43fb-b9f3-0a77ae8e5af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3a428b-5d95-4e0a-90ad-98ff1d2dfbf1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2f5e56-80c8-497b-8aee-4b599380f8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63835df9-1cc2-4b5f-96b3-0c4e9d8e3aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd9ab76-6aaf-42c4-83a8-c029775428b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a59655b1-b339-4050-b31c-91197ddba731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c590f467-09d8-4e26-ae91-cb6e0ad7dabd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4528285-bab3-4d26-be42-bd22c85429ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "331503dd-800c-4085-8187-bf96b8a5e001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84ec915-eea3-4114-ae4e-0a986347a4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4162b17-b582-4563-acd1-7c747d4ef9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7396ec-07ac-4e09-9ace-6cdb74c62784",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86fa4dfa-7db8-40a5-adf5-abd3ab7cb064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0c4085-bf83-46a8-8077-6d955dcac536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e225e6-ef08-4072-b68f-77c5671f0f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f24689-e839-4337-936f-5fed6460a2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eea08c4-b5dd-46f7-937d-eb2eecf96596",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01181792-69ac-4761-a060-8f8b19ee84e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "31313e5c-4033-4012-acab-2d2c5922b01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8914af-3be4-4203-9977-4ba36b676688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "51cf7f9f-858a-4667-aa7b-519c9fe33853"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "43f09071-1354-44bd-aa02-fbbcc59b0ae1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3868612c-37ae-4f9b-a7cb-00bde8f98d8f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3acedcb2-4ca4-475e-b44d-b3995e16b706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3341343a-4b54-4261-aec0-fb158b9b158c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cfe5c7-ba0e-4a96-9021-dacb304e2591",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d45fcd9b-bff8-4410-8c1b-baec2821a38d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7ac9d4f-a524-4c9d-bc6b-6e9e491b82e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "deb575ae-a5d0-4c06-8013-5906f2ce0f95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce2f56a5-1b3f-4a2d-8704-1fc40d95f5f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4e84557-8a74-4077-aaad-3c28fbe293df"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d47ccc99-61b8-472b-a7c2-c578ea2c01b0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3fbf96f9-a955-4df9-a5c5-f84dc632ec94"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ae43baa7-ffbb-4576-8b3f-5c6ac0e6bd07",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57a00227-5df8-4011-a2ca-c13aade17584"
                }
              }
            ]
          },
          {
            "id": "229c2d14-8fc2-4dc6-8211-7f6ff9613604",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0a287161-20ae-4415-8359-66a44f4a8bab",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "dfcdc725-754c-4786-a74e-8913ddaa078e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1328e2-6f24-4150-8adf-a9dd82f18785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "66eeb78a-f32f-4f9a-a785-d1375062a22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65da932f-ccb5-42d7-8703-3fa9c1d8d6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e4e3cda-fae9-4178-ad12-1f41bb84bf33"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cbe7449b-7a58-4ea0-81d6-6e194290968c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d7677cb-d4a3-4fde-8c3d-d0e7ebcd6fed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f77fcdc-7631-4420-8bf6-cad9be2966d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46998953-7d84-4e36-abce-cbb17c2b3035",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "04fc18cd-f1dc-4c4d-bc9c-7e6e41fbddd9"
                    }
                  }
                ]
              },
              {
                "id": "0bb2fdd1-c424-4abf-abce-4341bf64f00e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bfc236a-9a51-4bd7-8c84-291a0775ed78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17a243bd-6cf9-4c9d-9157-e508c7872618"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3352978e-01c0-4479-9d18-3d6d6d2f79fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "26643196-c5cb-49e5-9866-8a40fff62c1e"
                    }
                  }
                ]
              },
              {
                "id": "f417e3c8-5386-452f-b50c-81510aa2bfb6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09874941-6586-42ff-b5b3-e8f6647f90f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "963e44f4-dddb-458d-8b77-f6c1c0b49aa1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05297c95-66c5-4373-8b3b-ef5257091bc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5967da99-5405-44dc-ac99-9dfb5a315be2"
                    }
                  }
                ]
              },
              {
                "id": "74f05543-35d6-407e-8ca1-1757367ef6ab",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f33424f6-aacc-414e-860f-1d4ca3d0bb12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c9f38d6-f901-4abe-83b8-bac37ca033b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a03d8bc4-b339-487c-a86e-5efb79f4bd9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "18fec307-984d-4680-88b3-d9628b87ce33"
                    }
                  }
                ]
              },
              {
                "id": "3b69efa7-50e8-49b7-b2c7-c6e19b940b7d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "935250b3-c35a-491e-a358-dd7a24d3c1fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "324a7316-debf-47f8-b52b-eb51abd63331"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da8c6921-0143-4355-a121-88ed337160b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ec0d2a35-aa89-44ac-9a18-a038d3005b60"
                    }
                  }
                ]
              },
              {
                "id": "6ae37f69-a01d-4238-928b-ae188ad94dd2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6546bd4-41b8-4112-b308-a8b692f75fb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee897883-37e9-49ca-92c5-e709575204bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01e5bcc1-ced1-4b58-9407-311fdbe7208a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b6fbba62-8e47-4341-ba21-5fa97086f377"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd0228c7-c280-4ead-8143-0a23cf781240",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2813acb-bff9-4dcc-b3d5-3c7ced7f1c43"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bfafa007-af23-4002-809f-f1945c8f3602",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "462bc964-3242-4d56-b868-fe399b681b03"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a904cef5-c775-4e5d-b44a-a547dfe6e5e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "448dbd9d-6c9c-4c1b-a09b-538175513f8b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a955850-d8c6-4a8f-a840-5d22609b2792",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8e3eace-106f-4799-bbe9-52b7e98e7a35"
            }
          }
        ]
      },
      {
        "id": "c9cf674d-8166-47b4-83b6-e0349bca9714",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "17389eac-4534-423f-90fa-b027694d1e17",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52d5ce8e-735e-45ca-90cf-f9d76b3a86c1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b72f1f38-cf88-4564-a1be-2a0d937aa3ea",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e320161-d459-4792-bb4e-c446ed9ab92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90c0955-75fc-44a5-b4b1-e53ae7baf5c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0782a1f5-4455-4172-829a-35c25a2b86cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "333089e7-cffc-465a-9145-1b1f238d078f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7994b82-05d3-4578-9401-2958f00a4ffc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d740b3-156c-4060-9b7d-0e4a264a5d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5bb73af-921c-4ea4-89fc-fb6e4ac085fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a058d13f-0379-4d46-82b0-ba999ff15f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5873c7ec-b36c-4842-b01a-883257204eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b882c8c9-8a9a-4baf-afb2-9236ae690336",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce4c7fa-0efe-46f7-bd64-a68005a97f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f286faf2-afa5-449c-adc1-d2ec1934eb7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8356e0c1-b993-4388-9bef-8dfc4fbbe7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6469ebc8-db14-46c3-a6e0-5b966a545ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f16b64-9df8-47be-8b65-960e3ff4b0b0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fe3923-0b43-4eb7-be06-600a0e0f44d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa933300-15f1-45f9-bc4d-a0f286e3bf3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02297ee0-6514-4bdb-af66-21d9f5876fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b47504da-1f2d-4e4e-91ce-0780ff944e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9046e2a9-39ed-45ff-8fe8-e9954b9b9670",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e31c0e-fdde-4d1d-b9d8-a408da27565a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86bdf864-cfba-4f37-82e7-4a992b306c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b313b48-5de6-4ca8-b3e5-f4cac5ab971c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aebde4b1-c513-466c-91e3-371923cd164f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7676b3-4897-4e4c-a80a-c4259a2bf631",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9081342e-c264-48d5-8e55-c76b94372b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f95334-106a-44de-8b28-9f92cae63c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcfb8ad-ffe4-4095-9460-525a8a91b372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9be9de-faec-4b23-afb0-8235431e8f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2d7f56-241b-425c-9b86-7ba4608fd59e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1c44c0-b749-4de6-af4b-6d5a01230e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c302eb59-c98f-4577-b360-79a94c5a7058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df179c13-799e-4704-9a39-3de23cfd1aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "19f628f0-605d-4186-902e-04a19b68ee83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30524c6f-f497-4ba4-92d7-7866c07bfd7c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d955ba55-471a-4ed9-9286-b02581ef1261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a3b724-5559-40b3-b73b-26b1b226bbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df111492-15da-4b39-bf47-946fb98c6660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a3a6ce-bf71-4a7c-bfdf-0ea129a60a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be604c98-4675-404e-8ecd-edf289414275",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f4e6fe-dd03-42ce-875d-64bb87c9bd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2576165d-838f-416e-8f18-ab4fd08cf098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0496df4-37df-41f7-891b-7280d588db11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51587d3e-a82a-4f28-9ac8-3b8eca9e7e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c035fa7-fcb5-4714-96e4-741f533812dc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fe76f3-0edf-4c0f-a742-9f33d9ba5ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a63554-c688-4d5c-ac57-d32a4aaae70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e9c2f3-ddaf-4d90-9c17-e12aa9f5bbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4578c0cd-80ce-4ddb-a3b4-f30c35f28125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b88459f-92a8-4ae5-af7a-64f63df3d88d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59094ffe-3218-459a-aaee-acd6cf912431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef99e66-fc90-4e24-a06c-45e02af0eef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8e52b6-ad13-4161-a445-9ffa91b2067e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b49fc189-41d8-4468-bd2a-e9490a482c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd10d2dd-2ab6-4142-a846-b750e9e710da",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8018c16-9aec-4ac1-8f61-8096fbccc6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3647a5-fbf8-4120-9528-e4c865395ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb2d9a5-cbe7-43d5-b7a9-9f2081a1aebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9173498f-1e0f-4359-bd25-decb5ace27cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f7454a-e4cb-4e07-b007-580a29748b68",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37572962-4a60-47dd-8626-8c3c56362eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa3577d-c1c4-4571-a90d-883ba386ed18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4fd89db-23b0-4dd6-8585-7d2a01b90abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f91b863-2bee-411a-8aa5-a88a46a69948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ec2d1f-eb8f-4f49-abbf-d672e56dfe7b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c24966-60f5-4e2f-bb20-0762c2b7bdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72420e5f-d6e9-4ac3-8021-171610b50a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f00be0-e54b-4dcf-ac61-b6f49973fcb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa97bd6e-0a2d-4405-82bb-91faafe9ab61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97204c6-2701-43ba-9df6-b2f5363158e5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf159a4-890e-47f5-bc3b-06dbd0eb88f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df845e64-0f75-448d-b364-ced420ccfb5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba6e7b0-b20d-4438-8ddb-eda364f077e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f478495-221e-4184-91cf-91b4c63758dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c568ed0-bb4e-46aa-9310-0f2e108f7d53",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b37bdf-2fbf-4135-ac3b-3b5ff3278fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2a4eb5-3f54-4d71-9ccc-8fb36bfa76c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad08d4bc-5cea-4d53-b894-fe3235d7ae4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "44b60e7d-baa6-415c-bb91-7f84edf4b526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f059a54-f17d-43d8-9612-00a9306a0df2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bca675-3c20-41a7-a3a6-f51d8820c54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a40b011-78c3-4c87-ba79-08e5ca0b14bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebca7445-6196-4a6a-b2b0-9249d2d396c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c94d46d-2b3e-4a42-bed2-11e24a6a31d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa299e0-9fa3-4bf8-acbc-9445fd71a87e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef891574-556b-4b31-babb-8db5621d9d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0914a656-4be0-4ebf-be5c-a708c2378b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfc9df0-ebfa-47c7-ba61-a666c49c99ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a51afc4-b8f9-4b7a-90f6-30ee03ea3d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfaed671-4523-473a-96c4-f051f7127c7c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e39b5ed-e431-452d-bc91-d66ec4b33769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa2c916-9f31-492e-922d-7a4a2751ace3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f879aba-07b3-4886-920d-b127072f06d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f76b67cd-ef50-4b38-8768-84b789ef28ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4222a78b-41d7-4673-abfa-0e5bbe8b7619",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d5f3b4-3d59-4d15-8410-150623b14574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e01eaa7-1d3e-4e97-8da6-7fdeed388411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f569174a-9373-4e3d-9f27-21b259162af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4248dbf2-1fea-46a7-a0a2-57b5bf04073a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace6afc4-e0b7-46c3-bfb1-9fe1e41e8a2d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afcd1c85-939d-420c-8819-340fe0b78f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16703076-8b59-4062-8555-770e30c81b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e3a610-f417-4b81-8ed4-8e20b8c33cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78b84dfb-ccbf-4ad3-a62d-e76f794baf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24765b61-08e3-47f0-baa2-0601b2612aae",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de7c16e-dd95-40c8-ae49-094d733a82c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad64d7fe-c978-43c1-a833-548da9100e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1274efcd-14b9-49e8-a414-ad5190f45b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33023d77-a438-4e8f-a684-40cf1f052e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e28abe7-8397-41fa-8087-4cb386cdcc0e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2f5c30-0221-4814-8af8-7dc20aa2453d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9cebf3-fa50-4f93-8ac1-a60f29e1b1e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0437e42-0475-43d0-9d82-152426840ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c544babe-5c27-4a5a-868c-66f0adc041d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35cebd1-297d-4e61-b68d-8eab516c0acc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846f003a-352b-49e8-ac29-5308477c149d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c952e2f-30af-49ed-a807-7697d02bf917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e81af38-65ca-4c4a-9270-24bfdc34b279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4690994-9040-4503-9d61-d914ea112479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c24d85-0a16-4d14-bfe3-c6bf5ed50d9b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4ff151-be39-4a5c-9ab8-aeb9dd92aa49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38125116-c204-49cd-8b07-2ee639ccd704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f712725-dc5f-4c05-9db7-a07104db0944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b647a7d9-63f2-47f5-8ffc-a25d206ab57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2185ad16-01fe-4e9a-9288-4c9e92d4fd9b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec32fdf-b53d-4266-aa8b-cfd23bc1a24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a536854a-3628-49da-893f-9a459e383215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ea3c24-2853-48a0-bf0a-88029835daaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3332b188-8d14-46a1-83f4-3745e12ec2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09a5aa6-bf5a-4753-90ac-1100ad3b8aad",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c660a7ed-0f70-45e0-bae4-31def0115bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28a65c4d-af27-4243-a9ad-1396b59cf8dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba3591a-80e8-4139-87aa-497d315050ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "417c9871-fff9-4262-bc3f-fade966f0bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5d2c01-628f-4b03-a426-fd4c832d28c7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63079363-e834-405a-953b-a31ff9c573ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9614f609-1108-4ec2-b3f1-629965d1a4b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d332b7-996a-4c59-aed9-c30be6b55aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa77e9ce-fea7-4366-8df6-31a06661addd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff48e0c-fd07-48dd-8775-5f11cf6afa22",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab58d37-44a5-4476-a3e4-9d77bfec6bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79885ad1-f04c-4835-baa1-02abf5441594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbf4900-9488-48f2-b483-03cea0d74083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "976513b8-e4b5-4b36-abc5-fe1aa33d73cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917bc047-866d-433e-afe6-b497096ff332",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51b23ea-b2f2-48f2-94c2-059bba8b9884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3073a77-749d-4a41-ba84-828879c0f2ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f4b10d-2d38-454c-880e-c1943459da06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2004f8-d19a-4a0c-ad50-2a60b4b6913a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336cb724-7088-4e29-b642-900572258f55",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbce1b2-94ab-4646-aef8-03a7bcdeb81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e2c3bb3-9ac2-4d55-8f0f-0679ea6572ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6edc6b-94b8-41c8-b976-771ef77e0629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4daf38dd-1992-424e-9e28-1f295eba0029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9830acfc-83ed-42dd-bec3-bc1a531a569e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73dd9943-139a-4e40-a018-3d74785ef927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda8f527-9c27-4624-a905-f886bd6bfe06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cef2db4-01a5-478e-b3d0-9fd56ad9e798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72bc6ff1-a9c2-4319-bf22-268a7ab8ce09"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "68c23c7d-beeb-42ce-af13-0156fe4ef2ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d734c2cd-8e6b-4def-8afa-5ad66b85c82b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f56e53-ed6b-4e4b-9dd3-e27c2740cacd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6bfb2221-83eb-4f55-8acc-3fa2938d5080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee4ab14-1bfc-4867-a662-ffe55b913998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "679c6895-2bb3-4c30-be34-d22787ec622f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f2d3272-22f8-4859-b686-07f2d77e8f5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8172fde3-7ebf-4261-999a-2e3ed9c73e7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b81b74cc-9e66-4cf3-bf07-413835111d45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86c60445-81ae-4fae-b716-8fbdb06ce7de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb081b99-af2c-4849-8ca7-e92cda0facce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "79f56435-a925-4970-b184-d872a54ca381"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8ec78bf-459e-4e10-9663-f1dd492f32ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "78b1fbf7-5344-4bd5-8bcb-05744fa981be"
            }
          }
        ]
      },
      {
        "id": "e92f407e-de9a-4a00-8687-e5f5c5fd0b78",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1e019a85-c539-4c14-aef6-b9be2a4f0f1a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "53a9f78e-ec02-482d-9de2-0998c8908a50",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6171bac5-86c4-4126-b7d3-452086f7e82f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee94101-daac-4b21-9072-75a65e5c1aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4a63bf-a0b4-4b79-badc-d203b7a7a52d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99da4709-eef0-43f7-a13d-01ff776714da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "af3b20f8-622d-44ce-afb7-8d54a0f9e069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92432221-ca2c-46af-85c8-5a202a3c61d8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a72ea0-70d2-4f34-ad09-61e4dfbf32dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f09bc0f-2683-4fcc-a178-49658adc5604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef93f6f-aab1-4197-b868-422cbf608753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cacc637-f28b-4230-83f3-afcac4d664e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673e2799-292a-4975-b131-68ae06195c33",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6ec420-3259-4551-9172-3e7b278e389f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb2f3076-18a9-40b3-ac19-abe1624ef8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e463da11-318f-4284-a5bf-f6b4fd8406ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e634457a-51d5-4a4f-b043-147359d83bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f04dd6-a39b-4443-aaf5-84b40dc2fd06",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7dbd87-96b5-4042-9dea-b03f5e7be70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f25404-bcde-471f-af50-c2f6e3913128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48475768-212a-4e33-84d1-a5adbb8737bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4482808-5b0b-4a7e-95df-530c1ad053a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed65aab-c44e-4078-9342-1c870ffc3cb0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41905da-1572-4a54-b413-4ae6d0418b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd8cc6f-ff07-4f40-ae9d-74dcd90d57ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759e9b3d-ac4e-4253-8d20-1c411d6761ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd92070-73c4-4fde-91e5-c81d123cbbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41b468b-dd6d-4785-94df-3a58fbd43cce",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9d4c5c-2e96-4451-92d0-8d187be20b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69a355a-aa1f-4306-aaad-53a9d5560ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236a1bfd-baf0-4019-bf8e-fa522245bdce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b467c95-534f-4f6c-b045-7dd63490683e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18540da-97c2-44ee-95fc-0fc9b50401d3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aef1b0f-0077-4324-b277-67cc138ee44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f89b39bf-cfbe-4c54-aa33-2954235c5f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22086df-f237-483a-88f2-c74349c039da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d585055f-5bc0-438a-9463-233b91f7166c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f21c19-9b17-4b08-8b31-aad378feb5f3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec03f05-57fa-49d8-812f-8f90c7aa2201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819c3947-a236-4d28-8582-52b6e6ea53e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418010c7-1eb1-4acf-ba49-bd1c6743b2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff14c7c9-dcea-4e25-9fb9-12c09ad52425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62e828f-2d0b-463f-90d8-7f5986cfe733",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b3a44c-3e88-415c-8e2d-b308acd89325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42685add-0a1b-4594-8b42-ae05a5859384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e37e57-9268-4166-89d2-3417687129f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e87d3a0-c54c-4a8b-b314-dd97e4c8f936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0144f785-c114-4ef6-a78f-d96a643e344c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d1f735-09be-4666-9ff6-5c2d9d23cb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1683a6a4-026d-4a8b-9c2c-0620d4248d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7594515e-02f4-4234-80c7-ce078585ac36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c792a29-272c-4142-a750-ba0cf8592d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f75b390-d44a-4758-a957-4172175f9f9a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c810dbb-976d-4628-842f-736f9f722982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4c8e67-1f90-4211-a2ae-f0489236d1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a83e04b-f495-4d29-8605-6f1f0f070322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "407477b9-93f6-4b8c-892c-c42900458fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090a42dc-2f9c-407b-91cd-c751f2866cd1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183017de-b95c-4e48-b248-fbf8412263d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7620f1f0-a5f8-4b54-b3a8-b925b6d1e67f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0d0b56-0704-4863-8be5-061a42e13262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ccacdfb-dc8d-4d02-9942-98d35165ba76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c905b82-d582-409a-b1fc-3776219bc14d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d135d421-a0c0-4b0e-b39b-0a6fda99b8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493cd0c3-ea26-4f3b-b20a-8eac8921fc6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124727f0-0b89-4530-b889-088c5c12cce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "08402edc-0dca-4840-882d-c73133bef8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a308388-a467-4213-9e9f-0b94aaaeaf71",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412e2734-4614-4f04-9f4a-a1867cca35f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e161ce-2d87-4c66-abc6-856f652ad2e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836144aa-4029-4cda-bdf2-de392951c928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e14bf6e-851a-4c75-a39c-c9db8d9c1977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f362114c-f72d-476d-9768-bfeadf3d0210",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a7e0a5-d0c3-4c78-8850-a818c582fcf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41a6137c-f093-4403-ab01-fe16ac0bca48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f33eea7-4e57-49c5-8092-e3fc61552b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "329943ca-73ba-4f07-8437-73804d2651c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf43c6fb-9c30-4aa3-b37f-266a6f9b89cd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e03de8-6a63-4894-adf9-d2a073f74096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6edfae2-8561-4b57-bd09-3833ef77e70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f13802-805f-4b94-9dd7-e314e85e0b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1efca783-768a-46de-8840-a9fa1bf4d720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc95e90-60f3-4d2c-942e-dd54db4edefe",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "648e97b4-0b4d-471c-bcce-4cdac5939395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "944d1b45-7ff6-446d-b9a9-4caa362cecf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aaef97d-78ba-42c9-a81f-7dc8cf4912da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "802c82de-c9d4-4efa-b18d-80b6e119cccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4bdd86-dc5f-4cd6-a377-ca7ce63a0156",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6399627a-9a59-4136-b215-83680fc90d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa2bbe60-d247-41f3-b5e0-fc89289fdbf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37527e6-ea03-4fdc-867f-72d505a318ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d03a750-361a-4a84-97ba-c473e2e16d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a0bddf-e1e2-44af-a505-0de6487f64f4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194a5e02-3f89-4d94-af18-a07ae437e3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96402f53-a1fc-44df-9ca8-de008c40e90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab7f4b8-8298-48b5-86cc-7c86561d3937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e24f03-f4af-41a3-b309-acdde96023a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d65c1e-e2e5-418d-a8d1-731c86c8adcf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63aff41e-e274-472f-a8a0-dc650d680dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7fef5f-dc96-48b2-bd9e-065d1efce406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb4fced-7bbf-44e1-97f6-bae093beb308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1351d9-d915-453b-84af-a4522c6a5c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e3977a-e6cb-47d9-9fb9-6d4c7fd8e288",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c93f8b9-f229-4157-9ea4-bced007c1025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607efa79-b716-42b9-beb4-bf73bb155cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f19603-073a-412b-b11f-dba612cc0944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ad2ac7-ae8d-4da7-9ad5-e2d3cec77c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82601554-52bb-4961-a417-065a1d4a6bda",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68957d31-c51a-4592-89ca-ea1fc16919b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d04305-1d60-4e57-b4d3-fd410be1809a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6962b73-2a96-40a1-b38f-4f5fb967c108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5719ca12-1e92-474a-8e82-56c14150b333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfac69f-9fc0-47b0-b24f-4d8d79b4e770",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debee3b0-352b-4910-9389-940ed876f95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75723cfd-973a-4207-85e9-530512abefb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f04d75f-f621-4879-9e92-b16b1d130612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92855d72-6bc0-4642-ae1e-3a0c0565d5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c80ca8b-a19e-45dd-ab16-b0cc5b1e4697",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ef149f-f9d4-49b8-8243-9d9d04d16c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41ea792-246d-499c-a1c9-e9a24dab55f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc99e63e-24d7-4389-b330-13be33621adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d73945b-74c4-4db2-abd1-50cb322326cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0940fb41-77ee-4e2c-a45b-a76293c770c4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d841b35d-0672-400a-8790-f7fcc5e01cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad37d78c-ffb5-4457-a0d2-a4b04c875c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2d9867-a46d-4ce2-9eb5-58678931c5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "889dc540-9c0d-49a2-a481-53b35314e7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d2390a-1c93-4f2f-b38a-39e0782d7d41",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79166e67-201f-4de0-9d44-fbc0ee33d65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2938c002-c53b-4ffa-9d7e-af10910eef97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93898608-9778-4346-ab6d-0a7c536c2b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea613f3c-1981-4acd-b373-badc5f907483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9a8cfa-2c1b-4ec2-be4a-fd7c03d015b6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be77815-db46-49fa-89cf-56497363caae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a195a8e0-0728-4a08-982f-830e6f273a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f862c666-83d8-42b4-9378-cba5ce89c2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d892065-6b5c-4981-9257-4dddb5ab6093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f7afad-b2cc-4c2b-a0c3-0ce11cd92d87",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "592f897f-5f2a-46da-b06c-677eeec736e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad1d26bf-037f-488e-a66c-7b009aa3eb99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41bc7f2-eea4-4554-94d3-179fbef4f365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2acb98a-f839-4c45-b28a-b4013da5a23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f50def-47c2-475a-9a93-411321391021",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d56c52-0952-4dd3-9e72-2a9f0dd93af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b682ea8-c701-44ce-a4ea-3f4f2f647f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d85878-b738-4960-a62e-1f08a2263f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12a71018-0751-4677-9dd2-bb3388091dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2146926-2c59-4ef0-b41a-095511478a49",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65d4fed-b1e3-4911-86aa-20e3ac306df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd6e2da-3614-426f-a730-2075f73aa43c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec31826-e0ad-462f-a577-a78feeed2ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb5d7f5-6ce0-48ea-a8f4-80285edf2f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e35b28-844c-4d57-8f33-91815b57f253",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f197f982-e608-4534-9b0a-251f01510adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b66415-6144-4edc-aa30-b2b4c506415b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2035568-59d0-4cfd-9937-6080301a8b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48453c6b-cbd7-4f4f-8545-df9a99981550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09523e12-d034-4a7f-b659-222a3eee2b38",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20af70f3-2c5b-4aa2-947f-9e3509618796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19700e0f-0f4b-4d19-8d5b-9e0382c42522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54690891-b823-4a47-8c66-5db6d1175e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d818aaa1-6071-48f0-bc5e-04fc13128e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350c7ce2-7ab0-4a3a-bf1e-ea5be529d53e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f454ee9b-e720-475d-ad8e-cf7937ad2847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4844b07f-936f-496f-be6c-1b5240c32e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0cfef5-1140-4cef-a4c8-6c79b21e9b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15d2cfc8-27b9-4b48-b463-2f526693a592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd69b6f-ef9b-4dcd-80a3-0d3fd8c7977c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec5d1e0-1909-48e6-8cd1-70323d2ea4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bef1875-8121-48fb-9304-f592527aa909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daec7e1b-05dd-478c-8f4b-8284933e71c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c8920f-dc48-4ada-9d0a-061a4a55c6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5015283-709d-40e4-9e6f-360be5c9db40",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee8b3f9-90be-4c53-8a63-192b1d1e8ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264c6a18-38fd-4ca9-9f9c-cd4bfbb3232e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c0d667-c386-4e6e-9da0-8f97f9a368a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41d2e8db-2798-4ed4-a0ee-5796be3351d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab691679-3a1b-4827-954a-324d8943e617",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8395fcdc-ed8d-470d-9d10-98b0f75775c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c34cfa-8ab3-4d43-b89e-7b2704a13cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde89eb0-34e5-4f9e-b896-f80efd9d9f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eea25564-43d6-407c-9376-76e351ad7389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f27a20-af5e-4593-a5a2-2a293d98689d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ffa1ba-fdb1-466e-a29d-8bdbe6ad196d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c04369-c845-4630-aa32-82d74778fc13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1c0072-f498-4aa9-b953-7e40938b0497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd3151e-d9b0-4f48-ac80-17066eadfac2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f4ed5e59-ba32-4182-8c6a-35d6ea8c5a63",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "482150d1-734c-42c8-93e0-f43b4ac937e7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5f1790-9b23-432e-bbc6-275557ea8668",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf156ca-b929-48e5-9f6b-dbcdf04167c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f4d73b-6473-4ea7-803b-cb9f63406267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd3e7c7e-154c-4f36-aa2e-a93747a1daa6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c95e9a3-d344-4442-9e31-584525a04645",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e42e66a-2a8b-4245-85fd-98ed6c859254"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab07e5ea-3036-4e32-bdb3-b2e8b40a17e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d25472fe-ecc3-4a3b-bb8d-5778bd3f8b69"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3b60389-f44d-49f2-b3dc-c41f8ccbba2b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "090d534b-9fd2-4dc3-a8bd-4ab5e28b2753"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae4521d3-03f6-449d-bc8c-5ec32794e97b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90f01284-ef26-4f10-afd7-4b1912bccb20"
            }
          }
        ]
      },
      {
        "id": "2c610c7e-76cf-451a-a5a2-411470e1d885",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "af5eefe7-0c6c-4f2e-a44a-66de51a0bbbe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "26517a7c-c9e1-45a5-b839-f6c6b21ebb32",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1659a4ea-6edb-49de-8604-7b3b31293d8f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447aca23-5be4-4b55-a045-9933be481578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "603696ed-190d-4d72-85a9-d06f8f3d9e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dffe53a-d77d-4f15-85ee-b9cff42f69de",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5a2660-7d47-4c5a-91bf-d846c0c3271a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e28261a-255c-47b0-9096-fbe206e9a5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7c5dba-bd5d-4085-921a-bc9f97ce261c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdf520e-2eaa-4c39-8ccf-e9147cc35e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d9ce5e-659c-48d4-bcc4-7839a14af226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfb302b-8c96-4764-98d4-adb39605c837",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a40c9ae-b128-4448-8740-c317808b9d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb6f8a3-0164-4f6b-a46d-1a069102246e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2482e34c-5cf0-46db-bc54-7b389995ad54",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba56ab7d-b6e6-4083-84f2-88c677ea77bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4f9755b-7e4a-4a72-87fa-166ffb14c942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8e3dab-4118-44fb-ab6f-996562a5aeab",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9baab2d1-1ede-476c-8733-1c6e10d9c1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b2ca7ca-eeed-4da2-b2d2-2905fba3076a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b744b6b-7776-40f0-aa25-66e39a62d1cf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186d46df-d6fc-4ba4-bec1-6109e5d15717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994edeb9-9eea-4657-bca9-769c6fbc563f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "127b571f-37cd-4e8b-9beb-037c34df5e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192e13ec-33a6-4746-ac03-d31ef4ef9f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2947cb-9cf9-4e35-8281-ff28bd69515e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a280e620-3819-438f-a402-3ef5fc94e435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "984ff804-7c49-4953-9650-a3cb7ee99185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5935c70a-b1fa-4e99-a965-8528183204e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c45c786-bd96-4786-84ad-db2bca999380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5b8b5d-0210-4e95-ba0e-6a66700f1981",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967c6fd2-e6f3-4ca8-b30d-b2783c7e5b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ded0611e-6cdb-4845-bbea-2dcb06acd361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "590b9d60-b380-4fd8-8245-dbfea53eb7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097300e3-3228-47bf-9140-ee5761297631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17530629-a431-42c8-a508-d81577f253b4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76172c0b-bfe1-47cb-bf06-e65e1622b618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12eeb282-d961-4eab-a709-376781314cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba89c507-a4f6-4912-b21f-5577be599aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8593507a-fb54-4ccb-81a6-af93494464f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fbcf2d-b888-455c-92a9-210efa3bb9dd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e444333-88f3-4e5c-bc00-a425307f6ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e564acb-926f-4b7d-bb33-4189d98c99c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1336b138-95f3-4d80-8fcf-7e0731d59847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262464e0-c2c3-4ecf-9ff4-8ef4741be908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dd6e19-6b9f-4e3a-9b59-a52234eab047",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9210ba1-ca6b-4b8e-953b-7c1d04d52090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd8d18d-4cc7-4bf0-8a05-11597c80cc1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12f8421-3316-4d85-8fda-8eba764781ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b85e58f1-4663-4995-b9b5-6f74061b3d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d686e8b6-587d-43aa-8479-381bd3e18ca2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674a4272-8bdf-4c40-a4f9-86baef9d2873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ac0b102-3112-48fc-be91-889348dfd345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7c4f89-4a87-444c-a87e-daa974085140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1b2368-2bf8-4a2f-ac9a-b59b10c91f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34c8c3f-a763-4e39-93d2-17f34bdf55bb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c080658-6c8b-4b6d-9014-f149f6e6ddab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85e9811c-249e-4043-a62f-c9d745d9bd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986de8b1-f4df-4feb-a0b0-91e7304e9632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3246863-455b-426d-9ee3-283343e4ed1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823e7152-94ce-4772-a3cb-645b8c65cb28",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a4799c-b5dd-42ac-a4f2-d22794ccb31f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15633f3c-1e6f-4de0-a661-ec8a31d04f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "403183ec-375b-4cac-8149-7edaab7aef02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2030972e-f2f2-472f-b013-0a80264012f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c610ac-d2d4-40fa-9096-67b9255ad974",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544d20e0-5b4e-4a11-9510-08e53ae72f39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790bcd9d-97c8-4766-92d7-44f40230a434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7992f0fe-a132-4069-965e-29056a72a681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7cdf02-e07b-4cd1-b5aa-8487bdec2824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f2d8e3-cbe6-42b8-863f-5b49dea3e023",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c9ea67-1968-42be-b299-06c4203beabf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20868cd-da2e-4eb4-9ce9-454289122763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86ac6c4-c3c9-4cf8-945e-445d97a535e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273f7729-1576-49dd-bcd7-63325c354a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d4027d-fb57-46a6-a34d-0499dfa00267",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99192051-10b9-419c-b901-814973086d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5c3629-82b5-4654-abcc-1682de2c1f6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e363e4-34e7-4c45-b865-143acf8c7522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5c2cdb-ef5f-4d27-bf28-5e1e9cb26e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b566c74-dfdb-44d9-a5e7-d99d00d8a195",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7aa1c41-b6af-4694-9252-829bfd6bbe03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2862b4a6-6519-4630-b314-8fe12ada4b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa40685-7eda-45b7-ab3f-b18aedde4516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb59da4-e923-489b-936f-110564b3b5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be498d03-d3d8-448f-8578-45322b9ab23d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39effa1b-bfd1-4a39-8f91-2904f3fea4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7cedac-20c3-4147-aac5-7aa3fd059f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc6f058-77b2-4f2e-b8cd-0945bef33280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ac2248-4636-4f29-9e75-11580d72ec9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67c5585-7b1e-4885-a9ad-512cde914650",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1f4fd6-9f6a-4eeb-9b91-425db2b02fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ba1a5a-239d-44bd-a005-999de4b40d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1cf108-1493-4bf2-9dc1-3c84ddf890e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b54f661-b281-494f-8b46-fb953334138d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cf91a2-2f9a-4ad4-bdf5-c6065ec3e4cf",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b1961c-ee62-4bf4-92e1-e1f265bfb50f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55957b4d-d1cf-4051-8317-9eb2c1712c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2d7802-ce60-4aa9-b234-4d15c6ddb8ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f725cefa-cad5-4308-9f9b-4d3356783628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f71e6a1-b187-4700-ba52-3a86b6c27df6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474e40c7-ddb6-44db-9773-5619bdb74627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682d780f-f778-4741-9034-45ee2264beed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3092e0e-0b55-4bc2-ac5b-79935f412ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda945ec-db29-4f75-b50c-cbf6185805d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2ae6aa-1cb9-4661-a676-3c884875d0d0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618adcb0-48b0-4f8a-bcd1-1ba565dbba73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26f120e8-f077-467b-9369-09c0d4ae2dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a8fefd-e05a-45e0-a57d-e83e97377dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69e4240-6a23-46db-ab5e-1d32f0c69371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0820db3-71ab-44ef-8d4e-12437464f99c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54106630-46b9-4e13-a75c-cef68ed864dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da95554c-6b3b-436b-b100-730560b1c3d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4907342-8de9-455f-aef5-2fd75b0cad53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93804510-23c6-4a34-bde0-6cf7883cc7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56d9235-d999-46a0-a4f8-0e6d8152cec7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e186ef-5067-4afa-b8f5-f7469f96173f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6172b72-dadc-41ff-b884-a336ab5d6655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc2deaf-0f47-42ff-847c-0d0e84437f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ac5ab5-af62-4f7b-b07f-62068ab6e4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298d82ec-c7f4-49da-9a14-f9556480959b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c8bf8f-8238-48a8-b574-098253ff6eb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb7d4fbd-ef48-453d-9247-5102a57adc20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "344a605d-4639-46d6-99e7-465eea553530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42adf96-25e3-4f4f-af21-59383e188c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f4a678-9634-4c18-a224-c611c1a39bdc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3026ca30-51a1-4019-87e0-0df2c1dbb0c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56201078-abfc-4c31-a7d2-ac3ecc605a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781d21e3-c91a-438e-806c-bdfb35c83e2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e1b5b5-033b-4190-848e-623c1dc332e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51dc7573-2ba1-40ec-bc44-99d188c3949e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e07426-447c-480d-a002-d914f6c410dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22e9d72c-88d7-4b53-adcb-cab0d5b17d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "400b83c6-4a7b-4a0d-9b2b-7dccd866e1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8360f5be-56ac-485f-9a6e-3c6f6b9b04f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abfd911-f6ec-4f97-a53d-c3d5b4acf8d8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5969aa-1a0d-4b43-afdb-f3735ae284a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "327a4da5-2ba4-42c8-8501-e6e8c45bde18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60570923-77e3-4d81-b856-29ecb2daf8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb693385-561e-46dd-9857-b179d39307ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6d437f-fbe5-4b5e-88b3-70a051f777f4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009df6ab-d877-4c91-aad1-0f3cef1973cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e469de24-7e53-4287-8bba-074bcaf78e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c388efd-7849-46d0-aa71-3daa70b22aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "633aecdc-5c83-4fa4-9004-33648b81c3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a4e90d-b2a1-484f-846b-e16c98aead55",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec5edae-f953-495c-8deb-73e23424179d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a21b4e5a-2a08-408a-a16a-b276535ad60a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d3db94-254d-4def-8283-b6b3e05827c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84981304-2250-4a82-b4fd-e664720ccf79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbfff83-1b9b-4c17-b7b7-5231eb10c0df",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9246f4d9-0aa2-47bf-a823-7500d8c0f995",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6b0aaa0-6758-46b5-be59-aba00212f6c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7ceb39-16fc-4699-bae9-da3e80ceaea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179c52fc-7b3f-48b5-b775-14e4e925c9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737a367e-8dac-4ba4-a217-f345f7d937d5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fdce3b-fba9-43cd-83bc-15294abffcb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1252114-1250-4dbb-a0fa-81ca0767d236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c55835-e346-46f8-a2df-ae7abb84ec15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871f19ae-0de9-4b33-b04f-69abc9cec2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0113aad-7ae8-4ae7-917e-cd7f62c6ada4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112e2dd8-ffb4-4355-8786-6b52a28f78ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad373f34-b269-48cb-a4df-a5aa8e0981bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d14e19-bf81-4deb-b301-28ca5aade7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef9f185-5854-4462-b757-5c499bd85846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ab14db-0097-4a1a-adab-043d178a2ff1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c68a41f-a04a-4621-ae9d-d153bb0528a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf88dd48-2a58-4f73-b912-bcaf5bfe8e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "569d1a5e-7f6f-4769-bd6a-cb05fb270694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef7ff42-252d-4e13-83f9-4d830ca44768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d728087-43b9-4188-b53c-76485119bb11",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead17f86-c316-48a9-a93a-726b5ca72080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e6fae8-a032-400c-93ed-f0ddbd42033c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f00904-dc33-44f4-a56d-7b190227032a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f7f703e-c344-4a89-b95c-8af400e24ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc390c0-4b40-4468-b02b-55867db60555",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b5f82e-8200-43d8-9202-9872caa9d0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c1c1a15-9708-40b7-93f7-377b9bf186c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5255c2d7-e8ee-4be7-a18b-2f90489ec0f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d0aca9-e363-4ae4-9f6b-7411d979477e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613493a0-ff8a-4ce4-8eb5-e1ba2d13f339",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d493c1f8-2825-4a65-992f-05ae16e914f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536ad26e-1814-4862-b2e8-ed562aa6d2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3308462-b700-4b84-9275-2fb4dc49621a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd8c67e-19d2-4bce-b116-d0ad4812c8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c65a06-f0dd-4957-bc66-9d6bb8066ea2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc92c2eb-29b9-447f-86de-7e8f65e4fc2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ecce147-7bc2-481f-b493-a6c71f91fe9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca8194d-86fd-4bda-b854-9dd678cb40ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8cb500-7961-4e22-91ee-e4e1b9d85f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd43d385-986d-4577-aa66-213673368114",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5cbb100-befb-465b-9bca-1c4715dc894b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b321f7f-4213-42dd-91f7-ccb4cff4ac9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93f24af-830d-43e7-a6b3-7359ca45613d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719b5f64-cb6e-4e34-95d5-856042f68bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f45076-b103-4780-8055-b5133934d2ff",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edad9b9f-80ec-45c0-b3c1-04b24b818ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5603983-df13-4dde-a2ce-3145b9528a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc4663e-a092-41a3-aaba-c4107294588f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2375a6-d7a4-429d-8101-e3efdf8781f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0de0c14-c07d-46f3-a66c-6dfa58a343a2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528b8b8c-cdf4-41b9-90e4-f30cc8164de5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3104b11c-f5d1-40bb-acb9-fde056b23770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99073963-9778-4c6b-8709-47681d8c2551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e8dca8-971a-490e-9b80-c514ed61722d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e080f899-24e2-452f-baa0-1f9e8384f376",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccf4bd3-20e1-4a40-9916-4161870c4555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2713da24-c132-4758-866f-9bf4b2ec691d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a839b008-3bf6-42f2-a2c2-84bb274ec5d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "360518ed-5724-4fe6-b188-29630ea13d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de8c687-76f9-4fb9-894d-1040a0dbed0e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed418167-990a-4043-9004-aea84db0dca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f3ad1e8-5868-46b4-9211-a7b2db1b31f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a1a707-e2e1-450e-9d24-5dafd04c7d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb335bd-847a-4cac-a7d7-a9e319a6821b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a57034-8d0d-4226-8a5c-b6ed2b3932ec",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23707dc-707e-4f66-82eb-ea7241d2ae71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18323af9-ca83-4fba-981c-648b09011423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef99501-6c28-4df0-835b-c4589fc0fd53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7abc05-f55a-4804-9774-5863ce4e2bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7803fec8-e96e-46c9-b16c-af0ed9d0b4f5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f503068b-5790-45d7-98b2-138cd68c2d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7816ee82-9daf-40be-986f-4963730bef64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5b8a0c-51d8-42d1-b8f0-685470e2267a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9857fd0-0c10-4fa6-8746-1dbdba16f723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d13ea21-f9a7-46b1-b80d-bb75768a9f26",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd10068-9390-43c7-983c-1095ef4f3d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b77d8e-c638-4c08-9ea7-4855ad5f8dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174b972b-a107-48ab-9922-17b036e4ce78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a5f5d4-5b64-4a1c-8307-9ab5b8b51cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4022b4d-b23b-437d-a818-e2a4f7acd46b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44fd228-fbaa-47a8-8e6c-0ac386944a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a3357a-28b6-47b5-ad3d-7963004bec30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566c4d0f-6ab8-42f4-ad70-dc979234d1f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe8bc16-c34c-441e-8698-f2329e2ee135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a012f1-8754-409c-92cc-712e5106c5a8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91e5688-63ac-4811-9a37-bb8e6127389d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2a6e9c-32c5-4f04-b198-4f4ae5379341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13954b7e-8066-4f64-95b5-7c7934c89079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482ca8e7-d2bc-4951-85d5-983eac914575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4e230e-c222-4325-834f-e3d4efbda858",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca6d9c0-51ce-4612-96d4-3a832fbe43ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9281da4e-0be3-4e8a-8659-ab87bfa3cead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d623716-8b93-4903-b081-6a385db58ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f868ec-4c1a-4fa1-9c10-2f4ee4dcc6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a9f353-dd31-4a64-bcc7-76f050704168",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74721c53-4771-4809-9b88-64f208e02937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31fcc450-4010-4763-ae06-5030787a23cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5631bb9e-bec2-42a6-a731-e9e84eff98ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872e65ac-e7ad-46e0-9033-972fcaf98a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13117c0d-2698-4fd8-a3c3-393ba7143f12",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e31681-908a-46e5-9bd1-1130c6508a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84024433-886b-4985-ba2d-cedc3f20d100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1575d4-a773-4f44-a683-ed2f77a7567b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd39383b-b647-4b8e-94ea-36018400108b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccafb4d7-d491-4c67-9618-4d5619ebd611",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d48ed4d-39fd-4ca9-9e67-7097dc6945e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729bcf2b-4ef1-4ea6-a8dc-004d5e3f3183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6032ab24-f76d-43f1-8f65-bf620ae074f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38dbcdbd-f1f1-4c41-a41a-2f38b1ecf8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce92f5e-0706-4c7c-9b8a-c013ed1b90c1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4688823b-2992-4938-95ec-ae3af3e9d907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e30d4f9-517f-4304-8379-dbc07f6f562f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aac3e08-5b81-4f3a-b348-3c98a7f44796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9640b2be-65dc-4b26-b398-31eccca9e003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351dee95-b646-47b1-ae2a-726ea44e2783",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2a242e-6b4e-4c25-ab6c-454aab1863ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121efc0a-c5e5-4217-988b-4be24deba7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86a3b34-0592-48ee-b855-2698537f2343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f51c0d-e929-42a0-b5d3-9ceb9827deff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ac8750-ea10-4580-9d1f-e8fe7582cc0d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b06894-a14f-4715-a9f2-57cc09896087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b7e44a-5439-4d98-b70f-deaaa4b64eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bb316e-ed2c-4ede-8fc3-2de6c290bde6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83e43aa-7261-4d2c-bbab-1ba9d9ced9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45aa4371-cdc3-49cc-be0a-255b8c1a0118",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7660f970-9172-43b4-a5c2-626eeff9ba12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4fc19f9-750c-4133-893c-3344c9426e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b469827c-716b-4806-b0da-592598ec04c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f85709e-e5cb-45e2-8343-799990e4bd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da477ee4-1cde-4982-a501-2ec7cec50629",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858a0efa-d53f-4c4e-b48c-ef66531c85a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f124684b-8911-4acb-8530-431ce12179cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7378a43a-b731-40e1-b664-30c95de328ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24fbd77a-0000-461d-8def-358786259288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd636580-f629-469d-9278-65f85edd206a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4600e768-c8a4-451d-9387-3bb9eb9cf173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be858d53-4b98-4e20-b364-5e6aa7fdc492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4013c27-63a3-4e14-822c-450456a916aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69d2bab-a5a3-4367-9006-a97d5001157a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bf9b6e-96c9-4043-a27f-00e70736e30e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102ca809-7021-44e5-b12b-8d573cf9c110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb70fa58-8260-469f-8be8-08eab0943b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd920af-df0a-4644-942d-b8d8e484125d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1bf8840-b6bb-4fd9-991f-1eec13f7a752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080311ad-8b7f-45ad-a084-891d72be0e6c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d019a6f8-8384-46e2-bc40-e921a7a06eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8100737d-1400-47b0-9e9a-bffc90b08bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177666c4-01ac-4e90-af17-2a29c29df877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58719f2a-da0b-4e25-a09f-305b6d4e5c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca633f25-88b2-484f-934f-fdeb57c311a2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e01d541-207f-4299-b2fb-b6b38103d8b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd8d0c61-f471-4632-9e5c-e85858ba740d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5380704-da26-40da-8f01-a8e65830c1a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89c8784-8fee-4f6c-a954-96f69e3525f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16aa84bc-f954-4ee3-a47b-8c039c9164bc",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442d30ab-e8e9-45c3-9c67-74c02e48c528",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a39a2322-e9ad-424f-8372-2224fe2560f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff0d747-eabd-4e0c-a1e6-ac6029d5436a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4d11f2-29f9-4710-a9e6-f12ca5e4c11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a7d9a5-c424-40ae-a0d1-658ab5597987",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7f01ac-5218-4ad6-a7a5-50faee3d1e75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72a9a942-b4a8-46af-9eaf-da765eb5db95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c14402-f107-47d9-8b41-34879125570c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf417bdc-0f0f-4010-b46e-5a791d66e8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5d920b-84d7-4475-9de1-1c77729b252a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9960e9-546a-4783-950e-53ae96282fb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8c3c4c9-c9c2-4961-9a8d-6641f9a56899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b7d66f-3553-4456-a3e8-659ddc505979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fd1950-8004-4d3f-840d-ad1360e16347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3478785-a2af-44b4-bf16-1b806efbfef4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a035aa-e70d-45e5-8fc9-326e970e902e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dabd369e-5106-4f5e-bb6b-fb9f0a6010a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4fdc42-3937-4e24-a937-7162e59e2ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b5e0f1-7391-40d3-91eb-422ce6202b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd75597-9230-460e-8a0d-97a83a08c778",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decad3ac-9aca-470f-acd3-c590a0dcef61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91a0d3eb-8e02-4376-9410-31b5bf889bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a684b8-e0f7-4040-a0ab-6eb07491575e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f3283fc-8691-492d-b255-8fdb8e23503f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4ae3a7-0bd2-4042-a04b-c8719d19c59e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef78c63-ea27-48de-81ac-899cad31d440",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e280f5d9-698b-4e64-a5fd-041a28e6b2c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7db1c9-75ec-45d4-b896-371a66ed996d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2327c5bd-e1d2-4e99-9dc6-e72e73653e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f529c5-7749-475e-9f50-f8c6af012a7a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7313b1-33b4-4665-8a19-a90133fc512a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98409952-04f3-4dec-b029-49283fad3e16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3507d7c-a02c-4390-a687-44d534337b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707de644-bb3c-42b9-8955-c66a2b14e053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3509ccd3-4367-40c1-8b23-b48efc2f2149",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272258ce-2d0d-4a69-891f-0f27a22127de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c10020d-2d1b-4aa2-bfae-61216d5c4e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ce2d91-4112-4fd3-b63f-d6b82b7634ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f37c787-319f-4f51-bf4b-63f8e369900a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b64b37f-5ddf-409b-afec-e083bd4743e4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60a72b7-dd74-45ae-9502-f560244ad84e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "362feeca-e467-4611-90f2-18bea23079a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e28d408-e00c-48b0-9cc0-a9b399d9ad1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25770b8d-4df3-47e7-bdcc-b2e89391bd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33c38a7-d254-4826-8704-09223b47fe5c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8607a05e-fe3f-476e-b0c3-82e0baa912c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d77cd31b-2922-45e4-baaa-811f1666f6df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbead14-74e5-40a7-802f-edc9dd19afaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ccb2aa0-7405-4610-9e24-4cac8786e82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f438e843-396e-4eaa-909a-010386bdc994",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fab5b6-a6d5-4f78-a821-b64873896ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fffb6fff-593f-4bcd-8205-47175ae2c304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "982b8801-3956-47b8-9695-16c08cf52c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4eaab6e-d2ae-4c32-bf16-2c66c4fdf366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee92d7e-a648-4d70-966f-1c0e05496e8e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289b6f54-ae2b-4178-9ebc-39886f4faa6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13b54c60-73b8-4ae0-8c9f-4fb224e17efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f483a5d-15a6-4092-a2d3-4545c47d3348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "023e076e-e2c3-4e2c-acfb-1fceca1eeb71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f26ad8a-058c-4158-9b57-8b6a03f873d0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d99321-9d57-42f7-a3e1-3610a9ed769a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f808ec2d-db28-4608-9acd-516eed7850c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33dc04e-871f-4642-a43a-82335962dec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7a9288-423e-4326-9da0-f959e96ad5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f65e616-b580-44e6-9da1-df22e485eff2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b92c937-7c28-4868-8f2e-7d8a2b1f7869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c474e0-776f-4931-a6f4-dc559c7743e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a98adcd-af9d-463a-a3a7-7c98b78df328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aedc22b-ce70-43d9-9b14-504269d37171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab63122-482e-4c2a-b6c1-e55fcde04ff3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5014be64-3296-4130-8d81-5ff983c3872a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9023266b-7929-47eb-9c2e-e5a9d13b02d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2723884f-7d30-4e6e-af12-b5eecb11c27c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922dbad0-f601-4f12-9ae7-3fe5df0026ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9dfa0c7-799c-4bea-b915-6825edd88bb6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1355ad1d-f744-49ad-9fac-91560bd4d2a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23d3c696-4692-4ea0-92b0-2b34838dbc4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34286f5-2ced-4fd8-b530-c7f837646273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a049d503-9835-4d23-ae9d-25a1c81cde17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47f0bb2-9dba-4c2e-85d6-e17b7a626188",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7850c0c8-addb-4a21-833d-3f5be731c44f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adba0fbe-6b26-4dae-8b06-d75510b6e8b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66b9ed6-d9d1-4086-84c2-2a9b4faf7a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ca4b9d-d021-4a19-a9cc-c9dc930223e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5609c989-f5bf-4661-b154-ae7a3b7e52fe",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e457cb-2fda-450e-a4c9-85385db7cd84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9af34833-96fe-4feb-98fb-beb9ca95ad22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d81cb1-beab-4844-b87d-e11d1b59a2c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2137b151-4099-4007-9b77-8730f78592b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b665d306-2093-4bab-a308-478170928788",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84158f4a-7f7e-4ee3-9b46-531f0353f5a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "636f51c0-8bc2-4a64-a5e5-bb9636710382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ff0ca4-6143-468e-9cee-db5cdae93dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c92003a-242b-40b4-940e-4b150cc7e62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bccee9d-5ed4-4127-bf4e-37ffb2db07bc",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3f4dfd-50e6-407a-821e-8f3ecaa46b0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75535184-987f-45a2-ac74-3e8f016d007b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fde79a-97b4-45db-a899-442a8e7c6dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d56e3fed-af97-4e7a-a6d4-aef89ed75e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8931963-aaeb-45b1-9492-546b960e4450",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051e6cad-343a-40b9-8306-4da673740e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "341637fd-807b-4daf-a11e-1764c5e4da80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7120d0e4-221c-4544-a878-9c97de3d3300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "936e9746-0af7-47c5-a596-636bac54feb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd7bfe2-4388-47ae-b34c-121483a057f0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1ec76a-e88e-4171-873e-27ca0e0e69fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a9c399c-9bc4-4c8f-aac5-f217b5eb07af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbc5748-35b6-4d8f-b284-f8c8587a2dbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be33df6b-c90c-4fe6-aaf6-bc02f9544acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d806704f-dfdb-4cec-88fa-997c95f90148",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f580621d-d3f1-4588-b030-0fb6b52b56c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3224924e-b278-421a-bb43-9f210a16828e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f692d3-9aeb-45b3-bdfc-80e905127aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51130ab9-1942-4648-9d38-be02a34a5aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd17d53e-d5d1-450b-9b52-201683330883",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1768329c-60e3-4f0a-b4a2-f7fafc91396f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f03f7db-d3d9-45cb-9da5-e0af04c82e55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98809f9-16cf-4352-afcf-d8480c62189e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467e0329-3577-442c-97da-c0b4e00fcb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed26e37-aefc-4212-bf8f-ae15f8d70bef",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b954aa-95fc-4399-8ffa-2d9000f8a930",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e8e9519-b981-429c-9b61-a4bc44dd353b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c822d4d-3d12-4dc0-90b6-6f36d50992af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e88a9c-0a91-47aa-92b3-0277a81293bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c61a21-148a-425b-8953-0ac1de965d72",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425a62ac-689f-4503-93f2-7cba68bbc9b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e9b0e77-7d1b-4595-b8e4-5317c33fc529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5058213e-8295-4a73-b687-10c0eebcb530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f07847a-d5ac-4cbf-8905-c45b05e60a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bef98ce-f0bf-45fd-a023-8be3fa47a245",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89a8ace-3c0e-436c-90b7-bc1b207676c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85a2e5d7-238b-41a7-b713-214a336df5b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "036c8342-8e38-4ff7-b2f5-eefad3d9c289",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d7c751-d9b5-470f-95c3-c207dcd55471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31afe11b-7285-4eb0-9354-2a61b601a29a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89161d3-1c3d-46b1-8416-f34ec38fefb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c91a780d-fbfb-4c4d-a2a9-4827696bb5bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9baa69be-dea9-4754-80d1-c5dd3f290511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0355efe1-21c8-44b2-9fd6-e9fd79579c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb6f4f3-53b6-4974-92c2-4311ca86e728",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef55c60-11f0-4762-b5d3-a47737762a95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c299440f-c1f3-4914-99fb-2d60b72d8ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f220812-7f29-48f1-817e-345fa343a4ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04fcce0f-97c4-443f-bf9d-2b6d8c4c3db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69afa7d3-249e-4bd3-bb04-c8d2e8019ea7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28cb14e-4879-4e63-a07f-8e1b1e240bfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f43b7f3c-8e34-4026-b295-932c26e642ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22afe815-295c-4d48-984c-0c0040c17eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8d39bd5-a022-4264-ba5b-384855ff027d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f71a048-d6e4-423b-8a23-e8757d11edd5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0785e9a8-0611-4eb9-9176-75fbe599bd49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2590cd6a-1b5b-4384-9321-9fd98aab3dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0966652b-bfe8-4e8e-a324-e4d5f1b1f32d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f69d9e3-2fa4-40b3-8046-f21d255f6066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83366c1f-21d6-4739-9b9e-c61dbc2c8a3c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4358120b-e365-4e01-acab-b24198ba29ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0676b9a-a675-4b93-aed6-4bec0fd08d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cd3c17-f7c0-45a5-b0af-8ee9463997b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e53f68c-e9ca-4b7a-bad2-9e15b8a2f69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca77d1a7-1a4f-43ec-aeb6-b2ecd0a38cea",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9365945c-7a70-4111-b85e-2e58afd4f5ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d64ae108-ea15-4f16-bc81-1bdaef894cab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5287603a-0a81-45d4-8a61-b04405ef9e1b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a67d9c-d5cb-4868-9f58-34e0f7871f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadd191b-8638-47ad-9686-affb39a06a49",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368d4e1f-b6cd-4feb-96a0-d7be7dc8c668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e47b7ecf-656b-46a8-8e4c-f88c7d9fca2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14eb3f89-eb6d-4d4a-a8b9-af7a4dd0d2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e6ab6f-085c-43d8-acc3-d00a5df56fb6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2505246-3184-454c-b19e-61cd6aa82c18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "193e198d-fd2d-4f1b-a6dc-2809e04a8b7c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "062bb2ac-090a-4fac-950e-1b15a278257a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83a7fb4b-2e98-4808-be47-6e0721ab509c"
                    }
                  }
                ]
              },
              {
                "id": "62eea467-bbdb-4e24-a93e-246f2b5b8da1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "865414df-44c1-4565-9920-acc5bfdf295c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a70f5f7-6b96-4989-8129-ce36b5457a37",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "34972f75-251c-4709-a0a6-da121fae6c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "318d3b97-e1f1-4b64-addb-52e1df753122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5ec41d2-989a-420d-b4f4-c59a16ad674b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85f3c672-8208-4e82-9b01-9957519126de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53f0e924-ac01-4aad-962a-1dd67a2d70d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5b57421-1409-4c94-a154-4c1c4ea0154f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16f086f7-4b3a-43d9-be76-e11231a891f0"
                    }
                  }
                ]
              },
              {
                "id": "414bbecd-0ffd-4851-9481-148c8cba1d74",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8f56d5b1-7e02-4d87-8b08-16d13805015b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed661cde-76bf-4838-bfba-286ebee6b9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "05753076-5b7e-4db9-8b8d-35bd5607b4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e53249-7afa-4f62-a0ba-a98f4029d5f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a66befb-5a5f-4b94-9ec3-cab464343e34"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e94daa65-30b6-4581-b5b3-7f8a33860c74",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd786842-9e8e-4850-a449-0611689e515e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bcc7cdd-5b38-4cd7-b1fd-ef72606bffc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "978d6f98-3dbc-4b4a-b458-2fcbfd0d1efa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a974209-b732-4464-96c7-57d03062a85b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20157fdd-502c-4d11-8d8b-04e094a0ee5e"
                    }
                  }
                ]
              },
              {
                "id": "8f27d4a9-2cd9-4add-acac-7aa561428511",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79706901-8f05-4bfb-b181-bbb253530dca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e6907700-5c30-43bb-bb10-0ad20c338894"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba96b402-e491-4d31-bb4a-bbb34809b105",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6492053e-5958-43a7-868c-8065746c1fb2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "825ac996-df6e-476d-a4ff-090787c4a7b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6ff5af36-a0f7-49f1-9833-383738356c5b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9d95d09-77f4-4181-ba32-91ef62bb88ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fe9f17c-7cfa-4259-8838-af72c4e37235"
            }
          }
        ]
      },
      {
        "id": "45d2404f-3925-4e3e-930a-9b9ef02cd309",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "20981226-f217-4a55-93a2-2da58882e273",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a54c7d48-ffc9-402a-a576-bbe9e9764072",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "680d90c0-6300-4e05-9f34-40cd9b030790",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947a532b-46da-45e2-9383-ae8d0f453ee1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9ad2c295-1115-496a-ab0a-8e2b08ca1942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed0762b-f95b-491c-9e37-e0e4eba647ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb0d634c-2d27-4e41-81a4-4f333352c331"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e76b3e8-fcf1-4e24-9153-85d49fccbd80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "030ef4ee-4a95-4d2c-b49f-9365f829b837"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63555734-39dc-46ec-ab99-dc414c8877cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc3df2c2-ebd0-4b9c-88fa-a94f19ae4e90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f1243eb-f5dc-4c4c-a0f1-c26d16f23a76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "95deb5a7-3366-475a-8ee9-33c7bb384112"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18619eb5-fe6d-4fc4-955c-b72d116c38c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "efbe2b16-4d3f-4a57-86d1-34c35debcbb8"
            }
          }
        ]
      },
      {
        "id": "d53f84df-9fcd-4220-bba8-4357e8b98f86",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "663aef32-9c55-49bb-9f6b-46a39074f29a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "003fda0e-88e2-4e97-a732-4ac42f25b7d1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f286f1a1-5632-442d-9b6c-3a63214ce157",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48aa55e1-a555-4e95-b547-19b8f0f080b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acad2702-8567-4884-9f05-b6f21f1cc040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de3dbe1-1b96-499e-a3ce-1f710afac8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f235760-5a77-4389-958f-caf489f5530f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b84471f7-86a8-4277-b0f4-770e661ebdfe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33131423-57a8-44fb-93c2-5e75aeef1d32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b44e064-234c-4bc1-b964-9b0fdc942f99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f551a37-fbcb-48ba-85f3-7d19d771724f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08e0c658-7c79-4f5b-97ef-8895c16e9a4a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9d732a7e-2f54-4c2b-ba5e-68f65e4f0db1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "764b9775-7e37-4def-8a96-3b8c1d202d34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a6a1ff4-496e-4199-93f6-062e650bbf93"
            }
          }
        ]
      },
      {
        "id": "2ca58580-f6c6-4965-8f38-dd0150e3ea82",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9a487030-a4fd-4935-955a-9611c44709dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67332b9a-1296-4339-beac-e80322afff5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2970fb0e-131f-473f-9012-46cb59a56bcc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ce69c8-fa48-4b2b-8702-bdfa9bc8d1c8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e7866d3-de6a-4007-bedb-ecc5451d7f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda44345-b2fe-4a40-8cf9-bdf5e78a1e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f654710-2e70-4261-93b1-cbc00c837d32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9dd3b50-c47f-49ec-af27-97f683127206",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a273cad3-64bf-4fe3-9b6a-a5e290d14094"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "21d78c62-e3fb-4ef0-97c2-00734cb88fe9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f423c06-c66a-44a4-afa7-ec68e2d51416"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a66e2aa-7fd1-4ed0-9d5f-710903fea660",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d2c1143f-8b80-4412-bbab-f8bc188fbd3c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8478b0c8-f997-4768-b036-b35ac4aa3f80",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86b74963-2864-4cd6-af15-24ca0c0dde33"
            }
          }
        ]
      },
      {
        "id": "a1e006b9-6cef-4ac3-a828-046f2c098f9c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "361bf2b9-fdcd-4663-9e02-aa40fadeb788",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57b3b636-168c-4ed5-970d-e978ded5531f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "730149c0-cc00-4971-a639-63ba8cd289fd",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83793204-edc6-4bbc-b673-7b124d3c62b9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "62aa6282-bae6-4ce2-a071-be34c648d2a9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.14736842105265,
      "responseMin": 5,
      "responseMax": 741,
      "responseSd": 88.43948888833079,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707957234499,
      "completed": 1707957262537
    },
    "executions": [
      {
        "id": "e6479baa-61d2-4799-84c3-1a46aa1806be",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "57d32b44-dbeb-4ed4-997f-a83b10a24ce3",
          "httpRequestId": "bce3ee9e-0577-4091-9453-da947f040d3d"
        },
        "item": {
          "id": "e6479baa-61d2-4799-84c3-1a46aa1806be",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "70c86db6-ed8a-463d-a816-9b340c929397",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 0
        }
      },
      {
        "id": "2bc9aa18-d648-4a00-ad8b-fee6bdce1496",
        "cursor": {
          "ref": "de17bbd8-065a-4527-8beb-9e587984a09d",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0e82e07a-6efe-4680-b30a-e6bab519c620"
        },
        "item": {
          "id": "2bc9aa18-d648-4a00-ad8b-fee6bdce1496",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6b24d7d7-3d65-4933-a366-c8373eb1e02e",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "6b02fcda-2a2b-4a79-b87b-a19c482fb5a0",
        "cursor": {
          "ref": "dcd4274c-a51e-4182-8608-21297f7ca43c",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9d8f916c-4ca4-4857-850a-4fca4e055bc3"
        },
        "item": {
          "id": "6b02fcda-2a2b-4a79-b87b-a19c482fb5a0",
          "name": "did_json"
        },
        "response": {
          "id": "7700ca05-9fc6-427a-974c-2a85e1bb070d",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d91aae-ab43-4811-8808-3769b1844000",
        "cursor": {
          "ref": "e2b00dc4-32d3-4f1b-922a-1f259ac0724f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d97022f6-03eb-43bf-8ef9-e4e0475a5476"
        },
        "item": {
          "id": "e8d91aae-ab43-4811-8808-3769b1844000",
          "name": "did:invalid"
        },
        "response": {
          "id": "80b2ab52-6c38-4c51-8ebb-29f7c1dc4d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d91aae-ab43-4811-8808-3769b1844000",
        "cursor": {
          "ref": "e2b00dc4-32d3-4f1b-922a-1f259ac0724f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d97022f6-03eb-43bf-8ef9-e4e0475a5476"
        },
        "item": {
          "id": "e8d91aae-ab43-4811-8808-3769b1844000",
          "name": "did:invalid"
        },
        "response": {
          "id": "80b2ab52-6c38-4c51-8ebb-29f7c1dc4d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffba67a-39eb-49ff-9555-a8db921dd130",
        "cursor": {
          "ref": "0ed3fd1c-5eae-4761-9927-a8440f27cce8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a5999cba-3b14-4621-9d24-e7a9b63b12fc"
        },
        "item": {
          "id": "9ffba67a-39eb-49ff-9555-a8db921dd130",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "755c3c29-75c3-49bd-9ee2-fc1bc5fc1571",
          "status": "Not Found",
          "code": 404,
          "responseTime": 84,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11718085-b526-40b1-a9c1-6689274018a5",
        "cursor": {
          "ref": "62b1ecc5-d880-46b3-9db6-93ecb4aafaf5",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7ff65277-1a37-45d1-b209-7b0936337a86"
        },
        "item": {
          "id": "11718085-b526-40b1-a9c1-6689274018a5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "64502e5b-541c-44ad-ad59-db5e65a96dd3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b097d8-0751-417d-b6a3-0efade0d7e1c",
        "cursor": {
          "ref": "5504ee0b-6fc7-4878-9f09-5f65722787ac",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6c65a250-a8f4-4ca8-a85e-f7ab5f37997d"
        },
        "item": {
          "id": "f0b097d8-0751-417d-b6a3-0efade0d7e1c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a459b634-5577-40e7-a450-7041247efcbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ff113c-2662-4cb2-88d9-234995a9e614",
        "cursor": {
          "ref": "d4ed9a48-86b6-439f-aac5-727405753dbf",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ec61bb38-0486-4610-a13b-19cb2e937f04"
        },
        "item": {
          "id": "14ff113c-2662-4cb2-88d9-234995a9e614",
          "name": "identifiers"
        },
        "response": {
          "id": "2f2a6414-11b1-4268-89e6-84c4dd939366",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df2ee30-f8f7-466f-8531-5e440f78ddcd",
        "cursor": {
          "ref": "6e0819d2-dc0e-4122-b5b7-4d67a7d3f84a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "42fa959b-92a0-4714-9c4e-5398bd765038"
        },
        "item": {
          "id": "6df2ee30-f8f7-466f-8531-5e440f78ddcd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "66040ecb-7849-43bc-ad3e-102e8ca1c0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db16810b-6afd-4ac1-99eb-6e353236d377",
        "cursor": {
          "ref": "0275f4a9-14ca-4e2a-8c7f-b7637cf7b3b6",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "586c0259-b6ab-4497-98dc-882e90420fa7"
        },
        "item": {
          "id": "db16810b-6afd-4ac1-99eb-6e353236d377",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0d6c438b-beb8-4586-87d3-b9423a9e8234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436a0ee4-883f-403a-9e93-605aaaa3ceaa",
        "cursor": {
          "ref": "7322d1cc-50ee-4756-b8f4-436f31dd7bcf",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4fc13574-7aed-48d7-91d6-d863981b4d9d"
        },
        "item": {
          "id": "436a0ee4-883f-403a-9e93-605aaaa3ceaa",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c12d08a0-f62d-404e-85c8-3b12022afd46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c506c0c-e545-4211-a499-1ca497a6d65d",
        "cursor": {
          "ref": "eec1fe71-a8e3-445b-8322-29b9f470214a",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e348ddd8-112a-4f98-a635-da1ccb2e0f9f"
        },
        "item": {
          "id": "5c506c0c-e545-4211-a499-1ca497a6d65d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1cd70ee9-4fd4-48f2-87db-9c341a569a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8b2f2a-1ceb-44ab-a70c-3d58b332b27a",
        "cursor": {
          "ref": "362ee1bb-c231-45e7-a5c4-f48f23e6a421",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5eb2c9b3-b408-478f-a8ab-f86d6c7c6c46"
        },
        "item": {
          "id": "4a8b2f2a-1ceb-44ab-a70c-3d58b332b27a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "624570e0-e7eb-4e54-be72-d9b1be3b6084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2808db39-01a8-4952-a97c-db958ea8c9b5",
        "cursor": {
          "ref": "27b73ffc-adf3-4c33-ba25-a0ad1c8eb013",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3c1de606-5c59-4023-bb40-1d76df32e84a"
        },
        "item": {
          "id": "2808db39-01a8-4952-a97c-db958ea8c9b5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3c96cf31-7444-428e-95d8-32994be693b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec07e46-9cff-4709-8eaa-6ba3784d2512",
        "cursor": {
          "ref": "2e062e20-2e3e-4924-b0ca-1abae56c9354",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "72079242-0439-46ee-8b7c-3b90e5b193c5"
        },
        "item": {
          "id": "dec07e46-9cff-4709-8eaa-6ba3784d2512",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9d3697e2-eb57-4f3a-8c69-ad9832b9d6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ae4cdb-f088-470c-a40c-a8c7c26bd9be",
        "cursor": {
          "ref": "f8466219-0b3c-4fa7-a0b9-8cff9bb95ab0",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ac8a0cd3-5ec2-47c7-81b4-86eaf7750c11"
        },
        "item": {
          "id": "03ae4cdb-f088-470c-a40c-a8c7c26bd9be",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "82b7088e-62fa-45ba-be28-b2428783346e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af415a07-1a3d-42e2-bdf7-75feae45d8da",
        "cursor": {
          "ref": "f9607eb2-41a3-4d61-a6cc-fceb901cd772",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7ba9203f-7ad2-4604-932b-5e9227de2cc4"
        },
        "item": {
          "id": "af415a07-1a3d-42e2-bdf7-75feae45d8da",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ed13bbc3-f780-4ea6-abbc-8710bd569a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9062490-66ee-49dd-a97c-2a506cdb7d1b",
        "cursor": {
          "ref": "46075a36-dc00-4056-be39-45e01aad85a0",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2cc2e5d4-766b-4fb4-a3a2-f8e6505d99df"
        },
        "item": {
          "id": "e9062490-66ee-49dd-a97c-2a506cdb7d1b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6b8efb59-44cb-4d7a-ab90-eca559dcadc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f373d17-0cde-481b-bf71-32958241e255",
        "cursor": {
          "ref": "ade96802-6d2b-49af-900e-24616176ca8d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "59b235d9-32f3-4bdb-ad45-e15bc0a9b122"
        },
        "item": {
          "id": "4f373d17-0cde-481b-bf71-32958241e255",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1c9fab9b-108a-4e33-ab2f-85868a957b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a570b3ea-3616-4a59-b554-dfa08f861228",
        "cursor": {
          "ref": "0bbc77bd-0539-4eae-9765-16079265c453",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2ab01178-712e-4f5f-b144-ca3152bdc7eb"
        },
        "item": {
          "id": "a570b3ea-3616-4a59-b554-dfa08f861228",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4bf25ba9-1032-47c0-a647-fb35a555aeed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2502085-3475-431e-83d1-84b1f383af3d",
        "cursor": {
          "ref": "d81254e3-80f6-4a09-bb32-062a276a4f16",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2e97840d-3df7-4191-8cc1-5870e8d9dfb0"
        },
        "item": {
          "id": "b2502085-3475-431e-83d1-84b1f383af3d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3857082a-45e2-49a6-8541-717598355f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90d030b-0ad1-4606-9000-b3e787b44baa",
        "cursor": {
          "ref": "633884ce-3163-48b7-882c-d87b0cd76a43",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "afe0d9f5-cd79-4378-88bf-144690674132"
        },
        "item": {
          "id": "e90d030b-0ad1-4606-9000-b3e787b44baa",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a4a0ccfb-b66e-4e4b-a4d6-d2e5ba8e27c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2ff9ab-fae5-496c-bd6e-076ddb919ab8",
        "cursor": {
          "ref": "e2ddbfc0-fda9-4d4c-a3de-539e200eab89",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "828c35ec-247a-45b4-9638-bd46548130d5"
        },
        "item": {
          "id": "1e2ff9ab-fae5-496c-bd6e-076ddb919ab8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "470ac9f6-56fa-415c-b409-f199fb5c2440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dcdce0-100e-4280-8dc7-0d33fd85796d",
        "cursor": {
          "ref": "dd7dd642-98cd-491e-8573-b9f2e76fcba5",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "08531a52-577c-44a4-9d72-8fbbc183f9ed"
        },
        "item": {
          "id": "74dcdce0-100e-4280-8dc7-0d33fd85796d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ac4efc23-e268-4322-af3c-3596a77f8d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b62dc8b-5f3d-4a87-8024-cbb5cacc5028",
        "cursor": {
          "ref": "e49ddf5a-3daa-4594-9de0-47ab8db1832a",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dd686d92-72f0-4c8f-a68f-1ef021395dd8"
        },
        "item": {
          "id": "4b62dc8b-5f3d-4a87-8024-cbb5cacc5028",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "56a3fe0f-53da-4138-8141-1d774c6f2bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdc0b08-e16d-46e2-a300-95deb38fb140",
        "cursor": {
          "ref": "f24332ee-74a6-4ad2-933a-58dbb049d835",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "57d9769b-457d-4c4b-a412-7aed83dc79b1"
        },
        "item": {
          "id": "0bdc0b08-e16d-46e2-a300-95deb38fb140",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1b23a425-78b9-4020-beb0-b6a4c1a519aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4ddd15-2b8b-4e80-b368-f2c918a78a6e",
        "cursor": {
          "ref": "186fb68a-4779-42b4-b885-173fde23d762",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e2716735-0b50-4eea-ab6d-566b8f0a366f"
        },
        "item": {
          "id": "9a4ddd15-2b8b-4e80-b368-f2c918a78a6e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e3177d29-a1c9-4861-9790-36ab31bb6e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76c11fe-5161-47f9-b662-3c6f7b1f0a99",
        "cursor": {
          "ref": "a2c366f5-7763-4378-99b7-e18d22787785",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "97f0d330-367d-4e57-8d23-f935c2586ddd"
        },
        "item": {
          "id": "e76c11fe-5161-47f9-b662-3c6f7b1f0a99",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "86206415-d941-4ecb-a5c9-869f9eac2c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcd99b3-0f6a-47fa-bf6e-7aa3cf6bfd38",
        "cursor": {
          "ref": "1ec7293b-530c-4792-99be-4781d0c2486d",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bdae1724-9e39-469a-8319-ff2e5d1d4cd9"
        },
        "item": {
          "id": "4dcd99b3-0f6a-47fa-bf6e-7aa3cf6bfd38",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f5c15dbe-554d-4132-add4-0637ee5d0b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9993565-1719-4d43-9d4b-820ed7915b72",
        "cursor": {
          "ref": "52a37f29-29dc-455b-a153-1721e6fe9b60",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4df97c45-8487-4249-b672-45a36263093f"
        },
        "item": {
          "id": "e9993565-1719-4d43-9d4b-820ed7915b72",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "42e19d22-7305-4fad-967f-0dff68604830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfb7bea-cd77-4d63-b0c5-003f6f49fc75",
        "cursor": {
          "ref": "f93e208c-4f77-4ea6-a3c9-7b954d35aedb",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "54cbb4ec-dd91-4d57-bf4f-42087c30ffd5"
        },
        "item": {
          "id": "3dfb7bea-cd77-4d63-b0c5-003f6f49fc75",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "726f2c11-7059-4f68-b45e-14b4b0fb8644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670a83ed-8015-4bbd-aace-94a6a99b469d",
        "cursor": {
          "ref": "598472cd-87fe-4014-ae43-04cfa641e322",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "57525474-6ac4-4473-8caf-f061ae3fa98d"
        },
        "item": {
          "id": "670a83ed-8015-4bbd-aace-94a6a99b469d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9e650557-6d12-4ed4-99a9-26c475cae5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdc6346-d5d8-4742-a053-4fb9cb958e96",
        "cursor": {
          "ref": "c87d4186-1245-41e7-82be-7c15037180a2",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "147fbef8-0d43-45a1-b816-e5fe4ca693d7"
        },
        "item": {
          "id": "ccdc6346-d5d8-4742-a053-4fb9cb958e96",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2482cb09-447c-4df1-817c-031d876680da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd48fa48-75de-4222-99ac-f1388aab276d",
        "cursor": {
          "ref": "ed3311bc-2486-46fb-91f8-a4fba8015be8",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "be36389e-875b-4da8-b0b9-f38067ebf6a8"
        },
        "item": {
          "id": "cd48fa48-75de-4222-99ac-f1388aab276d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6540cea8-0b03-4317-ab3f-5a8a807b2270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d09772-cc17-4a60-bd63-6682bad20298",
        "cursor": {
          "ref": "486b765f-b388-48ff-b02e-a8a7d7afc4ba",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b366a70b-7646-49e0-ae6c-5058f089d0f0"
        },
        "item": {
          "id": "28d09772-cc17-4a60-bd63-6682bad20298",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b3795bd3-dd6b-4819-977b-68f21d6c6e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c6a7b5-3749-42e2-b54e-4c683a56b931",
        "cursor": {
          "ref": "2225f7bb-8a19-4d1f-ba71-e1adfd6258a2",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2f58ee0c-99bb-4704-8534-e3c5ba7593c3"
        },
        "item": {
          "id": "52c6a7b5-3749-42e2-b54e-4c683a56b931",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f98270e1-2340-44f0-9821-765582deb563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7989435c-db09-41e7-a113-bfb1be9595e4",
        "cursor": {
          "ref": "90c86290-5725-424e-87bd-64df01963690",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "84d10a60-b9d9-480a-a6e6-dd4a7816f7cf"
        },
        "item": {
          "id": "7989435c-db09-41e7-a113-bfb1be9595e4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e05df8e7-10e5-4fc9-bfe2-3e214147db4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda05c80-4b30-4ee3-b1f4-b16d369d3dd7",
        "cursor": {
          "ref": "d0ac709b-85a3-4b48-9ea5-007d864218b4",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "147c1ca3-b976-4c82-bf20-62d4023b0945"
        },
        "item": {
          "id": "fda05c80-4b30-4ee3-b1f4-b16d369d3dd7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d9afa5b4-fb95-45a1-aa14-c29cbf6b4af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213887a1-509e-45ee-b121-ade1a81263f0",
        "cursor": {
          "ref": "5b62ea80-12cc-48eb-88f8-116315d873a8",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ba93feb6-5ea6-4a70-92ff-42df516253d3"
        },
        "item": {
          "id": "213887a1-509e-45ee-b121-ade1a81263f0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "216bc39b-eade-4f4d-a91b-fda0a8d24cc0",
          "status": "Created",
          "code": 201,
          "responseTime": 741,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a2035d3a-6844-480b-80d7-4a12906b0e13",
        "cursor": {
          "ref": "34897987-392b-4002-adb4-154c67651c3a",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f361def3-df89-4c2d-ac69-c48aab1fda68"
        },
        "item": {
          "id": "a2035d3a-6844-480b-80d7-4a12906b0e13",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "14f70a39-b167-4fb2-86b5-964a2d1e2a62",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9e892d8b-9854-4276-9057-9217ecd82204",
        "cursor": {
          "ref": "a5dce836-ba9a-4d4f-9db3-d44ae4dd6034",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "47a1195b-28ba-4203-87d0-c288019743b4"
        },
        "item": {
          "id": "9e892d8b-9854-4276-9057-9217ecd82204",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ad60dee6-fd01-4374-a5d0-9a25840b035f",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8ebcfda8-2350-49df-8027-a64ff675a09e",
        "cursor": {
          "ref": "4733bfc5-ee05-420e-a8f9-3d89f5b48b0e",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ae309047-04ba-45e9-bf2a-2826e26513f3"
        },
        "item": {
          "id": "8ebcfda8-2350-49df-8027-a64ff675a09e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "90b33477-86f4-483d-8650-bd41109e887a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b7addc-ec86-4502-a52b-25092f9dd1e4",
        "cursor": {
          "ref": "bf7d65a0-2822-4c80-8701-0d6f7718430d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b54b22e0-29aa-4d7e-91db-fab3bc3a75ae"
        },
        "item": {
          "id": "49b7addc-ec86-4502-a52b-25092f9dd1e4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "65233f92-4079-488b-89bd-46b0fb3b9e20",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "52e7175a-ebfc-48ac-b3eb-40da3389bfc1",
        "cursor": {
          "ref": "8dfd76ff-2998-4489-b311-6efc17d6d1ba",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c0bceaaa-ab1d-4a48-87ae-f2b977a4e198"
        },
        "item": {
          "id": "52e7175a-ebfc-48ac-b3eb-40da3389bfc1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bc25a53d-b197-4f17-9260-a000a94e93e4",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6d5543e1-d257-468a-8a19-44bcd3f2755b",
        "cursor": {
          "ref": "2d75d0ef-03b9-4a4d-9d1a-2a6073b8e8de",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f71f6d2f-740f-401d-9301-794591f5de39"
        },
        "item": {
          "id": "6d5543e1-d257-468a-8a19-44bcd3f2755b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0212ffa5-fbd6-4c2a-bb64-b506e4f6bc71",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2783bc25-aaad-473b-b2d6-c924b94ff994",
        "cursor": {
          "ref": "17922ca6-a323-4503-9f41-cb2eca7d3bdc",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "28fdc442-c932-422d-b712-68cf7c209984"
        },
        "item": {
          "id": "2783bc25-aaad-473b-b2d6-c924b94ff994",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d55833b2-f1ed-41da-a055-f51c12614577",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a7f318e5-eb7c-418f-a25d-07aa3ad3cdf3",
        "cursor": {
          "ref": "1e93f3b9-2733-4bdf-9d9d-454bc6cc3721",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "786e6014-bdc8-4b39-93c2-d001d820d002"
        },
        "item": {
          "id": "a7f318e5-eb7c-418f-a25d-07aa3ad3cdf3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bce2e3cb-e9bd-427d-abc4-d97a0f4283f0",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "912b7878-e47d-45d3-bab1-559f06b688f5",
        "cursor": {
          "ref": "13f15cb8-fc32-4895-9564-ed020f0ffb4f",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "93e83af2-9d1e-4270-87ab-d9c1392a7419"
        },
        "item": {
          "id": "912b7878-e47d-45d3-bab1-559f06b688f5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0f3e7606-f9c3-4a44-9290-fe996921db33",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e749496c-0324-42ea-878b-37fd750eab03",
        "cursor": {
          "ref": "2192416d-16fe-496b-b18a-38e707ad827a",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4e12c545-fbe1-4548-969b-7d4425b7c3ba"
        },
        "item": {
          "id": "e749496c-0324-42ea-878b-37fd750eab03",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a2c4cbf7-1d7e-4f6d-a3b7-0f49c47173be",
          "status": "Created",
          "code": 201,
          "responseTime": 437,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f79d7880-bf5d-450a-88c9-16a8a436f158",
        "cursor": {
          "ref": "94554284-953c-4c1f-a501-cc9138b27a41",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c7be40a5-7b2e-428a-88ef-5c0d1e5074af"
        },
        "item": {
          "id": "f79d7880-bf5d-450a-88c9-16a8a436f158",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c3cd44e2-ed83-4c12-ac4d-a5c569fb422f",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5b5a3286-3859-4352-a33c-6c51abc743ec",
        "cursor": {
          "ref": "38a87ccd-3de8-49ad-9d4f-624a320e0169",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "39482bb7-9241-478c-b024-1d3a21308fbf"
        },
        "item": {
          "id": "5b5a3286-3859-4352-a33c-6c51abc743ec",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5395b886-fd12-4334-b3e5-cd38d258de21",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "054b0910-7232-46fc-819d-2025165474e8",
        "cursor": {
          "ref": "95702833-3b00-4062-8e96-35bf2fb1da12",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "646d851d-6045-409e-b66d-2118bbbf84fc"
        },
        "item": {
          "id": "054b0910-7232-46fc-819d-2025165474e8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ec9b8d26-e43c-4307-909c-7e8521ec14fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6424e3d-4a28-47a8-b4ca-188b415f8b76",
        "cursor": {
          "ref": "b489ab91-80db-4469-964f-b048f041d469",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e1882feb-4154-4675-b41e-a6c280581242"
        },
        "item": {
          "id": "f6424e3d-4a28-47a8-b4ca-188b415f8b76",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ad5c4ca8-631f-485e-835a-5f9b27a6e8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d340d3-ea63-4871-a7d7-c2110a4b5804",
        "cursor": {
          "ref": "5c8b034e-da20-4461-ae1b-a33ab4e087c9",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5f7501a3-051a-4ea3-80ef-0af39412de33"
        },
        "item": {
          "id": "b1d340d3-ea63-4871-a7d7-c2110a4b5804",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5e221924-f9d4-4b42-b535-8f37133b7bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b569c35-a710-43a4-9492-b45c6e128200",
        "cursor": {
          "ref": "84f604cc-561f-4f3f-84b8-78754dd19578",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "679c9d95-a95f-4576-9193-479bc590ce72"
        },
        "item": {
          "id": "1b569c35-a710-43a4-9492-b45c6e128200",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f9d7016c-4c02-448e-babc-53ec1f593e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ed2524-f4db-420a-b16a-77a526e867d6",
        "cursor": {
          "ref": "631a66ed-697f-409b-a824-ec4144d1161d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fe21fd74-1ef2-4780-9c3f-b0ed4f273729"
        },
        "item": {
          "id": "76ed2524-f4db-420a-b16a-77a526e867d6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3932393d-0996-4a12-9a3f-05a7b1a3138d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7be779-979d-47d5-89c0-cf998bfa77a1",
        "cursor": {
          "ref": "a6816d9f-2f3d-45c2-afae-9d9ab82d10e3",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "47c0a8e5-f250-47d5-88e5-54a3a46d78b8"
        },
        "item": {
          "id": "cd7be779-979d-47d5-89c0-cf998bfa77a1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "406473ac-6c93-4e7f-b89b-01eb96d72be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bab35c5-b3bb-4b61-ade6-917046a8d962",
        "cursor": {
          "ref": "16a02be3-0f6f-4ba4-b0e4-60a5b12fae20",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "364d0899-987b-45c9-9daf-129d6ca2235d"
        },
        "item": {
          "id": "8bab35c5-b3bb-4b61-ade6-917046a8d962",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "715c9bac-0314-4413-869b-d35009d98bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bfb212-a936-401f-a40e-e4f62afea0db",
        "cursor": {
          "ref": "f01aa61c-2470-4cff-908b-e26020ee4a9c",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7b9d1e59-a600-4b40-9fc2-43fa1e6ec23c"
        },
        "item": {
          "id": "a0bfb212-a936-401f-a40e-e4f62afea0db",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7c867180-4edb-4744-b3b1-11c2f0ca6c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a1c657-20a9-41f3-a0b8-9f26cf5f1a11",
        "cursor": {
          "ref": "087b0981-698a-415c-81f0-83851d24420a",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "639ad4cb-03c7-4d82-9ee0-d13c5066878b"
        },
        "item": {
          "id": "70a1c657-20a9-41f3-a0b8-9f26cf5f1a11",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1e967f11-b743-4cac-9c10-eaa3cc37ef08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3c0cb3-2754-4ada-b45b-fac2780601d2",
        "cursor": {
          "ref": "fa43791b-c7c5-4533-8b64-9c05bcf91c78",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e8f12888-cc7e-4b85-b558-b3e4e1b98a02"
        },
        "item": {
          "id": "8b3c0cb3-2754-4ada-b45b-fac2780601d2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "73230e21-961d-4e11-9b41-781baacddeae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971a3495-70a5-426f-b3c9-2596330ab08e",
        "cursor": {
          "ref": "eac0254c-a097-4693-b1e5-e9bf75910c6f",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "071c1c8e-5dd1-4e74-8671-55fa9cacc8c6"
        },
        "item": {
          "id": "971a3495-70a5-426f-b3c9-2596330ab08e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "93fd898d-9a39-4f05-93c2-f72b9b9cdd03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd767cb3-352b-4a3c-ab44-629260ec220c",
        "cursor": {
          "ref": "dfc467bd-b646-472f-b9c4-c6156af2edaa",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3ec4d061-ee9c-42f3-84a2-e47d739d8825"
        },
        "item": {
          "id": "dd767cb3-352b-4a3c-ab44-629260ec220c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e8633e15-80bc-4b25-a90b-e78b4e79d018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8430f4a-2677-4be5-99ed-557c2d47b747",
        "cursor": {
          "ref": "0491a542-b136-4d90-9935-925523b0a49a",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a3d9b108-6ace-405a-90ff-103e31e0c1fc"
        },
        "item": {
          "id": "c8430f4a-2677-4be5-99ed-557c2d47b747",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cc5397be-9336-4c90-8c0b-093e4cfbbdde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f53b376-8b5e-4fc9-815e-8c56e2594cc8",
        "cursor": {
          "ref": "c4edd471-cdbb-446f-854b-26677ea6fb14",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "13b1615a-bcb0-49a0-a267-546b499679ff"
        },
        "item": {
          "id": "2f53b376-8b5e-4fc9-815e-8c56e2594cc8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "67a849bf-cef3-49d8-8bc4-cfd979f6d4fa",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "dad8b262-1f1d-40cd-b5bb-2f6eed7c960d",
        "cursor": {
          "ref": "a583ec67-853c-4cfe-941b-d7fc4d6760ec",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cb019983-95ca-4987-8bd0-f4519fd633cc"
        },
        "item": {
          "id": "dad8b262-1f1d-40cd-b5bb-2f6eed7c960d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3fb2a406-c2a7-4656-a2aa-6591db28a9fd",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "bd1861f0-082c-449c-a5a0-be4a9b79e9d0",
        "cursor": {
          "ref": "32241924-1aa0-4ab0-89bc-1008da4e10f4",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e025ac13-70a1-40fb-b82a-7f7d4d0362fe"
        },
        "item": {
          "id": "bd1861f0-082c-449c-a5a0-be4a9b79e9d0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d137943c-41c2-43b6-8c39-9ca8b1370528",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "39886e86-6f4c-4a92-887c-50febde73fa5",
        "cursor": {
          "ref": "a0f33cff-e254-40dd-a9d4-1581a246935e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5904736a-2055-4aeb-9946-2e9caf514fd9"
        },
        "item": {
          "id": "39886e86-6f4c-4a92-887c-50febde73fa5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "72846c82-cb6d-4271-ad48-7afafda9e49e",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "57d6d488-f9c4-4d7d-af51-5fbcbd76b5ad",
        "cursor": {
          "ref": "b54a89c3-2646-4109-bf73-b3485c410943",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8c01c014-b59f-4ddd-8d7d-dd73cd44dad0"
        },
        "item": {
          "id": "57d6d488-f9c4-4d7d-af51-5fbcbd76b5ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5127b669-6193-4886-b570-f39d221e2c47",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7184164a-c5a7-4d9a-a391-a7a0f9a1be27",
        "cursor": {
          "ref": "3eb48dba-bdc4-4163-89b6-a47a57733955",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "bcaf4963-f437-4de1-b7a3-c78f5b507933"
        },
        "item": {
          "id": "7184164a-c5a7-4d9a-a391-a7a0f9a1be27",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "244c3586-9df4-4e33-8328-e9d311f56727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20818d1c-e497-43fe-8c71-33c60ee169fe",
        "cursor": {
          "ref": "d38b8b8d-4da0-473f-9d2f-34b4b5e89330",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "44f0ba32-1571-49e7-a275-6b113ebb7abb"
        },
        "item": {
          "id": "20818d1c-e497-43fe-8c71-33c60ee169fe",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "870cd344-43dc-4002-a32c-7cfcf2e75700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdced5b4-5df8-46cc-a3ae-e6a848fa2797",
        "cursor": {
          "ref": "625968f8-7f5e-437e-b448-de09ee5e610e",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "781d327a-a8ec-415c-bfe8-5bf698285034"
        },
        "item": {
          "id": "fdced5b4-5df8-46cc-a3ae-e6a848fa2797",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "de3d32c8-b6fb-4be8-bc07-2827eb7c51e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085f0262-b3c0-418d-953f-cde03617a667",
        "cursor": {
          "ref": "8e951ad2-c926-45ac-a290-19a8071464d2",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "923de7cd-8751-4af2-864e-b2cb6ae30c0b"
        },
        "item": {
          "id": "085f0262-b3c0-418d-953f-cde03617a667",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "21c6a5a0-80b3-4189-b42d-32ce4c74b87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffaa8f9-67f0-458d-8d87-f0208d1d635e",
        "cursor": {
          "ref": "29abafc8-dce6-4033-a615-da7dd81c7808",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "600e99e8-78c4-4d76-b4d8-0638e32ec7b7"
        },
        "item": {
          "id": "4ffaa8f9-67f0-458d-8d87-f0208d1d635e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b896226d-1168-42ca-a5d3-ee4430d80b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1d2103-f391-4e43-839c-b9bb8b8c20f0",
        "cursor": {
          "ref": "85c45c81-88d3-4c7f-8c1e-cf19d5c995b7",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "51110075-1c7a-4065-b3a7-701d60c7e790"
        },
        "item": {
          "id": "8f1d2103-f391-4e43-839c-b9bb8b8c20f0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5dad058b-d043-4b2f-a84b-48bfaacd12e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3b38d8-435f-4cee-9293-8264e6996591",
        "cursor": {
          "ref": "8ac74fba-9514-41f6-882a-ced4e679a283",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3c2ad298-4edd-4f45-9973-ecc71301ff41"
        },
        "item": {
          "id": "dc3b38d8-435f-4cee-9293-8264e6996591",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9b4cf8bc-f759-417e-ab1e-43e2679caaca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6642da87-0fc0-4752-acf1-b9a8d702384b",
        "cursor": {
          "ref": "013b12fd-a2e8-4842-889f-358b6f52a7d3",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "52489abc-f899-4dac-915a-a3aaad6acfc4"
        },
        "item": {
          "id": "6642da87-0fc0-4752-acf1-b9a8d702384b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e44aba7a-ff63-4188-9683-391e7de65154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc18256-0813-4696-9efd-ff43e4b50b43",
        "cursor": {
          "ref": "d40b761d-6e82-47f7-9b1b-a58eb7564875",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d211b13e-935c-493a-870e-55865f5a8135"
        },
        "item": {
          "id": "3dc18256-0813-4696-9efd-ff43e4b50b43",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a6485774-29d6-413d-89cb-d753c886aa82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f10edb-45e8-4fbd-a1a2-61239de770b0",
        "cursor": {
          "ref": "264b90bb-0bbb-46d2-9daf-6e9c1a0a4a36",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3d6a6b55-3acf-4dd0-86c7-b0048bf2d1a0"
        },
        "item": {
          "id": "50f10edb-45e8-4fbd-a1a2-61239de770b0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6fdecfff-5aa6-4981-84c8-bf64f17714f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b975d743-3113-436b-b9c0-6767c73e115a",
        "cursor": {
          "ref": "719d0d28-d53d-4652-90f8-40ef32cbcac6",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b59917b8-f2ad-4fa7-bc14-615b38313f06"
        },
        "item": {
          "id": "b975d743-3113-436b-b9c0-6767c73e115a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "17548955-5acc-4250-b57c-4ec3e082fa88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef45070a-4909-46d3-abdf-2345d49ffc07",
        "cursor": {
          "ref": "046697c3-13b9-4b4e-a1aa-c70420bfee63",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "35efa44b-5ea7-4aa6-a918-ddd1f3b2ccdd"
        },
        "item": {
          "id": "ef45070a-4909-46d3-abdf-2345d49ffc07",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2a1a01de-c27e-4527-976e-8135490a6edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4e50a3-a337-42fc-9a5e-90914c3350ed",
        "cursor": {
          "ref": "8246309b-5dfc-45ff-9d5c-9c64bda2bdda",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3c56409a-c28e-40dc-8592-49cbb53ae905"
        },
        "item": {
          "id": "2c4e50a3-a337-42fc-9a5e-90914c3350ed",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "30507b24-4622-44ef-b5fc-c02306013c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f89d4b7-5072-44e0-8f51-ff71ffa9f1d0",
        "cursor": {
          "ref": "0d559b9d-2995-4b9c-9440-131c09a61926",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8c07b84d-55ec-4cc0-9ac8-d0ed1a6cf1de"
        },
        "item": {
          "id": "4f89d4b7-5072-44e0-8f51-ff71ffa9f1d0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "fc0005b5-4fe8-43e8-b713-41ad3bb804a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a97f89-21b0-4051-a025-9dd53eeb66d7",
        "cursor": {
          "ref": "ecb76f6f-c071-49c8-8bcf-8e210a67ad1d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "82283b68-07b2-4b86-8930-6a8c22ec5458"
        },
        "item": {
          "id": "21a97f89-21b0-4051-a025-9dd53eeb66d7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1825ff2b-1ce2-4fb8-906e-d1c886873069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee51caba-3d38-469a-82bf-4c89815bdcac",
        "cursor": {
          "ref": "dddd6aad-4872-4258-93b6-7c4ae2c35c65",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fe380498-fcbe-420e-b623-38bc9768450a"
        },
        "item": {
          "id": "ee51caba-3d38-469a-82bf-4c89815bdcac",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "239d1947-ac97-47bd-b8e5-ba71888fe42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3327dd7b-7b01-4c00-b231-ec1f8264c9ef",
        "cursor": {
          "ref": "44fb26c8-e53e-4f6c-9036-1f2821c9fc56",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7c1e38e8-dd61-4085-8090-3c01790e34a2"
        },
        "item": {
          "id": "3327dd7b-7b01-4c00-b231-ec1f8264c9ef",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "80a4ce29-1378-497d-a889-78be8028725b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28231aa5-7aa5-440e-85ed-15f54cb2f8df",
        "cursor": {
          "ref": "cef86192-ccbe-4e67-a729-9f36885cdc79",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "848b6cfe-956f-471a-a96c-0f8d36a115ba"
        },
        "item": {
          "id": "28231aa5-7aa5-440e-85ed-15f54cb2f8df",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "244eee8f-e2bd-402e-9705-9ad8fffea9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3999f531-e0d4-4db1-a62b-f3f2d538fac7",
        "cursor": {
          "ref": "d6c8730d-512b-41af-8569-d451bcd26470",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "93bcdcd6-ec93-41b8-810e-f8c6895c3a2f"
        },
        "item": {
          "id": "3999f531-e0d4-4db1-a62b-f3f2d538fac7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8480f920-49ab-4b77-8b74-b3f8943b8819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fc86cf-3b06-4016-a3a2-085613235776",
        "cursor": {
          "ref": "bd258c2f-868c-4dae-b3f6-5fa5b5cf1308",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3255340e-fe63-4146-8a59-aae34e70729a"
        },
        "item": {
          "id": "e2fc86cf-3b06-4016-a3a2-085613235776",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "10c15c5d-e3ed-4976-8533-96a6c16461ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28312536-2723-4216-94b4-8e9c913a6d9c",
        "cursor": {
          "ref": "3991b1b3-9f80-4942-9939-ad19fde913f6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6483ca1d-d4c1-4892-9a43-2752827277cd"
        },
        "item": {
          "id": "28312536-2723-4216-94b4-8e9c913a6d9c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7eac23a0-7bee-49a8-bdb9-c84556257707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb41d70-85de-417b-bee1-1a59262c9ec5",
        "cursor": {
          "ref": "3fc288e6-a7b0-49b5-8d59-d340cd454bef",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cafb42a0-0142-45cb-afa1-5458ab478aef"
        },
        "item": {
          "id": "9fb41d70-85de-417b-bee1-1a59262c9ec5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4621cde8-026a-4f82-af96-6b387618abb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad714f2-a3ab-4af4-aaa8-d9fe205ca776",
        "cursor": {
          "ref": "e9aa4e93-cc95-4fef-8b7f-1fc69f1abbf9",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "02f4c83d-31e5-4aa8-912b-3e0453eb28a7"
        },
        "item": {
          "id": "8ad714f2-a3ab-4af4-aaa8-d9fe205ca776",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "931d4a44-1b97-45ea-9cb4-647272448a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb2b06f-df7a-45a8-b57d-cdf7f90275f5",
        "cursor": {
          "ref": "de10cda2-16a2-4490-8b4d-d8d87c2559a5",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a584188e-10b6-420d-bf71-bce3844f0c17"
        },
        "item": {
          "id": "3cb2b06f-df7a-45a8-b57d-cdf7f90275f5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5af6e07e-9b05-4c1d-bc04-385e1c838220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b9f157-8f4d-4af5-94ab-98ae94967a61",
        "cursor": {
          "ref": "5efe4cd1-80d1-4cd4-a1f0-ac061cdb2772",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4916b585-c54b-4da2-91d9-a102c31d4454"
        },
        "item": {
          "id": "20b9f157-8f4d-4af5-94ab-98ae94967a61",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5500a80b-34a0-4eec-a9b7-0adb68fe85f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05253ef-d558-4e9a-8fe2-c8eec1ed230c",
        "cursor": {
          "ref": "d0f2da3b-c29e-4c70-a13c-b098ac3eef81",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d2df2e92-e412-4a4a-ae88-24c512011178"
        },
        "item": {
          "id": "d05253ef-d558-4e9a-8fe2-c8eec1ed230c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e9106c7f-73f9-43c4-9852-622d4d972dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48531a70-3d70-4c27-9420-81ef50fc84c7",
        "cursor": {
          "ref": "a379fdf8-ab68-4e9a-9804-b6a0577e891c",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ddf544a6-fb54-4fd7-8260-06655a739737"
        },
        "item": {
          "id": "48531a70-3d70-4c27-9420-81ef50fc84c7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c38f01ac-2070-4b17-8a3f-08cbfe22dff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3a428b-5d95-4e0a-90ad-98ff1d2dfbf1",
        "cursor": {
          "ref": "b72604a9-fe04-486f-abcf-916eeb93d8a3",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6f416e8e-f4da-4d26-a0c2-217b899edd8a"
        },
        "item": {
          "id": "1c3a428b-5d95-4e0a-90ad-98ff1d2dfbf1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "672ddee8-3885-4b22-bcca-94e3b4e6f16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c590f467-09d8-4e26-ae91-cb6e0ad7dabd",
        "cursor": {
          "ref": "36494105-6814-4ba7-a7a5-78dff699b428",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4ded2349-d9fb-4fa2-9254-7f35f73193ae"
        },
        "item": {
          "id": "c590f467-09d8-4e26-ae91-cb6e0ad7dabd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "06ff335f-2661-4186-aa4f-bb714b03f21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7396ec-07ac-4e09-9ace-6cdb74c62784",
        "cursor": {
          "ref": "c3bb14e2-600f-46b8-85d0-2035d7f1e82e",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a787cbf7-e3cf-44a2-9e7d-1bb4264ab81d"
        },
        "item": {
          "id": "db7396ec-07ac-4e09-9ace-6cdb74c62784",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b8fb2584-1555-46c0-8acd-f39f27aaa330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eea08c4-b5dd-46f7-937d-eb2eecf96596",
        "cursor": {
          "ref": "384341af-16ca-4faf-ae5a-83b65a31a3fb",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b93d1e3d-f54c-44c0-a139-6bb3f6d82a1d"
        },
        "item": {
          "id": "7eea08c4-b5dd-46f7-937d-eb2eecf96596",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4727b655-4b76-4ccb-aada-cb32815661eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3868612c-37ae-4f9b-a7cb-00bde8f98d8f",
        "cursor": {
          "ref": "f576cf38-438f-4281-93f1-669228900b2f",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a7fb1965-841e-481a-b14a-9eee8c561b51"
        },
        "item": {
          "id": "3868612c-37ae-4f9b-a7cb-00bde8f98d8f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1cef1fcf-bd1b-48ff-b657-9663064b65db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcdc725-754c-4786-a74e-8913ddaa078e",
        "cursor": {
          "ref": "51734fd5-8315-4835-8691-767a1541f859",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4ed1b7ca-9eec-4dcc-87ea-82746aafade0"
        },
        "item": {
          "id": "dfcdc725-754c-4786-a74e-8913ddaa078e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "432f7f8c-c90a-4ad5-8ff0-3b1ede965ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "cbe7449b-7a58-4ea0-81d6-6e194290968c",
        "cursor": {
          "ref": "073d185a-7cd4-47f9-8949-0143677be8b3",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6a4210f9-a630-4e23-a3a5-44bdfcb3f19c"
        },
        "item": {
          "id": "cbe7449b-7a58-4ea0-81d6-6e194290968c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "abdf0d52-1482-4a9c-9d55-ee7a48810fbe",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb2fdd1-c424-4abf-abce-4341bf64f00e",
        "cursor": {
          "ref": "d8a7bb7e-2787-4988-9217-63e592eea792",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3952e27f-9e37-4e6f-a9e5-8580848342c7"
        },
        "item": {
          "id": "0bb2fdd1-c424-4abf-abce-4341bf64f00e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "adf73633-dee4-4e51-8d25-374bd1e49ec4",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f417e3c8-5386-452f-b50c-81510aa2bfb6",
        "cursor": {
          "ref": "90d647aa-3b99-4e42-8280-9f4e5a9b7502",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3f10d1c2-9810-49c4-aefd-43b1a3caefb2"
        },
        "item": {
          "id": "f417e3c8-5386-452f-b50c-81510aa2bfb6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a2958a13-96c9-47a5-83c4-75a01838a026",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f05543-35d6-407e-8ca1-1757367ef6ab",
        "cursor": {
          "ref": "34b986bc-dbdd-4bc7-aa20-88902646c744",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f8e5131d-45fc-441b-8112-8505b5e99786"
        },
        "item": {
          "id": "74f05543-35d6-407e-8ca1-1757367ef6ab",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e2ec6f8c-8e70-4b17-80d1-8f99e6dc91bd",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b69efa7-50e8-49b7-b2c7-c6e19b940b7d",
        "cursor": {
          "ref": "8bc3fd38-85e1-4449-82a1-fb71b424ddc7",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2c56831d-ac1c-4543-a1bd-acbbdd61ca71"
        },
        "item": {
          "id": "3b69efa7-50e8-49b7-b2c7-c6e19b940b7d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c2c18480-7b14-4f29-b6e8-e6f0f185cb3a",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-15T00:34:08.842Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-15T00:34:08.842Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6ae37f69-a01d-4238-928b-ae188ad94dd2",
        "cursor": {
          "ref": "6a250bb2-cfd8-4dca-beaf-41c094f60e43",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "88ac4621-5dcd-454b-af59-ab1cb3891457"
        },
        "item": {
          "id": "6ae37f69-a01d-4238-928b-ae188ad94dd2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "65acd127-7160-41a4-9593-907d651d2c9e",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72f1f38-cf88-4564-a1be-2a0d937aa3ea",
        "cursor": {
          "ref": "0e7e882d-fad8-4e26-87ec-84057e603317",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "067d5af0-fc6a-47ec-a6a2-cf8a4ab1227f"
        },
        "item": {
          "id": "b72f1f38-cf88-4564-a1be-2a0d937aa3ea",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8cd20d4a-3fef-4664-9f2e-fa3f97c69fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7994b82-05d3-4578-9401-2958f00a4ffc",
        "cursor": {
          "ref": "dc5d1048-0cb1-46ef-8ae4-bb6a9329f38c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6003455f-4cac-445d-a3c0-31cf85e6e9d0"
        },
        "item": {
          "id": "c7994b82-05d3-4578-9401-2958f00a4ffc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "60016bac-f6b5-424c-996b-19b3c1eb454d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b882c8c9-8a9a-4baf-afb2-9236ae690336",
        "cursor": {
          "ref": "360574ea-0de2-44d4-8587-97e823ee9299",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "765794e4-b4f5-4c31-85b0-82cc6d7085fb"
        },
        "item": {
          "id": "b882c8c9-8a9a-4baf-afb2-9236ae690336",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0882b334-2d59-4735-a082-b1ae51706a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f16b64-9df8-47be-8b65-960e3ff4b0b0",
        "cursor": {
          "ref": "c9dd1f6f-79b2-4183-a921-a7acc36d5f73",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "445ecd78-e1e0-42f2-bade-b7c0a8467224"
        },
        "item": {
          "id": "73f16b64-9df8-47be-8b65-960e3ff4b0b0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "83e484eb-a0cf-4288-85a9-157d18c9442a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9046e2a9-39ed-45ff-8fe8-e9954b9b9670",
        "cursor": {
          "ref": "cae216b1-b26e-45de-a4a1-98fd54ecc504",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8dff4c9d-da7f-4092-9460-0a55c6d5993f"
        },
        "item": {
          "id": "9046e2a9-39ed-45ff-8fe8-e9954b9b9670",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "485440c1-d78d-4909-bd70-d4e2b5da9db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7676b3-4897-4e4c-a80a-c4259a2bf631",
        "cursor": {
          "ref": "78c541c5-f2a7-47f1-b813-eb9449fa12e7",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2f8b0428-2c3e-4abc-b27c-dd73e4e7779d"
        },
        "item": {
          "id": "6a7676b3-4897-4e4c-a80a-c4259a2bf631",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "18ed3b47-16cb-416b-ae7f-ea6745e369ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2d7f56-241b-425c-9b86-7ba4608fd59e",
        "cursor": {
          "ref": "b970a398-8080-466c-ab8d-5b3241920eb8",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "895eb18c-c712-4655-8454-a585ee709e3d"
        },
        "item": {
          "id": "da2d7f56-241b-425c-9b86-7ba4608fd59e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "81ed9a0b-e74e-4ea8-b4fc-8a861bee7366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30524c6f-f497-4ba4-92d7-7866c07bfd7c",
        "cursor": {
          "ref": "b06afc28-fd34-4d90-988a-b2bdc179bd05",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7e8a727c-c1f5-43fb-b6f7-603b5da56735"
        },
        "item": {
          "id": "30524c6f-f497-4ba4-92d7-7866c07bfd7c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "737e6744-77a7-42d2-a67c-80f69d809193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be604c98-4675-404e-8ecd-edf289414275",
        "cursor": {
          "ref": "c10665f9-22cb-413c-84ef-c50cab692d9b",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a23e6de9-28d5-4faf-bb3f-59f8c27b55b1"
        },
        "item": {
          "id": "be604c98-4675-404e-8ecd-edf289414275",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8a039463-89eb-4c93-905a-1f193cf8b4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c035fa7-fcb5-4714-96e4-741f533812dc",
        "cursor": {
          "ref": "b9b31d55-ac17-4c16-8505-e2040662d6b1",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b354dca1-ed6c-44bf-99bf-eade8c379ca4"
        },
        "item": {
          "id": "6c035fa7-fcb5-4714-96e4-741f533812dc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e5522fb9-327a-4125-b872-e4952119d214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b88459f-92a8-4ae5-af7a-64f63df3d88d",
        "cursor": {
          "ref": "f30f5fc3-4ef4-4e91-9071-e8f3ad3fef21",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "682f3f0a-013e-48ea-9959-8aaf288fe1f5"
        },
        "item": {
          "id": "3b88459f-92a8-4ae5-af7a-64f63df3d88d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d1b5b266-82a8-4033-adb5-3ed161c5dd12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd10d2dd-2ab6-4142-a846-b750e9e710da",
        "cursor": {
          "ref": "8c29b62b-66f5-470f-88ac-9585cc347c4c",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ffb09493-80a4-4362-9f24-367a86c8b8d4"
        },
        "item": {
          "id": "dd10d2dd-2ab6-4142-a846-b750e9e710da",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "23b578e0-8875-46eb-a312-1a1eb03e2850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f7454a-e4cb-4e07-b007-580a29748b68",
        "cursor": {
          "ref": "916fc949-ece7-4de7-8fe5-0c68f6ef922d",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2f0986fd-2d94-4130-b4f9-f77f7aec6d4a"
        },
        "item": {
          "id": "97f7454a-e4cb-4e07-b007-580a29748b68",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "49c2411c-afef-4c09-8aa1-7ebbf5be1ac5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d1ec2d1f-eb8f-4f49-abbf-d672e56dfe7b",
        "cursor": {
          "ref": "506c6dd8-b728-45fe-a759-ce5da773374d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2e1817ce-0e2c-49a4-903f-22ba22da7e15"
        },
        "item": {
          "id": "d1ec2d1f-eb8f-4f49-abbf-d672e56dfe7b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e00c39d6-8e21-4ec4-b18c-485178c939e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c97204c6-2701-43ba-9df6-b2f5363158e5",
        "cursor": {
          "ref": "1fb23064-81b9-419d-9b28-8f38d5e6bb6d",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fbe315d5-ed87-40b8-b310-1733549b9eff"
        },
        "item": {
          "id": "c97204c6-2701-43ba-9df6-b2f5363158e5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d6bd2c1c-bfd9-45f0-b657-447a60b92b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c568ed0-bb4e-46aa-9310-0f2e108f7d53",
        "cursor": {
          "ref": "8c3fcb4c-ade8-47f7-8a6f-d26c46bd48f8",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "dbbd4893-f837-4a51-a95b-8ba758580277"
        },
        "item": {
          "id": "9c568ed0-bb4e-46aa-9310-0f2e108f7d53",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b015cafa-f432-4c9e-9d67-c6a03a329052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f059a54-f17d-43d8-9612-00a9306a0df2",
        "cursor": {
          "ref": "494091e3-f470-4c0b-8175-8054d0afbd7f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ef52974a-234e-40fb-b108-aab56c7bae33"
        },
        "item": {
          "id": "1f059a54-f17d-43d8-9612-00a9306a0df2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bd1d02d7-fe26-4dff-a2f8-b324c63c2660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa299e0-9fa3-4bf8-acbc-9445fd71a87e",
        "cursor": {
          "ref": "350b0365-3fa0-4f46-98e7-29b37e2bded1",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4176d6b4-9c13-4eee-b430-8515f739de97"
        },
        "item": {
          "id": "7fa299e0-9fa3-4bf8-acbc-9445fd71a87e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e2d6df64-59b2-4fec-9556-2a9188e8df8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfaed671-4523-473a-96c4-f051f7127c7c",
        "cursor": {
          "ref": "070db675-f596-4130-8151-95a852a425e8",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f84cf14e-f869-428e-9e1a-b8053ee98689"
        },
        "item": {
          "id": "dfaed671-4523-473a-96c4-f051f7127c7c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d4251b59-0c85-45c2-8d54-8a3d79a9d2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4222a78b-41d7-4673-abfa-0e5bbe8b7619",
        "cursor": {
          "ref": "e90618f7-5528-4161-bba9-28234e300110",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fae94a96-a18e-4ac8-9d50-a681a6241482"
        },
        "item": {
          "id": "4222a78b-41d7-4673-abfa-0e5bbe8b7619",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "74f33255-436a-41e0-a46c-d29bfd519aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace6afc4-e0b7-46c3-bfb1-9fe1e41e8a2d",
        "cursor": {
          "ref": "d01b1b69-d8dd-4793-a0cc-4700881a4c64",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e7b8b232-a5d0-4170-b3ac-6dbf1e972009"
        },
        "item": {
          "id": "ace6afc4-e0b7-46c3-bfb1-9fe1e41e8a2d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2c8476de-3dd8-4fe9-b47d-42d170fc7e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24765b61-08e3-47f0-baa2-0601b2612aae",
        "cursor": {
          "ref": "4dc89c8d-b05b-40be-9157-c4d5c59c50ed",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "91409dd2-29d6-46e7-ad48-220364b9d23a"
        },
        "item": {
          "id": "24765b61-08e3-47f0-baa2-0601b2612aae",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2ddd39db-e6a7-4b0a-a85f-7d834e40a11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e28abe7-8397-41fa-8087-4cb386cdcc0e",
        "cursor": {
          "ref": "d49014d8-cdba-4507-8339-1f3fcb0e3b93",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4795e097-24ed-4102-9577-1f1a521e02ae"
        },
        "item": {
          "id": "2e28abe7-8397-41fa-8087-4cb386cdcc0e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "faa494e4-1021-44be-a81e-2171e0cf7b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35cebd1-297d-4e61-b68d-8eab516c0acc",
        "cursor": {
          "ref": "cf2b1dbf-4859-4aa0-a266-cbbd34d9ebd5",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f5a3e409-d07a-4a98-b7b5-bb43e8e4e522"
        },
        "item": {
          "id": "c35cebd1-297d-4e61-b68d-8eab516c0acc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1ef0cc94-b013-4da3-8ef5-10b4d35a6bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c24d85-0a16-4d14-bfe3-c6bf5ed50d9b",
        "cursor": {
          "ref": "e4c32487-f967-47b6-8724-b5eb6d1fb916",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "df6f4fd7-6f07-48b8-b1a2-19ed35f789c0"
        },
        "item": {
          "id": "b4c24d85-0a16-4d14-bfe3-c6bf5ed50d9b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "31faf6e9-14a9-4d01-be59-cacf8d740e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2185ad16-01fe-4e9a-9288-4c9e92d4fd9b",
        "cursor": {
          "ref": "1920cb8e-e6d6-491e-bb7b-98e4661472c3",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "10cda2f7-0d39-4cab-899c-1a62f9c10e8d"
        },
        "item": {
          "id": "2185ad16-01fe-4e9a-9288-4c9e92d4fd9b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a8e9b79a-84c3-4471-8862-c43b8321398a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09a5aa6-bf5a-4753-90ac-1100ad3b8aad",
        "cursor": {
          "ref": "ff5038c9-962e-4aca-b937-a051cf56059b",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5742453f-1874-4e02-849d-670809e2fec4"
        },
        "item": {
          "id": "b09a5aa6-bf5a-4753-90ac-1100ad3b8aad",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c8869210-1595-49fe-a4f1-9d34efc0e09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5d2c01-628f-4b03-a426-fd4c832d28c7",
        "cursor": {
          "ref": "465171e9-733d-4faf-bbe1-5433ba382db0",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "211e4d9a-0c37-4d52-a15d-0897e30f3dff"
        },
        "item": {
          "id": "2f5d2c01-628f-4b03-a426-fd4c832d28c7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4c019b42-c103-4e25-86a3-8f572f533086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff48e0c-fd07-48dd-8775-5f11cf6afa22",
        "cursor": {
          "ref": "bc3eea8d-dce7-40b5-a200-ae0275d3af4c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3d0045d7-60b3-4516-a1ae-8b0d6e426418"
        },
        "item": {
          "id": "eff48e0c-fd07-48dd-8775-5f11cf6afa22",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6a6ec253-13bc-46e7-b87c-985672a00224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917bc047-866d-433e-afe6-b497096ff332",
        "cursor": {
          "ref": "9e6452ab-bee7-455f-8904-98878e46f71e",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1942a06b-aae7-47b7-8926-2f842e9d0944"
        },
        "item": {
          "id": "917bc047-866d-433e-afe6-b497096ff332",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "15f36476-221a-44b5-b519-5a59862b3762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336cb724-7088-4e29-b642-900572258f55",
        "cursor": {
          "ref": "c9244b92-bccd-434b-899c-5874c64be1b9",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c529bd7f-23d6-49cb-9199-405e799738d6"
        },
        "item": {
          "id": "336cb724-7088-4e29-b642-900572258f55",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "80cb3682-f7b4-4108-87da-2a3f2fb95fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9830acfc-83ed-42dd-bec3-bc1a531a569e",
        "cursor": {
          "ref": "bff1def9-c969-4fec-987b-285c1bf13630",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "305dfe2e-3792-47bf-b869-189880ad0a69"
        },
        "item": {
          "id": "9830acfc-83ed-42dd-bec3-bc1a531a569e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "58b68766-3ee3-485d-9018-25d546bc0df7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d734c2cd-8e6b-4def-8afa-5ad66b85c82b",
        "cursor": {
          "ref": "e19a9492-f8c2-44a1-9ffc-bb4d30f15e51",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ae4ceada-bd93-4915-be60-c1651a18c59a"
        },
        "item": {
          "id": "d734c2cd-8e6b-4def-8afa-5ad66b85c82b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3023844d-1e9e-4ab7-b136-5ac9f92ffef7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6171bac5-86c4-4126-b7d3-452086f7e82f",
        "cursor": {
          "ref": "8e251c12-c67e-433f-8f46-dbf7b7c38c9a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9f69ce6a-a959-44e5-af19-2c972baf5538"
        },
        "item": {
          "id": "6171bac5-86c4-4126-b7d3-452086f7e82f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ece61200-aae5-4eb7-9a92-18327a025b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92432221-ca2c-46af-85c8-5a202a3c61d8",
        "cursor": {
          "ref": "eb90570c-b47c-4792-a652-fcfe365f827e",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4393d43b-5539-4d7a-a276-7e617f2ae6a4"
        },
        "item": {
          "id": "92432221-ca2c-46af-85c8-5a202a3c61d8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c195c800-e787-4e97-bede-de043f3f8180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673e2799-292a-4975-b131-68ae06195c33",
        "cursor": {
          "ref": "f1d46e60-b59d-495d-84fb-1fe65d5fe839",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "612b85d5-1086-4a32-b4d9-bfc0bd3ead15"
        },
        "item": {
          "id": "673e2799-292a-4975-b131-68ae06195c33",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0c2856a4-8d92-46bb-bb84-39c9b4f22c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f04dd6-a39b-4443-aaf5-84b40dc2fd06",
        "cursor": {
          "ref": "1a637990-c8fe-4060-81a0-1fe324d0aec8",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d718ee51-c148-462f-a263-fb0c258bbd11"
        },
        "item": {
          "id": "68f04dd6-a39b-4443-aaf5-84b40dc2fd06",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6c9c428d-582f-4e0a-ad55-8d10bce1dadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed65aab-c44e-4078-9342-1c870ffc3cb0",
        "cursor": {
          "ref": "a8244be1-362d-4634-b254-de1f509f62ef",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "efb587c4-4092-4490-98c4-09ad485c2c4d"
        },
        "item": {
          "id": "3ed65aab-c44e-4078-9342-1c870ffc3cb0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e684ec61-0d00-4048-a789-74e3255ca25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41b468b-dd6d-4785-94df-3a58fbd43cce",
        "cursor": {
          "ref": "87cc7906-44f4-4c4b-8b56-9ecdacf3a260",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d3f7bfcd-d81e-46ad-ab9f-58ad6d2b3455"
        },
        "item": {
          "id": "a41b468b-dd6d-4785-94df-3a58fbd43cce",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "57010a67-0504-4017-ba8c-b5ecbcd802d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18540da-97c2-44ee-95fc-0fc9b50401d3",
        "cursor": {
          "ref": "d9ad7ace-17c5-42ab-98f8-07a09bff86f1",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2c2f91cc-b62c-4df3-8cff-fb1858d3dd77"
        },
        "item": {
          "id": "b18540da-97c2-44ee-95fc-0fc9b50401d3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6ca70e02-b7d1-4e45-ab8a-d0d5b4816304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f21c19-9b17-4b08-8b31-aad378feb5f3",
        "cursor": {
          "ref": "532b3049-026f-459e-aa03-5c38388d7426",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e281f97e-6334-400c-891c-e7d8c83c5dcf"
        },
        "item": {
          "id": "e3f21c19-9b17-4b08-8b31-aad378feb5f3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bb15fb1e-b59a-4801-b50c-3b7431e8e441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62e828f-2d0b-463f-90d8-7f5986cfe733",
        "cursor": {
          "ref": "58bd505b-3349-4072-9fa9-fc1b6a50ac3b",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5389e43c-6956-4568-a870-ea8f45915cc6"
        },
        "item": {
          "id": "c62e828f-2d0b-463f-90d8-7f5986cfe733",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b6516c20-377a-412a-a64a-ce49705f3476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0144f785-c114-4ef6-a78f-d96a643e344c",
        "cursor": {
          "ref": "3c198e4f-a5cf-4d22-9ca6-c6938df091a6",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b6fda07f-3d5d-4c0c-8ade-c6b1d13a89e2"
        },
        "item": {
          "id": "0144f785-c114-4ef6-a78f-d96a643e344c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f0a2510a-f217-478a-af2b-fb2d9b4f4ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f75b390-d44a-4758-a957-4172175f9f9a",
        "cursor": {
          "ref": "901d7940-194a-40a3-ba17-2fa21e36925a",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7f7b0b6a-695d-4065-b5f4-ccff59268d02"
        },
        "item": {
          "id": "4f75b390-d44a-4758-a957-4172175f9f9a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5e9adfd6-df5f-40b7-9128-8ab0efc7ce48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090a42dc-2f9c-407b-91cd-c751f2866cd1",
        "cursor": {
          "ref": "7c4aa742-9aa7-46bd-9d6f-35113c455da3",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "385ca128-94ed-4f0f-ae41-bf2e04b0fd90"
        },
        "item": {
          "id": "090a42dc-2f9c-407b-91cd-c751f2866cd1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "24e7ab75-33b5-432e-a766-1560cde7c203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c905b82-d582-409a-b1fc-3776219bc14d",
        "cursor": {
          "ref": "9eefd2ea-ef59-4b9c-bde5-54845be4897b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fe27d790-2ac1-4ce3-ba9c-402757fa0edf"
        },
        "item": {
          "id": "6c905b82-d582-409a-b1fc-3776219bc14d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7cd2af22-3d9b-4fd9-a3fc-0050469b2fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a308388-a467-4213-9e9f-0b94aaaeaf71",
        "cursor": {
          "ref": "895ad8a0-9029-46d3-933b-4eb69097a328",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "36611581-9c32-49ad-ab9e-e3e5bb94abb6"
        },
        "item": {
          "id": "0a308388-a467-4213-9e9f-0b94aaaeaf71",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "826187a3-2da3-443a-ae96-423c7b36b2da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "f362114c-f72d-476d-9768-bfeadf3d0210",
        "cursor": {
          "ref": "c0e5a202-b122-44e8-8afc-da9d9f63afba",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8e8964cd-8b47-4dfb-9761-2d456f709e8b"
        },
        "item": {
          "id": "f362114c-f72d-476d-9768-bfeadf3d0210",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "972721ab-3fe1-4b76-b2bf-e8586cea03d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf43c6fb-9c30-4aa3-b37f-266a6f9b89cd",
        "cursor": {
          "ref": "7f84beed-8e2b-4889-9ec6-02483e31165a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "85213629-257f-4d06-80cc-b150e31316ac"
        },
        "item": {
          "id": "cf43c6fb-9c30-4aa3-b37f-266a6f9b89cd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "20411b47-7d68-47d4-9647-1d30a1909f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc95e90-60f3-4d2c-942e-dd54db4edefe",
        "cursor": {
          "ref": "a60cead4-9cb6-4656-bbb8-abb8656f4c53",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "78be90f1-8980-48eb-91f9-edd2fd564cfd"
        },
        "item": {
          "id": "bbc95e90-60f3-4d2c-942e-dd54db4edefe",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1a4a2d9c-5146-4d6c-a1c4-8a81ba8d1d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4bdd86-dc5f-4cd6-a377-ca7ce63a0156",
        "cursor": {
          "ref": "3d128796-50a1-475e-9547-9305a0031e4c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3877ca0d-25b3-4ab6-bc41-a5c7fb84b0ef"
        },
        "item": {
          "id": "be4bdd86-dc5f-4cd6-a377-ca7ce63a0156",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "37c294fe-35c5-4b3a-a9b3-fa12d94fc773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a0bddf-e1e2-44af-a505-0de6487f64f4",
        "cursor": {
          "ref": "3042e3c1-c964-4b90-89f2-4e11f9128475",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7924029b-d9f5-46c8-9278-26af4b049735"
        },
        "item": {
          "id": "21a0bddf-e1e2-44af-a505-0de6487f64f4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a725154c-139e-430e-a665-5a8d9e23ed4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d65c1e-e2e5-418d-a8d1-731c86c8adcf",
        "cursor": {
          "ref": "a45e0c1f-9a00-45a1-9467-7bfb518fa877",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bf0b0d8b-779f-40b0-bde9-e06400b9b851"
        },
        "item": {
          "id": "51d65c1e-e2e5-418d-a8d1-731c86c8adcf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "01227606-f4aa-4c5b-8191-f844ad96a1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e3977a-e6cb-47d9-9fb9-6d4c7fd8e288",
        "cursor": {
          "ref": "b3fb533f-9f12-4b2d-a4da-24d7039a96d4",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d308f03a-01ec-4d49-8046-292e910c18a4"
        },
        "item": {
          "id": "40e3977a-e6cb-47d9-9fb9-6d4c7fd8e288",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e9d5534a-a6a1-4acf-b970-c909b74f2bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82601554-52bb-4961-a417-065a1d4a6bda",
        "cursor": {
          "ref": "99d9b4e9-1713-4826-b29a-b2576f0d99f7",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7873a460-ba39-4d32-a78d-36ecd28a4000"
        },
        "item": {
          "id": "82601554-52bb-4961-a417-065a1d4a6bda",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "75b9317b-a032-4dbf-aedf-d7562515feac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dfac69f-9fc0-47b0-b24f-4d8d79b4e770",
        "cursor": {
          "ref": "bfcaeb10-b5e4-4a91-b66b-79e43791b174",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "59c7a2e3-212e-495f-b417-fd959212afeb"
        },
        "item": {
          "id": "2dfac69f-9fc0-47b0-b24f-4d8d79b4e770",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "46a48fa5-ccb4-400a-96fd-949fea01a672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c80ca8b-a19e-45dd-ab16-b0cc5b1e4697",
        "cursor": {
          "ref": "a37bc7e8-34f3-40eb-9777-c81a4b141ace",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5fb09c90-4cee-4f80-bccd-eedf6e7126a0"
        },
        "item": {
          "id": "0c80ca8b-a19e-45dd-ab16-b0cc5b1e4697",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e120614a-f91c-43f3-8af5-77d8a1214792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0940fb41-77ee-4e2c-a45b-a76293c770c4",
        "cursor": {
          "ref": "205cde47-24ca-4f6e-990f-755b41e28a84",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1fbe02bb-0d93-44d8-98bd-d7ac13ffd894"
        },
        "item": {
          "id": "0940fb41-77ee-4e2c-a45b-a76293c770c4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d7cef68e-fefe-417c-99fd-5d5252d3d6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d2390a-1c93-4f2f-b38a-39e0782d7d41",
        "cursor": {
          "ref": "396d8dc9-c9cb-4699-8916-2ed287555cad",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e59bd053-7330-4bf0-8f29-319acfe08163"
        },
        "item": {
          "id": "48d2390a-1c93-4f2f-b38a-39e0782d7d41",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "42395e89-1483-4e4e-be8f-e339bf9bc220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9a8cfa-2c1b-4ec2-be4a-fd7c03d015b6",
        "cursor": {
          "ref": "84668241-22e7-426e-b9ab-b7431639d8ea",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d12119b3-63ee-4283-9a38-0aeac827c819"
        },
        "item": {
          "id": "cb9a8cfa-2c1b-4ec2-be4a-fd7c03d015b6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b70ee742-a63f-4e9c-bb0e-37a02b62c415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f7afad-b2cc-4c2b-a0c3-0ce11cd92d87",
        "cursor": {
          "ref": "399771c4-2374-49ec-ad62-7a0622fed241",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8ce9e38a-932c-47d7-8965-76b0403fe099"
        },
        "item": {
          "id": "b7f7afad-b2cc-4c2b-a0c3-0ce11cd92d87",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "677c1680-a877-48af-b310-5ba6366efe0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f50def-47c2-475a-9a93-411321391021",
        "cursor": {
          "ref": "48517fb4-81a5-4b40-b5d9-f1b20fc3df9f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e9cb6d94-dc3d-4696-9377-7f3d58872f81"
        },
        "item": {
          "id": "f1f50def-47c2-475a-9a93-411321391021",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fa074631-8275-4166-b4ae-a474682c2e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2146926-2c59-4ef0-b41a-095511478a49",
        "cursor": {
          "ref": "076adfba-3371-4a01-8e76-58d48b4a7d6e",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f0a6bf9b-b515-4530-b354-d87112dfb128"
        },
        "item": {
          "id": "c2146926-2c59-4ef0-b41a-095511478a49",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f80e0c56-80ad-4811-a7be-d456f751d7bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e35b28-844c-4d57-8f33-91815b57f253",
        "cursor": {
          "ref": "ae981002-a06b-4112-b1fb-0160693067e0",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3a3009ac-395d-4d44-b0dc-ae185e4bc01b"
        },
        "item": {
          "id": "a1e35b28-844c-4d57-8f33-91815b57f253",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cfaea43c-e19b-4db9-a891-dba5527422b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09523e12-d034-4a7f-b659-222a3eee2b38",
        "cursor": {
          "ref": "11a47d39-d67b-4729-9e9d-63e357e08756",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7986a798-4c9b-4020-852a-68ea685c6f2b"
        },
        "item": {
          "id": "09523e12-d034-4a7f-b659-222a3eee2b38",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "abfc53ed-c73f-461b-a0ba-0b7e4ce5a0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350c7ce2-7ab0-4a3a-bf1e-ea5be529d53e",
        "cursor": {
          "ref": "bf5175d4-21c3-4851-9e66-33ced2e21734",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "18860c7e-0d4a-4be8-b07c-93b91c544b25"
        },
        "item": {
          "id": "350c7ce2-7ab0-4a3a-bf1e-ea5be529d53e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f14f985f-34c8-48e5-b5cd-c583550b8169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd69b6f-ef9b-4dcd-80a3-0d3fd8c7977c",
        "cursor": {
          "ref": "57230783-a4fd-43d0-8b6f-0c578e1fade0",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e4f9c9cc-2e06-4554-ab76-e6fe2593dd7c"
        },
        "item": {
          "id": "0bd69b6f-ef9b-4dcd-80a3-0d3fd8c7977c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "1eec0e8a-5f23-4866-8991-44b2de43efb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5015283-709d-40e4-9e6f-360be5c9db40",
        "cursor": {
          "ref": "e6e953ad-2cd8-4dc4-8d12-0980ea577b4e",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4da0b646-f7c1-4508-a2a6-df2394787399"
        },
        "item": {
          "id": "a5015283-709d-40e4-9e6f-360be5c9db40",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "04efb1db-ea4a-4a2a-a4f0-0b368a490eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab691679-3a1b-4827-954a-324d8943e617",
        "cursor": {
          "ref": "4c72b9f8-0ca0-411c-b250-438a1420b69f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "2c8bc944-ee21-46bf-bfd0-3ac6205fa550"
        },
        "item": {
          "id": "ab691679-3a1b-4827-954a-324d8943e617",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b112ece7-93bc-4669-85c4-d69e9c8a5189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f27a20-af5e-4593-a5a2-2a293d98689d",
        "cursor": {
          "ref": "22fa0f16-6427-44a2-9052-510040731255",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2378d074-a7f1-4c98-a062-e5b4e4908451"
        },
        "item": {
          "id": "08f27a20-af5e-4593-a5a2-2a293d98689d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c789b2d3-ea3b-417e-b326-8dc4a5919f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482150d1-734c-42c8-93e0-f43b4ac937e7",
        "cursor": {
          "ref": "558f5f20-1d0b-49e7-822b-9395eda8a0ee",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3992b97e-6501-4049-8736-6eda0b56ae1e"
        },
        "item": {
          "id": "482150d1-734c-42c8-93e0-f43b4ac937e7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3c364cd5-3b2d-4395-93d9-d29970f2f97a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1659a4ea-6edb-49de-8604-7b3b31293d8f",
        "cursor": {
          "ref": "eaf7259e-fb13-4157-aa23-a232c4803152",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a45e017c-767a-4fe5-b57f-b9e5faaf4719"
        },
        "item": {
          "id": "1659a4ea-6edb-49de-8604-7b3b31293d8f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c316f582-bc2a-497b-99a5-5ada67d3f7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dffe53a-d77d-4f15-85ee-b9cff42f69de",
        "cursor": {
          "ref": "57eb4ae3-f1e2-4289-85f8-bae86ef4021b",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "02dc485f-8b91-4fad-8bb8-80377a61d13e"
        },
        "item": {
          "id": "7dffe53a-d77d-4f15-85ee-b9cff42f69de",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "15102af5-7cda-4cad-9a30-2739bd57e2f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7c5dba-bd5d-4085-921a-bc9f97ce261c",
        "cursor": {
          "ref": "31422c0e-432b-45f2-a21e-61bf6b00a0ca",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "85a068c4-ef24-465c-823f-2628b125ede6"
        },
        "item": {
          "id": "cf7c5dba-bd5d-4085-921a-bc9f97ce261c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "52fe4143-be74-43bf-a2a0-2bfe0b826cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfb302b-8c96-4764-98d4-adb39605c837",
        "cursor": {
          "ref": "b0f52e03-6904-45d8-8cbb-8ab0b8573e0d",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c40e7906-74da-42f9-9faa-7ec02b2f2656"
        },
        "item": {
          "id": "7bfb302b-8c96-4764-98d4-adb39605c837",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ef5fddac-c707-41f9-83e9-6f194006f6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2482e34c-5cf0-46db-bc54-7b389995ad54",
        "cursor": {
          "ref": "36b8bc70-1cf8-4655-8da4-516a9c7d3a9e",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fdc95e0c-9925-48a4-9e51-3331ab36445d"
        },
        "item": {
          "id": "2482e34c-5cf0-46db-bc54-7b389995ad54",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c12641cb-a805-4218-86a7-e5df726c3542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8e3dab-4118-44fb-ab6f-996562a5aeab",
        "cursor": {
          "ref": "12b20700-b19f-41eb-b325-551de931f274",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e6ae4c7a-cc1d-4d86-a2ae-b87783ee2aa5"
        },
        "item": {
          "id": "5d8e3dab-4118-44fb-ab6f-996562a5aeab",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3e21d693-28a2-4929-99e1-211d2ecb51d8",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1b744b6b-7776-40f0-aa25-66e39a62d1cf",
        "cursor": {
          "ref": "073f4638-9031-436e-b51d-7c3961e47a47",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fc21aa64-bb50-4318-8686-478b1abb3d84"
        },
        "item": {
          "id": "1b744b6b-7776-40f0-aa25-66e39a62d1cf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "91f7eaaf-4785-45fc-85d6-88c5fb1b0eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2947cb-9cf9-4e35-8281-ff28bd69515e",
        "cursor": {
          "ref": "54117703-a3fc-44be-83a9-b6302ccda98b",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2e032851-ab33-4d9d-95e8-7d5774d4bbb1"
        },
        "item": {
          "id": "ee2947cb-9cf9-4e35-8281-ff28bd69515e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d4bedd9e-751f-4380-86ca-b2f53474bdbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5b8b5d-0210-4e95-ba0e-6a66700f1981",
        "cursor": {
          "ref": "b129ee14-cae7-4862-bdab-5874e0b33d67",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d3c8fa77-738c-4a4f-9212-eb41ca456c35"
        },
        "item": {
          "id": "0b5b8b5d-0210-4e95-ba0e-6a66700f1981",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3a1e3ced-07df-47c5-9675-4f00aa94884e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17530629-a431-42c8-a508-d81577f253b4",
        "cursor": {
          "ref": "4d4fa937-2ea0-4a29-a500-036aae9b5471",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "255b954f-db89-4e60-b91c-731053bb73b4"
        },
        "item": {
          "id": "17530629-a431-42c8-a508-d81577f253b4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d5bb1294-ca35-4f55-a425-cf5a44312c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fbcf2d-b888-455c-92a9-210efa3bb9dd",
        "cursor": {
          "ref": "e8d64847-3d5f-4069-949f-77e74abf0c04",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "29aa0765-934f-4a33-9b55-da28c5afeb4c"
        },
        "item": {
          "id": "40fbcf2d-b888-455c-92a9-210efa3bb9dd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "926316a0-4917-4991-87b9-e40d56c5fe05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dd6e19-6b9f-4e3a-9b59-a52234eab047",
        "cursor": {
          "ref": "2d771544-82cf-49cd-831f-696f6c6fc97b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "440bef73-43bf-4e9a-be49-a63db33b3b51"
        },
        "item": {
          "id": "48dd6e19-6b9f-4e3a-9b59-a52234eab047",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "535d9f49-3067-41a0-b549-56e9cedd6da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d686e8b6-587d-43aa-8479-381bd3e18ca2",
        "cursor": {
          "ref": "f240d962-0e3e-416f-8516-708fcc34e1aa",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "17175422-dcc2-413e-9261-3ff5f29bacc0"
        },
        "item": {
          "id": "d686e8b6-587d-43aa-8479-381bd3e18ca2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2ba55b57-88c5-4027-96ed-c84d6dcd5c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34c8c3f-a763-4e39-93d2-17f34bdf55bb",
        "cursor": {
          "ref": "d923b1ca-208e-45b0-af55-2481355c2cf6",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "33c9caef-d573-4a75-bf61-45aec2afa2cb"
        },
        "item": {
          "id": "d34c8c3f-a763-4e39-93d2-17f34bdf55bb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "72ef02ae-3331-4a38-a62a-5b079d0ad686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823e7152-94ce-4772-a3cb-645b8c65cb28",
        "cursor": {
          "ref": "a50632d6-cfb5-4a40-82db-69099c2e2e24",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f32bc35b-dc8f-4465-a3eb-7ee9487b60c9"
        },
        "item": {
          "id": "823e7152-94ce-4772-a3cb-645b8c65cb28",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "27933147-e298-4205-a496-c3adc5bd7ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c610ac-d2d4-40fa-9096-67b9255ad974",
        "cursor": {
          "ref": "3a146aa6-6cd7-4b83-941a-bcdc05d20c73",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "99654560-bb82-4c1f-b81c-9872c799f7b3"
        },
        "item": {
          "id": "01c610ac-d2d4-40fa-9096-67b9255ad974",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9d290a15-64d6-4b78-8939-fef3b37125a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f2d8e3-cbe6-42b8-863f-5b49dea3e023",
        "cursor": {
          "ref": "61e75055-cc2a-4932-aae4-456c934d7b37",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "da4a1af3-cbef-486b-bbe2-7154f270b5f2"
        },
        "item": {
          "id": "93f2d8e3-cbe6-42b8-863f-5b49dea3e023",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9307c972-c480-4523-ac19-2193b8500adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d4027d-fb57-46a6-a34d-0499dfa00267",
        "cursor": {
          "ref": "4cba492d-f242-4f49-9ec3-d33041d59fcd",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "891858c9-4fbd-4857-9aa5-6140e93fbef8"
        },
        "item": {
          "id": "23d4027d-fb57-46a6-a34d-0499dfa00267",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "92aaf7b0-9945-4a75-a534-f4774ceb8c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b566c74-dfdb-44d9-a5e7-d99d00d8a195",
        "cursor": {
          "ref": "e7bb0e7a-e195-4b73-86ec-a9e2d58257ba",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "aaabeb1a-cfa7-49b5-8ac7-00168cb8e15f"
        },
        "item": {
          "id": "3b566c74-dfdb-44d9-a5e7-d99d00d8a195",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "16c5bf37-216b-4326-a063-36cba5a369d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be498d03-d3d8-448f-8578-45322b9ab23d",
        "cursor": {
          "ref": "f1b6cdc8-8f1f-477b-a15c-4f2a5fcfd427",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0bf784db-3f6e-4809-886c-b7a7c8efa417"
        },
        "item": {
          "id": "be498d03-d3d8-448f-8578-45322b9ab23d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f9ca117e-f8aa-47eb-aa4b-87be3a5b965f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67c5585-7b1e-4885-a9ad-512cde914650",
        "cursor": {
          "ref": "107f2929-2d63-4565-9afb-b3832b5072ef",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0c89dc1a-b57f-4311-b662-e1ff9272e693"
        },
        "item": {
          "id": "d67c5585-7b1e-4885-a9ad-512cde914650",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "575de244-aafc-46bc-af5a-022d698bae50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cf91a2-2f9a-4ad4-bdf5-c6065ec3e4cf",
        "cursor": {
          "ref": "23476d94-8fcd-4751-8973-8598efa07661",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1bc66b78-ec42-4599-94bb-7c190e1e17b9"
        },
        "item": {
          "id": "91cf91a2-2f9a-4ad4-bdf5-c6065ec3e4cf",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e4607b5c-0ff2-4618-95d5-8aaf1294c330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f71e6a1-b187-4700-ba52-3a86b6c27df6",
        "cursor": {
          "ref": "971bbe0d-3ecb-40b8-bc90-1c47a72122b0",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cbd94d7d-70ba-4b26-a23c-3702ba7fb5f9"
        },
        "item": {
          "id": "5f71e6a1-b187-4700-ba52-3a86b6c27df6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a7659d6b-2e65-43fc-a658-f697974d6142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2ae6aa-1cb9-4661-a676-3c884875d0d0",
        "cursor": {
          "ref": "2c37bd1e-f1a3-46b7-8cdf-abe08fe4d3c1",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6d066380-f4ce-428d-99ca-e8a7ed912711"
        },
        "item": {
          "id": "6f2ae6aa-1cb9-4661-a676-3c884875d0d0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "06f74dbe-68f3-426a-96a7-4fc1bbea3c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0820db3-71ab-44ef-8d4e-12437464f99c",
        "cursor": {
          "ref": "3f043cfc-05eb-40cc-8bd1-4514d5085c2a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "71342932-970f-4b79-b6d5-8c0747c17507"
        },
        "item": {
          "id": "b0820db3-71ab-44ef-8d4e-12437464f99c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a9062d8b-5b39-424e-8be7-53b594ec1ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56d9235-d999-46a0-a4f8-0e6d8152cec7",
        "cursor": {
          "ref": "858fe703-feae-4cb6-896d-2d2b118b563b",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "769173a0-0dbf-4e7e-8673-2c9ba1e05bb7"
        },
        "item": {
          "id": "a56d9235-d999-46a0-a4f8-0e6d8152cec7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9533b081-4f55-4676-8cc5-7b1ea59a338b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298d82ec-c7f4-49da-9a14-f9556480959b",
        "cursor": {
          "ref": "35263680-fb91-49dd-aa86-c5c928054c0a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a735f108-1c94-49df-96b5-f70f1217c6b9"
        },
        "item": {
          "id": "298d82ec-c7f4-49da-9a14-f9556480959b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d2f10c7f-5e5a-4322-975f-9e4cb601ba5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f4a678-9634-4c18-a224-c611c1a39bdc",
        "cursor": {
          "ref": "233ff5d8-a85b-48ff-afca-34d67d21f661",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b8fb5935-9aad-4591-8b5f-ea4ac6448de5"
        },
        "item": {
          "id": "82f4a678-9634-4c18-a224-c611c1a39bdc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3b7d95d8-14ab-4f4d-85cd-2c73f2ae01b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51dc7573-2ba1-40ec-bc44-99d188c3949e",
        "cursor": {
          "ref": "540588b4-d16c-4207-9229-991523c8861c",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b1da36a5-052a-49f5-a13c-b9e4151a93c3"
        },
        "item": {
          "id": "51dc7573-2ba1-40ec-bc44-99d188c3949e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c4164ba7-2da0-4a6e-8f1d-e2d9c0ff6dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9abfd911-f6ec-4f97-a53d-c3d5b4acf8d8",
        "cursor": {
          "ref": "b7d18dba-0f31-4f31-acb7-d99fafe8eba2",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2de6b970-3729-464d-a418-867da2e91419"
        },
        "item": {
          "id": "9abfd911-f6ec-4f97-a53d-c3d5b4acf8d8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5442e990-4cd0-4ed4-9982-983128ddfdbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6d437f-fbe5-4b5e-88b3-70a051f777f4",
        "cursor": {
          "ref": "c55fe516-a296-4cba-ae77-10ae1ec0e474",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7eb2d7aa-888d-4319-a98c-c8197075de93"
        },
        "item": {
          "id": "5a6d437f-fbe5-4b5e-88b3-70a051f777f4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d084364d-8976-40b6-8546-f5bab80500fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a4e90d-b2a1-484f-846b-e16c98aead55",
        "cursor": {
          "ref": "7cab7e5c-a463-4ab9-a77c-d1b38d701fae",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f2e7e8d2-6fd2-46aa-9a3e-228006c70d4e"
        },
        "item": {
          "id": "b6a4e90d-b2a1-484f-846b-e16c98aead55",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f9e96f9f-62ec-4f0b-936e-8cfc1d81e6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbfff83-1b9b-4c17-b7b7-5231eb10c0df",
        "cursor": {
          "ref": "49561b88-3a9b-4d44-9762-14ca168ba1a7",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d39fa022-2311-4bd6-9f5d-09ae10ef6472"
        },
        "item": {
          "id": "6cbfff83-1b9b-4c17-b7b7-5231eb10c0df",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b3f8a850-2886-4878-864d-b276281fc874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737a367e-8dac-4ba4-a217-f345f7d937d5",
        "cursor": {
          "ref": "15baed76-11e8-47a8-af76-205675aa41cc",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4cc265f8-41e0-4898-8eec-ae96881008fe"
        },
        "item": {
          "id": "737a367e-8dac-4ba4-a217-f345f7d937d5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a53774b9-79f1-4a09-9bdd-4ec47d8c047a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0113aad-7ae8-4ae7-917e-cd7f62c6ada4",
        "cursor": {
          "ref": "86afeb99-d8d9-416e-aef9-e13094c6fce5",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "cdd00b20-df5f-4e21-9bfc-6bbbcdb34efc"
        },
        "item": {
          "id": "a0113aad-7ae8-4ae7-917e-cd7f62c6ada4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c4a59f78-c745-47b0-87ac-46efb7078776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ab14db-0097-4a1a-adab-043d178a2ff1",
        "cursor": {
          "ref": "e08523d1-fdb3-4259-8e38-a5baf4a00116",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a0686cd3-d72e-4c77-8bfc-3981debbc4d2"
        },
        "item": {
          "id": "f8ab14db-0097-4a1a-adab-043d178a2ff1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4adb183b-b1ca-4936-8c6e-9c94613f656a",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "1d728087-43b9-4188-b53c-76485119bb11",
        "cursor": {
          "ref": "fa6652a3-6920-4461-ba3a-66c5f034e492",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "951ce4f8-53f7-47c0-bc7c-98920efd19e1"
        },
        "item": {
          "id": "1d728087-43b9-4188-b53c-76485119bb11",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "febb97b9-17c1-4120-9962-c97d1161bd6b",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ffc390c0-4b40-4468-b02b-55867db60555",
        "cursor": {
          "ref": "325fe266-014e-4501-90c9-466e3b86f231",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f012440d-0041-492d-87cd-39bb50091398"
        },
        "item": {
          "id": "ffc390c0-4b40-4468-b02b-55867db60555",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f2944c1b-f45a-4c8e-baac-24aa8fae9bc4",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "613493a0-ff8a-4ce4-8eb5-e1ba2d13f339",
        "cursor": {
          "ref": "c3ed1300-0d1a-4eba-9230-3bb4e5078eaa",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7b4c2e1d-9eb6-4318-9789-354676cf168e"
        },
        "item": {
          "id": "613493a0-ff8a-4ce4-8eb5-e1ba2d13f339",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "45bee91c-77de-4b14-a9c5-4d332c476ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c65a06-f0dd-4957-bc66-9d6bb8066ea2",
        "cursor": {
          "ref": "67e3aa07-85d6-4fc5-bf5f-b3ccdac95e3a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c504511d-5532-46a9-a923-ddd505d40904"
        },
        "item": {
          "id": "72c65a06-f0dd-4957-bc66-9d6bb8066ea2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "247581c6-1964-4ba9-a6cd-030d0a8844b3",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "cd43d385-986d-4577-aa66-213673368114",
        "cursor": {
          "ref": "c0bab342-3b49-45bd-8e46-50b6bf244490",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0a9a80a2-64a6-418e-aa6c-1175ec350163"
        },
        "item": {
          "id": "cd43d385-986d-4577-aa66-213673368114",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c366d7d9-5bd7-457c-a481-017faaaaf9eb",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "93f45076-b103-4780-8055-b5133934d2ff",
        "cursor": {
          "ref": "2a832a3b-07c5-49a5-93cb-06bcd96c00d9",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "66969e6c-278c-453e-b94f-54a1dae1a42b"
        },
        "item": {
          "id": "93f45076-b103-4780-8055-b5133934d2ff",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c0c96168-910a-4967-8360-8797259efd73",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f0de0c14-c07d-46f3-a66c-6dfa58a343a2",
        "cursor": {
          "ref": "59ce024e-568e-402e-b51d-e96c548782ad",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8432a5e8-d214-4c5c-8c45-de8498e371e9"
        },
        "item": {
          "id": "f0de0c14-c07d-46f3-a66c-6dfa58a343a2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "482b9951-e24d-4e1e-ac8a-70a4fca0dc57",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e080f899-24e2-452f-baa0-1f9e8384f376",
        "cursor": {
          "ref": "5f0993ae-2f2d-49a9-887c-247d618a5f7c",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "36fd1546-536a-4948-8664-7cf3f0c9aa74"
        },
        "item": {
          "id": "e080f899-24e2-452f-baa0-1f9e8384f376",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a4f8e339-0976-473f-9ccf-52451e8609bb",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "8de8c687-76f9-4fb9-894d-1040a0dbed0e",
        "cursor": {
          "ref": "a6e2c0de-2076-42ce-9a71-c1829ce8ea45",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6f159beb-da1d-4940-ae3a-5ecf28806f80"
        },
        "item": {
          "id": "8de8c687-76f9-4fb9-894d-1040a0dbed0e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "28d51445-d140-4fa6-92d1-6b19cec18c49",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "86a57034-8d0d-4226-8a5c-b6ed2b3932ec",
        "cursor": {
          "ref": "dbc718a2-d7b0-4f10-871c-4cd3d53c13b5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "00f235f4-7244-49c6-9da6-50e6bf777a6d"
        },
        "item": {
          "id": "86a57034-8d0d-4226-8a5c-b6ed2b3932ec",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cd7245df-e967-4483-a69b-f36cb2ecf3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7803fec8-e96e-46c9-b16c-af0ed9d0b4f5",
        "cursor": {
          "ref": "07710ded-4f8a-4e59-a948-3ddb5d47c05e",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7b4bdd62-3f58-4ee0-86ca-9417ac87f72d"
        },
        "item": {
          "id": "7803fec8-e96e-46c9-b16c-af0ed9d0b4f5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4db3d320-b6e3-43ef-a429-5979fba05d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d13ea21-f9a7-46b1-b80d-bb75768a9f26",
        "cursor": {
          "ref": "da914cb7-ff39-4d6a-be5f-c046f9b21ea0",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "57add52c-33c6-4379-bf4a-8071b40adc45"
        },
        "item": {
          "id": "0d13ea21-f9a7-46b1-b80d-bb75768a9f26",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5f06b60f-989d-4b0a-8df1-649f32c6d6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4022b4d-b23b-437d-a818-e2a4f7acd46b",
        "cursor": {
          "ref": "194e7351-1520-4306-82f6-91216992031d",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0a53463c-793f-4f8c-9cae-5eb64048c726"
        },
        "item": {
          "id": "f4022b4d-b23b-437d-a818-e2a4f7acd46b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "664eea27-2403-4d30-bbd2-7dd64e558ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a012f1-8754-409c-92cc-712e5106c5a8",
        "cursor": {
          "ref": "2baa1247-4b07-4807-b025-207adaac7b4e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a9fdda04-1ff9-4eff-8caa-d070aa2a37f2"
        },
        "item": {
          "id": "12a012f1-8754-409c-92cc-712e5106c5a8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7d9de39b-e6a1-46d7-ac29-6e527c09e49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4e230e-c222-4325-834f-e3d4efbda858",
        "cursor": {
          "ref": "b0f0e718-95f6-4ad8-b070-2a30bc7bdd42",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d5407be7-bc20-4636-8343-83b90cee3ffe"
        },
        "item": {
          "id": "0f4e230e-c222-4325-834f-e3d4efbda858",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2fb90d1e-b8f9-4148-909f-2823e0d6f85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a9f353-dd31-4a64-bcc7-76f050704168",
        "cursor": {
          "ref": "63093eb4-0879-4b5e-bece-0bb848328403",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "93231136-798f-4265-9eda-c89c0190ca0c"
        },
        "item": {
          "id": "58a9f353-dd31-4a64-bcc7-76f050704168",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d24fcf19-e9c9-43ef-83a4-7a0972cd91fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13117c0d-2698-4fd8-a3c3-393ba7143f12",
        "cursor": {
          "ref": "92eea579-b4da-4c9e-8b38-f2b9fb56d462",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c25a8f73-eb6a-40d1-b81f-0f79ecd249fb"
        },
        "item": {
          "id": "13117c0d-2698-4fd8-a3c3-393ba7143f12",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4e665cbd-82fd-47df-9ecd-d25e162ec868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccafb4d7-d491-4c67-9618-4d5619ebd611",
        "cursor": {
          "ref": "b6ec525b-35fe-4d2c-bdfb-cd5270672d24",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a4799d5b-4cb2-4fbe-8095-b58a2a2a6ec9"
        },
        "item": {
          "id": "ccafb4d7-d491-4c67-9618-4d5619ebd611",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "716359c2-aa91-4aad-87c4-b72588ea6a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce92f5e-0706-4c7c-9b8a-c013ed1b90c1",
        "cursor": {
          "ref": "0836bef8-37c3-4410-b168-2b1e7dc68f43",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a04f60a0-a5b1-49d9-9ad0-e51aa5ce73f4"
        },
        "item": {
          "id": "dce92f5e-0706-4c7c-9b8a-c013ed1b90c1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5e2ca81a-7396-4f3a-b0d9-067e8488bb82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351dee95-b646-47b1-ae2a-726ea44e2783",
        "cursor": {
          "ref": "d0787d2c-c199-4c36-9e30-8970784a114d",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "92d2b174-ef97-4f3d-9da7-c5d76baeb314"
        },
        "item": {
          "id": "351dee95-b646-47b1-ae2a-726ea44e2783",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8bb17626-9d32-4fac-a51e-5826c389f9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ac8750-ea10-4580-9d1f-e8fe7582cc0d",
        "cursor": {
          "ref": "eee3f71b-1935-49b8-8bdf-5c0c3cb5f13e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e06c6734-1aa3-4a8b-a06d-9517ce46be17"
        },
        "item": {
          "id": "b8ac8750-ea10-4580-9d1f-e8fe7582cc0d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a55fbe3d-42ad-4e46-8ce5-03829c327a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45aa4371-cdc3-49cc-be0a-255b8c1a0118",
        "cursor": {
          "ref": "40f9dc5f-537c-43c4-b11b-639d9f1ac34d",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "21749dde-c72a-4a1a-8258-0b28132ca954"
        },
        "item": {
          "id": "45aa4371-cdc3-49cc-be0a-255b8c1a0118",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "21fceef8-244c-4f39-a546-1588be01820f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da477ee4-1cde-4982-a501-2ec7cec50629",
        "cursor": {
          "ref": "1248e0ba-75fa-48f8-8daa-98e8300e9fbe",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c43884c9-9b5f-4d92-bbe8-0374d14dda18"
        },
        "item": {
          "id": "da477ee4-1cde-4982-a501-2ec7cec50629",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1a11f521-3cde-4253-894e-e4b8e30badaa",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "cd636580-f629-469d-9278-65f85edd206a",
        "cursor": {
          "ref": "3c146dd9-d40a-432e-aab8-a29663af6f5d",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0f89f365-5b09-410e-ab40-aea1eb70affc"
        },
        "item": {
          "id": "cd636580-f629-469d-9278-65f85edd206a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ab4cbb09-2a0d-4564-90b5-70d78454df9e",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "12bf9b6e-96c9-4043-a27f-00e70736e30e",
        "cursor": {
          "ref": "2edad771-9635-41be-83a8-ebbc4023c5e7",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2a22058d-b199-4b4b-8c17-6e85bb186573"
        },
        "item": {
          "id": "12bf9b6e-96c9-4043-a27f-00e70736e30e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "37b67b2d-b466-4e45-9c2d-0d83afa5d80c",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "080311ad-8b7f-45ad-a084-891d72be0e6c",
        "cursor": {
          "ref": "8a480ec8-8fc8-4dd4-a861-088dad5941ef",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "58824753-3b5c-461f-9acb-1fc42b0ecdc4"
        },
        "item": {
          "id": "080311ad-8b7f-45ad-a084-891d72be0e6c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "698d46e6-d8ec-4b6c-b483-8765262b7d12",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ca633f25-88b2-484f-934f-fdeb57c311a2",
        "cursor": {
          "ref": "af921f9a-62fe-4c81-b2f1-d32dbb002ede",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f49ff4aa-2825-43c0-ac44-db80d72f13b4"
        },
        "item": {
          "id": "ca633f25-88b2-484f-934f-fdeb57c311a2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a2274dd5-d07e-445b-954b-dbae0a7803ac",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "16aa84bc-f954-4ee3-a47b-8c039c9164bc",
        "cursor": {
          "ref": "9f75b2ed-109c-4388-9012-64603bdb989d",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "872e8cf1-d672-4f86-bc37-217a3e26a9ec"
        },
        "item": {
          "id": "16aa84bc-f954-4ee3-a47b-8c039c9164bc",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "544ff3dc-791d-4ebc-8efa-6563243a4df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a7d9a5-c424-40ae-a0d1-658ab5597987",
        "cursor": {
          "ref": "8dadc685-52a0-4703-b178-4889f98c6c81",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d95a7892-5ed8-4785-bb35-58ba1b8adb2b"
        },
        "item": {
          "id": "83a7d9a5-c424-40ae-a0d1-658ab5597987",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1b5e8cd0-c439-4273-ae94-2a7817e434b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5d920b-84d7-4475-9de1-1c77729b252a",
        "cursor": {
          "ref": "5912f48f-724a-43bf-9a9c-28683b1219a3",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "884e12c4-5a93-4471-8cb6-774998123b80"
        },
        "item": {
          "id": "ba5d920b-84d7-4475-9de1-1c77729b252a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ae7b614a-7be0-4c63-9c24-a60314e02e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3478785-a2af-44b4-bf16-1b806efbfef4",
        "cursor": {
          "ref": "76f69b2e-10c4-4557-ad22-b1a46aa4dac2",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8b61663b-d0eb-421e-becb-99cd5c0967e5"
        },
        "item": {
          "id": "b3478785-a2af-44b4-bf16-1b806efbfef4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "608b3bd8-c8f2-4a8c-a24e-93c21b0957ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd75597-9230-460e-8a0d-97a83a08c778",
        "cursor": {
          "ref": "5f837851-a67e-4d1c-81da-f4c7af432993",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bd961e72-79e6-43c6-a4bc-114a2845462f"
        },
        "item": {
          "id": "bdd75597-9230-460e-8a0d-97a83a08c778",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "21adaa8c-7369-43a8-85a2-7ad8d847ff88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4ae3a7-0bd2-4042-a04b-c8719d19c59e",
        "cursor": {
          "ref": "629e95ea-939a-485d-a6e7-1992348b4274",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f1705de8-12fc-456a-abe3-b0045513dd3d"
        },
        "item": {
          "id": "1f4ae3a7-0bd2-4042-a04b-c8719d19c59e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f200757d-0c40-49a9-8458-362915973ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f529c5-7749-475e-9f50-f8c6af012a7a",
        "cursor": {
          "ref": "e95f9fba-d34a-4ed8-b4b9-6ff7da1bcaf2",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d1432287-8044-4b51-93a5-818460206736"
        },
        "item": {
          "id": "15f529c5-7749-475e-9f50-f8c6af012a7a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "aadbd111-5c2b-4663-b504-4b93bf6fc81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3509ccd3-4367-40c1-8b23-b48efc2f2149",
        "cursor": {
          "ref": "4dce4232-122c-45e1-ae2e-cf12f331b82b",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5b578cd4-b17b-4e8a-bfd1-da36ad49c9b3"
        },
        "item": {
          "id": "3509ccd3-4367-40c1-8b23-b48efc2f2149",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cf223f9c-454d-45c7-930d-3ad8b1b24928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b64b37f-5ddf-409b-afec-e083bd4743e4",
        "cursor": {
          "ref": "40307a80-9993-4ec3-8b02-42186968395a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9d6ccfbc-45c7-474d-955c-edeb98242abd"
        },
        "item": {
          "id": "6b64b37f-5ddf-409b-afec-e083bd4743e4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "18e9bcd7-a3f1-4566-9e1e-7292ba1ab0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33c38a7-d254-4826-8704-09223b47fe5c",
        "cursor": {
          "ref": "e0ae8ead-92a9-45f6-987e-0e5de04d2ade",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c538e0d3-c627-4d55-947c-7168fe6dbc3a"
        },
        "item": {
          "id": "c33c38a7-d254-4826-8704-09223b47fe5c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "800e28b1-da3c-4434-a9a4-7ef04d9ee199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f438e843-396e-4eaa-909a-010386bdc994",
        "cursor": {
          "ref": "b428ef60-cc78-4fa8-965d-49b71a392002",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "0dfe4664-3030-401a-9510-613a054b05b7"
        },
        "item": {
          "id": "f438e843-396e-4eaa-909a-010386bdc994",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "25e6e232-3b4e-4e1d-8693-7e2a1eecd5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee92d7e-a648-4d70-966f-1c0e05496e8e",
        "cursor": {
          "ref": "61a4be2e-91cc-41f5-bf80-abe39eac762b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0d8be2a5-679d-452b-9a5a-7cd67b9a8467"
        },
        "item": {
          "id": "bee92d7e-a648-4d70-966f-1c0e05496e8e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9327ea90-825e-4150-81c1-7e6f65c3f725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f26ad8a-058c-4158-9b57-8b6a03f873d0",
        "cursor": {
          "ref": "477ffb36-d345-4c0f-bd55-79fe8f31e636",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d16d49d0-1a52-4d55-a2bc-261cdc501c8d"
        },
        "item": {
          "id": "2f26ad8a-058c-4158-9b57-8b6a03f873d0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cd9c518a-ea82-4f12-a72c-921dbba22142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f65e616-b580-44e6-9da1-df22e485eff2",
        "cursor": {
          "ref": "a490c9bc-c364-4925-a0e3-d3d8014fa3de",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "96843d60-84a4-4841-9981-a932ff51d139"
        },
        "item": {
          "id": "7f65e616-b580-44e6-9da1-df22e485eff2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3122db68-0755-4435-ad1b-b12b6b05fcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab63122-482e-4c2a-b6c1-e55fcde04ff3",
        "cursor": {
          "ref": "e5df1039-1da4-40f0-85e1-3f916e7cd384",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "86850764-19ff-4267-a4c4-f9103816c19e"
        },
        "item": {
          "id": "6ab63122-482e-4c2a-b6c1-e55fcde04ff3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bb571291-162c-4ea8-8216-e381b4dee02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9dfa0c7-799c-4bea-b915-6825edd88bb6",
        "cursor": {
          "ref": "e69de422-8191-4d14-8024-b445f96a735c",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "3258da23-3410-4ea7-a403-f4d60411647a"
        },
        "item": {
          "id": "e9dfa0c7-799c-4bea-b915-6825edd88bb6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e010d6a3-b576-47be-abdd-6150dcd90e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47f0bb2-9dba-4c2e-85d6-e17b7a626188",
        "cursor": {
          "ref": "b06260c9-e74b-496e-9286-087fa1b629b3",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e63dc2fd-c976-4459-91c0-a0262483014e"
        },
        "item": {
          "id": "d47f0bb2-9dba-4c2e-85d6-e17b7a626188",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8cdfe4ae-7832-45da-a3fa-359f78bc1a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5609c989-f5bf-4661-b154-ae7a3b7e52fe",
        "cursor": {
          "ref": "17907508-6b07-4ecf-a4d1-cd1890623a77",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "0e12228e-cb31-4f98-9dd7-c58b30164ba8"
        },
        "item": {
          "id": "5609c989-f5bf-4661-b154-ae7a3b7e52fe",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "619173e2-4a90-4119-a3f8-b7a3e1f19216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b665d306-2093-4bab-a308-478170928788",
        "cursor": {
          "ref": "7af2e14e-3a18-4cea-b914-30d18688907d",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "88947dfc-3eb6-472e-829f-ec223c44c6e3"
        },
        "item": {
          "id": "b665d306-2093-4bab-a308-478170928788",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c6b673aa-540b-4530-a63d-4927762cfca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bccee9d-5ed4-4127-bf4e-37ffb2db07bc",
        "cursor": {
          "ref": "038077a5-305a-41d8-a183-cf6744b682a1",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7a1c493a-6d64-4869-880f-bbbc3a7dc0c3"
        },
        "item": {
          "id": "5bccee9d-5ed4-4127-bf4e-37ffb2db07bc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7281ffdb-3689-41d0-ae72-71964c5ca750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8931963-aaeb-45b1-9492-546b960e4450",
        "cursor": {
          "ref": "3451c53a-ed02-46b2-9004-a566a2554f6f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6d779802-0ad4-4973-8062-7e1652ea3701"
        },
        "item": {
          "id": "d8931963-aaeb-45b1-9492-546b960e4450",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c73113d8-3ec5-4cea-a33e-aa3d022a6add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd7bfe2-4388-47ae-b34c-121483a057f0",
        "cursor": {
          "ref": "e601d381-5dc2-46db-8e40-92e8c3d5dd93",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "1999778a-f1bd-4083-ba75-4ceeb6f7137b"
        },
        "item": {
          "id": "2dd7bfe2-4388-47ae-b34c-121483a057f0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "88ad4664-efcb-4252-86cb-40072ae51cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d806704f-dfdb-4cec-88fa-997c95f90148",
        "cursor": {
          "ref": "8d9fa173-282a-4fb0-b5f8-c69b3ad68fdd",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0a146d5c-2839-4b6e-b16c-2480feb06257"
        },
        "item": {
          "id": "d806704f-dfdb-4cec-88fa-997c95f90148",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a51c39a8-0459-41b6-8a68-1a7853c00bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd17d53e-d5d1-450b-9b52-201683330883",
        "cursor": {
          "ref": "52a7e5b1-b387-40e1-ab54-4167511c3fad",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "75aadc51-1cc5-4d7f-81d0-03fc335e74de"
        },
        "item": {
          "id": "cd17d53e-d5d1-450b-9b52-201683330883",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "50374822-c392-45dd-9a91-c17b844b8497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed26e37-aefc-4212-bf8f-ae15f8d70bef",
        "cursor": {
          "ref": "23e615a7-1d77-4238-981d-c6a3f3f41294",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "8696d3e9-b9ca-49b4-b97c-e851fc91deb4"
        },
        "item": {
          "id": "6ed26e37-aefc-4212-bf8f-ae15f8d70bef",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e4abd485-297f-418e-9d41-2b6287ff7d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c61a21-148a-425b-8953-0ac1de965d72",
        "cursor": {
          "ref": "fe8687f5-450e-478c-8021-fafcc4a168ab",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5f783a56-f22f-4c24-90e0-8e1950388110"
        },
        "item": {
          "id": "72c61a21-148a-425b-8953-0ac1de965d72",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "53c751d8-c0fe-46b6-ab0a-7ee275f75edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bef98ce-f0bf-45fd-a023-8be3fa47a245",
        "cursor": {
          "ref": "566d88d8-c15e-458f-8012-d29c69324cb6",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "820ce695-65fc-4d85-8db5-32b37765d155"
        },
        "item": {
          "id": "7bef98ce-f0bf-45fd-a023-8be3fa47a245",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d6dd0e48-fde6-4875-968a-6be72de0276d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31afe11b-7285-4eb0-9354-2a61b601a29a",
        "cursor": {
          "ref": "553ae18b-b7a0-4819-a4f7-f503eb9b9c02",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f3ad4539-180e-446c-b992-17b7dd21d918"
        },
        "item": {
          "id": "31afe11b-7285-4eb0-9354-2a61b601a29a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ed98a614-6fd6-40b9-b152-b16e8959d5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb6f4f3-53b6-4974-92c2-4311ca86e728",
        "cursor": {
          "ref": "53a60bd9-4885-4b70-9b0d-865ffc270533",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1c707049-6b8f-4efe-af0c-4562611be945"
        },
        "item": {
          "id": "aeb6f4f3-53b6-4974-92c2-4311ca86e728",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "043e7d11-62b3-4d00-8218-ee335af904ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69afa7d3-249e-4bd3-bb04-c8d2e8019ea7",
        "cursor": {
          "ref": "e6d26a6e-f4e4-44f8-adba-40108249572c",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "fb56de3f-13f2-4863-a9ab-f99317aafac9"
        },
        "item": {
          "id": "69afa7d3-249e-4bd3-bb04-c8d2e8019ea7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d368a684-4214-45b7-8f09-cc60ebfa1645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f71a048-d6e4-423b-8a23-e8757d11edd5",
        "cursor": {
          "ref": "04db0de7-98c9-4c3c-aaef-ef7dbcac6e40",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "3549d27c-9bc5-4c54-9368-dbc6cad1abdc"
        },
        "item": {
          "id": "1f71a048-d6e4-423b-8a23-e8757d11edd5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "999ce43d-5eb1-4c0a-8ee7-24e91010f47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83366c1f-21d6-4739-9b9e-c61dbc2c8a3c",
        "cursor": {
          "ref": "f07aaaa6-3b5b-4982-ade1-a72ee665d985",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ff2f04ef-ca7b-4e7a-8050-2310b64fa752"
        },
        "item": {
          "id": "83366c1f-21d6-4739-9b9e-c61dbc2c8a3c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c96ca51d-c263-4673-bbc1-0008585f221b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca77d1a7-1a4f-43ec-aeb6-b2ecd0a38cea",
        "cursor": {
          "ref": "80ae368d-9a86-4c29-abf5-acc0c0ffb7b0",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d2e8c248-25f4-47ed-92fc-760790dc8f20"
        },
        "item": {
          "id": "ca77d1a7-1a4f-43ec-aeb6-b2ecd0a38cea",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8b7888d3-4e71-4c8c-9aa1-368efcbafe9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadd191b-8638-47ad-9686-affb39a06a49",
        "cursor": {
          "ref": "11344af4-84b6-4973-a3c2-7f6875a76cd8",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "4f4c9ed4-27cf-4f71-a8ed-ee63858a5148"
        },
        "item": {
          "id": "eadd191b-8638-47ad-9686-affb39a06a49",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b1bc6f29-0481-4e89-8053-370cea6c3b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "865414df-44c1-4565-9920-acc5bfdf295c",
        "cursor": {
          "ref": "8ac6369d-b990-4115-b5a5-d09b1814e9ce",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "4c996b8d-412b-4c55-9931-7fb6557ff1ca"
        },
        "item": {
          "id": "865414df-44c1-4565-9920-acc5bfdf295c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "be73a831-5842-4283-a4ba-aa8673653f31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f56d5b1-7e02-4d87-8b08-16d13805015b",
        "cursor": {
          "ref": "85db6449-81b6-46fc-9ead-cc2a28afb18a",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "5368cf3a-9590-456b-9423-fea9743dc078"
        },
        "item": {
          "id": "8f56d5b1-7e02-4d87-8b08-16d13805015b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0a29293d-d427-4909-adc8-d11a3781e1a8",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "bd786842-9e8e-4850-a449-0611689e515e",
        "cursor": {
          "ref": "de431048-6508-42b7-a30c-bd6393820b7f",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "baae06bc-1f37-4620-b068-bebfcaed2d66"
        },
        "item": {
          "id": "bd786842-9e8e-4850-a449-0611689e515e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bc2d2840-00ee-44f0-9f4d-cc542f1c631e",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f27d4a9-2cd9-4add-acac-7aa561428511",
        "cursor": {
          "ref": "f764edcd-096d-4e82-aa78-1b4fc70cd406",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4f703d4b-2a6d-473e-a0d7-973d4acd604c"
        },
        "item": {
          "id": "8f27d4a9-2cd9-4add-acac-7aa561428511",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e7e0e749-197c-4c46-addc-08b97986a10c",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "680d90c0-6300-4e05-9f34-40cd9b030790",
        "cursor": {
          "ref": "950bb3d3-4c8f-413b-af02-35538685511b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ab4f64b6-9d06-41dc-8b9b-44ae2d1875c6"
        },
        "item": {
          "id": "680d90c0-6300-4e05-9f34-40cd9b030790",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "611a72ac-8864-48bc-b283-e6fb26fc8f1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680d90c0-6300-4e05-9f34-40cd9b030790",
        "cursor": {
          "ref": "950bb3d3-4c8f-413b-af02-35538685511b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ab4f64b6-9d06-41dc-8b9b-44ae2d1875c6"
        },
        "item": {
          "id": "680d90c0-6300-4e05-9f34-40cd9b030790",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "611a72ac-8864-48bc-b283-e6fb26fc8f1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f286f1a1-5632-442d-9b6c-3a63214ce157",
        "cursor": {
          "ref": "c47c085d-99d1-4d9a-8c3d-6c59d83e68f8",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1aa36377-ef8a-4be1-b124-bf9758287798"
        },
        "item": {
          "id": "f286f1a1-5632-442d-9b6c-3a63214ce157",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c71aa74a-7d39-4b13-b779-e20ccf07b375",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2970fb0e-131f-473f-9012-46cb59a56bcc",
        "cursor": {
          "ref": "c9221bc7-13e5-4388-bb48-6f7b96dd36e8",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "72e7c862-7269-4a07-a776-a7e122b67c33"
        },
        "item": {
          "id": "2970fb0e-131f-473f-9012-46cb59a56bcc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d861e0cd-75f3-4fa8-b29c-3fbbbc5b9580",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}