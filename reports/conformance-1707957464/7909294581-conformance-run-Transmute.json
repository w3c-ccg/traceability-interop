{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e3a88ace-fc7e-42cb-80ae-7a583b3eaf23",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fe7a654c-8612-49f7-8983-7cc00e193360",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b446107f-0d60-4fdb-801f-5c868ac4bb4c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "844974fa-4d21-499c-af2c-6559cf52703d"
                }
              }
            ]
          },
          {
            "id": "1cdb87cf-daad-441d-85d6-c7fe1c801b5e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "98785c3b-9ace-4300-9295-3ca821d71038",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4bf193ae-72f8-4554-9e78-c233e0a2903b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "43aacd58-1130-458b-83f1-ada3c20203f8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "031b4ff1-7a52-43bf-b498-5b6bfcbead91",
            "name": "Positive Testing",
            "item": [
              {
                "id": "85467a48-33dd-4025-b572-0f1e29d9fe0e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "545d9ff4-1208-4e6a-879d-52ac0bb53cf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5475a46e-e49c-4551-9ada-843f91ac9c9a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c07a4be-4c99-4308-97fc-839dbc98c929",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7d8073f5-b6ac-463c-94c2-d62cdc5cca86"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b721d014-989a-4ef2-b706-14ec9edf3cc9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "00c5515f-c510-442b-a08c-0cf9e7d50900"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9df48bb-7ee6-40a3-9964-9b7b703a4679",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a65daf85-3bb8-43fb-9353-1c15b3ac4566"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9b09d71-4caf-4e91-89d4-fea94b15f577",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d8b4aa3-e658-4bb8-ab20-c9282fcc0ac4"
            }
          }
        ]
      },
      {
        "id": "66499612-1003-462b-bbdb-7f9bc8892b60",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "80cfd56d-3c89-4ac1-b704-a449ad921743",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f9564ce6-2e74-4a64-a562-4bbefaf815ff",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "99e66f0f-564c-472b-9413-9ea5d19e2be8",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbd74b2-92d5-451f-aef6-f029146159bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "563748b7-f4ed-4d5b-815e-c3fff9eb29a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9163baf4-0252-42f1-85cd-29cbd815faab",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5df739-ab48-4455-9d17-195a62bc31d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed972df5-f047-43e6-9887-d6bd07b11d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33efbff-653f-49dc-9926-a1616e81e20e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dc1713-8b49-4602-afd5-c5ba899e80fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d456eb35-5b2a-4e8f-b197-d8987af7d1d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "096153d3-30ac-4f1a-b554-b6dabca9f629",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f02524c0-20e7-434e-ab48-faa1f32411e7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d74ef49-4dda-43e2-a61d-dbf1f2300596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bc6c56b-d66a-460d-8be5-bbe63c542976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c10bc1-7f76-4563-8f13-de696d61593f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c51ae6-3685-4b95-8721-5491fe2c0436"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0a36f6eb-1b2a-4053-8325-2187d0c77aad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8ba945ad-c3c7-428e-a469-ee386d283940",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e60c40aa-5fde-4d04-b04b-6c14ac6c9bae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c8423292-f940-4e55-a6cf-e63a11bc91fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b35ab3d-82a4-48e3-9382-464e290bc7ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f1f27c54-eab8-49d4-9d80-deacc4e48f1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc1f4011-0498-49fd-9e90-6506fe006f3d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "017107b8-854b-4be3-8251-4242dde93159"
            }
          }
        ]
      },
      {
        "id": "ab9826a8-30f9-455b-9c65-59360dc73f1c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "32c034fe-ff71-4c87-b8ef-c1bb6806931b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1df1983-afd3-4edb-bc4e-1ef33ea57c7a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a2718816-9085-46c2-ab68-649464d74aab",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2565ddc-4a6a-4ac3-840f-84506d832ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c9b7375-6791-4caa-bd9c-83573f368be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000cd7db-f820-493b-8d5e-f263ce0a7a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3afc1081-da61-4ee3-94a0-4d6b279cc19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b23fb4-bd53-4424-b16c-390a85c286a2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b72c7a-9595-4bfa-8373-ade72da0bec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3311793-7afe-410e-800d-2286757176ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004bfba7-ba38-4ad6-a58a-72819678bb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05442f65-69bb-4149-80a0-456b12606b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfdb079-2f4e-41ac-8bfa-c273a47b82a8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdd7fab-1c4e-4342-9fda-b3b6badd015d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15e6010-7e70-4e2e-b187-e2e87679e793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f23aabe-187f-4191-b42d-6f91aa1e19a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "961ec9a3-9fa4-4930-bd48-e458bcd8d0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550df152-c754-45fa-815d-8d4617d1fd6a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01995ad-6749-4172-9c50-8e19d681e92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0476d44-1482-4723-9a55-f0f6a074982a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f91d93-6f88-4c21-b5d3-882c2bf7b331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49e195b0-0d28-4481-b5f1-3e7a4fd512bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5538838-6a88-4863-a687-34dbf9c6a710",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfd8c3c-efb9-427b-862c-c841c2f0ca91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc221891-568e-4e49-8325-b6262e99ce46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b5e6bc-ed9e-4eca-8ef6-48a13af6fef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b40f1bf-7901-4d00-b997-18756101f856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc36917-975a-485b-a349-b49e2d9575c7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f7e5f2-ea74-4a86-8e6e-0c8aee5ce857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0ca56f-9b28-46ba-a997-849cd2934e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565e076a-8ef1-4a7d-bcf4-43f178a040e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "446bb880-90f3-4cd6-bd80-24226f3699c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f678ef-e223-45c7-a27a-8d829f46c6e4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df52ff2-ebc1-4c0c-9554-5132a15e08fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10745465-e067-4d92-b65e-089a154ce693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35944ea4-c774-46ee-8cc9-aed54339540e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa5be02c-d345-4eed-ac8d-55597c8e82d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6287d40-899c-4cb4-9b43-4bf98877694e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea764dc3-a898-41f4-a3c1-b518af674883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da131e5-ed6f-4f5d-a9d7-39cb32f23b7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9aa2e1-e606-4ac3-ad42-68bac960ed8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f1c5132-63ed-463b-bd18-2aead450c857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1423555-afd7-403b-b8cf-0663af050d83",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f05a526-ac7b-48e8-a659-de9af9e9cfc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c294375d-d6f8-4407-b23e-559779cad09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5aa433a-3022-4af8-a5b3-099d5606052a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00132f3c-97b5-44e0-9079-f9ca0880bd04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545f6808-78de-4fe6-82d0-58f1eb8bb7ef",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a83266-2528-4b38-b83d-287728f18895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92916233-3c87-45c3-bc7e-fd40f2484fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de887835-cb85-4cec-9394-b04f6255da2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23ecbc29-c71a-4683-b88a-13dfea60a893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e9e3f8-35ca-43c5-8607-fb0676d744ac",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bb3036-e4dd-4c3a-88df-1db3e987ff5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a089dc3-cc3d-44de-8fb2-4a4da0c705b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5dc5af-7ba5-4772-bcf7-e6d43c41623d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcd3450d-bd2b-438f-ba2c-ed9083699004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fc050e-5163-4d84-9edc-56437ee8ba40",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca4f418-d36a-45d9-b7d3-cbdb6ade1da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8aa6a91-81ac-447d-a2ca-746249e9def2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197222e4-285a-47a6-bee1-23fde702abe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42fdf788-22d0-46e5-a437-b45d1aba614f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34169555-d3b7-447f-9248-e45c75922687",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5802a665-1239-4981-b7b2-7bc0a8b7f88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44ba4af-45c2-41d1-b44a-286005f127ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ab3389-6d76-4c7d-a038-f0bdf5d2ed9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84d37597-95b8-4420-9287-3d34f40eb70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f371d8f8-fef2-41f0-8b5a-8a717d66ee13",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef89be6d-92fe-4de2-a721-29bec6a61751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af2bdc8a-4664-4aa5-b116-01ba1737773c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c547b6-4339-4a4e-a93c-73e814f13e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2697e08-5c86-46af-a596-1eb54da858b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9161c1b-0d79-42cd-b76f-288d5e017f99",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088a3888-b7da-46ed-9c0f-dccefa91fec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54eff141-c506-423e-9165-7ae9c020616a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81ac8f9-29a2-4334-a03e-5d53a2683e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85c2fdec-1b6b-408c-a195-de8623e16e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27254d27-a316-4968-8be5-8b3e99b6670d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdddb10-51f6-495b-a709-9aacc0e69bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291c86be-1e24-4b31-b186-8d6dc01a6edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727c606a-5598-4641-950f-7334b93b96a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b32da28-607f-4d6a-afba-cd12e0117ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc61fa69-c113-4ee6-a096-ebff30d86092",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd25a6b-470d-46d5-bb88-64d896256314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d950ea4-4ffb-4bf7-a31c-3586b179db62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83737c8-63f9-4558-b403-2ca7d297b590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "798a295e-68fd-491e-97bc-18b2ac997a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f79810a-5305-4b1d-b67f-22ee30abd555",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbe5527-2f42-42a1-9998-91af2e6f42a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0636edf9-cc32-458b-b6ae-5dcb8e7f3329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99578cb5-cef6-41da-9714-b9972405e047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a678ab68-af0d-40cf-81ad-c4d4b2039cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7153a4e-4b60-4405-9c9e-aa40e00edfcf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "883bd978-b02e-4f1e-b46b-7fb426562fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cec2d5-5238-40a7-b23e-eb498b869ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8caede-47d5-4d25-a9eb-8caa5e9bda63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af738813-00cc-4f56-87ed-75cead937dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e09c4c-8b4a-49e0-b47e-ac7f52e2486c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549075e8-8053-4def-a625-e974d6b72578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6e35b6-aa76-4b96-8d6a-5714de6fcc94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a893ead-a2af-4cf7-9a14-e4cf7964fe11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0b90fb-f311-4ac0-a959-f029cb15f43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24bd5342-0f79-4891-b440-310b4a3ac384",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5067da2-350b-4b6e-aa3c-594d4b0376a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c016b470-ac7a-4475-850b-acdcf9de3b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9f9d1f-bc92-4470-aa2c-7c3b3435c009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca546e8-9b25-4135-999d-2c2e09c0eca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affe012b-e75b-4e65-b747-430c4dad6c00",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed2dc8a-e36a-4a95-b062-72985931bc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f21061-510e-4e9e-9829-78f4a092f738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ecf5b8-444b-4206-8dae-5fcd5dbf0da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73d8acf5-cff6-4b20-8401-b70aebbdeeab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a2df50-a5be-4b26-a27e-a48b9b4a3e16",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c526735-f4fa-4ad5-8f59-6ef471aa56ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0d7f5d-5076-4e9a-8961-3667503df702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0642d03-66e1-4feb-b423-e8822865b20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c67132d3-4fc5-41c6-af1f-9e1a434e5b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9491f60e-d195-4415-8b96-e8ea6ee6dde9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40012f2-399d-4585-bf6d-d997a16a86a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6299f215-7c12-41e4-9388-731b61bfa6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec883ed8-8d9f-4ff7-8f04-fba4112f0761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "282414a5-888a-433a-a8bc-fe47a5f401e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae1ae69-152b-4ed4-8a15-0c74c7cd99d0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4f85b3-0f56-4109-93d5-7480ebb66546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94f040f-3c8f-484f-a772-b78b583b8aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6457529-49ae-44f1-93a3-8609bb2a90a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "116ab50d-056a-4efd-b49b-96c7f13676e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8cfb50-2240-4ee6-be3f-9bfbffd77317",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40650d8f-9dfe-4b74-ace7-53b4f402670a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71b95a74-20b0-4973-bdbc-7dd133d96638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918f7fa0-9cd2-4770-9c5e-118b219b9b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de1eb3a2-d043-4d05-824e-4d82300f0b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b1998e-be82-4187-92cd-8a73e4b0bb19",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014a257a-924f-4808-91b9-2e2915ec4986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859acfa4-a627-48b4-9741-716fad69ae00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3bc470-8c0c-4653-87f8-383b8aba6fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c72cc91-0439-47a0-97df-0bdbc9e49bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3339ca4-30a2-45c6-8171-acad8a582679",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9af671-8bea-40d0-8af6-df27ab70dc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37dd20a-e022-4ce5-a68c-d34b86642b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0948b84e-a94c-42fc-9426-fe9eca403c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86490b63-5b11-4a1a-94fc-a7669795c2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abab07e-86d8-446a-8677-3931303de9d4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3289e3c5-7382-492f-a80d-4d5ae3242f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a6234bc-64b9-4ad9-8693-fecb1ceb8c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a2dad0-158d-4925-8107-36c5dfa7cd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e10c085-23b7-4061-889b-d55ee947a47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14ce7d4-97ff-4ef2-bf4a-99839d1a29de",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c014bc8-87d9-465a-89f4-0f56c0b263fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49083f4-43cf-4bed-9b14-35a36045c6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a510e6d8-80cd-4a18-9b53-6245bb6e5add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8268d769-72da-49c7-8cf2-c2d8eef3a09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d846067a-c5f5-4467-a2d1-c1f6e161e8b3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a1fb16-a68f-4502-85b9-5c1d5246e1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b66a1055-cf88-4db2-bb38-5eb5876f4eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf99be6b-2329-470b-875b-e5a1bc6d42df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3840313e-ab57-48d3-a314-6dbb238bbdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96d8bfb-1ad7-48fe-ac2a-65447ce4898a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f76b7a-190f-4df1-8528-f0c737766d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d0468a-db67-4840-8b43-ec35583304cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c48b35f-cf46-4dfd-99b6-d39145b97829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8283562-14ba-46c3-96a8-b1f6ad5daae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f1462c-d65a-472b-85e9-9218416b009e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ebe6b1-8b8a-48e4-bd86-e322abfb0352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d482444-1e19-4843-b0af-f2eac35e04e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c793c960-064c-474b-b09c-7f37984982d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60cefae1-f24f-42fa-8b97-7cdcfb8f65f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74aef067-5a9a-4d5a-910e-76d71d5adb0c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b64193-4eb8-49e9-8ef8-f75dbd42c161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dec6412-e990-4a5a-b8c6-fc8e78be6bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f40212-4f77-4b0c-87f8-d28e59b282f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aea1f5f0-4c20-4a35-b933-1e9e03cf1b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911b03eb-9e72-4edc-a665-26fe4c8aa358",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d7fa1a-a50e-462f-850a-5026548579c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998d5856-f2ac-4776-9093-20d227434f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e355abc-c193-489a-88f6-0a8621aba37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "23a44ceb-6242-4e76-80fb-2aa0161b0722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fab365-a463-4d5e-a0b9-7153d334873f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54874a66-9642-457d-bde3-c93145bf59ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0bfa36e-dd84-4997-ab70-2fb8ce2d030a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1fd924-a1fa-4ce9-b698-161b42271978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0116a3ed-bbbe-431a-bf9e-de46ad021354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e127939-b761-4a86-bf77-ef163a3f1aa8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20e784b-3761-45cf-ac01-c46def65e562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b4e0fa-6430-4b29-9028-5075ff60c103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6871c33d-8fa1-4264-884a-6753fbda7dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b49f98-26c1-48b5-9f62-0b706808176e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431dbe24-f14b-4dbe-84bf-f6110d3769d2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18c25c9-b902-46a5-9281-521bbc89b335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "308c092a-cede-416f-8fd8-2878038b0809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690fcd49-58d5-46dc-a812-4777175d2dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca02ac0-780a-4c7b-904a-33289d773ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33765db-41f9-40f6-901e-4893cad7d5ad",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304d77ab-a4b6-47ca-ba02-8b3263b3ac0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e18fc38-6ae1-481c-b9c6-74265fbff52b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceffb64d-7aad-4b75-ba44-6882aa263c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c7cac2-3a53-4868-8dc1-9e92ef717b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7ccc8b-9531-4c33-b829-fbba8e47b433",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a0752f-4d6f-4d86-9d10-5219627060a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6692ad2e-484c-468c-94ea-4d5c9bc2f0aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8191505a-8952-429c-8233-d10e84ae56ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ced4133-b29b-4b7d-9292-346293c8f3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae808d85-60f6-403c-9fbf-cc9124bc75be",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cc184a-ce4f-43a2-b155-b289f35bb8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fabd3fb-7bb7-4c20-83a1-936267322945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beea3e22-c209-4776-92f6-507e1c5871c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a15fdc-2455-472b-9cda-49c5e5a85285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990f8294-1670-4623-aeaa-a2fcb0658b10",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dabe6e9-c8a9-424f-a281-0c9bd0423070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53598e45-7d60-4fcd-90db-58e61a103fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5714c513-ec37-44dc-9c20-daa678759b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d91fc5f4-9823-461f-834c-72f3914c2f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b851b341-6787-4c9f-920d-81f84bd92e96",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7709e4-fdd1-4124-bfb0-e73476664564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc9d21b-0003-4dcc-a9c6-d6c578fa4887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad2b79a-e61c-4941-ab65-b83e1003cbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "25061297-05ef-43fb-89f4-cf7adea42ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83158e3-a9dd-4cc2-954e-c0bdce61db75",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5ba5ab-846c-4b85-81d6-d8de499de2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c99aea72-6c42-427a-a08b-6b51f6c2536b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04c36a8-21a7-4476-b3a8-e0d790edafaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d869e75-adfc-428f-9bdd-227b165f8e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19853560-f11e-4099-807f-06cf90d0d806",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b1ed50-25c7-487e-b5a5-527b739bf218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6021c8-803c-4820-86be-e6a7176d047c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada903b9-d837-467f-b813-a681828efb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "004d11ef-34b7-4e3d-a9f4-269272fc638b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd776c0d-9e85-4bde-ba43-550d9aea1e42",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e64ba7-3b24-4798-b894-18eaa150ff34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb3b8ac-f08a-4ffc-9e02-1f69cd5088fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92da4769-eda5-4e7b-ae76-ecb6bfd1e12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9882fe-5a6e-481e-9014-89fb6ab29a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c717aa89-ca77-403e-b77e-7818cd77c10e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c0bd93-ca2b-44e2-99cf-b901de566691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76843d3c-2768-42fb-9919-93c0f28fd36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195ab331-3d06-442d-887b-75840ddb94f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54685418-412a-4588-8c7d-fcfa560d4647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09126c6f-2d58-493e-ac93-3494ab52b0f1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95f8e89-0ad6-412d-aed1-98a9f5c3a458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d554142-6685-484a-ab13-427427984c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257d6030-14df-4527-90b0-558d715fc7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59f10da9-1729-46c4-8a2f-393f0178830b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0593d1-5ef2-40b4-abbb-110030ebb66b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd7bf5b-fb7b-40d7-bb4d-9ea071cca8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7773aa10-2fbc-4c4d-8604-8360e6f09081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d60d2cb-f1cd-407a-b381-079af29b0788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92da1bec-6a43-44e2-a20f-38039695d04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce43cc9-18ab-4a5a-a3fe-8a03e899f5ed",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fd0a07-6a80-46a7-bd91-d60073f9847f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c1cb27d-93da-4a15-b88a-bdc2dba0744d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b0c7bc-8827-4158-8cfb-dc7a8eff09ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88b17cb8-bb7b-4bc7-bd5c-101a89f4c5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0debaed0-df39-4a70-9313-3dc842bc6e45",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4353fec-e064-418f-bf54-502ab5ddded7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdebdab2-9287-4e59-b30f-c3baeed9a87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97166cab-95a7-4a80-a43c-61901d55fe1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffad5585-76c3-4e01-9b07-6f0d29edfd35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849a3c9c-c28d-4e98-a0f9-3955cab671e5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691dc2f3-8b7a-420e-bc6b-0815c1d3555a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade35beb-d11d-4349-8e8e-b9a0e6d22e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9b7e3d-d7ec-47e3-9d89-ad7dacf1a47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeac1579-32fd-4089-9c21-1c14ccdff19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf65fc3-2443-4f92-bfa8-b05386483dae",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7553565-f96e-4814-a5c4-66be932be9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110bb52f-e5b6-4980-8e92-ddebbb87ca7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b205a42b-2fe8-4add-ac0b-ff5223fe6534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0a94a1-5319-489a-86a8-b4d4064d22dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6a7ead-c47e-4fff-b71e-e011d0063daa",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dc5253-0f42-4e66-89bc-6c8c277bcfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9589a754-07df-40a0-ab7a-9438150741fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c196fb03-2638-4ca7-9f1b-29e98980b11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b42e79e-82bb-47d6-ba95-f9a9c8d02902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f84107-e86e-43a9-97dd-d8894c31b661",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fd84d0-89ac-483b-93bc-e844faa706bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1256f31-99db-461c-9eff-f5cac9fd6a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e28c70-6557-464e-99b6-656349fc94bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17c86f4e-0231-42f2-9102-e7c60ab672c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd82657-b4eb-45c9-8e62-06ab91799c22",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f1c382-8011-4f25-9479-b36c721f3baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc6cae77-b8fe-45e3-9f92-748530cf591a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fb344b-7393-4a67-81fe-cb9b266b4053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e5ba97fe-85ae-4eda-946d-18166c6dc451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c816dfb-6983-4540-9d03-3889372d24e8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3183f4db-1c3d-4ef2-98a7-70e94a778192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d5182d-eaba-4aa4-b25c-240ccfe117a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e59325-1aa7-4a27-bdc1-5bf11e154447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1478b1d-20e5-4a44-8484-70c3074e683e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de8afd2-002d-4332-b1b4-203882543148",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bce4fdd-6224-4913-98f2-4d1278f699c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b376edb-b4a8-4be8-b4b1-bd68caee0537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974368f4-2ee1-43d5-b570-7f8aed32efb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "28758404-9f22-45b5-ba94-02e73e77674e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d662df-8a33-4daa-aaab-a976c82ea9ee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221a263c-4e14-4f25-b55e-a15b55576415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe486e1-f041-4d7c-a879-53246ba3a272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e96c272-1969-4966-9c07-bdc7484a931a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d968d354-aea3-4593-af3d-e9a68b3943cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30ec652-55ce-4b0a-8a34-aa3bb70c42b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d38ef1c-28bd-4953-8b84-7e96b29a749b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df2349b-0e47-4ffe-9350-69bd7b9a1427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f1db1a-0068-4eee-a62e-b836d4c54230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b400d910-ddce-429e-9b24-c2649321e161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9de3e13-9f5e-4cd0-9d84-6e865659bd8b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69813766-b183-4c6e-9233-323947dc7079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d05142-7bac-4b2a-924c-e1fc663b48cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafc5192-0950-40cf-b015-288ee881a601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "841b3bc1-50ab-41fb-966e-e95271b2b9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10656f38-0ba2-42e7-ad50-de10839ac2e6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f81437-29c6-4422-a6a8-5b26ab787eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364daca7-893a-4ed4-80d2-0fa9178989be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0dfe266-f11c-45fd-ada9-14fd4ce788d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea53f933-fd42-4f34-9bb4-c3325fa164c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9363d4-ac93-4a38-9d2f-d940444f407e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffa41d3-8994-4494-9086-8c32cbb73c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd57ed55-d779-4688-a8ab-ee7fe0c96eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331489dc-60ef-4e80-95ab-ac5bd29f40ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b52bd62-57e5-4960-a6d0-39d002e12e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96708b03-7dc9-40ab-98ea-992939b76b7b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9369b46-c056-4c3d-9482-464e961f4ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed66aa3f-f01e-4e82-b356-132ab8719e7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739c9cf3-50da-4459-a20f-9ba61e88e6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44f1393e-a5c7-409b-92ce-3c0afa55d5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37545620-5b72-41d5-b096-bb22a854ba9f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a0baa0-f73b-4041-bc89-28ead703bd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd791e7-3027-40c9-8f79-228333b27034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefce58c-27cd-4f75-bd6e-896ab3e83d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62c103d2-02cf-4888-9ccd-547ffbf4b922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4461c795-6f74-4fba-8780-4c6042eca085",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df9fd3d-2204-4379-bb54-42693ff3df85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7874eb4-b485-45fd-acdf-18a03e95ba08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7677f180-abe9-46e0-940a-232de8da8085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "396ee791-d705-4d48-9dd6-9e40f109f8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535f22af-e4c6-4a5d-b674-7b4d9db3a460",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41384f76-8eab-48f7-a331-6fafe1aa2b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc53155-9a1a-4a0f-83f3-62dc7f161858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15ab114-6df5-4b18-a8ed-9cebd2562758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16de1dc0-641c-4e19-bc59-732bc4ed8086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688fe704-89ec-45c8-853d-4fc1a4e60e30",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f5b6e3-dfae-4b48-a462-ebf8f2f459ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079a0f9c-db41-477e-89f0-58eb29007423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe0e0b8-3e1d-43a6-9ba5-e6e7b934693b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b252008-8151-43f1-89e9-833c306103ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36f8622-b3ad-4e9a-937f-0fd7a9754c5f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9f4041-8f08-4266-9ca6-9dcb8115f5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3abb55e-a562-4dda-aacd-92669f166a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad8db05-5771-4803-a245-812ba5bf1548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "48c21efb-7ae0-4d6a-a002-cf3b02d101f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eac6920-79d9-47bf-b72f-7ef89c61b97a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666de1b0-2e1b-44e6-a595-dbb25b3ac727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a5dac5d-cbc9-4f12-9c19-e9f3e61de110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ae4d22-f95c-4f35-89d3-4a91dd191b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b889c2-5086-40c2-a6d1-197dad72a5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7017d565-67e6-452c-84ab-c3213aab2901",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd39529c-a6f3-40da-969c-8a6daa0b8851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd64dd2-f75f-450d-a0c3-21d8f0250d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3245baa0-4322-4e8d-8687-c2b5cabceadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3935c13c-4fba-4fe0-b307-afdc95730d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2be918c-0558-4379-bde1-08a06b57c647",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be783679-57eb-432d-823c-9b76669a807b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "638f58c8-5872-40db-a1cd-96900339640d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a9dcce-b6e5-4f3a-a1ae-46d801419c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c677a995-aff6-408a-bb68-d9b13041e1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a13b700-8345-41d8-a08c-9def19f28667",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97dade6d-afc3-4819-8a9f-93b98af4fd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b10b292-73b7-461b-8d8d-87073223f091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f18354-8f6f-4fab-b503-ad4cf7858e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3de661-52d6-4eeb-903a-d368ad945804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e479f021-2763-4bdb-9e63-78a29503ac26",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a540f0-1b14-4be4-9c50-4ecebd25982c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2699cc5-8f9e-438f-a151-fafe650e8b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656e37dc-fc4c-438d-90ad-d278c9b9d22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "801d4d87-5ef9-45da-b11b-3947b24adb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786282e2-5927-4a8d-a1d0-ba1053286af6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acac2bb-0809-42cd-b7d0-fad9c428650a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e3a278-a4a9-4b8a-946b-555d21ce58ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96318808-34fe-46ad-ad2c-63752aeaaa55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a44454e1-795d-431e-9f23-87797817550c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60e4b51-8832-4f4c-bf2d-669d154bb2a2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4d7624-d80b-4b68-b2bf-c7982360d97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8868119d-c557-4c26-89c4-c539ab35081a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac126a9-364e-4381-a16b-811aa6261c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f49c6698-0705-4a71-a8b0-4139740a4247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7df781-d4f7-4b78-ad0e-a9bd62de1308",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a99ec2c-9311-4d4d-8825-000c24c9e9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b232d00-6023-441f-bdc2-69b19364c646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5669afed-e82a-4673-a45a-9749c001a4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "953db1ae-065c-4bea-a81b-e9c6b32580f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ab1c58-a3b1-455b-8c65-d9426f57f151",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c804628b-b6bc-4edc-b6b2-46f6a74db1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ced9316-9adb-4580-a4a4-49e68a181b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e91049e-db90-4950-8500-d58914496f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d17b891b-78fd-4c40-973a-a89ad488c40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0e8c73-b0ea-42a1-9b5f-ce75b73b1f94",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243c13c3-0ef3-4f34-8149-ae5b9cf39880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a727c25-7e16-4527-9233-28f23b4930a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70149ff-2a21-4428-98cc-810538164911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ef46c1-27c9-4f85-a53f-858cdccdad6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6a9ad4-f5c2-434b-b727-5f3c41234963",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4a8b20-7c05-466b-b389-726b0e01cc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a854ec6-5358-4781-ba75-be15a72007d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45939c5-d932-4a9f-a2bb-9ec14b8e9d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa29e932-74d0-48bb-9d09-ba618d52eb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc864953-efec-4e86-97e9-a3deea067331",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef4d4a8-933c-4b5e-b1da-194583ff9311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d4eb19-2279-40f2-bd68-8611e12cbe73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e153fab-c5a3-4f5c-960a-2bedb8a9134b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3c7113-ed35-4963-b5ce-9baaa0d01415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a00857-af9d-49b1-90c6-1675043117a5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696ea63f-d1ff-4f31-a0be-360b891a0ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847c8e88-48a5-4378-9097-af3657a49e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ed0088-e7f2-4fd2-911c-34cb4cddfd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d08eb4ca-a5fe-4054-b0a5-d91d21d84504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3be6369-700f-4489-9d83-21ee7fba42ec",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c419ce06-f779-4d03-a911-e0958d3775a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbd903d-6c26-4187-9673-64b5ce9e787c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46470bae-fc1c-490e-b22e-379c3d2868b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42c1c429-05f6-426e-8df2-5315d5e8b6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6ca5f7-b4f4-4935-a2cf-6fa09e441fe6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130a1736-9b30-426b-b571-1ffde37b86f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca585f2-8a0c-428a-8a8c-70801f52af6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9506c3d2-0430-477f-93c7-987d41c8e6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5230434a-4293-4186-b9c2-7991e39a54d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c530a488-4d40-4e39-bbfb-961458b70be3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2896c545-ec96-4757-ac3f-28c4e2293991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6683a4a-c853-459a-b3a1-d23a92b29dd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9f7769-3777-4114-a2a8-f60c37c88b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7edec4e2-4f14-4569-a420-12a9dcb0d72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3aba4f6-5f73-4670-8d3b-cc05174e82eb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bee620f-3302-4ca2-b688-d10d01473a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13718ae0-785f-433e-8720-dbe236b0a24c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc364be3-3ed1-479d-a45d-0ca58b1059d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b7a035-6a3f-40eb-891b-fb79157e8369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208c1dd2-e481-4eb6-96b1-fa822233faa8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5dcdfcc-d70a-4be6-8fe5-83c4cc32f8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b352bbe7-40d5-435b-b5c1-f2795620dfb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bba694-871d-4773-abfd-bb61e671ef62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbdaf4bd-f803-4b87-9a71-c22c49560d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a69e9f6-3bc2-428d-81f1-dc2304c5709c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46bb158-704c-4ca7-b236-dd515405efd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab61e4b9-6b7a-4dbb-8096-d3e44a25543f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b586737-66c5-46c5-a41b-60c7bf9a7ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b276e51d-e875-4fd2-8152-62d2edfb40d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9ac385-2ff6-4837-8aef-dc711b036a86",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06387e66-e858-40e4-89dc-948a8687d4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e58789c-2c4c-4377-8c8c-9c0d997bf4aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed0d5cf-8e62-4d05-92a6-c1d36cda1526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b86ebf60-3145-4f71-a954-e9e9e9382af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449af015-bf92-41fc-9b2d-19b13737c14f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a54edd-d3d0-41c5-9e93-ad9b111149cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3122b5e-6c0c-49b8-9264-3f6a2d8343a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81baa104-fab9-412e-a474-ccf613bcaedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae1e57c-295b-4015-b986-d2061516aca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867d5743-6849-47d2-b2b6-cdf1ddcf2db6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fb559e-db5c-456e-b3ec-6b24c718d92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fba0f1-2f5d-4752-a964-f598b5e444d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60b8b25-0e44-4a81-8b17-b2c381d58136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a0ced56-db00-4541-a733-613f46139fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e32ee8a-3702-422c-a4e0-0d33fc68202d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "147b44be-716d-4c7f-b8f4-a055b2ea0379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b8316336-f33d-4131-a49b-04473342db7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bec2f54-4beb-4124-8b02-67e701f678ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "24efd7b4-91fd-4559-83ef-4ddbdc64d5d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1d3d3b1c-f859-4790-8dcd-45363b216520",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "71e31ac0-444f-4d8c-82dc-463f3f7e6c71",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9216994e-6cea-4b27-82d5-64f1116be322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b10108fa-fb4d-43ad-9308-0f0012216122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91048c6b-121d-4e5c-8eba-43be167f80a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7bbee9e-9fc7-41ff-8799-12aff46b1634"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52cdacde-8777-4e98-ae40-5cb0ad6765bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e4de573-6868-44ba-a19c-66768de7d810"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "11ab0e6c-7089-46eb-866f-23148b5ab090",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec03c47d-9da7-4b0a-b63c-5234bbe756b9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5361de21-430b-4b67-bb9c-ba61bad7d97d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e0abd343-38ce-4914-acfa-c5efb8f745d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "83558dea-668d-4b93-8de4-05692733ea49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0030fb97-47d8-474b-a97d-886ac2e3a7a5"
                }
              }
            ]
          },
          {
            "id": "a16bf181-cf8f-4c2d-b57b-55ff9c21a3a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "004faba2-702e-43f3-8c45-f8c3e0f259ac",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "031659f9-4f6a-426e-af3d-ad864b2465ce",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d4c620-01f5-409a-b401-bd4519e1dc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "728c4c76-aadf-49f5-9725-d51efc9b19bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4da6cc-dd44-4c37-a6fa-3223f91cae2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e450bb6e-df15-4b05-9e18-a9a6ad68377e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c4e8aaaf-5634-4193-a7af-dff0f394a661",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb0ca7d1-6533-4dc4-aeeb-05fe9b847857",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89ac938c-0ec5-4716-b852-ed43174789a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5208304e-c30c-41a0-be09-b766e72b003e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a21a641c-5920-44df-a977-c9c046a1e5be"
                    }
                  }
                ]
              },
              {
                "id": "d69fb02d-0805-4b51-9ea1-796943ca596a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c948fe1-67b4-4363-8e9d-2bd3d77d7330",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7c727b2-85bc-4b45-a802-b1543ba83974"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e265c2d-cd61-4319-b3c5-8b443b924bf9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a44799dd-824d-49dd-903f-1bc5f4637110"
                    }
                  }
                ]
              },
              {
                "id": "7f72dda0-b3c3-4c7e-932f-5c3c844bdf57",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f2b21d6-75f0-419d-b65a-5c6c6a67b741",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48230085-127e-4451-a008-0e0272ba54e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42cf4698-d931-4ddd-8025-0aa94504e21d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9fc8e16a-c68f-4cc1-a758-9b3a558d70b3"
                    }
                  }
                ]
              },
              {
                "id": "ed144f13-aa25-45d1-9f8c-c3029fd656ba",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07b22f07-6742-4aad-bc9d-006aa2d2c1e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33bb1921-4acc-4448-b05d-14f6c47b36a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70cc1896-6e55-426c-9ff2-7a20fd065473",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3a23e3d3-7d7d-48d3-8918-544eaf7a71af"
                    }
                  }
                ]
              },
              {
                "id": "874f5dd0-79a8-40b8-97d3-4cb729e85e02",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "474596a9-1788-4b9d-83e7-f36fd101bddd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a08e02e-7203-435a-bc15-c79b23daa711"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e46d71c-87ea-47d2-9745-a7091f16d515",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7e9ffb62-1cd8-4539-9086-4a057f86a7b0"
                    }
                  }
                ]
              },
              {
                "id": "8fd6b4e9-405c-4ec1-91ea-101d3d5338ba",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a095ebc4-796b-4f2e-ad26-747db537cea9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7193826a-3844-4aff-ab89-28c8aaba17c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eab57dd5-e16f-4d4a-ad0b-bfeb00f708bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d9344978-0e7f-42e7-9238-3cc9096e200f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0269f638-2562-4cff-af45-50afbfc50744",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f368fc2-9f07-4290-9360-d52b064f94dc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c7c7975-fdbf-4943-b964-f0f6a112a639",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db124256-c5c8-4e4d-8b8b-5b04dfabc675"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3383990-ab5d-4fb0-bd62-70304cb2401d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2507ff0e-685d-4cce-9014-ccedef4409c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0b2d46e-b479-4aa6-8605-a5b514ce4fe8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82d3c58e-7ef3-4bc3-871f-466e7e39f689"
            }
          }
        ]
      },
      {
        "id": "02d8c80d-f073-453d-b5bd-b3d88f48ee9b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cdc23a12-70e8-4a91-8a91-88d2ceb2d3c6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a576aa82-6010-4e49-80d4-669dd447008a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9336e32f-06e5-4438-89fa-d769ff0546e1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5d0a10-f67d-442a-baf8-1a61f3591ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b8f3eb-82a5-4f59-9622-2aa263f2321e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde7028a-dc94-4ce9-be0e-fac92306b135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "89bbcfab-a6c4-4bbd-8457-eed7b8aad6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1590940c-e65d-4e0d-baee-da52017dbc1f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35720bc-e84d-4bd6-b779-ada645dff746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478fecba-3d55-453d-8110-47edce6ec815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534ce642-1f9d-42bd-b4ad-daa3cacd0e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "995872c2-9318-4353-9d18-3dccd5b6c2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86f32f8-be36-4234-a56f-212bd65dfdbc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba357a9-7610-4185-932a-42a7aedc7e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aab5302-8ec7-4878-a92c-05f853a5256d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a6c012-89e6-4414-91c4-985c65bd1f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "904b8c79-46ef-4f63-be33-f100f1f68d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc1ad38-5e08-4ade-854e-8f2a2fa496a6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e87e92d-da38-40e4-94f9-bbc128b95476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9944963e-997b-4d68-b6ae-7c23e4febd6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc882d89-c8ab-4cf5-8085-aeb7e8602d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "629b0c93-5ff2-4744-a9a0-5e87ca8f8fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb77e9e-f7eb-4734-b302-8f731a45b1b9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ed596b-a690-4493-afec-f2db4e0fe5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd927c7-53ac-4edc-bad5-f7b246ef8b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93d340b-3f17-4454-a8f4-95b160533ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e04e87-e3b5-436e-af5f-f109735b1689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f479fd-6064-4426-8cb8-43d26106028b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81df434a-20c1-40a7-93e2-ba12517be5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38922a7-1a03-4697-873a-70739fa06586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c078531-28ad-46ac-ad81-43c390357965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "02aa462a-405c-4d90-b3c1-7064c3cf95fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be24950c-54ac-4d7a-a925-27a5dc6d4dba",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2118494d-b9f4-4e10-a5e5-a897d6735a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad67b2df-c8ef-46c2-a8a7-f22efd42632d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b8c5b6-e0df-42c8-b231-252c416e5881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a41d466-0e0a-4900-9a38-6001175195fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a58193-315b-45f1-8d0c-f696e2b85aa2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8e891b-d498-4b1f-9fa1-c6cc4608e23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce99c26-5915-4922-9eed-67993ada9934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad813b5-6941-4732-b34c-a9ad8b1975de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d5ac2f-8ed4-4781-83ce-5f1265adc4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcaed86f-f05a-4809-9434-2e346ad6c6d3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4f4059-b481-44c3-becd-a8c321fc536b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db34d37d-ffc3-4121-b735-4d6e78ca7814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8eb197-fcfd-4003-b568-4895b2bef357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4102dc5d-3170-49e0-bc31-e51edfb47afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ebc88c-cf73-4cf3-8757-1df4eb5efb50",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b456cc7b-e6db-468c-80d6-253329cd9e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02efb74-0920-4bab-9626-4d53fccc4c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2563185e-d052-45c9-b87c-cb8ab7fa2dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a108871-fd89-4524-a313-b3238ee3d1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8beb771-d856-49d9-a63d-a8dc10901934",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c59627-de91-44b3-a982-b930450be4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434a585a-2f13-416e-952f-7fb548e8196c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe2b5cb-711f-43c3-8435-bfa72eaef0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0662f4-2933-4a40-b5ce-387072c864c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acc7bb7-ad90-44d1-931e-6170680a9e85",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcb9da5-e68c-4b76-b133-c45b41577f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f230c1-a50b-48d0-b8d6-790092087d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4275dc-0b3e-4943-af7e-32b497ed258e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "957cfc18-cba1-4107-a16a-e4526c8cd3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc130752-3515-4a6f-bde9-016d9347a46a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a769bb-4502-4e7c-8304-2046820cf625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bef5086-871f-482f-a19a-9895c7c6702b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b89ca6-97f5-480d-856f-b4cf4f4f22ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06ae197b-c093-48e8-ad5f-c878d0645fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32010e9-d79a-43c3-9963-08c936482920",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555e9ed8-e35c-47ea-a4f6-4a3be11722d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c86cb73-eae4-490a-9ee3-f95434ba379b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9989cafa-c84c-46c6-b966-49de2c23c2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5622f5-0802-4567-8bfc-dd1aedc5e183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb394b5-dd73-4911-ab44-7ec68b84123d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849676ca-23f6-4af6-8f88-b0e589d3ec05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4e566a-3d14-4086-898d-c6bf05ffd5cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0307e604-298d-47fb-a1a0-d34b79a7e290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "352dc2f6-3141-4cc9-b2ac-4bd6e346453f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8513fa36-7b5b-4e4b-92c2-ae4e2a4a9991",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550f0a72-58d6-4533-ace9-ed015d6e63e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80e032b-29cc-4384-baa7-74f921c48f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cb542c-968a-45d3-a341-c04dce499ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b5ac4c8-d0c3-4edc-a653-d0d70656570b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e61308-353d-4b24-8195-58254eb59d2b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74754dd-0c86-4dfa-ac7f-278e908de656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26dd8775-92db-4ef7-9375-13b3e5e469c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0a554c-ff8d-4def-961b-4c073b4e55d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "260906e2-0d76-4342-b0b2-96b125f40326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ef6060-2410-47c0-b56a-c98fe02bd743",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083ec63e-ffde-4b59-a801-a919b6a6bf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5448dc4-bd45-4f5a-8c7e-b28f73a80fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85e70d4-01d3-4c5d-b26a-fc95d350e1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdaf304d-cb1b-4d3d-ad57-241a1fa53ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb11f0d-16c5-4157-b5d2-e83a841bec58",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e61028-dca1-4e1c-98cf-5d5d60aa13dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8abc0de-de0c-4b34-b1f9-495f190afa82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055bda69-c212-4402-bf0d-ae8c1d135d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f42f74c7-9ecc-42ef-a672-32640eb80891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed20f7a-ea19-4131-b517-8c1bc15c93a0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca18199-5395-47d7-8e6d-c4f56f03f30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be73570-9fc7-4096-bee9-f7c6d29f578b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9748da-c854-496a-8c07-ac34f8dbcd04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71a70ffa-b051-4ad6-a8d4-883e4b55307e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f1c4ea-ed34-4257-8959-dadc7b650959",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1b2d33-c29c-48b1-aa2a-fda23e1161da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28728358-bf98-4de6-8b48-de6c74450681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b769ff-4055-4f70-a25a-4d5ec5e6fa58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb2aea8-3a9e-4e3a-bdde-6880c981a4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2179e9fa-f8b1-4ba4-9a14-d7d1710660aa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6852327b-18e4-4d6b-94f3-4fe936ec158e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8f1cc9-3503-4959-be63-6281f0b25546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0914a23-b687-43f1-8eec-e6e12087b880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b65c12a-0099-4241-8445-163931e81c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844d2783-a343-4e47-ae0a-0938e5da9bb0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014978ba-de7a-44b9-866d-65d97f8a2697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92848fe5-c9e7-4fa1-8daa-3cde8b85a3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf06bae-0c2d-451f-9019-b21014e40f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5187cc-282b-4572-8919-b0dbbaed37a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1936879d-9ce0-4e73-9ebd-8c4a1a61e6ce",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc5a407-4c6f-4631-9a13-c54dbd43ed82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de0a56a-bd42-499e-a4f5-c7c9eedb779b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebb4729-cd89-4b47-b326-f13ad53dda52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b95f067e-ad77-4cd8-ac50-67436a9c3bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5061db8-66db-43db-a0cd-dc089a286c52",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c5a473-5e5d-4fe0-bf54-77555d704205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d671b5d9-ad0e-4f73-a86a-a9f003326a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff38f6d-b548-41eb-bb96-81d2f448796f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "391102c2-a1d9-471c-8c54-d7606a6eab13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d005f3-60d3-4c8b-b183-b8a5623979f4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad12e9cb-3acd-45a3-aaf3-ee06a14ccf30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1cf8872-41ab-4678-91ab-f261c0394011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56195273-082f-4e46-8212-f72edc3ab2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a12783e-9c27-4d6d-99f4-7b3585d021a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faca59b9-6601-45ff-ac33-6168001eef60",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7e562c-0a78-419b-a0d8-8bfb84520f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d71c9a-2a4e-458f-961c-3764178a811b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6227d959-7c2c-4425-a23b-91f890cf73d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3323ea9-96cb-463f-a471-ade4117a2b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19ce8c5-eaae-434c-9af2-a7f0975f0125",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce50b39f-7b04-44fe-ab84-55fee0794fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1321cf51-242d-484d-81a9-5d6b65bb4a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1b52bf-398e-4e1e-8ff4-3fa71be55aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75efdc80-f14a-4162-a657-8e89915983c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7624bf74-3a1c-4142-b649-85b479befbdf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0856699d-219a-47b6-a6de-63fccdde471b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878a6069-3d8f-40ee-9b5b-58e14690adad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfe4743-cc4f-410d-9345-d784927e2f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "039af1fc-6918-4cac-a9a6-f95e18fda737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9962fb1-cf77-422b-8fa7-a8f517a01653",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16aae2dd-b255-4272-a30c-345e8bcd04d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a111717-a5b0-4ba5-910c-b5e0b1db9e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb93a56-9de2-43a6-a2ae-89de605859ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "189bddf7-420e-4b9d-9a09-a32426126603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83a529d-400d-4591-a91b-fef8ea08654a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8c26e7-c4b3-43d6-a6a3-fd42ac8daf61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3b85d7-a965-4c04-b8b8-8a8bbdc3783e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3b256c-fb23-4f5a-b329-3a61ca6ffae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1370890-415c-4a90-8620-5a8e16c79b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc8c415-f208-4dc2-9d53-7eadea3fada5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c492ed-025e-4080-956e-55be7923dc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3bd20a-3264-43e5-8066-64af5d1cb0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30163d9-349c-41d2-ae1a-6e87057d1657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceeb0889-cf86-46a4-b3ce-7341d857e6c1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4baac2e1-0840-4667-977e-527bdc5ba9b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5ad970b-68b7-438a-ac3f-6578c4eba0ec",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dab9f64-82c8-4ea9-acbc-3f4b19ecc435",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ac1d4f-26b1-4ca7-8636-85a3d6a59d5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d38e14-e918-434b-937b-3ae2b09140d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e6a8804-ff52-413d-aea4-b9f386aa28e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd2e8fc1-8a38-415a-a2c9-635897918cc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1a22e3e-3578-453e-99c7-f193dc37f346"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25ed02ad-6db0-4488-b528-8f184d5afcfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8ed6b91-220b-47a6-9d37-0be8921910d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66bb81d1-1130-48de-b09d-70aa08fe549d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6db85213-4992-4384-964f-17f67548baed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76df7a65-3b13-4257-b797-b87fdecbdefe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96331fff-dab6-447f-b4ee-7a15d30353bb"
            }
          }
        ]
      },
      {
        "id": "2b6cd6c4-4041-40c6-bdec-f5fadcdd4ba3",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "9113a22f-443d-49ce-8415-109e52ca6772",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76b412eb-1405-4c2c-a64d-c46c04abfaf0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe999f28-6850-4368-b024-6a75b28dfbce",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd025c86-d25e-425d-81c1-a4b3f39e266b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b8bf9c-ec50-4aa7-a7f0-5ff202560321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68683752-1ce6-4fe8-ab74-67a6b657233b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "afaa62fb-a69d-4944-b12e-6792f897f5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5642ed48-d478-4878-9ca7-20eb5d6c8131",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3034c79-eb66-4f65-8976-6955138ad57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92418c93-108c-4cac-bf83-0a186a00ee39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a22dd1-4496-450c-9d3e-6088c49b4d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d312323-601f-4ccd-8d93-8e99eda954f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf3c2e1-304b-49fb-a301-c897ce501c1a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf05b246-f8c2-4884-b9ac-51b65dec63ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b2a43a-3729-4148-bcdd-5ec2d31911ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e225bb-03e4-4945-9cee-17b76f513c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22f1b7ae-f20b-4216-a354-07a36de84236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08c524a-f08b-4c3f-a1d4-e3a6b3e0f1e4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4775928-cfe3-4e57-b8ff-046aeb8f71e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c154ab-f6c1-4b76-9342-8f91a7c06e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a9c330-4239-4667-a52a-7a362094b7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "03cd0599-225b-4c12-ae8b-a70c7ef15f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f445436b-62d0-4e16-8d23-09ed79e447d1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3306dcaf-319c-4415-a327-814c9e6d311d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a79c3ef-f03a-4ed6-9a4d-7734883f258b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c276ae68-c7b7-4204-8787-f4aec17651be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "106a4df2-2cde-474f-a61e-ce4a0037768c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d571d99a-2bff-4fd6-bfaa-8c75ec6fee49",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db20d87-e683-4392-8550-29e0ceed85d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87df60ea-f057-4937-8d24-9432917e1486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82668eed-146f-4697-bc90-f188d5bba0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2472c8-8206-48cb-858a-ee429e1af601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1473c811-0ae0-4991-995b-48bed8538b6d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c88470-f97f-4d1a-9dd3-39dfdfe87873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab077c3-57c7-4318-967f-51d6e96ed74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26e96ef-a5a6-4ebe-9727-a0c7013c465e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa67fd74-a0b9-47c1-a4ac-af804732e33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53876e26-f475-439a-a9d4-9e03ed6a683c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5d4a47-9877-44d6-b17a-3da48d3c4264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5776e9-7c56-4308-9329-520beabc0bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a7bb10-20fc-426b-a682-0964d4cdec56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d467208b-d0bf-4913-baea-a1962a7933a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d3f7ba-a234-40ba-a344-3269a55fcbed",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32ad42f-6aaf-4671-bd4d-bd6615cba5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df912ebc-2fae-4ed5-ae32-a1e590d5e6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46295f6e-d915-4155-b05d-2488ff35abfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa95dc49-3bd9-4e19-ab35-dd1b61d0428c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452aa100-5b92-4c98-835b-61478d35dd89",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222327d3-b800-4822-a4dc-fd590ef019ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b407242-f4ca-4aee-bf0b-6e7dfc59d917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db1029b-c87c-424b-92cd-041dd9d0c553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fca1315-8bd9-4d33-bc08-9bf4be3962f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ccc629-2a2c-4d9e-9c1f-c28cf7ace20d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a5cb87-ce75-4129-b377-7299656c5dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2516551-9523-4796-9fcf-fe953d17150f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe0bbe2-dc0c-4b16-91b6-bafad86e085f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "781d79f9-859d-4a75-b9b9-c56ca2ed3545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d9f5e1-cff4-436a-9fdb-dcf15acbd34c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e74e14-82c5-4924-90cd-861e824b11d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f824b7-0bf5-42c8-a563-17318ddb402d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36afcfb8-b5d7-4dd9-a7e1-4d1357c57987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e709eb0d-2605-4779-a96e-2701f3ad944f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cad31ae-b909-4ec4-adb8-3de5c10547de",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff985fb1-b466-4fc0-b4b3-0fff616c0f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9713774-b927-4d02-b34d-71618ff96142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b091757e-39f9-47c1-9f5e-abccebf6c68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "350d0741-8dd5-48a7-916f-8dc739d73fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6db5a4-3dd8-4aea-9671-332d89249791",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da65f7c-4f96-401c-8b25-f184207dd88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372e095f-de94-47cc-b18b-590a1203f28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871fe987-6176-4cc0-9ab7-6330b1b8c0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "54e0b908-c4da-46bb-a775-2726c4abea7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb36a518-5783-4207-b16b-224ceefd461a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79683d20-77f6-4113-9628-2e92062d3445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a8324b-38b9-4978-9846-e071f1ccfb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113fd900-2366-43b0-b689-3637b49319b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "34937323-122d-43e7-969d-f1793cc1ca99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9a0879-0f0a-4609-97c6-af47da7de70c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4817b924-2c85-4b2d-bcba-95c27dd93484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55cd09d0-fb47-4404-97e4-2684c7b50c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097f779b-2b18-4149-bdff-17b0d5a0727a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b00c5161-26db-4f46-9616-79e55b509754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f38d44-e8fa-40d2-a249-811da040ce22",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c0c4d4-368b-46db-ae4f-2534f631060a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92cf525-b2d4-4f50-859f-ab5cd8599d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb71968-3230-4977-8d42-b79d424cd637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b26c769e-fe92-4ee3-85be-88184cbce984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1e2eb6-c82c-4208-93f3-7db12f0205a7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9102416a-fb66-4a22-86ef-7559dd85d46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da268ae6-b561-42ec-84be-7f0ce3b3d375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1154d208-5b8e-4e55-a18d-95aa41878aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc039597-f3ef-4f6d-a4af-bcbe3540e485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35eceaa5-76a3-499e-b392-ef5873f05d76",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1480835-1c99-435c-b108-052ee1998164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607e757b-d8cf-449a-b876-a14e23d13dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ee3a1a-409d-433b-a1e2-30dde70149e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0a8c23-068b-46a6-9d0f-9458a5d9b60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5d8922-95a8-4322-838e-8bb55896c4eb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0369a9c1-c719-4888-94cd-46c4f7dafbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccaae5de-52dc-4de3-95b2-9e7201771075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b522b35d-fd07-4218-8a48-cf964559d3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dece180c-ac18-44cc-a3cd-85769e53700e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0c4d48-49c9-4728-b7e1-cea25906c578",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683b27b0-1b79-4e67-9f61-ba2f04be2e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7b0b18-adbf-4b87-ae21-fa89fb640878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1e4319-65a5-4869-b5ba-3386efc32f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "618daacb-30c5-4c76-a6ca-46f611b3855a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d95691c2-989c-4352-b1df-384ad275598b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086f3475-d0f9-4b0c-9230-86893c8e95f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5145f8-d55a-44da-9e32-0b79a7ad0a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9da687-2824-4ede-9ff3-b7ecdeea9f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a150435-59c8-4fce-8c63-b4edafb7c8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d85a108-260a-4e2f-a62a-b20068c863cd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b6450b-450f-41c0-889e-ed8519a5edec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3462c6d-248b-471c-a529-300f48afc1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e8b74a-c166-4a56-8e4c-e84f7d3fc33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30215482-0bdd-4c95-b717-61e402ada8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39061d5f-f86b-4923-845c-82424a68f6b8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02dfd619-1f02-4416-9042-6e467047aae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c86df3f-105b-46a9-bb06-3dc1fedc38f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee073b6-b8a2-46a6-971c-fa5b0949f7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1143e1c-fd55-401b-a6e3-c28035f577e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207d8266-a7df-4b7b-a96b-81df5203a2f5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289d4538-082d-4a5e-ad4b-3b5f144d5962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfecb311-7951-496c-91fa-1a2e8172e751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed30ea58-3934-45e2-babe-4b526cf4667b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45c4ffcb-6d24-49dc-bdd4-2fc9d3984b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752b9243-889b-4da3-8c35-c62f37ef7ee7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91199b68-9e03-47e4-a5b9-eb04c49b812f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42fe76b5-3cae-4eaa-b8fb-58f746eb9c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a960a1b-cf35-4897-ae03-22f43d5ab727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7669eb4a-5a59-44df-ad16-8c7bc223b9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884beeb0-8ede-465c-b52d-1d06fbd1ebf9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1f9689-0c10-4e6c-bfad-ca0cd8fddc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf22b40d-8ba2-4e38-8ee1-f98a485a912a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed734aab-6594-4001-88c3-b3200679efe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a555ff6-e80b-4d06-97ea-5e91bafcf43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777d33f1-2708-4160-b578-f79928f7eca3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f23146-9094-46e6-878b-c3e0f3c46093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057d00b3-81b5-48e0-a386-a4988611c97f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b8b14e-b08e-44d0-a10b-6588f70f32f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb347a86-7d1c-447f-96ea-cc47feeaa239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cffecd9-ae73-4b9b-b9c3-f6fc4ea47f8e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb8134c-f126-40c5-a488-9c2afad57dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607b329b-b21d-4e06-83f2-a8e38cbe1e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df295cf-fd39-497e-a4a5-2ed28f81f474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22d2251c-f218-4f6a-83ab-77002b46559c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e789780-cead-4050-958c-1b0b0a971f7e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a803b2c-02e3-407e-83a0-bbb0f8db0d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90bcc6f7-ec6e-4f1b-bb06-672c13589cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c0caf8-b03d-41b2-ac08-e868eed5d945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc85eeb1-b017-4eeb-9b78-bc9a3832c9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34f8159-7fb3-4f20-a6dd-928e99c4457d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bad19b-402b-4ccd-b762-9c5a6033341a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c047c5-b664-4b28-9c2a-de38117d7680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f927bfc-8174-4f42-8027-1d9685c9fd5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "880c829a-5f57-49e2-973a-01d5d8982843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe05ec74-ec85-42e8-9f97-7e1150c9f325",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdca88b-20fe-46d1-b3ac-ea074d4b9229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6357ac37-434f-4da3-b448-b249a2848ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04a667c-b984-4431-9d8f-b118a58bf1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd58175-673f-409c-889c-827c83744a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8995fb-7efb-4f14-b74c-51c2bb31639b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a606776-0587-4e32-b382-049463ac916f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70bada55-d843-4cc4-8847-e46c57835809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c08d6b-6858-4aea-89b2-85fdbbeb21bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d6617b0-a820-42b4-95f3-0d83c7eb2c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96c9f6f-c521-4544-a676-11c97e31c505",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47364863-1b6d-4e47-9102-6df770500736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb9491c-1ea1-4af8-8f82-31c41941cecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c37e7d-b6c9-469a-958d-804e5d3425a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cae2a824-1adb-45a0-b0f6-c31bd255e95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3242eb01-9ba8-4471-9a53-ddc950b6a53b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c92654-522f-4e56-adf1-1a959693c4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678abb69-327d-402b-9a32-44efe4d9f5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69ea65f-56e4-430f-be4d-2af743c9e7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "951ab44c-47a3-4d57-8f00-83b46806722b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c48ee5-bd30-4da0-ade3-bf6f708723ad",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a7d450-0e3a-4e91-b1d0-a2151b3e3949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf2092f-9d78-4ce3-aba0-5e8a48f2a8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043ddf0f-df8a-40b2-b98b-538b55fe5082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95b34a9d-1dcf-47c9-badb-8fb73cd9d752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8c6130-cdb3-4a1c-9a81-ade528df8cea",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5af8d1-ff86-420f-80c9-fb24b30bc697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b92da87-03af-45a7-83f8-da60caea800d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dcbbea-a20e-4770-bef1-0670ac59ea73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d6a7f0-64ff-4ada-a3b2-744363466fd5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "670b8753-7ac6-49ce-a31a-a5bedb22b730",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cfa53d27-4509-4811-a283-e8f2f4587572",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438827ed-88f7-46db-89a2-f9ec6ea50c9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "20e729b1-9a93-4a03-81eb-3808f64de6ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa47e51-7a6d-4e00-99d4-953370b8fbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6671401d-ace6-44b3-9b68-abdcb30e52b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ed4c2ce-8abb-4eb5-afd1-5ea3c308c4da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c552e0cb-c00d-427e-86ef-d631693278df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "678f2067-3d31-4081-8f96-fdbd70cc180f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c81af99f-03d6-4d76-80b1-17f67cde7569"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8a19d55-0501-4938-ace0-de21b41b200c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2c10c24b-7d6f-463e-ae9e-78020466b4f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff4a6bd8-38cf-48b3-9517-bd4ca54b5be1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7a3c4171-a7bb-425d-bb44-67fd6030caf7"
            }
          }
        ]
      },
      {
        "id": "c390aa5e-08ab-4c08-9b2c-23138cc49856",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8101fc8b-4610-44cf-b279-00232b7b2e2d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0bb12e94-e967-4e8d-a30c-0a77c2189a05",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6832e4f6-dc08-4d78-88cd-58b453f5f440",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a4a6c4-2590-4c47-8ca4-46af4d3c5f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b2fb0b-b1b6-46a8-ac7e-bf0b0c207b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb60a9d-9fe8-40b8-acd6-966e64228457",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd07c05-b181-4e8c-8dc8-a144625055fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "753006c7-bdc4-478f-9632-3756f6d38bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fd0659-2467-4b83-a222-d6ca1f8d1d4b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d85e827-0bfd-48f2-b9ef-28414e49458f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1767616-9315-4034-b624-d71a6f3851c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6428d66-5151-4cea-9672-19f6c76c6fd2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73af85dd-7a41-4a00-98f7-de376c5c5faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb653c3-07ae-48a9-8b8f-db7f3cae98ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ca24e3-79ca-4076-9160-a1c14db116ac",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623aa50f-3152-4e6b-9bde-62b520fdacad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605ea9f1-5613-4374-b71a-3134b0503a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b78bfd-8675-436b-b7ea-2b8ad9d9ffcf",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d3c0e3-45be-442b-9bc7-f2a6ed9c8c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014feadc-8a9b-4f61-8ce7-2434e458895f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74d75ab-a32d-4021-a19c-031b1b36e2f4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ad00e2-6f86-4ed9-b344-2071e947f61e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f172f7-681e-4307-8d5b-44947109c911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabbd812-a76c-4859-80e4-bf7b840859f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ae9e5b-e426-47fe-a9c2-f938c1bac0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0168190e-deaa-44d7-bc85-23732568907d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f33b5cf-4add-4197-a5b7-8f8561f46be0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "652651f1-9123-4fd6-a4a6-f8745f6f9b40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74a0f37-0595-435c-89a6-c80c5c9688f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774089ac-44fc-4db7-88ec-e6eb25f7cedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72403fd-4bd2-4d01-b9b0-6ed884e2f175",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c10dfd-f5d6-4d07-879d-b9a630f69bb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74df6026-0d36-4297-b24b-781c2794856d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "013497bb-dc0b-4e7f-912f-5af3691f3858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1232888c-130e-4e3a-be45-06fe771e2f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69eaee72-7669-4b95-8518-28886cbb0d0e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b210a39-54f5-488b-80ba-20e1a7f2c879",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e012812-5c4a-4354-a0bd-ad8b0d8268b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe80a34-d55e-4745-a161-a1ddad2a72a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e680bb-a15a-42fc-a76f-b6352ad8234c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1eaab0-d316-40f6-a898-b225be946eda",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0afe10-686a-4898-ade3-2fcb9524be97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0107073-a04b-4204-bbc6-64b3653a0573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9420718b-d7d2-4afc-a369-ec1468a8b6dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5a724c-3dff-4893-8aa5-39645fa53ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6881d3e-06a7-4a4c-9ab1-90d5b6fe2acd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb56084-7e6a-460a-8863-fc9c414eb086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95824027-b23d-437a-b3ca-21bcd15f006e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22599bd-5e8c-4089-aebc-563cccc85e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6c95c5-f164-4141-bdcf-ff3857daece0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dfe70c-3e52-4963-930b-8af63a20653b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263e0813-2368-49c3-80b4-a2f2a097eb97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "328d4e6d-a3d2-4414-a233-4118311bacf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010ec414-6e4d-46b4-b176-f6f2d04abc13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da929fa4-5c57-4dc3-8f28-f2be3ae5a67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf118da-9229-4f40-9030-9a5e1d0e704a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed7d591-a5f0-4f3e-b4e3-d0accdad3716",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "979ce819-66d2-4074-bf20-3dbef92b525e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8faf422-acb2-42e8-9368-f6523aa75eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b03660bc-56c8-4804-9325-c6f1bc19728b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab71c868-bd4b-4889-a413-93e7519011b2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a93af3-f9fc-4dbd-8c2a-1578485687da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e16fd569-6233-4587-a1c9-e01bbccada99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc8973c-08b7-40ef-8a24-17d3b7d8e19c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbe8f03-eeea-4654-8cdd-f179e39df9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e004d7-682d-4ca4-9012-53d0c3fe6faa",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e936af3-7294-488b-9371-b756e68c589b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdec3461-4b0a-4718-be52-713d92786f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485045d3-ab46-4af2-be1d-745994a763d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614ab565-aa94-4746-bcdc-2713514ddc61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ca0a92-d317-45a3-b984-10f1dbc53983",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bde35be-89fd-4665-9a77-835861a89714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4f7a27-9097-4893-bf9d-d689bf16cd9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "253e9aa3-d305-4331-b45e-ddafc79d4079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d868b0d-dd50-404a-adea-cca6e2b775be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bcf7af8-da02-4d0a-ae42-359afc67d4ed",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa57504-b625-4192-9935-18a7d499f55a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "122f6c91-d094-4221-b970-6b4f1316061a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e12c766-bd2e-44db-90f7-4f0b4b936a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b32c69-70d6-45be-be8a-c22f5b453926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bf6bac-f2b4-4dbc-8838-ae7cba5fa186",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7ae430-a487-4b41-9b8c-367fd98add22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a28857-df38-445f-a1ac-e955d52922be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c28a558-180a-412d-9b05-7c22a1e976ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b657b0bc-f6bb-4254-8305-70eb3bc518dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530e7fe9-ceec-485c-846e-1156f75d5f4a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67673cb2-66ff-4695-9221-6adef908f18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2cc69c-ed8d-4329-a84b-79b96ddbc1d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abad286-26e7-487c-b3b8-1ab843d3742b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1782d5c-fc2e-4929-b00f-20664638365e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd92765e-22a9-46a5-b2d7-1e208e033691",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19af201-fe72-4ead-89bf-028319584472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4fbf07-c9f0-461c-b845-3ce149c0dfbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cec3125-412f-47b8-92ed-8cebd3e86906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f6700b-feb2-473c-bc89-fbe37312e35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23c5dc5-2535-4b6c-918e-6c42f7ac6ba7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb11d40-806e-4d23-94a7-6ec047479c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d94b469-8c12-4d88-96fb-68c1d3c003d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "891fe312-f301-4057-ab0a-c35fc524b971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f259a4-8819-4ffe-b65f-789f174f7ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee34282-679c-46b0-87d1-341a1a508a45",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54895ea9-3fa4-4736-814c-42a092e96e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285484c8-8cd8-4878-9501-7e1a13b28969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abee705-fce6-4cfd-bd0d-6f336eef7a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3159ca47-3e18-4a6f-94be-c2d57c1d82bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8367c594-b8ea-4c52-92d5-9221e2d47dea",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bb55d7-1099-4a7d-ba7a-1ac98674c78a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "088c6955-feac-4278-bee0-87473b8951ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278c8883-61d4-4f50-bc29-03914dd7b4eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6665c0a9-b1c5-41ac-827f-5aa119874da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a860f30-4101-41b8-9406-136fadc547db",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26ec0ec-380f-404a-9b79-2976bf92f0ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c7792d8-19a2-48dc-be7b-17d355d1b01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5428627d-678a-496a-8055-9e7a4f7cdb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aebbb9f-ee36-42dd-811a-2bb46b94396a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4f018d-0065-41f3-ae66-1ce07f3016ac",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb76b04f-e7db-4fd6-8354-5f780a9915f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38339b49-fb73-48f3-a8b9-cdac62be49a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a416ce1-07c6-416a-a611-8c6679df958d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "814e643f-59ff-4431-b84a-c21a89a9267c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b242517-961b-4c64-a173-eea69fe89bd5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6053e1e3-a17e-480c-8003-5bce6142222a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "454c6e63-9ed8-48a1-a6f5-4e05e4fd5936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f91a941-986d-4720-83e0-c38976578c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ce1aa7-eda4-416f-aa2e-48704c292ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6e3bf6-9a61-43ee-bd19-e5b4d11a8ec3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5d0647-e849-47f9-be75-219ad53cdca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ba00e6-2ec2-40dc-8038-ba065d23b7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c56717-037e-4242-aac9-b52e77eec558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9785dba4-4d8c-4fba-addc-98c24e7d03dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee33873c-6044-4102-a39e-e6fc755f1362",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c5a195-af0a-4405-b835-4f9d6b141e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edb66756-8629-4d9e-b2a1-90a53493ce71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d990f4bc-0660-4660-b97f-faf818a938e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff00f11-b3f2-40b4-b85c-427a0747d781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e79aba-78c1-4621-b304-76ec62e81f4b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723a562a-b138-4d7c-9339-861ceaf4a8e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87b32c96-3cfe-402b-8779-38eb69ad8279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0988030c-d66a-42aa-8c86-e23ba4dfa538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de35820-f8b1-4e6c-96af-fdc7fc24a52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df345519-dc89-4c25-9af4-a3e75e92db65",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd4de91-fd72-4dfd-9dee-b3463f11ee05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "205264f5-46f9-4fe2-a261-f18439b107b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e80c674-5e25-4d33-b2be-96ca00bf414e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffd77d5-95d6-47b4-aa30-003d9122a6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b93939-7b56-46d6-966c-d1417a399421",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb84eea-0b4f-4399-be75-e7abf3ea2f2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e2715c7-963e-4d57-ac64-baf6ae8ad0bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca16778-f609-4198-b58e-5df2fb5186fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573dd89a-740a-4bf4-a7c3-adb35cc29fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624ef819-4c82-47c7-8943-0750829ee23d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d978b9e2-936e-40ae-9aee-0deb2839c8d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d238a8bb-7760-4d29-82c8-75e3b4c70090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75aaf751-d73e-47f3-b71c-cd770a532420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb4fa9b-c32d-4d23-af5e-18ccc47d7a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7571cfbb-b057-47dc-9ef7-5a4fb4364045",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320fab70-c235-4edb-a973-bdfde11471cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "659fc9fd-f591-4af2-8b4d-110f3221d032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "122480ff-c6f7-424f-bc47-508fd076a83d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd652fa-b22c-4aa7-bab9-46d30ec4a439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16600ad0-352b-43e3-981a-7107aec4cba9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffd64e2-cef7-4fae-a1db-5bf72b35f35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff43c919-5da3-499d-98de-b096c2ed8e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b75d229-51f8-4c16-8f44-d877d1997eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa134918-6b1c-4152-a17f-77e20fc66786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125e0fbf-c718-462c-9988-39ae6cca1df1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5ecae3-5388-44c4-b521-2d969687030a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac155d69-799a-40da-a1d6-850bdf137a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac2e7e5-5cd6-4984-a53d-785909691432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6098af-8a4b-4bba-8ceb-0d61ba11ca40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a63c33e-73dd-4fa2-a07f-4b1deca48ca9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8abbb8-9d53-4224-94cd-7f79381e6e57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "354cb9db-faa0-4768-b2ba-efbe747865fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6365757-6116-4fde-b869-e3baa10a5cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9459d4a-152b-483c-850d-b4df35bad108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd953f48-2002-4833-8a33-f0d283f84ab7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56e3023-263b-4169-8ce0-50ebd10edca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef62605-4784-4280-8102-bbbb01b551e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e901e56d-3250-4fcf-bdcf-eff87d9141f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6327e91f-e518-4701-98de-1e8de2fb2fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7cc3cf4-a48d-4f80-9454-793654125166",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369ee54d-8388-4f40-964d-5e5e8ba538ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a95ca4-9f29-4dd1-9477-d02019981d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2061dd3d-d7dc-4f35-bfdd-14c295a4d76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20b7b01-8ae3-4285-996e-f309f3250832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932d5578-e887-4e9f-b4dd-0104f5e6cb0d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6672f4-5960-42fd-a1da-69a7140b6f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73eb532c-46c8-4551-a758-1680503915ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6b4dd8-6e05-4c75-863e-bab4a07ec301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f899082e-99dc-4db0-b885-4d0df868c16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff86bcb-edf0-4c28-8c87-d44182ec83ca",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536c5be5-f35e-4deb-9e4f-48b1d04c472e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e68e631-b128-4ae4-80f0-6a3cb9313723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12f092a-8484-4fe0-a814-899738c60aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4462504-7e29-4a05-b368-6f0f3bfc8e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13d8523-a7f4-4604-848d-d90339b9b6d4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e8a9f1-69b2-4ee6-b2d7-a92d11c2a171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67dd93c1-f6e1-40e9-9ad8-28f64af63376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a94d491-6d7e-44c9-bdb3-f5462bb81bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f0f0ab-c147-4222-a330-e683f39a52bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa0d5e5-393b-423f-aed7-09b884e8e210",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9516ce-1d3e-4e68-822e-6104d898b366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282f4a2a-7782-4d4d-9522-a02754cdeafb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9281c3df-355b-4a16-88dc-d74476ee1a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88996e6-9fc4-47e5-bcd1-05ef0695c321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafa0603-94fd-466b-96bc-8fbbbd097393",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7aa6bdf-7d66-409e-a802-13cf74487895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b40a05-8414-4dd2-8857-012d033e6da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca081e4e-8eb1-4bbf-9c9c-7fab653eded9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad2ed60-cda8-4dfa-92be-4b4be16807ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fc56ae-c313-4322-8600-fa4d5780f8e6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1c983f-f3e5-41eb-9e61-519f3130f12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f557cdec-47f8-4a98-95d1-662e3b040963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a33e36-c7c2-4570-81ea-ca3cf7954f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f24f0a7-a729-480f-ac83-d2f01159597d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceef1fac-c06c-4121-9d0e-97fdb55a62d3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2af6ec0-6cc7-4e8f-890a-e458823c5ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83fe45df-d4a5-4f0d-92b6-ed3a174b687d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1db782-27d7-4e48-9f26-a0c20a89fdd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af932ae7-b078-4b0c-a744-d737e7d2f4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7399e1-2912-44e0-90f5-bb7a036e974e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26b2d1b-c8f2-46ea-98d2-5af2a1035686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40951649-c12c-4be2-8b72-2fdb0d4e767b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19df3f34-4b9c-46f5-aab5-420faf98a0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "422a2d83-0784-49a3-9912-c6f64262a01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce835d66-e4d1-4d9a-a706-740993fa80df",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4b2d78-6048-4a4b-ab7f-818ac634be0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48503ea1-2d90-4e27-b9c5-15002b67411c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0421195d-2fe3-4f54-8b16-8affa0189b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51679edb-6361-4455-b418-9276caea0625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278d1a1b-aa9f-42b9-aca1-021ecd8b6148",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce036347-7d8f-47c7-af94-92811f29633c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e11cb8-9ac3-4351-95a4-f2b8ed1e5e3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5eafa2-f810-441f-853b-2a9f9f451854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035293db-6908-46f3-ab9c-a51c1c04bb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea97a20-ebbe-4aa6-9bde-65eda17d2059",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d74dc1a-43a0-4b8e-88b7-28c4a8daf8c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2791bcff-066c-4fb8-8a59-00ecf27ab58d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d013a87-edbf-4d52-9616-6eadb0b25f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2481583-5e71-416f-ae77-f6e62f25390b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e6b36d-e339-40b6-9212-f0b5f25fef0e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d827088-ad3d-4836-befb-15ed868dfdf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa897659-895a-4210-9888-2a13becafd72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bb4fd3-698e-4898-8cbc-47d257068907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ae0b52-7a61-430c-8dc2-f0a9c91c58ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90594499-cf98-439d-9008-4259d90e6002",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9483cf8a-309f-4688-a97d-3fd9c89596eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919431d2-f1e8-4993-af4e-f61cadbe6510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81756334-4615-42ab-8d44-3d5914a81205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fab6eb-94a5-41ea-b224-68adb5b50407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679bc9f2-88f1-4f02-8631-d9301c135a50",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b01d5b0-bb72-4e1b-a5e4-aeb64e9c0031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dec7dba-9e41-4630-8753-dcc91e2827c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e76ecca-4f55-4450-aeab-e56aaa210b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeda4e10-4d66-4824-8d61-0059efd93bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd053c5a-80c0-4721-9cbe-3bb5cbf8c785",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca49535-ec17-46e3-b38d-fe44f9477770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0312b3e5-341f-4406-a37a-14ff7d41ddb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa82566-a02d-4801-9d32-d584410f8ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154b58fd-4fa9-4b3b-bce9-f7e5c0db9a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f822d1b-3482-41b0-8175-0a46ff25447e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae2e972-f563-49da-931a-f041d1bf7347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5278c1e-d0f6-415f-8de0-8c4a14c85bd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b037cbf-3ef4-4aad-8a14-ddca8bbf10e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c7f009-aca3-47c6-a426-e4dde65aef68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86443d41-86ab-47e8-a715-749910f276f0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51aa4e0f-d36a-4f17-a8b9-a927899c9b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff049a4-6006-4a60-8a34-6809062928d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a32991a-4b50-4397-8b65-bde9b4e5ca23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320932c6-d042-46dd-b3fe-05d09b1b38d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8131e5c-4a23-4481-b520-c7c7d7233f03",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9844ab1e-0e76-4b49-943c-bf549a6058c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "950cd4d4-d6ea-4bca-8f0a-a54d77cab41e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6c9410-39a2-4877-8526-ce004efae84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae553d5-51b8-4fa9-a4ca-dd18199e49ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0801b2da-d994-4472-9e15-f4c0d577bc02",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150db1df-3127-40c9-af34-00eb94eb8bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728391fe-3ce0-4708-b042-c12cc5cba381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2d6831-bc4d-4061-bfcc-65be97727b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dda22c2-7ad4-4918-96c2-660720cd11e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16435fce-5486-49c3-9310-870079e0969c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400c0285-b48c-469b-a5dd-1e45279ff8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a55ec97-869d-4f3f-b6a6-00a95c9ab624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c8a3f2-0995-4b22-ba0d-dc5c3d7fcdd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc30f6a2-33ae-4554-b157-1bae89f43c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205554da-1be2-4cc0-8ff3-cab191bf2d11",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf7a5b0-b787-453c-bc34-c5ca32686886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d738ab-5365-446c-93ca-38d5421c07e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de172df4-8377-4941-83ee-8fd01304f2db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6299c3f0-de2e-48e2-a42b-74e57788c8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c52453-f944-477e-a3d0-2d9cde1eb358",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a911821-ff83-425a-b400-a6140949b135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8173d092-2ee9-4e79-a49c-36c64265c6ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0ebaa3-a56d-42c0-a075-78c5a2ea9323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36120cd1-f154-4381-934b-b497cd286b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185fab29-386b-44e0-8d9a-2f483d9e3a58",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996fc029-8e77-4945-aa65-6ec68ab8eef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc76df2-6dfa-44e3-a74a-92ad45f3e6f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee1b2dd-c255-48f2-9152-f7950f6122cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5448169-5f78-471b-8128-ffc8fbd94b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12679cce-6d4d-4de3-8c0c-2a495657b512",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187efb35-f163-47bc-8e55-b5901a5095af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bafdf78-c26f-4ab4-883f-0bdd705a4f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab42d8cb-4656-4a82-841e-1a24cf99a419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e02ba2b-1630-4f91-822f-cfff57963a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ddfc4f-e0fd-4237-b601-2d349e41f666",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79006902-9584-4ea5-adad-43d8f43de142",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "051bb052-332c-4a4b-a385-37a16a208615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5a9441-c91f-452b-96c9-60b89137a1c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a7055d-6e87-4779-976d-9da996a3eecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a996a6-cc8d-4006-b15d-789e20c80eb1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2476e0-69e2-4023-b4e1-88cb777c00cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15bf4de1-84e1-49e5-89ae-e4e86e4e06b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0cfe90-3f89-44b8-89b6-5fb203317969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2559ad4-66d5-437a-bdd2-d0ddb861b544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d88f788-66db-4f58-95dc-07fc6706e19c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2642b0a-a9c4-4f83-9547-4d52e84483b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44fa7646-4723-4ae3-911d-68ff991f8d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f427b285-03f7-4b72-ba94-9b880311d3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c6142f-eb8e-4c2e-b152-dc5dac0d2fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbc82cb-5127-413f-bd2a-7ef60b06426a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929cf144-bd75-45bf-bf2f-46fb488f2116",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cdd236e-646d-4a36-be81-04ef6ecec709"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cedf70-72e2-43a9-9a01-0ad6283ca94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869e16af-14d9-4bcb-8e75-0b037b45dd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f156319b-b32d-49e2-825f-8017f9f37743",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f420f34-e0ed-4268-9d17-a5258157bd6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7ad40d1-a3a0-4e2f-888d-77c7b3bccb86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b8a861-6f71-4950-b57f-4671fce7b237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd25759-c5b4-4ee8-a146-b8180a2f60d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcd2ab5-294b-4406-8b72-13eb4a77be84",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d739196-7754-4eb9-abeb-732dcf8b6f73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45dab322-b469-403b-a8d7-26b89bd339ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c82eff5-b59f-40d5-b643-b2517dc72458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23af9719-ba98-4cff-92ed-8bf89f54be46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ef545d-a853-4e07-854a-72b091560d07",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333760b3-8cfa-4f68-9345-4cb25e9dd258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30cc020c-f4e4-49b9-b04b-a89c3ff552ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f427c031-7189-4976-99a8-cbdbfa99ebca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4427263f-42de-40ce-8a07-940b879e8e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eaeac54-ec1c-4507-9e08-1e598ef97e6a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31324d5-12eb-4fa5-aaf3-ad51f07b4619",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "353131de-d3ee-4b6c-8ad3-9643500184eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2f0779-fd5b-439c-b939-7806db087700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db39e75d-2165-4928-8b4a-af0965ae5510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39718a7-45bf-48f9-a37f-62095ff8b5c2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f85148-7680-49d7-9a65-6ae578c3e481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82f52932-788e-4033-8757-f0380104e2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9455143-b4a9-49e6-9ed2-aba25099e21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076bacea-3d9d-4563-bc7f-594425dd83b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f715656e-0781-4d2c-a0e6-bac981fb65ce",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ce95d8-bdcf-45b5-b011-4de20a906e6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63421e69-ff31-449d-891d-7ed3e3758f48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca67359-4698-48c3-bab4-afb7c85b8a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400b1f56-8a36-48eb-857d-825d9d3ade05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5604442c-f27f-414f-9cc7-5376ff92008a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09153264-dfad-42db-83f5-7ee45accb58c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1bf978c-7d9f-42d2-a55d-90260d283500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22cee15-c9bc-462b-8131-95de8ac951b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8812120-8cca-4e85-bcaf-685b6acabe50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fa0d4a-da41-4624-b8eb-f07fed933c93",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa409d4-25f2-4a3a-861f-56ecb7c15ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "657fbc94-70c4-4af1-a961-e748070cdf41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408cfd95-2340-4769-8866-fb06d00353b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4776918-9d4b-4d05-8fd9-6757bd1aa18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0bd463-85c7-4f53-8f68-1bf61ac876ab",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca52bc8b-b339-4f0e-b642-1172c772e4cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f67d6f9b-c2ea-40e1-9a20-74e5ddaba5cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5556bcae-4723-49ec-b7e1-e05cf31a6977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f28139f-4f4d-4c9a-9a21-3b4d830020aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e3aa7f-fe86-40a4-bbb2-43fd96439d94",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962c4d83-9c99-4e62-a6d8-06a21b3a616e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e946566-8aee-4ee6-b369-2669f0a014f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa7ba30-a5ce-43e7-91f8-22006f3217fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b694255c-8680-4410-a5a5-94647d1556f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f0c346-ce80-4010-b386-d6fb4090bcbb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34a17e1-6284-4d7e-a096-f0a78db33d79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99a1e0d6-2387-4063-9c22-8e6c85ea71fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "497f4302-76ae-45f9-af32-0c419c058a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8b8d94-c074-4f35-8ea6-e04be849c855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8111c8bf-0969-40e4-9827-c6acb882afcc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326aad92-db16-4050-9838-985346dd79eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f664e427-bda3-4f0e-9391-cc5823c53fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129181ed-c89d-4bc0-9d5e-b1d55d13dac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ee9aa1-a018-4286-baab-eeb630891f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a68970-ae2a-4564-b38b-9f7a9fc499f0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb153452-d05e-49c8-b319-79f998c26481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4395e92-85ee-4579-8665-2b1bd9ccdff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46dcaf5-ee61-47aa-89b7-6cc24c52eeb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3156ea5-aae9-4776-996b-a24c9b8a8c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb953eb4-fd28-435d-9e82-558a86d45fd1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13797133-8c4a-4bdd-a2e4-0f8f4a79ad1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ddfab5c-e191-4297-8f3c-b052eb008dc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de716f1-f370-4828-a90a-1d1ddced4c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb380f9-c889-46cc-b53f-a5944d67fccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44c6eb8-adc5-42a4-ae3c-b36b5ce0e733",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d46b205-474d-4736-82eb-bff511eba8b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b63fbd08-bd2a-438b-b251-1f0f09ac0d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca292683-d32a-4a8c-9f48-ff68efe12eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb19955-4e2b-4c4f-ad40-832f40bd7c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556dafc8-ded3-4a68-bb03-753fe808ced2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f381f4c0-63d6-48be-9475-5693be997096",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3669f0e2-3b8b-4ee5-8d34-68385d210939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778b2559-be18-4759-b7af-37b3726c9081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c375ef3e-873f-4e00-86dc-c97f4006f533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9940330-42f3-4825-b172-8424491703ef",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f23de3-0f7c-4b87-8c6d-597d47e2bf2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dbd1f86-83d8-4e1c-9ee4-a68b259f026d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6ceb3e-dd48-41bf-8553-bf211c9432e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9626ea13-cfb6-495d-bc4c-d76ee862bd08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25937f07-5fd0-40b5-a17f-bfdbce9140fa",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb87acd-71e5-4fec-a7db-7db30d2b0d2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7a2e4d9-f2e0-4e0e-81ee-c58ef0a1eca8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd8c061-f8e3-47bf-b333-2f1434e13881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac41d1e-0493-4147-b306-4e6c597bb9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab56fc0-1d88-4219-a973-2cce8f6dde20",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50610e10-df7d-4bf8-8375-1d87aa5212f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67361b1a-59f9-4a81-9fd6-af5ad2a75f0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e9624f-261e-44af-bf74-5d7ac6cb5543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f41074fd-66ef-4956-a775-981e9b3dbd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8d01c1-4655-4744-82d0-08b8fe5f6dcf",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d03c01-a34f-4d6e-9447-3ade3b6ae534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dca5069-0ea1-423d-bb5f-a95ed6ef598a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b58bab8-45aa-4456-bcf0-5c7532613695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d82343-328e-48ce-bdd3-201ded93c451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edb3fb8-f117-41fa-9c2a-37098eec19ee",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0902018-ca06-40dc-9408-e4ce7ce17c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff8380e9-9ee3-4e76-8d78-3c82c30120c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de4ddf0-97fd-4a5e-9a70-95a785a4614d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5d7dfb-e976-4f26-829d-ce98a6b2836f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106d83b8-2349-4790-8597-dd9e35b5a16a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d0687c-5703-4a37-a656-8a69ed501d0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "920d4af3-25a8-47e2-8bd9-9f5b5dd56de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4296d6b-5370-45d9-bb77-d3d163316df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85b989d-002a-49bb-a796-a699d9561176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84010d26-2f59-4e00-b2c8-fa6f1e0cde28",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c832216a-ef4a-4f24-b9d8-6fa3ca5ad936",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "651d73ea-3f5c-48b6-bf5b-0a4abcce3ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbe36f1-b2ae-4d4b-b425-09cbd1e981b4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee245d2-0342-4a0b-8693-53c84da7cb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2849ebe-9fdf-4db3-906d-4e9e2af5dfe6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8eb626-6284-4073-8ba5-4f063d92654a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5c397bf-957a-46ef-b5f4-4ab968f9fdfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c102c0-d468-4803-a633-bd6691f35902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b22f22a-8f8e-4c8d-9090-3fc8030b3a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243a24fd-e828-4beb-b9be-cdb574316063",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876576f9-209a-4f9a-ac3f-343afbd030c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "482de344-44b1-431f-90f0-53cb8ca431cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd50a1f7-5d59-4770-a06c-919921b0ddfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc22b5d3-1e9c-4d8d-ae47-9847bc4b3d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2f040e-db06-4e85-b35e-4b5d476260a4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2cced0-d17e-430e-86aa-5b5cc3ce0693",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a9af210-f461-4b01-81ba-b0f2b317c54f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4546ba1-499f-443f-aeb0-3667d6b36b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58711b2-c4e7-499f-b87c-9ac1612e66e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7362ad16-3087-4dc7-b4e4-7cb4bbd93866",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc2b12d-af5e-4703-93b5-2e01002d655c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdf2e67f-56a9-429b-9860-18e17cd2e908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bfaed0-83ac-4735-9ed1-e549d43d386f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ceaaf12-bd64-49c5-b0e4-936f1f3ee47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f9a8f5-a50d-4dfb-864a-40f73bc19060",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24ab5f2-9fe5-4440-889e-a285f4251926",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25a9b4c2-a1bf-4bdd-9b3a-99b4cccfd400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c476c77d-bed4-4ee5-a5ba-20fd0a304f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae9ace4b-51a0-4e3a-a4f2-7be7a4f4bef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0db795-d70e-400b-a8fb-ae84a58fe2d7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63388866-2fcb-4a74-8042-7efaae880c2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "383486e8-c7f5-4923-bfb5-89ef26fc5c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf44c60-7a9f-403e-9de4-1d49488788ae",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fadcf3-2ccd-44ee-87fd-5fb4c3722e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a0ff6d-a763-445b-93d7-11b9192469aa",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c557fe-4473-4931-8e07-5c6fbbeb3d23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "961cb647-4615-465e-b8e3-544287433d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2c968f-fc83-4519-85a6-8d6e7626167f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a15aa38-cee9-457e-a95c-d6c89143dcca"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ec71c81-d325-44aa-b4df-8b3ba0eca8f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17dce29d-58a3-49e0-a6f1-749974eb8cc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3eb5179-97a3-48bf-869f-52e1343f9370",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "991d526b-2399-4b8a-a908-1a7bc9e6fa97"
                    }
                  }
                ]
              },
              {
                "id": "14069703-17e4-432d-9368-527e95461744",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce3f2643-6dd3-4405-a554-d980a1ec02f6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83599b5c-6c89-4f58-ac89-b1adb3e4ba55",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c6c14b11-76bb-45f8-a48f-d9d2cdc60f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02d2b37-4fd2-4eca-a99f-25c5bb9cf694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "075be5c7-5509-427e-85b1-ea087d2955c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e20296d4-0386-477b-ab32-63ab39671bc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6564e68e-87e7-41df-b602-67dd966ab71a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f79c6d40-1c27-4b30-bb8d-2eaa9b8ed4cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "800a0504-cd6f-4e3e-b903-ad82f90e9a7e"
                    }
                  }
                ]
              },
              {
                "id": "def65320-22cb-4c42-9f57-917db459f728",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "37d11dc8-d3bc-42d9-a334-1e339f177d28",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caf46cc-76d6-4096-afab-ef99f42ee7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0d94f150-c600-49dc-9907-6f06d7ee6a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9102c99-bb3b-40fe-8db6-e6a236f7b2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47172c6d-1562-4b55-90b4-f3283d1d051b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "af4638b8-c9f9-4018-9e9b-326d92c029e7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "759e223b-6a8d-4b58-8b83-a17ce2b9c109",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2daf1cb3-4e9b-4942-9877-ff1b37c0d12d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ba3a286-9654-4d23-be37-f774bd221458"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc59df56-e31b-4051-874e-86dfe8961d0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63394ba6-9fce-4e3a-b5bf-ad31d7439805"
                    }
                  }
                ]
              },
              {
                "id": "8f801809-6b79-445e-aaf5-15cb9ef3c9a1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b3a3c78-039a-4d75-a36b-6d4564963b21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d05f32ed-43d8-4518-9a9f-ba49490699d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7d7c4d6-6a4a-42c2-9256-3a5b8b1a6c0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e5239fe-d2a4-45eb-8934-7e06de974e40"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb305c7c-08dd-4447-a818-4caa060e7b67",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a6297f48-af54-4dd7-834d-d6b5a32a5a1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c80bfbd5-605b-4bc1-9209-2bc8c2254648",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70be1126-cbd3-4e4b-ba1b-9ed322a6f6eb"
            }
          }
        ]
      },
      {
        "id": "c711147c-d845-43d8-a211-ca1def3ce575",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fc7cdea7-208d-449c-8792-ef5c03a10ab0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "388f9e4e-66cf-4e1c-b4eb-58cc64767132",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "58b7179b-0207-4d21-87a8-fecb3da9cdfa",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c170363d-471f-4f73-8d01-c3ba753a8fa3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "58fd3cd0-2150-48dc-be43-9cb56b8b4e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dc4e66-f48f-4227-9517-3ff4d6dce94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "830d5e30-9b58-4c09-8a75-1af0119d7c6c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db9da94c-9c74-4b7e-8c9c-8d1dc64aaf0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9326040e-d764-47b3-abee-befed8d8f523"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "727343f3-bfa7-49a6-9a7d-675b5aeafe70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57cca195-d29c-4752-80cf-77cbb94899cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0682290-7c33-48ec-8e97-f9c87ebb7a56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ded9f1d1-f6f0-4287-b4a3-8d8e9e115b86"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50c6b18c-aa93-4986-97bc-734aa060d510",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4c0faab9-cf82-4381-94b7-44732e4c3210"
            }
          }
        ]
      },
      {
        "id": "09225dda-3dd0-40ce-9b8f-cd469e4fa100",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6f2f4d7f-b6ba-4c2e-a9f1-55ac6b40822d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e044e5d-eb70-4d67-a0d1-a362894377d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5823b965-168a-4406-9084-ae851cde140d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebb7cd3-3bb5-4681-baad-a1ad21ca15be",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6f28b35-d005-4171-b296-d7319dc7d67b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd84c9d-960a-4f8c-99f8-ec9fd7251baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0356b0d5-1148-4c04-8e48-2ad3b2f4cddb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afd8726a-26e5-4454-a25d-a794bd9253d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "171fd30a-677a-413e-931c-3596245e57bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "25093acf-fd5c-4b3b-a93f-7c7725c7287d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8963582-f87a-444f-9cb7-569bbd9233ce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46ce2036-d37f-424d-bb2d-9eee398da7fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1c114ae0-d026-4229-8e08-e455b52118f8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "070f3643-a06d-44a2-83eb-a0da45ea08e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae9674e9-fb43-4164-815a-f582f50b2c76"
            }
          }
        ]
      },
      {
        "id": "829434fc-d475-4798-913b-ac5600cf349c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8b859ec4-1602-4485-93cd-3302da2e8f66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04549fad-733c-4ded-a9f7-385a79af48cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "10f69681-ee68-4b9c-b735-b7fd1fbf6ebe",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129ec55d-9943-48d8-bc83-bcaa26c1cd82",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c71a0d2-f4a3-433e-8371-143695dd860c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ed0ca4-ca30-43de-91ea-28de40b811df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8974169c-c641-4ffa-becf-af57d433c718"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9904fe6-ef7c-4068-a4b3-a121f6022e67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaed9b7f-784f-4131-8e86-e1521d1ab338"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b250ef8c-de42-48f2-bd6d-bd879fa95a69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afa50a1d-4ac4-4dd8-98ac-df168c9f0c75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16b1fd17-dadb-4f5c-97f3-7f847131eca6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3c9a5dc7-3821-4ed0-8ba9-7910423471fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e344672f-fdb3-4660-8ad9-2e4f93214486",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e85881df-5e28-4d49-bb5c-89ff0a322481"
            }
          }
        ]
      },
      {
        "id": "9a55f1ff-3f70-4d02-9a65-1525dfbad19f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38429128-98eb-4349-9071-bcb88354dcd4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bbd8f5e-9cbf-4930-8d8b-44e24adf383a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c934434e-9828-49c6-9867-077698a43b6a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8fc6e31d-dec9-4056-b083-747c54c00488",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91af6df3-7e10-4c38-88e8-05c465daf484",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 54.85283687943263,
      "responseMin": 5,
      "responseMax": 537,
      "responseSd": 25.34488300996855,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707957239011,
      "completed": 1707957279927
    },
    "executions": [
      {
        "id": "fe7a654c-8612-49f7-8983-7cc00e193360",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7e2a3f4c-1ff0-4ca9-b973-1f22ff297420",
          "httpRequestId": "9d9c5267-3c1d-4be1-8595-0a067c20fd67"
        },
        "item": {
          "id": "fe7a654c-8612-49f7-8983-7cc00e193360",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "aedfc4de-d6bf-4eb1-881d-ef5a0cb1cbf2",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 0
        }
      },
      {
        "id": "1cdb87cf-daad-441d-85d6-c7fe1c801b5e",
        "cursor": {
          "ref": "e85ca7ae-fc4f-4c1b-a51a-6cc2a293c77c",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "16f73326-a1b6-474d-94f6-25888dd22740"
        },
        "item": {
          "id": "1cdb87cf-daad-441d-85d6-c7fe1c801b5e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "81ee3b11-4e95-4d7c-905a-c0d6190a74da",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "85467a48-33dd-4025-b572-0f1e29d9fe0e",
        "cursor": {
          "ref": "e8539179-603b-4582-8d34-dd2cf633666b",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "400f6ff2-8d0a-4366-924b-621a3e0fd675"
        },
        "item": {
          "id": "85467a48-33dd-4025-b572-0f1e29d9fe0e",
          "name": "did_json"
        },
        "response": {
          "id": "244c93bc-8168-4052-9dba-4b19f28d68c9",
          "status": "OK",
          "code": 200,
          "responseTime": 537,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e66f0f-564c-472b-9413-9ea5d19e2be8",
        "cursor": {
          "ref": "7b21c50e-8f51-4794-bd01-7a634151400b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0c89878b-0f8e-43a5-858d-c790e2bc8af5"
        },
        "item": {
          "id": "99e66f0f-564c-472b-9413-9ea5d19e2be8",
          "name": "did:invalid"
        },
        "response": {
          "id": "5912816c-a787-4828-b209-1ee0568cf00a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e66f0f-564c-472b-9413-9ea5d19e2be8",
        "cursor": {
          "ref": "7b21c50e-8f51-4794-bd01-7a634151400b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0c89878b-0f8e-43a5-858d-c790e2bc8af5"
        },
        "item": {
          "id": "99e66f0f-564c-472b-9413-9ea5d19e2be8",
          "name": "did:invalid"
        },
        "response": {
          "id": "5912816c-a787-4828-b209-1ee0568cf00a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9163baf4-0252-42f1-85cd-29cbd815faab",
        "cursor": {
          "ref": "562554b3-d7a7-4af1-9c44-74607ab2b066",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1d76710d-65c5-4822-9f82-c8ca6f273c53"
        },
        "item": {
          "id": "9163baf4-0252-42f1-85cd-29cbd815faab",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f4d832ce-8fad-4e9c-a41f-cbe881a50bde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9163baf4-0252-42f1-85cd-29cbd815faab",
        "cursor": {
          "ref": "562554b3-d7a7-4af1-9c44-74607ab2b066",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1d76710d-65c5-4822-9f82-c8ca6f273c53"
        },
        "item": {
          "id": "9163baf4-0252-42f1-85cd-29cbd815faab",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f4d832ce-8fad-4e9c-a41f-cbe881a50bde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33efbff-653f-49dc-9926-a1616e81e20e",
        "cursor": {
          "ref": "00762bf7-0fab-4e76-a0e3-8afad55a8630",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a84e0e2b-f3d3-492a-a38b-be02bfbaabd8"
        },
        "item": {
          "id": "a33efbff-653f-49dc-9926-a1616e81e20e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e39aa720-26f6-4655-ba6c-deb1c23d77ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33efbff-653f-49dc-9926-a1616e81e20e",
        "cursor": {
          "ref": "00762bf7-0fab-4e76-a0e3-8afad55a8630",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a84e0e2b-f3d3-492a-a38b-be02bfbaabd8"
        },
        "item": {
          "id": "a33efbff-653f-49dc-9926-a1616e81e20e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e39aa720-26f6-4655-ba6c-deb1c23d77ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02524c0-20e7-434e-ab48-faa1f32411e7",
        "cursor": {
          "ref": "fc9685bf-de34-4148-bc66-c282cd592efc",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "245e48dc-63f3-4e8f-9e12-7e0e1a05aa07"
        },
        "item": {
          "id": "f02524c0-20e7-434e-ab48-faa1f32411e7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3cc81838-d796-4d1f-b8db-76b880e36450",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02524c0-20e7-434e-ab48-faa1f32411e7",
        "cursor": {
          "ref": "fc9685bf-de34-4148-bc66-c282cd592efc",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "245e48dc-63f3-4e8f-9e12-7e0e1a05aa07"
        },
        "item": {
          "id": "f02524c0-20e7-434e-ab48-faa1f32411e7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3cc81838-d796-4d1f-b8db-76b880e36450",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba945ad-c3c7-428e-a469-ee386d283940",
        "cursor": {
          "ref": "08612e9d-8355-477b-9aab-3b0b54f76cc3",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9472e496-afc6-45cb-a286-524d7b522c9a"
        },
        "item": {
          "id": "8ba945ad-c3c7-428e-a469-ee386d283940",
          "name": "identifiers"
        },
        "response": {
          "id": "2b9d94e6-aabe-447a-9dfc-baac6b0fecd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8ba945ad-c3c7-428e-a469-ee386d283940",
        "cursor": {
          "ref": "08612e9d-8355-477b-9aab-3b0b54f76cc3",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9472e496-afc6-45cb-a286-524d7b522c9a"
        },
        "item": {
          "id": "8ba945ad-c3c7-428e-a469-ee386d283940",
          "name": "identifiers"
        },
        "response": {
          "id": "2b9d94e6-aabe-447a-9dfc-baac6b0fecd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a2718816-9085-46c2-ab68-649464d74aab",
        "cursor": {
          "ref": "fe1ed26a-6ee2-4fc0-a30c-a36f5a22f09f",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4ff7c058-aff7-462f-a73a-bf6d4f06eaff"
        },
        "item": {
          "id": "a2718816-9085-46c2-ab68-649464d74aab",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a947a5f-ffa9-4fbb-b3e4-a06452fb5af8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2718816-9085-46c2-ab68-649464d74aab",
        "cursor": {
          "ref": "fe1ed26a-6ee2-4fc0-a30c-a36f5a22f09f",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4ff7c058-aff7-462f-a73a-bf6d4f06eaff"
        },
        "item": {
          "id": "a2718816-9085-46c2-ab68-649464d74aab",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a947a5f-ffa9-4fbb-b3e4-a06452fb5af8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b23fb4-bd53-4424-b16c-390a85c286a2",
        "cursor": {
          "ref": "0d4fb714-0c80-444b-bf24-ca91c3bec6ca",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "dfc2c8fd-00b2-4ea1-a00f-584d7d08bcca"
        },
        "item": {
          "id": "a4b23fb4-bd53-4424-b16c-390a85c286a2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "54b122d9-1223-4dad-88a0-c9bbd6a84cb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b23fb4-bd53-4424-b16c-390a85c286a2",
        "cursor": {
          "ref": "0d4fb714-0c80-444b-bf24-ca91c3bec6ca",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "dfc2c8fd-00b2-4ea1-a00f-584d7d08bcca"
        },
        "item": {
          "id": "a4b23fb4-bd53-4424-b16c-390a85c286a2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "54b122d9-1223-4dad-88a0-c9bbd6a84cb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfdb079-2f4e-41ac-8bfa-c273a47b82a8",
        "cursor": {
          "ref": "7adcd376-d79c-4c55-80c6-df31e05f7b06",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "491be9be-f65a-4566-9f2c-a51987ac726f"
        },
        "item": {
          "id": "4dfdb079-2f4e-41ac-8bfa-c273a47b82a8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e1337271-ff73-4f1e-9781-677c2f9eff27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfdb079-2f4e-41ac-8bfa-c273a47b82a8",
        "cursor": {
          "ref": "7adcd376-d79c-4c55-80c6-df31e05f7b06",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "491be9be-f65a-4566-9f2c-a51987ac726f"
        },
        "item": {
          "id": "4dfdb079-2f4e-41ac-8bfa-c273a47b82a8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e1337271-ff73-4f1e-9781-677c2f9eff27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550df152-c754-45fa-815d-8d4617d1fd6a",
        "cursor": {
          "ref": "a93ae68b-614d-453b-94d6-8b6a5f991d73",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1dbae1bc-f762-409b-9cc4-3f531b74d153"
        },
        "item": {
          "id": "550df152-c754-45fa-815d-8d4617d1fd6a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "91513d86-fde7-40a8-9fa1-3632d090af18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550df152-c754-45fa-815d-8d4617d1fd6a",
        "cursor": {
          "ref": "a93ae68b-614d-453b-94d6-8b6a5f991d73",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1dbae1bc-f762-409b-9cc4-3f531b74d153"
        },
        "item": {
          "id": "550df152-c754-45fa-815d-8d4617d1fd6a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "91513d86-fde7-40a8-9fa1-3632d090af18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5538838-6a88-4863-a687-34dbf9c6a710",
        "cursor": {
          "ref": "23844f72-358c-4750-9651-8bdf90e055bf",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9f043532-08ca-4fc1-96c3-43b5c9944fec"
        },
        "item": {
          "id": "c5538838-6a88-4863-a687-34dbf9c6a710",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "75207040-4adc-4c9d-9f72-4dfd1d0654bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5538838-6a88-4863-a687-34dbf9c6a710",
        "cursor": {
          "ref": "23844f72-358c-4750-9651-8bdf90e055bf",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9f043532-08ca-4fc1-96c3-43b5c9944fec"
        },
        "item": {
          "id": "c5538838-6a88-4863-a687-34dbf9c6a710",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "75207040-4adc-4c9d-9f72-4dfd1d0654bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc36917-975a-485b-a349-b49e2d9575c7",
        "cursor": {
          "ref": "2825da99-8245-4e34-97ba-af9b993fb9f0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2d0f821e-6cb9-4c69-8f54-154acdc45c97"
        },
        "item": {
          "id": "6cc36917-975a-485b-a349-b49e2d9575c7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a9538d5f-ede7-4feb-8f6d-40403caf5fdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc36917-975a-485b-a349-b49e2d9575c7",
        "cursor": {
          "ref": "2825da99-8245-4e34-97ba-af9b993fb9f0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2d0f821e-6cb9-4c69-8f54-154acdc45c97"
        },
        "item": {
          "id": "6cc36917-975a-485b-a349-b49e2d9575c7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a9538d5f-ede7-4feb-8f6d-40403caf5fdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f678ef-e223-45c7-a27a-8d829f46c6e4",
        "cursor": {
          "ref": "5a1a5101-7801-4a0d-bdaa-833ad3561aa1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "351b1716-d779-4799-ae36-478db9dfb52d"
        },
        "item": {
          "id": "94f678ef-e223-45c7-a27a-8d829f46c6e4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "613bfa74-2dbf-42d2-a178-71dc0e852121",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f678ef-e223-45c7-a27a-8d829f46c6e4",
        "cursor": {
          "ref": "5a1a5101-7801-4a0d-bdaa-833ad3561aa1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "351b1716-d779-4799-ae36-478db9dfb52d"
        },
        "item": {
          "id": "94f678ef-e223-45c7-a27a-8d829f46c6e4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "613bfa74-2dbf-42d2-a178-71dc0e852121",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6287d40-899c-4cb4-9b43-4bf98877694e",
        "cursor": {
          "ref": "60e8efc3-89a2-4396-805d-2c62a49b81fa",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c4c4b09a-259d-4867-8117-c0344b6ebe0b"
        },
        "item": {
          "id": "f6287d40-899c-4cb4-9b43-4bf98877694e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "903ab01f-cf3f-42ea-9cbc-ac63ae099717",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6287d40-899c-4cb4-9b43-4bf98877694e",
        "cursor": {
          "ref": "60e8efc3-89a2-4396-805d-2c62a49b81fa",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c4c4b09a-259d-4867-8117-c0344b6ebe0b"
        },
        "item": {
          "id": "f6287d40-899c-4cb4-9b43-4bf98877694e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "903ab01f-cf3f-42ea-9cbc-ac63ae099717",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1423555-afd7-403b-b8cf-0663af050d83",
        "cursor": {
          "ref": "c12cf909-9167-4cda-860d-62f834cc0d66",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fd480568-5d2a-4b2f-b03f-5174675360f2"
        },
        "item": {
          "id": "a1423555-afd7-403b-b8cf-0663af050d83",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2f6c42d9-b211-4084-8445-1e558c1cae9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1423555-afd7-403b-b8cf-0663af050d83",
        "cursor": {
          "ref": "c12cf909-9167-4cda-860d-62f834cc0d66",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fd480568-5d2a-4b2f-b03f-5174675360f2"
        },
        "item": {
          "id": "a1423555-afd7-403b-b8cf-0663af050d83",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2f6c42d9-b211-4084-8445-1e558c1cae9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545f6808-78de-4fe6-82d0-58f1eb8bb7ef",
        "cursor": {
          "ref": "eeb53fcd-6e89-4ac0-b9c0-743b00702cb6",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "04aaeeb1-61a6-4e34-b92c-008c457cbcff"
        },
        "item": {
          "id": "545f6808-78de-4fe6-82d0-58f1eb8bb7ef",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6b9d957c-45fd-43db-9778-9ab73ce79a72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545f6808-78de-4fe6-82d0-58f1eb8bb7ef",
        "cursor": {
          "ref": "eeb53fcd-6e89-4ac0-b9c0-743b00702cb6",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "04aaeeb1-61a6-4e34-b92c-008c457cbcff"
        },
        "item": {
          "id": "545f6808-78de-4fe6-82d0-58f1eb8bb7ef",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6b9d957c-45fd-43db-9778-9ab73ce79a72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e9e3f8-35ca-43c5-8607-fb0676d744ac",
        "cursor": {
          "ref": "07f50cdd-a085-42a0-a022-19625b2cc441",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "90958239-adb0-4b6c-b087-c3e4b2cc9357"
        },
        "item": {
          "id": "69e9e3f8-35ca-43c5-8607-fb0676d744ac",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "97552f46-f023-4cb3-b77e-c0e122af6aad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e9e3f8-35ca-43c5-8607-fb0676d744ac",
        "cursor": {
          "ref": "07f50cdd-a085-42a0-a022-19625b2cc441",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "90958239-adb0-4b6c-b087-c3e4b2cc9357"
        },
        "item": {
          "id": "69e9e3f8-35ca-43c5-8607-fb0676d744ac",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "97552f46-f023-4cb3-b77e-c0e122af6aad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fc050e-5163-4d84-9edc-56437ee8ba40",
        "cursor": {
          "ref": "4482fddf-b017-41d9-bbd8-8b13fb8868d8",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6bd6b744-15d7-4c32-829a-11faaedf0648"
        },
        "item": {
          "id": "37fc050e-5163-4d84-9edc-56437ee8ba40",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7b7c7115-dc69-4114-8002-ae24b6d02173",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fc050e-5163-4d84-9edc-56437ee8ba40",
        "cursor": {
          "ref": "4482fddf-b017-41d9-bbd8-8b13fb8868d8",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6bd6b744-15d7-4c32-829a-11faaedf0648"
        },
        "item": {
          "id": "37fc050e-5163-4d84-9edc-56437ee8ba40",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7b7c7115-dc69-4114-8002-ae24b6d02173",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34169555-d3b7-447f-9248-e45c75922687",
        "cursor": {
          "ref": "423dc320-e800-48c3-baca-b3b1729263ce",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5e59805e-b64f-49bb-a466-d51e504642e0"
        },
        "item": {
          "id": "34169555-d3b7-447f-9248-e45c75922687",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e08549de-1934-4030-83d1-231af089084e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34169555-d3b7-447f-9248-e45c75922687",
        "cursor": {
          "ref": "423dc320-e800-48c3-baca-b3b1729263ce",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5e59805e-b64f-49bb-a466-d51e504642e0"
        },
        "item": {
          "id": "34169555-d3b7-447f-9248-e45c75922687",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e08549de-1934-4030-83d1-231af089084e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f371d8f8-fef2-41f0-8b5a-8a717d66ee13",
        "cursor": {
          "ref": "81c35465-8fb4-4946-874a-d314b1c1fa56",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "89af448f-b535-4aee-88ce-dab69b1d6d07"
        },
        "item": {
          "id": "f371d8f8-fef2-41f0-8b5a-8a717d66ee13",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ed83adfe-f1be-4314-9fb8-87f3fe491bf5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f371d8f8-fef2-41f0-8b5a-8a717d66ee13",
        "cursor": {
          "ref": "81c35465-8fb4-4946-874a-d314b1c1fa56",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "89af448f-b535-4aee-88ce-dab69b1d6d07"
        },
        "item": {
          "id": "f371d8f8-fef2-41f0-8b5a-8a717d66ee13",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ed83adfe-f1be-4314-9fb8-87f3fe491bf5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9161c1b-0d79-42cd-b76f-288d5e017f99",
        "cursor": {
          "ref": "385faf84-862a-465f-9c8f-792ebde64f8d",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2b1520c1-68bb-4ddd-9ebc-a0b42a71ed88"
        },
        "item": {
          "id": "f9161c1b-0d79-42cd-b76f-288d5e017f99",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4c620d83-4e19-499a-992a-7d0d723f277f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9161c1b-0d79-42cd-b76f-288d5e017f99",
        "cursor": {
          "ref": "385faf84-862a-465f-9c8f-792ebde64f8d",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2b1520c1-68bb-4ddd-9ebc-a0b42a71ed88"
        },
        "item": {
          "id": "f9161c1b-0d79-42cd-b76f-288d5e017f99",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4c620d83-4e19-499a-992a-7d0d723f277f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27254d27-a316-4968-8be5-8b3e99b6670d",
        "cursor": {
          "ref": "4f3c2d1c-e52f-4e90-9e21-97216e8434bd",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f7662beb-6619-4444-888a-f568dd602b64"
        },
        "item": {
          "id": "27254d27-a316-4968-8be5-8b3e99b6670d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f34dab35-7e44-4cc4-8116-2b5bcdaa65a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27254d27-a316-4968-8be5-8b3e99b6670d",
        "cursor": {
          "ref": "4f3c2d1c-e52f-4e90-9e21-97216e8434bd",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f7662beb-6619-4444-888a-f568dd602b64"
        },
        "item": {
          "id": "27254d27-a316-4968-8be5-8b3e99b6670d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f34dab35-7e44-4cc4-8116-2b5bcdaa65a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc61fa69-c113-4ee6-a096-ebff30d86092",
        "cursor": {
          "ref": "f50ba588-d1dc-4d3f-ab9b-6ad5a1ecafce",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a1cb9d34-86e3-450b-94af-20fcb6c130d2"
        },
        "item": {
          "id": "bc61fa69-c113-4ee6-a096-ebff30d86092",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "05f85f12-6585-4b3f-aacf-f68789588436",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc61fa69-c113-4ee6-a096-ebff30d86092",
        "cursor": {
          "ref": "f50ba588-d1dc-4d3f-ab9b-6ad5a1ecafce",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a1cb9d34-86e3-450b-94af-20fcb6c130d2"
        },
        "item": {
          "id": "bc61fa69-c113-4ee6-a096-ebff30d86092",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "05f85f12-6585-4b3f-aacf-f68789588436",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f79810a-5305-4b1d-b67f-22ee30abd555",
        "cursor": {
          "ref": "b394ccc3-3c8c-467d-a8e3-4180536ba992",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "651f17f6-1ccc-4dbf-9a51-7855ad98c01f"
        },
        "item": {
          "id": "7f79810a-5305-4b1d-b67f-22ee30abd555",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e240633a-75c0-4aee-ad93-5eff41a8846a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f79810a-5305-4b1d-b67f-22ee30abd555",
        "cursor": {
          "ref": "b394ccc3-3c8c-467d-a8e3-4180536ba992",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "651f17f6-1ccc-4dbf-9a51-7855ad98c01f"
        },
        "item": {
          "id": "7f79810a-5305-4b1d-b67f-22ee30abd555",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e240633a-75c0-4aee-ad93-5eff41a8846a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7153a4e-4b60-4405-9c9e-aa40e00edfcf",
        "cursor": {
          "ref": "16d346f2-78a5-483e-8eeb-1ab125fe29a8",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e3b48bec-da05-4a1a-8440-73f4684a59ca"
        },
        "item": {
          "id": "a7153a4e-4b60-4405-9c9e-aa40e00edfcf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "189704ed-2f2c-4057-9fc2-908f873b858b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7153a4e-4b60-4405-9c9e-aa40e00edfcf",
        "cursor": {
          "ref": "16d346f2-78a5-483e-8eeb-1ab125fe29a8",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e3b48bec-da05-4a1a-8440-73f4684a59ca"
        },
        "item": {
          "id": "a7153a4e-4b60-4405-9c9e-aa40e00edfcf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "189704ed-2f2c-4057-9fc2-908f873b858b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e09c4c-8b4a-49e0-b47e-ac7f52e2486c",
        "cursor": {
          "ref": "f653ed60-5c48-4e0d-abe7-f23acf0f7fe9",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4d4a08e9-e820-4e9e-af88-858e1ab64927"
        },
        "item": {
          "id": "d6e09c4c-8b4a-49e0-b47e-ac7f52e2486c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a9f909fc-9949-451c-af70-c4e7543d8702",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e09c4c-8b4a-49e0-b47e-ac7f52e2486c",
        "cursor": {
          "ref": "f653ed60-5c48-4e0d-abe7-f23acf0f7fe9",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4d4a08e9-e820-4e9e-af88-858e1ab64927"
        },
        "item": {
          "id": "d6e09c4c-8b4a-49e0-b47e-ac7f52e2486c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a9f909fc-9949-451c-af70-c4e7543d8702",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24bd5342-0f79-4891-b440-310b4a3ac384",
        "cursor": {
          "ref": "7992c3ec-d494-474a-8a3a-d652f59bb294",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b265ecdd-f5d2-4554-b678-8312bc76991f"
        },
        "item": {
          "id": "24bd5342-0f79-4891-b440-310b4a3ac384",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a9ed85bd-61e0-4d8c-ae33-402f8e872551",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24bd5342-0f79-4891-b440-310b4a3ac384",
        "cursor": {
          "ref": "7992c3ec-d494-474a-8a3a-d652f59bb294",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b265ecdd-f5d2-4554-b678-8312bc76991f"
        },
        "item": {
          "id": "24bd5342-0f79-4891-b440-310b4a3ac384",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a9ed85bd-61e0-4d8c-ae33-402f8e872551",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affe012b-e75b-4e65-b747-430c4dad6c00",
        "cursor": {
          "ref": "2cec5bfd-f06c-4aca-8faa-57a08916bcd7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cdf9ccff-95b3-4115-8ad6-7bde305d3ffc"
        },
        "item": {
          "id": "affe012b-e75b-4e65-b747-430c4dad6c00",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "aea91d73-d02e-4eea-8f9b-ea5c8ea9675a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affe012b-e75b-4e65-b747-430c4dad6c00",
        "cursor": {
          "ref": "2cec5bfd-f06c-4aca-8faa-57a08916bcd7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cdf9ccff-95b3-4115-8ad6-7bde305d3ffc"
        },
        "item": {
          "id": "affe012b-e75b-4e65-b747-430c4dad6c00",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "aea91d73-d02e-4eea-8f9b-ea5c8ea9675a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a2df50-a5be-4b26-a27e-a48b9b4a3e16",
        "cursor": {
          "ref": "bdc22502-e33b-4373-b8c3-fc8bb9b779c8",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ee78c2c2-950b-4efd-8778-d092292b9b74"
        },
        "item": {
          "id": "90a2df50-a5be-4b26-a27e-a48b9b4a3e16",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2554fd07-2b17-4639-af0f-824781db9874",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a2df50-a5be-4b26-a27e-a48b9b4a3e16",
        "cursor": {
          "ref": "bdc22502-e33b-4373-b8c3-fc8bb9b779c8",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ee78c2c2-950b-4efd-8778-d092292b9b74"
        },
        "item": {
          "id": "90a2df50-a5be-4b26-a27e-a48b9b4a3e16",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2554fd07-2b17-4639-af0f-824781db9874",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9491f60e-d195-4415-8b96-e8ea6ee6dde9",
        "cursor": {
          "ref": "aab319b3-799f-473e-8941-e368535e9755",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7d735994-d8a6-4a79-8d6b-df6d32e09278"
        },
        "item": {
          "id": "9491f60e-d195-4415-8b96-e8ea6ee6dde9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5c34b5eb-3626-4aee-a51a-6c36286d8778",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9491f60e-d195-4415-8b96-e8ea6ee6dde9",
        "cursor": {
          "ref": "aab319b3-799f-473e-8941-e368535e9755",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7d735994-d8a6-4a79-8d6b-df6d32e09278"
        },
        "item": {
          "id": "9491f60e-d195-4415-8b96-e8ea6ee6dde9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5c34b5eb-3626-4aee-a51a-6c36286d8778",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae1ae69-152b-4ed4-8a15-0c74c7cd99d0",
        "cursor": {
          "ref": "7a6ab1ac-aeaa-426e-8836-f38c1f6585a8",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a9551e33-d8c3-45ea-b10c-1a99685702d7"
        },
        "item": {
          "id": "9ae1ae69-152b-4ed4-8a15-0c74c7cd99d0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "93c6c8aa-1e20-4d35-8f1c-e6a86b867462",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae1ae69-152b-4ed4-8a15-0c74c7cd99d0",
        "cursor": {
          "ref": "7a6ab1ac-aeaa-426e-8836-f38c1f6585a8",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a9551e33-d8c3-45ea-b10c-1a99685702d7"
        },
        "item": {
          "id": "9ae1ae69-152b-4ed4-8a15-0c74c7cd99d0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "93c6c8aa-1e20-4d35-8f1c-e6a86b867462",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8cfb50-2240-4ee6-be3f-9bfbffd77317",
        "cursor": {
          "ref": "c6aa4fb1-820d-4334-ab3d-fc5c23f3b436",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c54af3ed-c650-4126-9a12-2b87952de476"
        },
        "item": {
          "id": "1d8cfb50-2240-4ee6-be3f-9bfbffd77317",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a448ad0d-ab02-4eb3-a761-d62b9d1946ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8cfb50-2240-4ee6-be3f-9bfbffd77317",
        "cursor": {
          "ref": "c6aa4fb1-820d-4334-ab3d-fc5c23f3b436",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c54af3ed-c650-4126-9a12-2b87952de476"
        },
        "item": {
          "id": "1d8cfb50-2240-4ee6-be3f-9bfbffd77317",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a448ad0d-ab02-4eb3-a761-d62b9d1946ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b1998e-be82-4187-92cd-8a73e4b0bb19",
        "cursor": {
          "ref": "2dca8077-61a7-4ae8-b567-5979659ac9c9",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "423e0197-edc1-42cb-9db3-a7d76e3065bb"
        },
        "item": {
          "id": "20b1998e-be82-4187-92cd-8a73e4b0bb19",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "65f4de51-e64b-4586-b92a-0801765fd380",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b1998e-be82-4187-92cd-8a73e4b0bb19",
        "cursor": {
          "ref": "2dca8077-61a7-4ae8-b567-5979659ac9c9",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "423e0197-edc1-42cb-9db3-a7d76e3065bb"
        },
        "item": {
          "id": "20b1998e-be82-4187-92cd-8a73e4b0bb19",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "65f4de51-e64b-4586-b92a-0801765fd380",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3339ca4-30a2-45c6-8171-acad8a582679",
        "cursor": {
          "ref": "d9c272ad-4556-484f-8fd1-ec3546b1872f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0c811fc5-6793-4d55-bd43-12d56e177db2"
        },
        "item": {
          "id": "d3339ca4-30a2-45c6-8171-acad8a582679",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f048d13e-f1d1-4e9f-a59c-938c922420df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3339ca4-30a2-45c6-8171-acad8a582679",
        "cursor": {
          "ref": "d9c272ad-4556-484f-8fd1-ec3546b1872f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0c811fc5-6793-4d55-bd43-12d56e177db2"
        },
        "item": {
          "id": "d3339ca4-30a2-45c6-8171-acad8a582679",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f048d13e-f1d1-4e9f-a59c-938c922420df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abab07e-86d8-446a-8677-3931303de9d4",
        "cursor": {
          "ref": "58696633-8a41-4554-972b-325159cfa60a",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "00cbc6aa-6b85-4553-8e90-a648527da61f"
        },
        "item": {
          "id": "6abab07e-86d8-446a-8677-3931303de9d4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "df1f4251-6ed8-4183-b4bd-9cb87ad6b537",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abab07e-86d8-446a-8677-3931303de9d4",
        "cursor": {
          "ref": "58696633-8a41-4554-972b-325159cfa60a",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "00cbc6aa-6b85-4553-8e90-a648527da61f"
        },
        "item": {
          "id": "6abab07e-86d8-446a-8677-3931303de9d4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "df1f4251-6ed8-4183-b4bd-9cb87ad6b537",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14ce7d4-97ff-4ef2-bf4a-99839d1a29de",
        "cursor": {
          "ref": "34278634-e713-4140-b160-07c1591ff7c3",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9143c084-bb13-4968-aad8-cc02fa778180"
        },
        "item": {
          "id": "a14ce7d4-97ff-4ef2-bf4a-99839d1a29de",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cf690920-c18a-4712-a11f-872f680840d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14ce7d4-97ff-4ef2-bf4a-99839d1a29de",
        "cursor": {
          "ref": "34278634-e713-4140-b160-07c1591ff7c3",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9143c084-bb13-4968-aad8-cc02fa778180"
        },
        "item": {
          "id": "a14ce7d4-97ff-4ef2-bf4a-99839d1a29de",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cf690920-c18a-4712-a11f-872f680840d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d846067a-c5f5-4467-a2d1-c1f6e161e8b3",
        "cursor": {
          "ref": "4c78dfc3-c670-4bfa-8ee4-fe53f73c8fd9",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d0ce3c49-eb59-44b6-bacb-e7e650c5ce30"
        },
        "item": {
          "id": "d846067a-c5f5-4467-a2d1-c1f6e161e8b3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cd7bd891-1e8f-4113-8ceb-21e7e8bfac8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d846067a-c5f5-4467-a2d1-c1f6e161e8b3",
        "cursor": {
          "ref": "4c78dfc3-c670-4bfa-8ee4-fe53f73c8fd9",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d0ce3c49-eb59-44b6-bacb-e7e650c5ce30"
        },
        "item": {
          "id": "d846067a-c5f5-4467-a2d1-c1f6e161e8b3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cd7bd891-1e8f-4113-8ceb-21e7e8bfac8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96d8bfb-1ad7-48fe-ac2a-65447ce4898a",
        "cursor": {
          "ref": "25f8be85-0437-4f3e-8a6e-23d429b34a5b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "414b7d68-7de7-453d-8e5d-aa9a7b66e858"
        },
        "item": {
          "id": "d96d8bfb-1ad7-48fe-ac2a-65447ce4898a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bb926bdf-36f8-4d31-8903-0b3ba367a09b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96d8bfb-1ad7-48fe-ac2a-65447ce4898a",
        "cursor": {
          "ref": "25f8be85-0437-4f3e-8a6e-23d429b34a5b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "414b7d68-7de7-453d-8e5d-aa9a7b66e858"
        },
        "item": {
          "id": "d96d8bfb-1ad7-48fe-ac2a-65447ce4898a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bb926bdf-36f8-4d31-8903-0b3ba367a09b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f1462c-d65a-472b-85e9-9218416b009e",
        "cursor": {
          "ref": "a370f5ca-d83b-4dc2-8a8e-38cd234ce7ee",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9a448dbf-bede-43f2-b9d8-9e6fffd110f8"
        },
        "item": {
          "id": "a7f1462c-d65a-472b-85e9-9218416b009e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ba34400a-d9db-45fa-a184-aefcb40f2e64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f1462c-d65a-472b-85e9-9218416b009e",
        "cursor": {
          "ref": "a370f5ca-d83b-4dc2-8a8e-38cd234ce7ee",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9a448dbf-bede-43f2-b9d8-9e6fffd110f8"
        },
        "item": {
          "id": "a7f1462c-d65a-472b-85e9-9218416b009e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ba34400a-d9db-45fa-a184-aefcb40f2e64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74aef067-5a9a-4d5a-910e-76d71d5adb0c",
        "cursor": {
          "ref": "da6b5cb9-db34-40b1-b7d9-c1cc109c0b32",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d1449ddc-a08b-41ea-bd4c-c671885ab6d2"
        },
        "item": {
          "id": "74aef067-5a9a-4d5a-910e-76d71d5adb0c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ca74db81-3554-492e-adc2-6ea2cfe46154",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74aef067-5a9a-4d5a-910e-76d71d5adb0c",
        "cursor": {
          "ref": "da6b5cb9-db34-40b1-b7d9-c1cc109c0b32",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d1449ddc-a08b-41ea-bd4c-c671885ab6d2"
        },
        "item": {
          "id": "74aef067-5a9a-4d5a-910e-76d71d5adb0c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ca74db81-3554-492e-adc2-6ea2cfe46154",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911b03eb-9e72-4edc-a665-26fe4c8aa358",
        "cursor": {
          "ref": "452837fd-5b16-414c-ae52-02cc9b322ba7",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "41f892f3-458e-459c-93a6-8efd6b0dace0"
        },
        "item": {
          "id": "911b03eb-9e72-4edc-a665-26fe4c8aa358",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ac6f84ad-2898-48c2-b7d8-d53a16b05340",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911b03eb-9e72-4edc-a665-26fe4c8aa358",
        "cursor": {
          "ref": "452837fd-5b16-414c-ae52-02cc9b322ba7",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "41f892f3-458e-459c-93a6-8efd6b0dace0"
        },
        "item": {
          "id": "911b03eb-9e72-4edc-a665-26fe4c8aa358",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ac6f84ad-2898-48c2-b7d8-d53a16b05340",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fab365-a463-4d5e-a0b9-7153d334873f",
        "cursor": {
          "ref": "761b7d46-69fe-4f61-84db-9195a61e6c3a",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6906e996-2d76-4081-b070-091176cfa6a6"
        },
        "item": {
          "id": "b8fab365-a463-4d5e-a0b9-7153d334873f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "257b07ce-8f49-4229-a862-fde65cde65bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fab365-a463-4d5e-a0b9-7153d334873f",
        "cursor": {
          "ref": "761b7d46-69fe-4f61-84db-9195a61e6c3a",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6906e996-2d76-4081-b070-091176cfa6a6"
        },
        "item": {
          "id": "b8fab365-a463-4d5e-a0b9-7153d334873f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "257b07ce-8f49-4229-a862-fde65cde65bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e127939-b761-4a86-bf77-ef163a3f1aa8",
        "cursor": {
          "ref": "4bf9d3f9-4e82-4d99-a536-d1c2e9aa63f6",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cf324bac-d4c5-4815-a342-c1d544417345"
        },
        "item": {
          "id": "5e127939-b761-4a86-bf77-ef163a3f1aa8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "09b1437d-68e8-484d-a9b7-d59003af3b22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e127939-b761-4a86-bf77-ef163a3f1aa8",
        "cursor": {
          "ref": "4bf9d3f9-4e82-4d99-a536-d1c2e9aa63f6",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cf324bac-d4c5-4815-a342-c1d544417345"
        },
        "item": {
          "id": "5e127939-b761-4a86-bf77-ef163a3f1aa8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "09b1437d-68e8-484d-a9b7-d59003af3b22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431dbe24-f14b-4dbe-84bf-f6110d3769d2",
        "cursor": {
          "ref": "0cb651c4-5a3c-4602-82a2-e3a809aec1c0",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c3037b56-935d-445a-b2f3-bcb910a20d90"
        },
        "item": {
          "id": "431dbe24-f14b-4dbe-84bf-f6110d3769d2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0f257987-110b-493b-939c-30ddc8615512",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431dbe24-f14b-4dbe-84bf-f6110d3769d2",
        "cursor": {
          "ref": "0cb651c4-5a3c-4602-82a2-e3a809aec1c0",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c3037b56-935d-445a-b2f3-bcb910a20d90"
        },
        "item": {
          "id": "431dbe24-f14b-4dbe-84bf-f6110d3769d2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0f257987-110b-493b-939c-30ddc8615512",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33765db-41f9-40f6-901e-4893cad7d5ad",
        "cursor": {
          "ref": "6b5cb006-0241-45c1-b2ea-ea72c17cadce",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8dc75b6a-4700-4214-8503-608b984c14d7"
        },
        "item": {
          "id": "b33765db-41f9-40f6-901e-4893cad7d5ad",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a44f1b9c-d410-4004-a226-89559887e7e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33765db-41f9-40f6-901e-4893cad7d5ad",
        "cursor": {
          "ref": "6b5cb006-0241-45c1-b2ea-ea72c17cadce",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8dc75b6a-4700-4214-8503-608b984c14d7"
        },
        "item": {
          "id": "b33765db-41f9-40f6-901e-4893cad7d5ad",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a44f1b9c-d410-4004-a226-89559887e7e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7ccc8b-9531-4c33-b829-fbba8e47b433",
        "cursor": {
          "ref": "c31507f1-6d90-4d0c-9bfe-f69320e60e85",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3e9f3be7-8ad3-4246-b0e3-9a51837bdc2b"
        },
        "item": {
          "id": "4e7ccc8b-9531-4c33-b829-fbba8e47b433",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8b14278d-4bc8-4461-91ab-171e118a5080",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7ccc8b-9531-4c33-b829-fbba8e47b433",
        "cursor": {
          "ref": "c31507f1-6d90-4d0c-9bfe-f69320e60e85",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3e9f3be7-8ad3-4246-b0e3-9a51837bdc2b"
        },
        "item": {
          "id": "4e7ccc8b-9531-4c33-b829-fbba8e47b433",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8b14278d-4bc8-4461-91ab-171e118a5080",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae808d85-60f6-403c-9fbf-cc9124bc75be",
        "cursor": {
          "ref": "3875e7d5-7245-40dc-b011-25cc03fd6e14",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9bf0d0ab-bd45-4307-8e3b-f4792ba87592"
        },
        "item": {
          "id": "ae808d85-60f6-403c-9fbf-cc9124bc75be",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ee846acc-f3d2-4032-b183-d80838079ea7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae808d85-60f6-403c-9fbf-cc9124bc75be",
        "cursor": {
          "ref": "3875e7d5-7245-40dc-b011-25cc03fd6e14",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9bf0d0ab-bd45-4307-8e3b-f4792ba87592"
        },
        "item": {
          "id": "ae808d85-60f6-403c-9fbf-cc9124bc75be",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ee846acc-f3d2-4032-b183-d80838079ea7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990f8294-1670-4623-aeaa-a2fcb0658b10",
        "cursor": {
          "ref": "23d0cd11-2b19-41d3-908e-aa2b210db191",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cb53bede-1eba-42a4-970b-08b17c26877b"
        },
        "item": {
          "id": "990f8294-1670-4623-aeaa-a2fcb0658b10",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e5a0e115-5f96-4b82-a4ba-ccd39b35c839",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990f8294-1670-4623-aeaa-a2fcb0658b10",
        "cursor": {
          "ref": "23d0cd11-2b19-41d3-908e-aa2b210db191",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cb53bede-1eba-42a4-970b-08b17c26877b"
        },
        "item": {
          "id": "990f8294-1670-4623-aeaa-a2fcb0658b10",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e5a0e115-5f96-4b82-a4ba-ccd39b35c839",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b851b341-6787-4c9f-920d-81f84bd92e96",
        "cursor": {
          "ref": "b50dcc25-ea40-43ee-82a5-ac3adb8fa723",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "63b11182-0886-447d-9c2a-856d39b4ec2b"
        },
        "item": {
          "id": "b851b341-6787-4c9f-920d-81f84bd92e96",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "720252c7-bacb-43fd-851b-3cde7bb90d5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b851b341-6787-4c9f-920d-81f84bd92e96",
        "cursor": {
          "ref": "b50dcc25-ea40-43ee-82a5-ac3adb8fa723",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "63b11182-0886-447d-9c2a-856d39b4ec2b"
        },
        "item": {
          "id": "b851b341-6787-4c9f-920d-81f84bd92e96",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "720252c7-bacb-43fd-851b-3cde7bb90d5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83158e3-a9dd-4cc2-954e-c0bdce61db75",
        "cursor": {
          "ref": "bc83b901-4adc-4c89-ae90-9a8de4fd43b1",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "69619da9-38f1-4a9d-bcb4-b33c79448da9"
        },
        "item": {
          "id": "c83158e3-a9dd-4cc2-954e-c0bdce61db75",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "efc73c0c-fdf6-4625-a93e-3e4d35b2e20f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83158e3-a9dd-4cc2-954e-c0bdce61db75",
        "cursor": {
          "ref": "bc83b901-4adc-4c89-ae90-9a8de4fd43b1",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "69619da9-38f1-4a9d-bcb4-b33c79448da9"
        },
        "item": {
          "id": "c83158e3-a9dd-4cc2-954e-c0bdce61db75",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "efc73c0c-fdf6-4625-a93e-3e4d35b2e20f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19853560-f11e-4099-807f-06cf90d0d806",
        "cursor": {
          "ref": "77690212-9ca7-45de-9925-8642f621d12a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "365ff9bc-1813-4f2b-ba3a-4d35609592a4"
        },
        "item": {
          "id": "19853560-f11e-4099-807f-06cf90d0d806",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9c3f08b2-0e37-4e75-8110-6e99031ecccc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19853560-f11e-4099-807f-06cf90d0d806",
        "cursor": {
          "ref": "77690212-9ca7-45de-9925-8642f621d12a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "365ff9bc-1813-4f2b-ba3a-4d35609592a4"
        },
        "item": {
          "id": "19853560-f11e-4099-807f-06cf90d0d806",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9c3f08b2-0e37-4e75-8110-6e99031ecccc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd776c0d-9e85-4bde-ba43-550d9aea1e42",
        "cursor": {
          "ref": "c98dba0d-8b71-4dfd-8b77-93a4315df5c5",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "36f086e7-5721-47ab-b819-fd6354ac27b7"
        },
        "item": {
          "id": "cd776c0d-9e85-4bde-ba43-550d9aea1e42",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "40ec35ba-2033-43f4-b429-15c1589a6794",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd776c0d-9e85-4bde-ba43-550d9aea1e42",
        "cursor": {
          "ref": "c98dba0d-8b71-4dfd-8b77-93a4315df5c5",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "36f086e7-5721-47ab-b819-fd6354ac27b7"
        },
        "item": {
          "id": "cd776c0d-9e85-4bde-ba43-550d9aea1e42",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "40ec35ba-2033-43f4-b429-15c1589a6794",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c717aa89-ca77-403e-b77e-7818cd77c10e",
        "cursor": {
          "ref": "c6667b52-4957-4624-bc27-bddc53c4ff56",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bd3c81ab-8b50-4c4f-8039-ac82a20e7d9b"
        },
        "item": {
          "id": "c717aa89-ca77-403e-b77e-7818cd77c10e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0bc64c29-5e01-4fe3-a353-d1aa9eded0bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c717aa89-ca77-403e-b77e-7818cd77c10e",
        "cursor": {
          "ref": "c6667b52-4957-4624-bc27-bddc53c4ff56",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bd3c81ab-8b50-4c4f-8039-ac82a20e7d9b"
        },
        "item": {
          "id": "c717aa89-ca77-403e-b77e-7818cd77c10e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0bc64c29-5e01-4fe3-a353-d1aa9eded0bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09126c6f-2d58-493e-ac93-3494ab52b0f1",
        "cursor": {
          "ref": "03032cd3-cd54-4a92-bb87-fad98c55679c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8c47b5f6-373e-4484-ba65-5409aa0ee9b1"
        },
        "item": {
          "id": "09126c6f-2d58-493e-ac93-3494ab52b0f1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4aef484b-b542-4263-8b2f-d4a4568ff964",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09126c6f-2d58-493e-ac93-3494ab52b0f1",
        "cursor": {
          "ref": "03032cd3-cd54-4a92-bb87-fad98c55679c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8c47b5f6-373e-4484-ba65-5409aa0ee9b1"
        },
        "item": {
          "id": "09126c6f-2d58-493e-ac93-3494ab52b0f1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4aef484b-b542-4263-8b2f-d4a4568ff964",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0593d1-5ef2-40b4-abbb-110030ebb66b",
        "cursor": {
          "ref": "f9f8b399-8760-4a58-bb7e-f640472f2f26",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "43e2bdee-ded1-41c1-866e-88c6271ec94e"
        },
        "item": {
          "id": "9b0593d1-5ef2-40b4-abbb-110030ebb66b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "983f12df-ee1b-4510-96c5-b5690c854d51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0593d1-5ef2-40b4-abbb-110030ebb66b",
        "cursor": {
          "ref": "f9f8b399-8760-4a58-bb7e-f640472f2f26",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "43e2bdee-ded1-41c1-866e-88c6271ec94e"
        },
        "item": {
          "id": "9b0593d1-5ef2-40b4-abbb-110030ebb66b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "983f12df-ee1b-4510-96c5-b5690c854d51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce43cc9-18ab-4a5a-a3fe-8a03e899f5ed",
        "cursor": {
          "ref": "b740f20e-8db2-4a9b-93f2-ca02e13e9366",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3b8bfe97-1d5e-4566-bd79-f2e65f3bd0e7"
        },
        "item": {
          "id": "dce43cc9-18ab-4a5a-a3fe-8a03e899f5ed",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "95665d01-5a5c-4081-a065-f18c32dd994f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce43cc9-18ab-4a5a-a3fe-8a03e899f5ed",
        "cursor": {
          "ref": "b740f20e-8db2-4a9b-93f2-ca02e13e9366",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3b8bfe97-1d5e-4566-bd79-f2e65f3bd0e7"
        },
        "item": {
          "id": "dce43cc9-18ab-4a5a-a3fe-8a03e899f5ed",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "95665d01-5a5c-4081-a065-f18c32dd994f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0debaed0-df39-4a70-9313-3dc842bc6e45",
        "cursor": {
          "ref": "9aee7619-ea79-486f-a120-627e475e0cea",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8532671f-758c-41c9-b6c0-60a53525e392"
        },
        "item": {
          "id": "0debaed0-df39-4a70-9313-3dc842bc6e45",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "45d08f00-e072-489f-94d9-b01461be2e20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0debaed0-df39-4a70-9313-3dc842bc6e45",
        "cursor": {
          "ref": "9aee7619-ea79-486f-a120-627e475e0cea",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8532671f-758c-41c9-b6c0-60a53525e392"
        },
        "item": {
          "id": "0debaed0-df39-4a70-9313-3dc842bc6e45",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "45d08f00-e072-489f-94d9-b01461be2e20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849a3c9c-c28d-4e98-a0f9-3955cab671e5",
        "cursor": {
          "ref": "ac691fe0-9c16-4d72-8796-ec816ca13bd5",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5f92a81f-92b8-46ce-a0e0-dadc2a9bcace"
        },
        "item": {
          "id": "849a3c9c-c28d-4e98-a0f9-3955cab671e5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e08ddba8-a189-447d-b3c8-079e19badb4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849a3c9c-c28d-4e98-a0f9-3955cab671e5",
        "cursor": {
          "ref": "ac691fe0-9c16-4d72-8796-ec816ca13bd5",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5f92a81f-92b8-46ce-a0e0-dadc2a9bcace"
        },
        "item": {
          "id": "849a3c9c-c28d-4e98-a0f9-3955cab671e5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e08ddba8-a189-447d-b3c8-079e19badb4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf65fc3-2443-4f92-bfa8-b05386483dae",
        "cursor": {
          "ref": "5c18c1d9-7159-4c32-ac62-5dc1b67ae63b",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "873c45af-8698-4592-8812-62a3f2f37f71"
        },
        "item": {
          "id": "2cf65fc3-2443-4f92-bfa8-b05386483dae",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "eaa64e6f-6956-4de7-8fc3-2f98bebd629c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf65fc3-2443-4f92-bfa8-b05386483dae",
        "cursor": {
          "ref": "5c18c1d9-7159-4c32-ac62-5dc1b67ae63b",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "873c45af-8698-4592-8812-62a3f2f37f71"
        },
        "item": {
          "id": "2cf65fc3-2443-4f92-bfa8-b05386483dae",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "eaa64e6f-6956-4de7-8fc3-2f98bebd629c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6a7ead-c47e-4fff-b71e-e011d0063daa",
        "cursor": {
          "ref": "3c57e42e-9aec-4e03-b7b0-b8cbf7bc209a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c1ef9605-d6b5-4a44-9ad1-3783ca498088"
        },
        "item": {
          "id": "7a6a7ead-c47e-4fff-b71e-e011d0063daa",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "118d05e6-e075-4b62-9bec-6f68389e8370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6a7ead-c47e-4fff-b71e-e011d0063daa",
        "cursor": {
          "ref": "3c57e42e-9aec-4e03-b7b0-b8cbf7bc209a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c1ef9605-d6b5-4a44-9ad1-3783ca498088"
        },
        "item": {
          "id": "7a6a7ead-c47e-4fff-b71e-e011d0063daa",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "118d05e6-e075-4b62-9bec-6f68389e8370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f84107-e86e-43a9-97dd-d8894c31b661",
        "cursor": {
          "ref": "480baf44-3765-4e7b-9971-866a8dfd477e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "13b75f35-52ee-4d9f-b1e3-bb9e552caab2"
        },
        "item": {
          "id": "a3f84107-e86e-43a9-97dd-d8894c31b661",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8374be8d-d8ee-4b00-89c1-7a94282bacfe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f84107-e86e-43a9-97dd-d8894c31b661",
        "cursor": {
          "ref": "480baf44-3765-4e7b-9971-866a8dfd477e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "13b75f35-52ee-4d9f-b1e3-bb9e552caab2"
        },
        "item": {
          "id": "a3f84107-e86e-43a9-97dd-d8894c31b661",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8374be8d-d8ee-4b00-89c1-7a94282bacfe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd82657-b4eb-45c9-8e62-06ab91799c22",
        "cursor": {
          "ref": "8c6ecb76-a61b-435c-84d3-293b279f4f52",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "48b13c2b-2347-4e96-8112-2bec9c5d1d4e"
        },
        "item": {
          "id": "6fd82657-b4eb-45c9-8e62-06ab91799c22",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3b1e47f3-0798-480d-8448-95c17d40033d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd82657-b4eb-45c9-8e62-06ab91799c22",
        "cursor": {
          "ref": "8c6ecb76-a61b-435c-84d3-293b279f4f52",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "48b13c2b-2347-4e96-8112-2bec9c5d1d4e"
        },
        "item": {
          "id": "6fd82657-b4eb-45c9-8e62-06ab91799c22",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3b1e47f3-0798-480d-8448-95c17d40033d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c816dfb-6983-4540-9d03-3889372d24e8",
        "cursor": {
          "ref": "721440f0-dbc8-4921-89db-55da61a9391b",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "339ebc09-0adc-4fc8-b1a9-4fc820b698e2"
        },
        "item": {
          "id": "9c816dfb-6983-4540-9d03-3889372d24e8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e9e96cc1-0761-4478-af9d-52d3c9fdc6f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c816dfb-6983-4540-9d03-3889372d24e8",
        "cursor": {
          "ref": "721440f0-dbc8-4921-89db-55da61a9391b",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "339ebc09-0adc-4fc8-b1a9-4fc820b698e2"
        },
        "item": {
          "id": "9c816dfb-6983-4540-9d03-3889372d24e8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e9e96cc1-0761-4478-af9d-52d3c9fdc6f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de8afd2-002d-4332-b1b4-203882543148",
        "cursor": {
          "ref": "e835ac22-b8a1-42cd-970b-2e14f6443644",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "850b1006-6978-4602-88d4-68a9deb463d4"
        },
        "item": {
          "id": "6de8afd2-002d-4332-b1b4-203882543148",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0d5b167a-8904-4720-850e-7ba36706f392",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de8afd2-002d-4332-b1b4-203882543148",
        "cursor": {
          "ref": "e835ac22-b8a1-42cd-970b-2e14f6443644",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "850b1006-6978-4602-88d4-68a9deb463d4"
        },
        "item": {
          "id": "6de8afd2-002d-4332-b1b4-203882543148",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0d5b167a-8904-4720-850e-7ba36706f392",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d662df-8a33-4daa-aaab-a976c82ea9ee",
        "cursor": {
          "ref": "e7f9c267-8320-4b73-b07f-83282bdace86",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "82efe4ee-edff-48c9-9995-eb2595976324"
        },
        "item": {
          "id": "40d662df-8a33-4daa-aaab-a976c82ea9ee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3f3f0285-25e0-417d-b34c-bbda16c1ecd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d662df-8a33-4daa-aaab-a976c82ea9ee",
        "cursor": {
          "ref": "e7f9c267-8320-4b73-b07f-83282bdace86",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "82efe4ee-edff-48c9-9995-eb2595976324"
        },
        "item": {
          "id": "40d662df-8a33-4daa-aaab-a976c82ea9ee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3f3f0285-25e0-417d-b34c-bbda16c1ecd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30ec652-55ce-4b0a-8a34-aa3bb70c42b0",
        "cursor": {
          "ref": "a2322620-d5df-4d9c-814f-3ad7f53c640a",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "db961f3a-652d-40d5-b77f-9aeb60bc502a"
        },
        "item": {
          "id": "f30ec652-55ce-4b0a-8a34-aa3bb70c42b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8a7fd446-460e-4a9a-a4e6-423d6fa6eb41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30ec652-55ce-4b0a-8a34-aa3bb70c42b0",
        "cursor": {
          "ref": "a2322620-d5df-4d9c-814f-3ad7f53c640a",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "db961f3a-652d-40d5-b77f-9aeb60bc502a"
        },
        "item": {
          "id": "f30ec652-55ce-4b0a-8a34-aa3bb70c42b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8a7fd446-460e-4a9a-a4e6-423d6fa6eb41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9de3e13-9f5e-4cd0-9d84-6e865659bd8b",
        "cursor": {
          "ref": "b799aa53-c5f0-4d3a-acf9-70e0684f6fbe",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "86e9a432-2b4e-436c-8505-ffdb6bced3bd"
        },
        "item": {
          "id": "b9de3e13-9f5e-4cd0-9d84-6e865659bd8b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5561847c-5c78-4103-b09e-58f354749651",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9de3e13-9f5e-4cd0-9d84-6e865659bd8b",
        "cursor": {
          "ref": "b799aa53-c5f0-4d3a-acf9-70e0684f6fbe",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "86e9a432-2b4e-436c-8505-ffdb6bced3bd"
        },
        "item": {
          "id": "b9de3e13-9f5e-4cd0-9d84-6e865659bd8b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5561847c-5c78-4103-b09e-58f354749651",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10656f38-0ba2-42e7-ad50-de10839ac2e6",
        "cursor": {
          "ref": "35c4bbf6-f7f2-4708-95d5-900cb3883ac6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3cfa43e9-5bde-4d61-927d-40ee22e46a99"
        },
        "item": {
          "id": "10656f38-0ba2-42e7-ad50-de10839ac2e6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "883f2f4c-b756-4ba9-a5ed-911275c5a986",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10656f38-0ba2-42e7-ad50-de10839ac2e6",
        "cursor": {
          "ref": "35c4bbf6-f7f2-4708-95d5-900cb3883ac6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3cfa43e9-5bde-4d61-927d-40ee22e46a99"
        },
        "item": {
          "id": "10656f38-0ba2-42e7-ad50-de10839ac2e6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "883f2f4c-b756-4ba9-a5ed-911275c5a986",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9363d4-ac93-4a38-9d2f-d940444f407e",
        "cursor": {
          "ref": "6a84b0f0-91a9-459a-8e2f-188351637970",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b91fd995-d2c5-469f-8010-1570a34c9f25"
        },
        "item": {
          "id": "dc9363d4-ac93-4a38-9d2f-d940444f407e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d36dea66-372a-42d5-a7ff-2139c75be10f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9363d4-ac93-4a38-9d2f-d940444f407e",
        "cursor": {
          "ref": "6a84b0f0-91a9-459a-8e2f-188351637970",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b91fd995-d2c5-469f-8010-1570a34c9f25"
        },
        "item": {
          "id": "dc9363d4-ac93-4a38-9d2f-d940444f407e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d36dea66-372a-42d5-a7ff-2139c75be10f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96708b03-7dc9-40ab-98ea-992939b76b7b",
        "cursor": {
          "ref": "045ae311-53f5-48a6-8ca5-820df26d4b1b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0d2027c6-8bc2-4435-8f4b-2b12fe506e21"
        },
        "item": {
          "id": "96708b03-7dc9-40ab-98ea-992939b76b7b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "395fcd8f-4eba-4e2d-bd90-ab7c6bfec61a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96708b03-7dc9-40ab-98ea-992939b76b7b",
        "cursor": {
          "ref": "045ae311-53f5-48a6-8ca5-820df26d4b1b",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0d2027c6-8bc2-4435-8f4b-2b12fe506e21"
        },
        "item": {
          "id": "96708b03-7dc9-40ab-98ea-992939b76b7b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "395fcd8f-4eba-4e2d-bd90-ab7c6bfec61a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37545620-5b72-41d5-b096-bb22a854ba9f",
        "cursor": {
          "ref": "d678f446-7d83-48d0-a5e4-f63a9b08300f",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "23302278-2d52-47b9-8d80-09a4822c0c45"
        },
        "item": {
          "id": "37545620-5b72-41d5-b096-bb22a854ba9f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b8766295-ad6b-4f72-8778-5a90a6697b4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37545620-5b72-41d5-b096-bb22a854ba9f",
        "cursor": {
          "ref": "d678f446-7d83-48d0-a5e4-f63a9b08300f",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "23302278-2d52-47b9-8d80-09a4822c0c45"
        },
        "item": {
          "id": "37545620-5b72-41d5-b096-bb22a854ba9f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b8766295-ad6b-4f72-8778-5a90a6697b4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4461c795-6f74-4fba-8780-4c6042eca085",
        "cursor": {
          "ref": "95a141a3-487e-488e-90e2-785f620b25e0",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c97e98ab-e595-428e-a07c-485c363f2b36"
        },
        "item": {
          "id": "4461c795-6f74-4fba-8780-4c6042eca085",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0681d2fb-3053-4fbc-89c1-18a3bed31e65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4461c795-6f74-4fba-8780-4c6042eca085",
        "cursor": {
          "ref": "95a141a3-487e-488e-90e2-785f620b25e0",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c97e98ab-e595-428e-a07c-485c363f2b36"
        },
        "item": {
          "id": "4461c795-6f74-4fba-8780-4c6042eca085",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0681d2fb-3053-4fbc-89c1-18a3bed31e65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535f22af-e4c6-4a5d-b674-7b4d9db3a460",
        "cursor": {
          "ref": "8e638004-2fee-4e26-a678-b451f8b7d688",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "02808c02-2cf2-44fb-9a3a-2cb0acdf8f12"
        },
        "item": {
          "id": "535f22af-e4c6-4a5d-b674-7b4d9db3a460",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "84e3e387-4b8a-43e4-9dca-a57de3caf103",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535f22af-e4c6-4a5d-b674-7b4d9db3a460",
        "cursor": {
          "ref": "8e638004-2fee-4e26-a678-b451f8b7d688",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "02808c02-2cf2-44fb-9a3a-2cb0acdf8f12"
        },
        "item": {
          "id": "535f22af-e4c6-4a5d-b674-7b4d9db3a460",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "84e3e387-4b8a-43e4-9dca-a57de3caf103",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688fe704-89ec-45c8-853d-4fc1a4e60e30",
        "cursor": {
          "ref": "114ea496-3e6e-4384-912f-7f53d97b2fc8",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a45c4f1a-1533-403e-b6f7-466e7d6400c0"
        },
        "item": {
          "id": "688fe704-89ec-45c8-853d-4fc1a4e60e30",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a1b21657-8789-42fa-a717-490399b349bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688fe704-89ec-45c8-853d-4fc1a4e60e30",
        "cursor": {
          "ref": "114ea496-3e6e-4384-912f-7f53d97b2fc8",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a45c4f1a-1533-403e-b6f7-466e7d6400c0"
        },
        "item": {
          "id": "688fe704-89ec-45c8-853d-4fc1a4e60e30",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a1b21657-8789-42fa-a717-490399b349bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36f8622-b3ad-4e9a-937f-0fd7a9754c5f",
        "cursor": {
          "ref": "50cac7cc-2689-4868-9f3b-c4f1ff7b5e4d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ae6c6d4d-1b0f-4dc0-90d1-aab0026498e7"
        },
        "item": {
          "id": "a36f8622-b3ad-4e9a-937f-0fd7a9754c5f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "de47d283-acf8-4bfd-8b5c-09f40323f024",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36f8622-b3ad-4e9a-937f-0fd7a9754c5f",
        "cursor": {
          "ref": "50cac7cc-2689-4868-9f3b-c4f1ff7b5e4d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ae6c6d4d-1b0f-4dc0-90d1-aab0026498e7"
        },
        "item": {
          "id": "a36f8622-b3ad-4e9a-937f-0fd7a9754c5f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "de47d283-acf8-4bfd-8b5c-09f40323f024",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eac6920-79d9-47bf-b72f-7ef89c61b97a",
        "cursor": {
          "ref": "7ab50df1-bf10-42a2-9e34-739ac77dbdee",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "86402866-f34f-4a4a-8773-e7e4946660e7"
        },
        "item": {
          "id": "8eac6920-79d9-47bf-b72f-7ef89c61b97a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1502aa03-6b3f-4fc2-bd99-6403b9cb7ae1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eac6920-79d9-47bf-b72f-7ef89c61b97a",
        "cursor": {
          "ref": "7ab50df1-bf10-42a2-9e34-739ac77dbdee",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "86402866-f34f-4a4a-8773-e7e4946660e7"
        },
        "item": {
          "id": "8eac6920-79d9-47bf-b72f-7ef89c61b97a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1502aa03-6b3f-4fc2-bd99-6403b9cb7ae1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7017d565-67e6-452c-84ab-c3213aab2901",
        "cursor": {
          "ref": "aafb4432-90cb-4f4d-9f37-1203aa61415f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6f271d0e-dffa-430f-b1fc-1d7165fd4027"
        },
        "item": {
          "id": "7017d565-67e6-452c-84ab-c3213aab2901",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "649f1805-4e09-4116-bb50-d92326577b9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7017d565-67e6-452c-84ab-c3213aab2901",
        "cursor": {
          "ref": "aafb4432-90cb-4f4d-9f37-1203aa61415f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6f271d0e-dffa-430f-b1fc-1d7165fd4027"
        },
        "item": {
          "id": "7017d565-67e6-452c-84ab-c3213aab2901",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "649f1805-4e09-4116-bb50-d92326577b9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2be918c-0558-4379-bde1-08a06b57c647",
        "cursor": {
          "ref": "35f0ed80-f8ca-4c87-aa5e-69624d96650b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d7f7e12f-b1ca-457b-8f9c-ccbd8a56d5bb"
        },
        "item": {
          "id": "a2be918c-0558-4379-bde1-08a06b57c647",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "162312d1-74b7-4a54-b923-6239072770b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2be918c-0558-4379-bde1-08a06b57c647",
        "cursor": {
          "ref": "35f0ed80-f8ca-4c87-aa5e-69624d96650b",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d7f7e12f-b1ca-457b-8f9c-ccbd8a56d5bb"
        },
        "item": {
          "id": "a2be918c-0558-4379-bde1-08a06b57c647",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "162312d1-74b7-4a54-b923-6239072770b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a13b700-8345-41d8-a08c-9def19f28667",
        "cursor": {
          "ref": "beb8b950-af61-4658-a678-fe608ed07213",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e95891e5-10ab-401c-8447-1947f886cfb8"
        },
        "item": {
          "id": "6a13b700-8345-41d8-a08c-9def19f28667",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0de497ad-d87e-4d4f-8fbb-b4b89d59f239",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a13b700-8345-41d8-a08c-9def19f28667",
        "cursor": {
          "ref": "beb8b950-af61-4658-a678-fe608ed07213",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e95891e5-10ab-401c-8447-1947f886cfb8"
        },
        "item": {
          "id": "6a13b700-8345-41d8-a08c-9def19f28667",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0de497ad-d87e-4d4f-8fbb-b4b89d59f239",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e479f021-2763-4bdb-9e63-78a29503ac26",
        "cursor": {
          "ref": "04789590-c87d-4db3-b724-bb52c52f68c1",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9aabadd8-b730-482c-a622-f957a181d2c3"
        },
        "item": {
          "id": "e479f021-2763-4bdb-9e63-78a29503ac26",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bfdbba9f-9b8f-4f0d-a6df-8822e88c383a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e479f021-2763-4bdb-9e63-78a29503ac26",
        "cursor": {
          "ref": "04789590-c87d-4db3-b724-bb52c52f68c1",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9aabadd8-b730-482c-a622-f957a181d2c3"
        },
        "item": {
          "id": "e479f021-2763-4bdb-9e63-78a29503ac26",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bfdbba9f-9b8f-4f0d-a6df-8822e88c383a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786282e2-5927-4a8d-a1d0-ba1053286af6",
        "cursor": {
          "ref": "d8e7a778-cf7c-4b58-ad24-f1d1023c2185",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9739f4e3-caed-4c16-939c-59e367955fbd"
        },
        "item": {
          "id": "786282e2-5927-4a8d-a1d0-ba1053286af6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "03dedc39-53b1-4e4c-a9a9-3a2323cdac71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786282e2-5927-4a8d-a1d0-ba1053286af6",
        "cursor": {
          "ref": "d8e7a778-cf7c-4b58-ad24-f1d1023c2185",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9739f4e3-caed-4c16-939c-59e367955fbd"
        },
        "item": {
          "id": "786282e2-5927-4a8d-a1d0-ba1053286af6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "03dedc39-53b1-4e4c-a9a9-3a2323cdac71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60e4b51-8832-4f4c-bf2d-669d154bb2a2",
        "cursor": {
          "ref": "f1b12537-d82e-4a73-9740-5e7c9803eafa",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "39732bc5-f415-4b30-8677-5644ecfb362b"
        },
        "item": {
          "id": "a60e4b51-8832-4f4c-bf2d-669d154bb2a2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2693421d-1126-4151-96e9-119ffd197210",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60e4b51-8832-4f4c-bf2d-669d154bb2a2",
        "cursor": {
          "ref": "f1b12537-d82e-4a73-9740-5e7c9803eafa",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "39732bc5-f415-4b30-8677-5644ecfb362b"
        },
        "item": {
          "id": "a60e4b51-8832-4f4c-bf2d-669d154bb2a2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2693421d-1126-4151-96e9-119ffd197210",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7df781-d4f7-4b78-ad0e-a9bd62de1308",
        "cursor": {
          "ref": "10dff316-9c7c-41a0-98d8-764ca6e7dc19",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "416d89ae-9e3e-4c59-acdc-e33923774dfd"
        },
        "item": {
          "id": "ae7df781-d4f7-4b78-ad0e-a9bd62de1308",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e09f1468-7f34-425f-846d-ab44066b9b1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7df781-d4f7-4b78-ad0e-a9bd62de1308",
        "cursor": {
          "ref": "10dff316-9c7c-41a0-98d8-764ca6e7dc19",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "416d89ae-9e3e-4c59-acdc-e33923774dfd"
        },
        "item": {
          "id": "ae7df781-d4f7-4b78-ad0e-a9bd62de1308",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e09f1468-7f34-425f-846d-ab44066b9b1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ab1c58-a3b1-455b-8c65-d9426f57f151",
        "cursor": {
          "ref": "ae64ef7f-f2ac-4f1b-90d9-8347ced99b7b",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4c3defa8-4cae-4a64-834e-f4615a8d59d1"
        },
        "item": {
          "id": "f8ab1c58-a3b1-455b-8c65-d9426f57f151",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "40cab427-d04d-4f32-a1ad-bebf05ec9e95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ab1c58-a3b1-455b-8c65-d9426f57f151",
        "cursor": {
          "ref": "ae64ef7f-f2ac-4f1b-90d9-8347ced99b7b",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4c3defa8-4cae-4a64-834e-f4615a8d59d1"
        },
        "item": {
          "id": "f8ab1c58-a3b1-455b-8c65-d9426f57f151",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "40cab427-d04d-4f32-a1ad-bebf05ec9e95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0e8c73-b0ea-42a1-9b5f-ce75b73b1f94",
        "cursor": {
          "ref": "97071b41-0117-449a-aeb7-145c79bcd06e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3c8e6a60-295f-4398-b2fa-8019eca38f62"
        },
        "item": {
          "id": "4a0e8c73-b0ea-42a1-9b5f-ce75b73b1f94",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "88dbebdc-43b1-47c3-b798-db9034609cc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0e8c73-b0ea-42a1-9b5f-ce75b73b1f94",
        "cursor": {
          "ref": "97071b41-0117-449a-aeb7-145c79bcd06e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3c8e6a60-295f-4398-b2fa-8019eca38f62"
        },
        "item": {
          "id": "4a0e8c73-b0ea-42a1-9b5f-ce75b73b1f94",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "88dbebdc-43b1-47c3-b798-db9034609cc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6a9ad4-f5c2-434b-b727-5f3c41234963",
        "cursor": {
          "ref": "a1e1361b-8bea-4106-903b-0e407d2c4933",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "66163adc-51b3-4e77-abca-2913783a35a2"
        },
        "item": {
          "id": "2d6a9ad4-f5c2-434b-b727-5f3c41234963",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5e96d84d-ee02-44f0-bc2e-99e004d3c9a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6a9ad4-f5c2-434b-b727-5f3c41234963",
        "cursor": {
          "ref": "a1e1361b-8bea-4106-903b-0e407d2c4933",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "66163adc-51b3-4e77-abca-2913783a35a2"
        },
        "item": {
          "id": "2d6a9ad4-f5c2-434b-b727-5f3c41234963",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5e96d84d-ee02-44f0-bc2e-99e004d3c9a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc864953-efec-4e86-97e9-a3deea067331",
        "cursor": {
          "ref": "b2ab9c13-ba0c-4d22-a550-04dccadb4f5d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a80ca483-be5a-4847-aa91-d25d49b50666"
        },
        "item": {
          "id": "dc864953-efec-4e86-97e9-a3deea067331",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b9fe1d93-6d11-4750-a4c7-f4d6d3e53cd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc864953-efec-4e86-97e9-a3deea067331",
        "cursor": {
          "ref": "b2ab9c13-ba0c-4d22-a550-04dccadb4f5d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a80ca483-be5a-4847-aa91-d25d49b50666"
        },
        "item": {
          "id": "dc864953-efec-4e86-97e9-a3deea067331",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b9fe1d93-6d11-4750-a4c7-f4d6d3e53cd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a00857-af9d-49b1-90c6-1675043117a5",
        "cursor": {
          "ref": "31b80550-4d18-4f9a-93c0-1d12771468e3",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b754454d-ebb0-4555-b3f2-8aad3843bfd6"
        },
        "item": {
          "id": "18a00857-af9d-49b1-90c6-1675043117a5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "48a0e330-69c4-4b20-9c81-472fee3cbd9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a00857-af9d-49b1-90c6-1675043117a5",
        "cursor": {
          "ref": "31b80550-4d18-4f9a-93c0-1d12771468e3",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b754454d-ebb0-4555-b3f2-8aad3843bfd6"
        },
        "item": {
          "id": "18a00857-af9d-49b1-90c6-1675043117a5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "48a0e330-69c4-4b20-9c81-472fee3cbd9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3be6369-700f-4489-9d83-21ee7fba42ec",
        "cursor": {
          "ref": "8f2cd597-1d05-4d8c-a0ad-e84b6d8bd198",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9f50da4b-2f99-44d9-9e2f-7606e7820ab2"
        },
        "item": {
          "id": "f3be6369-700f-4489-9d83-21ee7fba42ec",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "18cd3fcf-b3af-4ce2-933a-1f05bfd91ba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3be6369-700f-4489-9d83-21ee7fba42ec",
        "cursor": {
          "ref": "8f2cd597-1d05-4d8c-a0ad-e84b6d8bd198",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9f50da4b-2f99-44d9-9e2f-7606e7820ab2"
        },
        "item": {
          "id": "f3be6369-700f-4489-9d83-21ee7fba42ec",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "18cd3fcf-b3af-4ce2-933a-1f05bfd91ba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6ca5f7-b4f4-4935-a2cf-6fa09e441fe6",
        "cursor": {
          "ref": "0f82ed65-0cb3-4b80-a4ac-ac80851cf7d1",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ecba1467-2821-4062-b18a-3c4b241739d4"
        },
        "item": {
          "id": "bf6ca5f7-b4f4-4935-a2cf-6fa09e441fe6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "064c315d-b5a9-4986-bd92-3251f68f7d44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6ca5f7-b4f4-4935-a2cf-6fa09e441fe6",
        "cursor": {
          "ref": "0f82ed65-0cb3-4b80-a4ac-ac80851cf7d1",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ecba1467-2821-4062-b18a-3c4b241739d4"
        },
        "item": {
          "id": "bf6ca5f7-b4f4-4935-a2cf-6fa09e441fe6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "064c315d-b5a9-4986-bd92-3251f68f7d44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c530a488-4d40-4e39-bbfb-961458b70be3",
        "cursor": {
          "ref": "4d33fa2e-fc40-4e3a-b5ea-2f468ae3e1df",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b3eebfee-ace1-4eed-b8cf-6161b042336f"
        },
        "item": {
          "id": "c530a488-4d40-4e39-bbfb-961458b70be3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3f7d3182-0cb8-4d42-9ace-e2a4caf3d398",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c530a488-4d40-4e39-bbfb-961458b70be3",
        "cursor": {
          "ref": "4d33fa2e-fc40-4e3a-b5ea-2f468ae3e1df",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b3eebfee-ace1-4eed-b8cf-6161b042336f"
        },
        "item": {
          "id": "c530a488-4d40-4e39-bbfb-961458b70be3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3f7d3182-0cb8-4d42-9ace-e2a4caf3d398",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3aba4f6-5f73-4670-8d3b-cc05174e82eb",
        "cursor": {
          "ref": "48fd1977-da5a-482a-9a79-b7b9f5667a2d",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "53cae33b-3d50-4a47-b553-03a624dc553d"
        },
        "item": {
          "id": "c3aba4f6-5f73-4670-8d3b-cc05174e82eb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3c41a7f2-3a8b-419e-ab97-197b0ac9cfe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3aba4f6-5f73-4670-8d3b-cc05174e82eb",
        "cursor": {
          "ref": "48fd1977-da5a-482a-9a79-b7b9f5667a2d",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "53cae33b-3d50-4a47-b553-03a624dc553d"
        },
        "item": {
          "id": "c3aba4f6-5f73-4670-8d3b-cc05174e82eb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3c41a7f2-3a8b-419e-ab97-197b0ac9cfe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208c1dd2-e481-4eb6-96b1-fa822233faa8",
        "cursor": {
          "ref": "7883be50-526c-4957-a0fc-1bbf3247de9d",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a7eb3d64-fc6a-4a74-a5e7-0f0494d7fda5"
        },
        "item": {
          "id": "208c1dd2-e481-4eb6-96b1-fa822233faa8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "888b2c43-4fea-4505-a58b-34b57cd4cf51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208c1dd2-e481-4eb6-96b1-fa822233faa8",
        "cursor": {
          "ref": "7883be50-526c-4957-a0fc-1bbf3247de9d",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a7eb3d64-fc6a-4a74-a5e7-0f0494d7fda5"
        },
        "item": {
          "id": "208c1dd2-e481-4eb6-96b1-fa822233faa8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "888b2c43-4fea-4505-a58b-34b57cd4cf51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a69e9f6-3bc2-428d-81f1-dc2304c5709c",
        "cursor": {
          "ref": "fa4f3166-a2dd-4807-934c-8eb7d2bd4071",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "508095b1-21fc-471d-9fbb-0a64f0cfe096"
        },
        "item": {
          "id": "6a69e9f6-3bc2-428d-81f1-dc2304c5709c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d0773d25-2496-4800-9754-779e82e0300a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a69e9f6-3bc2-428d-81f1-dc2304c5709c",
        "cursor": {
          "ref": "fa4f3166-a2dd-4807-934c-8eb7d2bd4071",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "508095b1-21fc-471d-9fbb-0a64f0cfe096"
        },
        "item": {
          "id": "6a69e9f6-3bc2-428d-81f1-dc2304c5709c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d0773d25-2496-4800-9754-779e82e0300a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9ac385-2ff6-4837-8aef-dc711b036a86",
        "cursor": {
          "ref": "c41d7dbd-e3de-48a1-9b2a-a04946d8a40c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5a5d7191-04e8-4076-8aa1-2bf5a806c1c4"
        },
        "item": {
          "id": "4e9ac385-2ff6-4837-8aef-dc711b036a86",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "197cf2b4-29e2-48f3-bd98-ae547040fd89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9ac385-2ff6-4837-8aef-dc711b036a86",
        "cursor": {
          "ref": "c41d7dbd-e3de-48a1-9b2a-a04946d8a40c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5a5d7191-04e8-4076-8aa1-2bf5a806c1c4"
        },
        "item": {
          "id": "4e9ac385-2ff6-4837-8aef-dc711b036a86",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "197cf2b4-29e2-48f3-bd98-ae547040fd89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449af015-bf92-41fc-9b2d-19b13737c14f",
        "cursor": {
          "ref": "67f3a4ee-5a52-4111-9b59-51babfcd4b64",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fe47d415-4460-40b1-8708-32ebd0c78f4f"
        },
        "item": {
          "id": "449af015-bf92-41fc-9b2d-19b13737c14f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e3d26706-328b-414c-9367-094b0997555c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449af015-bf92-41fc-9b2d-19b13737c14f",
        "cursor": {
          "ref": "67f3a4ee-5a52-4111-9b59-51babfcd4b64",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fe47d415-4460-40b1-8708-32ebd0c78f4f"
        },
        "item": {
          "id": "449af015-bf92-41fc-9b2d-19b13737c14f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e3d26706-328b-414c-9367-094b0997555c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867d5743-6849-47d2-b2b6-cdf1ddcf2db6",
        "cursor": {
          "ref": "fc9ffbb2-cdc5-495b-a8dc-a7548d2af6cc",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "68ecff87-c4f5-4482-a710-a47f744cf6a0"
        },
        "item": {
          "id": "867d5743-6849-47d2-b2b6-cdf1ddcf2db6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7e87a2c1-1cbd-4819-8c82-d43d5f472c15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867d5743-6849-47d2-b2b6-cdf1ddcf2db6",
        "cursor": {
          "ref": "fc9ffbb2-cdc5-495b-a8dc-a7548d2af6cc",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "68ecff87-c4f5-4482-a710-a47f744cf6a0"
        },
        "item": {
          "id": "867d5743-6849-47d2-b2b6-cdf1ddcf2db6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7e87a2c1-1cbd-4819-8c82-d43d5f472c15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e32ee8a-3702-422c-a4e0-0d33fc68202d",
        "cursor": {
          "ref": "bbacf518-557b-4a12-b047-161116e65bea",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "de0c7aaa-c166-4c59-9268-52082d2bf58f"
        },
        "item": {
          "id": "8e32ee8a-3702-422c-a4e0-0d33fc68202d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0a4edba8-a3dd-4f27-8bb2-be963fd80d10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e32ee8a-3702-422c-a4e0-0d33fc68202d",
        "cursor": {
          "ref": "bbacf518-557b-4a12-b047-161116e65bea",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "de0c7aaa-c166-4c59-9268-52082d2bf58f"
        },
        "item": {
          "id": "8e32ee8a-3702-422c-a4e0-0d33fc68202d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0a4edba8-a3dd-4f27-8bb2-be963fd80d10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e31ac0-444f-4d8c-82dc-463f3f7e6c71",
        "cursor": {
          "ref": "a780d30e-d738-46d0-b4b4-acb0e34695b2",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5518b4e2-ed0a-4a09-b669-fd3db0fa8714"
        },
        "item": {
          "id": "71e31ac0-444f-4d8c-82dc-463f3f7e6c71",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d3326ae1-e318-423a-926e-b87246844689",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e31ac0-444f-4d8c-82dc-463f3f7e6c71",
        "cursor": {
          "ref": "a780d30e-d738-46d0-b4b4-acb0e34695b2",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5518b4e2-ed0a-4a09-b669-fd3db0fa8714"
        },
        "item": {
          "id": "71e31ac0-444f-4d8c-82dc-463f3f7e6c71",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d3326ae1-e318-423a-926e-b87246844689",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031659f9-4f6a-426e-af3d-ad864b2465ce",
        "cursor": {
          "ref": "b03175f6-9666-4990-b93a-db89721b86d6",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "18d91a0f-8f48-4206-af26-97871029fbae"
        },
        "item": {
          "id": "031659f9-4f6a-426e-af3d-ad864b2465ce",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "0095f002-4c66-45ae-9edb-ab735ae1122b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "031659f9-4f6a-426e-af3d-ad864b2465ce",
        "cursor": {
          "ref": "b03175f6-9666-4990-b93a-db89721b86d6",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "18d91a0f-8f48-4206-af26-97871029fbae"
        },
        "item": {
          "id": "031659f9-4f6a-426e-af3d-ad864b2465ce",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "0095f002-4c66-45ae-9edb-ab735ae1122b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c4e8aaaf-5634-4193-a7af-dff0f394a661",
        "cursor": {
          "ref": "8adc0383-dba2-4e43-8705-c9cb0d6c9964",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "927f4c70-0f4c-4196-89f6-befe46a04702"
        },
        "item": {
          "id": "c4e8aaaf-5634-4193-a7af-dff0f394a661",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b8ee992a-53c7-4d65-a71f-50e957f74101",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "c4e8aaaf-5634-4193-a7af-dff0f394a661",
        "cursor": {
          "ref": "8adc0383-dba2-4e43-8705-c9cb0d6c9964",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "927f4c70-0f4c-4196-89f6-befe46a04702"
        },
        "item": {
          "id": "c4e8aaaf-5634-4193-a7af-dff0f394a661",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b8ee992a-53c7-4d65-a71f-50e957f74101",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "d69fb02d-0805-4b51-9ea1-796943ca596a",
        "cursor": {
          "ref": "3d480e43-d160-409f-970f-b1bc6ebd9bf1",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "12745b7f-ab9a-459e-82f3-664403e32cea"
        },
        "item": {
          "id": "d69fb02d-0805-4b51-9ea1-796943ca596a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3e4fc147-c1a4-4a83-bff7-053867dfdbe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "d69fb02d-0805-4b51-9ea1-796943ca596a",
        "cursor": {
          "ref": "3d480e43-d160-409f-970f-b1bc6ebd9bf1",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "12745b7f-ab9a-459e-82f3-664403e32cea"
        },
        "item": {
          "id": "d69fb02d-0805-4b51-9ea1-796943ca596a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3e4fc147-c1a4-4a83-bff7-053867dfdbe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "7f72dda0-b3c3-4c7e-932f-5c3c844bdf57",
        "cursor": {
          "ref": "34779506-246c-4d80-8947-806cff9ae63f",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e1078d21-b0ae-4fe1-9c77-cd3b6a2912d6"
        },
        "item": {
          "id": "7f72dda0-b3c3-4c7e-932f-5c3c844bdf57",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1fef1556-8a45-4b8f-be71-0b3170b1d37a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "7f72dda0-b3c3-4c7e-932f-5c3c844bdf57",
        "cursor": {
          "ref": "34779506-246c-4d80-8947-806cff9ae63f",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e1078d21-b0ae-4fe1-9c77-cd3b6a2912d6"
        },
        "item": {
          "id": "7f72dda0-b3c3-4c7e-932f-5c3c844bdf57",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1fef1556-8a45-4b8f-be71-0b3170b1d37a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "ed144f13-aa25-45d1-9f8c-c3029fd656ba",
        "cursor": {
          "ref": "42f49236-d14e-4648-a33d-160da136fbcd",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "77f62862-a855-4b85-85e1-d861a715ef83"
        },
        "item": {
          "id": "ed144f13-aa25-45d1-9f8c-c3029fd656ba",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "583e9771-5f11-4585-a9b9-503f5915f84a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "ed144f13-aa25-45d1-9f8c-c3029fd656ba",
        "cursor": {
          "ref": "42f49236-d14e-4648-a33d-160da136fbcd",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "77f62862-a855-4b85-85e1-d861a715ef83"
        },
        "item": {
          "id": "ed144f13-aa25-45d1-9f8c-c3029fd656ba",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "583e9771-5f11-4585-a9b9-503f5915f84a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "874f5dd0-79a8-40b8-97d3-4cb729e85e02",
        "cursor": {
          "ref": "6b704c37-e5cc-4425-9d89-b0059784bcf1",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a2fa33eb-b857-4222-9326-6d2110d8958a"
        },
        "item": {
          "id": "874f5dd0-79a8-40b8-97d3-4cb729e85e02",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6ab1044d-9af2-4c38-8e53-4978d1a73340",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "874f5dd0-79a8-40b8-97d3-4cb729e85e02",
        "cursor": {
          "ref": "6b704c37-e5cc-4425-9d89-b0059784bcf1",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a2fa33eb-b857-4222-9326-6d2110d8958a"
        },
        "item": {
          "id": "874f5dd0-79a8-40b8-97d3-4cb729e85e02",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6ab1044d-9af2-4c38-8e53-4978d1a73340",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8fd6b4e9-405c-4ec1-91ea-101d3d5338ba",
        "cursor": {
          "ref": "3718aef1-3f4e-419a-aaf4-47579a25ace0",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "17cc0f1a-613c-484a-8de3-555fbce2522d"
        },
        "item": {
          "id": "8fd6b4e9-405c-4ec1-91ea-101d3d5338ba",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7b710ff9-f2f7-4a9c-8946-ddab7b9480c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "8fd6b4e9-405c-4ec1-91ea-101d3d5338ba",
        "cursor": {
          "ref": "3718aef1-3f4e-419a-aaf4-47579a25ace0",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "17cc0f1a-613c-484a-8de3-555fbce2522d"
        },
        "item": {
          "id": "8fd6b4e9-405c-4ec1-91ea-101d3d5338ba",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7b710ff9-f2f7-4a9c-8946-ddab7b9480c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "9336e32f-06e5-4438-89fa-d769ff0546e1",
        "cursor": {
          "ref": "517d35cd-ade6-44c3-81d5-ee5a3a17e689",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0fa2bd5b-4bca-4f78-8d7d-9046a59b1638"
        },
        "item": {
          "id": "9336e32f-06e5-4438-89fa-d769ff0546e1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "58855db6-e275-4495-9b13-9b9c269d96ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9336e32f-06e5-4438-89fa-d769ff0546e1",
        "cursor": {
          "ref": "517d35cd-ade6-44c3-81d5-ee5a3a17e689",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0fa2bd5b-4bca-4f78-8d7d-9046a59b1638"
        },
        "item": {
          "id": "9336e32f-06e5-4438-89fa-d769ff0546e1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "58855db6-e275-4495-9b13-9b9c269d96ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1590940c-e65d-4e0d-baee-da52017dbc1f",
        "cursor": {
          "ref": "dd30ffd3-6be3-49cb-80fb-0ec9a914adc4",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7218ae37-0f29-47ec-8d8f-23bcfe538ee0"
        },
        "item": {
          "id": "1590940c-e65d-4e0d-baee-da52017dbc1f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7ea8d3e7-1fe8-4f77-8a6c-68ae8e30db0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1590940c-e65d-4e0d-baee-da52017dbc1f",
        "cursor": {
          "ref": "dd30ffd3-6be3-49cb-80fb-0ec9a914adc4",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7218ae37-0f29-47ec-8d8f-23bcfe538ee0"
        },
        "item": {
          "id": "1590940c-e65d-4e0d-baee-da52017dbc1f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7ea8d3e7-1fe8-4f77-8a6c-68ae8e30db0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86f32f8-be36-4234-a56f-212bd65dfdbc",
        "cursor": {
          "ref": "4796af5e-9d94-4f2b-9f7e-1cd7b286f1e2",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "030b026c-e7e0-461a-be61-2f00304eeffd"
        },
        "item": {
          "id": "c86f32f8-be36-4234-a56f-212bd65dfdbc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "aae44dde-4566-445a-bc10-0780c6e7288f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86f32f8-be36-4234-a56f-212bd65dfdbc",
        "cursor": {
          "ref": "4796af5e-9d94-4f2b-9f7e-1cd7b286f1e2",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "030b026c-e7e0-461a-be61-2f00304eeffd"
        },
        "item": {
          "id": "c86f32f8-be36-4234-a56f-212bd65dfdbc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "aae44dde-4566-445a-bc10-0780c6e7288f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc1ad38-5e08-4ade-854e-8f2a2fa496a6",
        "cursor": {
          "ref": "0a40fb08-19e3-447f-8fad-d6243bcf3fed",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8ec4bb14-61de-4951-9430-a573af687dda"
        },
        "item": {
          "id": "0dc1ad38-5e08-4ade-854e-8f2a2fa496a6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2fb87f71-b663-489d-a221-92de4e1e5a54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc1ad38-5e08-4ade-854e-8f2a2fa496a6",
        "cursor": {
          "ref": "0a40fb08-19e3-447f-8fad-d6243bcf3fed",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8ec4bb14-61de-4951-9430-a573af687dda"
        },
        "item": {
          "id": "0dc1ad38-5e08-4ade-854e-8f2a2fa496a6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2fb87f71-b663-489d-a221-92de4e1e5a54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb77e9e-f7eb-4734-b302-8f731a45b1b9",
        "cursor": {
          "ref": "9859bd2e-6bb5-40b7-bd0f-d5f55c89c027",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b4e2029b-13a2-497f-92d9-53e2a53c7b7a"
        },
        "item": {
          "id": "1fb77e9e-f7eb-4734-b302-8f731a45b1b9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8f4356bb-d0df-4b38-8525-c172e2d5d528",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb77e9e-f7eb-4734-b302-8f731a45b1b9",
        "cursor": {
          "ref": "9859bd2e-6bb5-40b7-bd0f-d5f55c89c027",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b4e2029b-13a2-497f-92d9-53e2a53c7b7a"
        },
        "item": {
          "id": "1fb77e9e-f7eb-4734-b302-8f731a45b1b9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8f4356bb-d0df-4b38-8525-c172e2d5d528",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f479fd-6064-4426-8cb8-43d26106028b",
        "cursor": {
          "ref": "8de80f16-8b3e-4442-9f12-43afe82fcdbc",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "34c06e69-0459-4d72-bf47-8535c488e257"
        },
        "item": {
          "id": "39f479fd-6064-4426-8cb8-43d26106028b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e9ff912a-befc-4449-8d02-83fb5cd37a40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f479fd-6064-4426-8cb8-43d26106028b",
        "cursor": {
          "ref": "8de80f16-8b3e-4442-9f12-43afe82fcdbc",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "34c06e69-0459-4d72-bf47-8535c488e257"
        },
        "item": {
          "id": "39f479fd-6064-4426-8cb8-43d26106028b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e9ff912a-befc-4449-8d02-83fb5cd37a40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be24950c-54ac-4d7a-a925-27a5dc6d4dba",
        "cursor": {
          "ref": "a7e1469e-1c4a-4bf1-99f5-ec8e2f632996",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0d7aa910-9e45-4f10-9462-69f157281ea1"
        },
        "item": {
          "id": "be24950c-54ac-4d7a-a925-27a5dc6d4dba",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5ddaacac-ce7b-4872-9077-dede9b29a5e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be24950c-54ac-4d7a-a925-27a5dc6d4dba",
        "cursor": {
          "ref": "a7e1469e-1c4a-4bf1-99f5-ec8e2f632996",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0d7aa910-9e45-4f10-9462-69f157281ea1"
        },
        "item": {
          "id": "be24950c-54ac-4d7a-a925-27a5dc6d4dba",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5ddaacac-ce7b-4872-9077-dede9b29a5e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a58193-315b-45f1-8d0c-f696e2b85aa2",
        "cursor": {
          "ref": "eb0ba4e2-7663-456c-a289-f80e63c1c988",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "896e1c2f-3653-4877-a3fe-34aa0aa80c9a"
        },
        "item": {
          "id": "e6a58193-315b-45f1-8d0c-f696e2b85aa2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ba1135a5-6744-4a09-b7a5-e87ef3cadd0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a58193-315b-45f1-8d0c-f696e2b85aa2",
        "cursor": {
          "ref": "eb0ba4e2-7663-456c-a289-f80e63c1c988",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "896e1c2f-3653-4877-a3fe-34aa0aa80c9a"
        },
        "item": {
          "id": "e6a58193-315b-45f1-8d0c-f696e2b85aa2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ba1135a5-6744-4a09-b7a5-e87ef3cadd0e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcaed86f-f05a-4809-9434-2e346ad6c6d3",
        "cursor": {
          "ref": "691b58e1-e0f7-4f00-90c8-74ece1619725",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "88fd7cfa-e232-4782-800e-4cb49dd37216"
        },
        "item": {
          "id": "fcaed86f-f05a-4809-9434-2e346ad6c6d3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f5997422-3fd7-4f62-ab29-268d0d9ce04a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcaed86f-f05a-4809-9434-2e346ad6c6d3",
        "cursor": {
          "ref": "691b58e1-e0f7-4f00-90c8-74ece1619725",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "88fd7cfa-e232-4782-800e-4cb49dd37216"
        },
        "item": {
          "id": "fcaed86f-f05a-4809-9434-2e346ad6c6d3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f5997422-3fd7-4f62-ab29-268d0d9ce04a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ebc88c-cf73-4cf3-8757-1df4eb5efb50",
        "cursor": {
          "ref": "98da9ef1-eb46-407a-a14f-bbe16cf5ecc7",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3981347d-3c80-42a1-8f4d-874ae11900da"
        },
        "item": {
          "id": "12ebc88c-cf73-4cf3-8757-1df4eb5efb50",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9c9ae74f-d2a9-4371-8c07-4b3ee83abc71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ebc88c-cf73-4cf3-8757-1df4eb5efb50",
        "cursor": {
          "ref": "98da9ef1-eb46-407a-a14f-bbe16cf5ecc7",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3981347d-3c80-42a1-8f4d-874ae11900da"
        },
        "item": {
          "id": "12ebc88c-cf73-4cf3-8757-1df4eb5efb50",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9c9ae74f-d2a9-4371-8c07-4b3ee83abc71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8beb771-d856-49d9-a63d-a8dc10901934",
        "cursor": {
          "ref": "4dae8271-3578-4638-8bb4-43a13f399940",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8cda42cb-f0e0-4196-a0e4-60744d854231"
        },
        "item": {
          "id": "e8beb771-d856-49d9-a63d-a8dc10901934",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "123c02ab-d4c7-4431-85a7-a4d02d8b8c91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8beb771-d856-49d9-a63d-a8dc10901934",
        "cursor": {
          "ref": "4dae8271-3578-4638-8bb4-43a13f399940",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8cda42cb-f0e0-4196-a0e4-60744d854231"
        },
        "item": {
          "id": "e8beb771-d856-49d9-a63d-a8dc10901934",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "123c02ab-d4c7-4431-85a7-a4d02d8b8c91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acc7bb7-ad90-44d1-931e-6170680a9e85",
        "cursor": {
          "ref": "04864cb4-de44-4b4f-abe1-cce8d3047f76",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b23f1c03-877b-4676-88be-0cd21d70e14b"
        },
        "item": {
          "id": "8acc7bb7-ad90-44d1-931e-6170680a9e85",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c0d479aa-f48c-43c5-92b9-82a97022ddce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acc7bb7-ad90-44d1-931e-6170680a9e85",
        "cursor": {
          "ref": "04864cb4-de44-4b4f-abe1-cce8d3047f76",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b23f1c03-877b-4676-88be-0cd21d70e14b"
        },
        "item": {
          "id": "8acc7bb7-ad90-44d1-931e-6170680a9e85",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c0d479aa-f48c-43c5-92b9-82a97022ddce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc130752-3515-4a6f-bde9-016d9347a46a",
        "cursor": {
          "ref": "75378a41-e872-450e-99af-2278f9afa145",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ca7a518d-b8bd-420e-a373-fd8e86e18de4"
        },
        "item": {
          "id": "cc130752-3515-4a6f-bde9-016d9347a46a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "29ea445d-b264-4516-a4f3-1c53546ce9bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc130752-3515-4a6f-bde9-016d9347a46a",
        "cursor": {
          "ref": "75378a41-e872-450e-99af-2278f9afa145",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ca7a518d-b8bd-420e-a373-fd8e86e18de4"
        },
        "item": {
          "id": "cc130752-3515-4a6f-bde9-016d9347a46a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "29ea445d-b264-4516-a4f3-1c53546ce9bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32010e9-d79a-43c3-9963-08c936482920",
        "cursor": {
          "ref": "1eff656e-f890-45ff-a56c-15aae036a9d3",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "57aa98ae-2eca-46bd-b28b-76de8a2b1cc4"
        },
        "item": {
          "id": "b32010e9-d79a-43c3-9963-08c936482920",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ea250d46-8c16-42c9-8b64-310842ce9795",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32010e9-d79a-43c3-9963-08c936482920",
        "cursor": {
          "ref": "1eff656e-f890-45ff-a56c-15aae036a9d3",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "57aa98ae-2eca-46bd-b28b-76de8a2b1cc4"
        },
        "item": {
          "id": "b32010e9-d79a-43c3-9963-08c936482920",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ea250d46-8c16-42c9-8b64-310842ce9795",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb394b5-dd73-4911-ab44-7ec68b84123d",
        "cursor": {
          "ref": "a24c2ce5-b330-4690-b7ba-afa395b035df",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "68084a3b-88b6-47e3-ab7f-89b95e9ceae2"
        },
        "item": {
          "id": "feb394b5-dd73-4911-ab44-7ec68b84123d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d48db3f4-effc-4387-8368-4014dddf78ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb394b5-dd73-4911-ab44-7ec68b84123d",
        "cursor": {
          "ref": "a24c2ce5-b330-4690-b7ba-afa395b035df",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "68084a3b-88b6-47e3-ab7f-89b95e9ceae2"
        },
        "item": {
          "id": "feb394b5-dd73-4911-ab44-7ec68b84123d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d48db3f4-effc-4387-8368-4014dddf78ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8513fa36-7b5b-4e4b-92c2-ae4e2a4a9991",
        "cursor": {
          "ref": "ba702ac4-1d57-4b3f-867d-0f01cf204889",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ada9a619-48ea-4b58-8aa5-417b1eb4d3d6"
        },
        "item": {
          "id": "8513fa36-7b5b-4e4b-92c2-ae4e2a4a9991",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "72969c4f-6a13-42c1-92b9-ece3275ed307",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8513fa36-7b5b-4e4b-92c2-ae4e2a4a9991",
        "cursor": {
          "ref": "ba702ac4-1d57-4b3f-867d-0f01cf204889",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ada9a619-48ea-4b58-8aa5-417b1eb4d3d6"
        },
        "item": {
          "id": "8513fa36-7b5b-4e4b-92c2-ae4e2a4a9991",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "72969c4f-6a13-42c1-92b9-ece3275ed307",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e61308-353d-4b24-8195-58254eb59d2b",
        "cursor": {
          "ref": "9c04184e-ecad-44d1-a5c8-e2b0020066ab",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "836036bc-5f59-4b63-9505-051fa3749e29"
        },
        "item": {
          "id": "43e61308-353d-4b24-8195-58254eb59d2b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "70665d45-b458-4a47-9ef2-4480d29dc218",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e61308-353d-4b24-8195-58254eb59d2b",
        "cursor": {
          "ref": "9c04184e-ecad-44d1-a5c8-e2b0020066ab",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "836036bc-5f59-4b63-9505-051fa3749e29"
        },
        "item": {
          "id": "43e61308-353d-4b24-8195-58254eb59d2b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "70665d45-b458-4a47-9ef2-4480d29dc218",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ef6060-2410-47c0-b56a-c98fe02bd743",
        "cursor": {
          "ref": "df7a73da-ba27-4b4f-b7d1-711e7fb1e562",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "698f3664-b200-466b-8ba5-41f4accf4442"
        },
        "item": {
          "id": "b1ef6060-2410-47c0-b56a-c98fe02bd743",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "58ad0246-c84f-4057-a777-7b748a9b1d6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ef6060-2410-47c0-b56a-c98fe02bd743",
        "cursor": {
          "ref": "df7a73da-ba27-4b4f-b7d1-711e7fb1e562",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "698f3664-b200-466b-8ba5-41f4accf4442"
        },
        "item": {
          "id": "b1ef6060-2410-47c0-b56a-c98fe02bd743",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "58ad0246-c84f-4057-a777-7b748a9b1d6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb11f0d-16c5-4157-b5d2-e83a841bec58",
        "cursor": {
          "ref": "4ffd71ee-8e9a-40c1-945b-9bf14f3ad051",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e70155b1-ed71-4b74-acec-8ac7147db803"
        },
        "item": {
          "id": "fdb11f0d-16c5-4157-b5d2-e83a841bec58",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "96791e9c-c04c-4b14-ab58-d3b810819eb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb11f0d-16c5-4157-b5d2-e83a841bec58",
        "cursor": {
          "ref": "4ffd71ee-8e9a-40c1-945b-9bf14f3ad051",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e70155b1-ed71-4b74-acec-8ac7147db803"
        },
        "item": {
          "id": "fdb11f0d-16c5-4157-b5d2-e83a841bec58",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "96791e9c-c04c-4b14-ab58-d3b810819eb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed20f7a-ea19-4131-b517-8c1bc15c93a0",
        "cursor": {
          "ref": "5578fe91-8e0e-4d5f-aae2-fd565dbdf7da",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "482b086c-b210-4a97-a9a2-2aa307ee984d"
        },
        "item": {
          "id": "bed20f7a-ea19-4131-b517-8c1bc15c93a0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "688b41e0-ab92-4bac-8f65-552691369e52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed20f7a-ea19-4131-b517-8c1bc15c93a0",
        "cursor": {
          "ref": "5578fe91-8e0e-4d5f-aae2-fd565dbdf7da",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "482b086c-b210-4a97-a9a2-2aa307ee984d"
        },
        "item": {
          "id": "bed20f7a-ea19-4131-b517-8c1bc15c93a0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "688b41e0-ab92-4bac-8f65-552691369e52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f1c4ea-ed34-4257-8959-dadc7b650959",
        "cursor": {
          "ref": "409b4e01-5b03-49ad-b31f-117dc5471f7b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "84989add-262d-409e-810e-aed970958925"
        },
        "item": {
          "id": "06f1c4ea-ed34-4257-8959-dadc7b650959",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f571600e-ee99-42db-bcb6-830a0736d661",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f1c4ea-ed34-4257-8959-dadc7b650959",
        "cursor": {
          "ref": "409b4e01-5b03-49ad-b31f-117dc5471f7b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "84989add-262d-409e-810e-aed970958925"
        },
        "item": {
          "id": "06f1c4ea-ed34-4257-8959-dadc7b650959",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f571600e-ee99-42db-bcb6-830a0736d661",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2179e9fa-f8b1-4ba4-9a14-d7d1710660aa",
        "cursor": {
          "ref": "6e534d3d-fa3e-496d-8803-ce2b165c86d2",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "586f5c51-5b77-45e5-9ad3-4e2fd256d045"
        },
        "item": {
          "id": "2179e9fa-f8b1-4ba4-9a14-d7d1710660aa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e36a6c00-9d92-4d05-aaf5-8374b3388f7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2179e9fa-f8b1-4ba4-9a14-d7d1710660aa",
        "cursor": {
          "ref": "6e534d3d-fa3e-496d-8803-ce2b165c86d2",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "586f5c51-5b77-45e5-9ad3-4e2fd256d045"
        },
        "item": {
          "id": "2179e9fa-f8b1-4ba4-9a14-d7d1710660aa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e36a6c00-9d92-4d05-aaf5-8374b3388f7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844d2783-a343-4e47-ae0a-0938e5da9bb0",
        "cursor": {
          "ref": "ac8e2deb-a65d-4b7a-a33e-40c9aa947bd1",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4d4ef153-7a25-4874-89d3-eae72bed33a1"
        },
        "item": {
          "id": "844d2783-a343-4e47-ae0a-0938e5da9bb0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e702ca46-3e23-40c7-aa4d-f510d34ce542",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844d2783-a343-4e47-ae0a-0938e5da9bb0",
        "cursor": {
          "ref": "ac8e2deb-a65d-4b7a-a33e-40c9aa947bd1",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4d4ef153-7a25-4874-89d3-eae72bed33a1"
        },
        "item": {
          "id": "844d2783-a343-4e47-ae0a-0938e5da9bb0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e702ca46-3e23-40c7-aa4d-f510d34ce542",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1936879d-9ce0-4e73-9ebd-8c4a1a61e6ce",
        "cursor": {
          "ref": "db7eb4f9-9a4d-4089-a919-a11b839d9736",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "be60774d-3a1f-450a-a7d5-332440dec8e9"
        },
        "item": {
          "id": "1936879d-9ce0-4e73-9ebd-8c4a1a61e6ce",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "64efa994-51c1-4b21-971e-cd7d2cff396d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1936879d-9ce0-4e73-9ebd-8c4a1a61e6ce",
        "cursor": {
          "ref": "db7eb4f9-9a4d-4089-a919-a11b839d9736",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "be60774d-3a1f-450a-a7d5-332440dec8e9"
        },
        "item": {
          "id": "1936879d-9ce0-4e73-9ebd-8c4a1a61e6ce",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "64efa994-51c1-4b21-971e-cd7d2cff396d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5061db8-66db-43db-a0cd-dc089a286c52",
        "cursor": {
          "ref": "41db83f8-c756-49e8-9ebe-d690a147fdee",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6d3eea3b-f98e-48f2-83f5-ea086e3eac11"
        },
        "item": {
          "id": "d5061db8-66db-43db-a0cd-dc089a286c52",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bb96247d-cb82-4f25-b5ad-604cf3a68c4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5061db8-66db-43db-a0cd-dc089a286c52",
        "cursor": {
          "ref": "41db83f8-c756-49e8-9ebe-d690a147fdee",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6d3eea3b-f98e-48f2-83f5-ea086e3eac11"
        },
        "item": {
          "id": "d5061db8-66db-43db-a0cd-dc089a286c52",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bb96247d-cb82-4f25-b5ad-604cf3a68c4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d005f3-60d3-4c8b-b183-b8a5623979f4",
        "cursor": {
          "ref": "1bc9bf4b-0e0f-4351-b2f4-0530625aa685",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cf7637dc-0624-4189-a3f2-f30849dca18d"
        },
        "item": {
          "id": "94d005f3-60d3-4c8b-b183-b8a5623979f4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5d4dd78f-7384-40f1-b5e4-baca66e163c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d005f3-60d3-4c8b-b183-b8a5623979f4",
        "cursor": {
          "ref": "1bc9bf4b-0e0f-4351-b2f4-0530625aa685",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cf7637dc-0624-4189-a3f2-f30849dca18d"
        },
        "item": {
          "id": "94d005f3-60d3-4c8b-b183-b8a5623979f4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5d4dd78f-7384-40f1-b5e4-baca66e163c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faca59b9-6601-45ff-ac33-6168001eef60",
        "cursor": {
          "ref": "1905f418-0b36-45c4-a484-b93c10efa27c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bc8ccc63-d2a3-4903-866a-3bc7552325c8"
        },
        "item": {
          "id": "faca59b9-6601-45ff-ac33-6168001eef60",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ea1187af-d7e6-485d-964c-7198c4b7fd94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faca59b9-6601-45ff-ac33-6168001eef60",
        "cursor": {
          "ref": "1905f418-0b36-45c4-a484-b93c10efa27c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bc8ccc63-d2a3-4903-866a-3bc7552325c8"
        },
        "item": {
          "id": "faca59b9-6601-45ff-ac33-6168001eef60",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ea1187af-d7e6-485d-964c-7198c4b7fd94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19ce8c5-eaae-434c-9af2-a7f0975f0125",
        "cursor": {
          "ref": "07c0b263-c24d-4003-a509-ed68f1614e09",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "69a6ab1e-7c3f-4eb4-b522-136f7ea7a13c"
        },
        "item": {
          "id": "a19ce8c5-eaae-434c-9af2-a7f0975f0125",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b7c4fb56-9e02-4343-b281-e3f47a7bbc4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19ce8c5-eaae-434c-9af2-a7f0975f0125",
        "cursor": {
          "ref": "07c0b263-c24d-4003-a509-ed68f1614e09",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "69a6ab1e-7c3f-4eb4-b522-136f7ea7a13c"
        },
        "item": {
          "id": "a19ce8c5-eaae-434c-9af2-a7f0975f0125",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b7c4fb56-9e02-4343-b281-e3f47a7bbc4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7624bf74-3a1c-4142-b649-85b479befbdf",
        "cursor": {
          "ref": "489267b7-7eeb-4c90-b894-935007f79005",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7e719c08-484a-495d-b43e-4d3b98c29c6e"
        },
        "item": {
          "id": "7624bf74-3a1c-4142-b649-85b479befbdf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "aa61bc58-7e3f-4d9c-b918-bcf90f643e39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7624bf74-3a1c-4142-b649-85b479befbdf",
        "cursor": {
          "ref": "489267b7-7eeb-4c90-b894-935007f79005",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7e719c08-484a-495d-b43e-4d3b98c29c6e"
        },
        "item": {
          "id": "7624bf74-3a1c-4142-b649-85b479befbdf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "aa61bc58-7e3f-4d9c-b918-bcf90f643e39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9962fb1-cf77-422b-8fa7-a8f517a01653",
        "cursor": {
          "ref": "8e771fdf-7140-411f-b70f-26369c332b9b",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "651bd969-9fb8-4bb3-a4c1-c9a9bc6089d5"
        },
        "item": {
          "id": "c9962fb1-cf77-422b-8fa7-a8f517a01653",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "434ea27d-59a5-4e8e-b0cb-e8478991e42f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9962fb1-cf77-422b-8fa7-a8f517a01653",
        "cursor": {
          "ref": "8e771fdf-7140-411f-b70f-26369c332b9b",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "651bd969-9fb8-4bb3-a4c1-c9a9bc6089d5"
        },
        "item": {
          "id": "c9962fb1-cf77-422b-8fa7-a8f517a01653",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "434ea27d-59a5-4e8e-b0cb-e8478991e42f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83a529d-400d-4591-a91b-fef8ea08654a",
        "cursor": {
          "ref": "bd979e67-b41c-4d8b-8867-d17448b5f418",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cd6d439f-ef12-4559-8245-691acb13b694"
        },
        "item": {
          "id": "d83a529d-400d-4591-a91b-fef8ea08654a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c4b44644-d72a-4c8a-a4b5-49ff61c8fdc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83a529d-400d-4591-a91b-fef8ea08654a",
        "cursor": {
          "ref": "bd979e67-b41c-4d8b-8867-d17448b5f418",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cd6d439f-ef12-4559-8245-691acb13b694"
        },
        "item": {
          "id": "d83a529d-400d-4591-a91b-fef8ea08654a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c4b44644-d72a-4c8a-a4b5-49ff61c8fdc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc8c415-f208-4dc2-9d53-7eadea3fada5",
        "cursor": {
          "ref": "2736a43d-6d25-4a2d-9166-78889d615e0e",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "81885363-358a-457e-85af-41b2710886eb"
        },
        "item": {
          "id": "2fc8c415-f208-4dc2-9d53-7eadea3fada5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "623a2a66-5308-4242-90b9-9a2bcd6c3474",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc8c415-f208-4dc2-9d53-7eadea3fada5",
        "cursor": {
          "ref": "2736a43d-6d25-4a2d-9166-78889d615e0e",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "81885363-358a-457e-85af-41b2710886eb"
        },
        "item": {
          "id": "2fc8c415-f208-4dc2-9d53-7eadea3fada5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "623a2a66-5308-4242-90b9-9a2bcd6c3474",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ad970b-68b7-438a-ac3f-6578c4eba0ec",
        "cursor": {
          "ref": "17afb7e9-22ff-4469-9535-89bbc34f4328",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a3a0fe4e-44d2-41c9-ae16-4f84bf9f2673"
        },
        "item": {
          "id": "f5ad970b-68b7-438a-ac3f-6578c4eba0ec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d1f4c1ba-980b-4843-9882-36036067656d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ad970b-68b7-438a-ac3f-6578c4eba0ec",
        "cursor": {
          "ref": "17afb7e9-22ff-4469-9535-89bbc34f4328",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a3a0fe4e-44d2-41c9-ae16-4f84bf9f2673"
        },
        "item": {
          "id": "f5ad970b-68b7-438a-ac3f-6578c4eba0ec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d1f4c1ba-980b-4843-9882-36036067656d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe999f28-6850-4368-b024-6a75b28dfbce",
        "cursor": {
          "ref": "477a2e2e-3740-46e1-91fb-66aaca90b821",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6acbc26f-b211-4629-990f-6464ef191a15"
        },
        "item": {
          "id": "fe999f28-6850-4368-b024-6a75b28dfbce",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a9624068-ee1a-4d89-9307-b501769934d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe999f28-6850-4368-b024-6a75b28dfbce",
        "cursor": {
          "ref": "477a2e2e-3740-46e1-91fb-66aaca90b821",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6acbc26f-b211-4629-990f-6464ef191a15"
        },
        "item": {
          "id": "fe999f28-6850-4368-b024-6a75b28dfbce",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a9624068-ee1a-4d89-9307-b501769934d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5642ed48-d478-4878-9ca7-20eb5d6c8131",
        "cursor": {
          "ref": "20b585b0-1342-4e58-806b-e5b813610b29",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "835c6439-9474-46ab-bef1-c51e4011ed99"
        },
        "item": {
          "id": "5642ed48-d478-4878-9ca7-20eb5d6c8131",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4fe03a7d-96d8-446a-aabc-0fee7b9efb15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5642ed48-d478-4878-9ca7-20eb5d6c8131",
        "cursor": {
          "ref": "20b585b0-1342-4e58-806b-e5b813610b29",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "835c6439-9474-46ab-bef1-c51e4011ed99"
        },
        "item": {
          "id": "5642ed48-d478-4878-9ca7-20eb5d6c8131",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4fe03a7d-96d8-446a-aabc-0fee7b9efb15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf3c2e1-304b-49fb-a301-c897ce501c1a",
        "cursor": {
          "ref": "09a47692-ac79-4356-b568-8517df782902",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5a14d425-6723-484f-bf78-a6afd42f0a6d"
        },
        "item": {
          "id": "2cf3c2e1-304b-49fb-a301-c897ce501c1a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ac5a7fa5-716d-4d14-a73f-3bdba43cddcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf3c2e1-304b-49fb-a301-c897ce501c1a",
        "cursor": {
          "ref": "09a47692-ac79-4356-b568-8517df782902",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5a14d425-6723-484f-bf78-a6afd42f0a6d"
        },
        "item": {
          "id": "2cf3c2e1-304b-49fb-a301-c897ce501c1a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ac5a7fa5-716d-4d14-a73f-3bdba43cddcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08c524a-f08b-4c3f-a1d4-e3a6b3e0f1e4",
        "cursor": {
          "ref": "3c24afe3-250b-4f59-b0d6-c4b33340e485",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2c0e87e6-89dc-4dc5-985f-06720d74b6f3"
        },
        "item": {
          "id": "a08c524a-f08b-4c3f-a1d4-e3a6b3e0f1e4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ee318f14-282b-447a-b1bc-18fbce291227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08c524a-f08b-4c3f-a1d4-e3a6b3e0f1e4",
        "cursor": {
          "ref": "3c24afe3-250b-4f59-b0d6-c4b33340e485",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2c0e87e6-89dc-4dc5-985f-06720d74b6f3"
        },
        "item": {
          "id": "a08c524a-f08b-4c3f-a1d4-e3a6b3e0f1e4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ee318f14-282b-447a-b1bc-18fbce291227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f445436b-62d0-4e16-8d23-09ed79e447d1",
        "cursor": {
          "ref": "85b694e6-92f2-49b2-ab17-16d05c245c6e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7fdf657e-c043-452d-a51c-4b99e7cf3435"
        },
        "item": {
          "id": "f445436b-62d0-4e16-8d23-09ed79e447d1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c7ada56d-14f2-406a-b1a6-82bae9b55c5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f445436b-62d0-4e16-8d23-09ed79e447d1",
        "cursor": {
          "ref": "85b694e6-92f2-49b2-ab17-16d05c245c6e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7fdf657e-c043-452d-a51c-4b99e7cf3435"
        },
        "item": {
          "id": "f445436b-62d0-4e16-8d23-09ed79e447d1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c7ada56d-14f2-406a-b1a6-82bae9b55c5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d571d99a-2bff-4fd6-bfaa-8c75ec6fee49",
        "cursor": {
          "ref": "78720238-4124-42cc-82db-254273dff03a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8895dc51-7578-4e59-85bd-15999176ea91"
        },
        "item": {
          "id": "d571d99a-2bff-4fd6-bfaa-8c75ec6fee49",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3dbd4138-b58a-48e0-921d-169fc85f6dae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d571d99a-2bff-4fd6-bfaa-8c75ec6fee49",
        "cursor": {
          "ref": "78720238-4124-42cc-82db-254273dff03a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8895dc51-7578-4e59-85bd-15999176ea91"
        },
        "item": {
          "id": "d571d99a-2bff-4fd6-bfaa-8c75ec6fee49",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3dbd4138-b58a-48e0-921d-169fc85f6dae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1473c811-0ae0-4991-995b-48bed8538b6d",
        "cursor": {
          "ref": "91f5dfcb-26fc-48d3-ab25-8d611917381a",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "490a1a87-a27b-41f9-ae13-e8786d6b9367"
        },
        "item": {
          "id": "1473c811-0ae0-4991-995b-48bed8538b6d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5372da1c-cddc-4594-876d-659d6c35d817",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1473c811-0ae0-4991-995b-48bed8538b6d",
        "cursor": {
          "ref": "91f5dfcb-26fc-48d3-ab25-8d611917381a",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "490a1a87-a27b-41f9-ae13-e8786d6b9367"
        },
        "item": {
          "id": "1473c811-0ae0-4991-995b-48bed8538b6d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5372da1c-cddc-4594-876d-659d6c35d817",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53876e26-f475-439a-a9d4-9e03ed6a683c",
        "cursor": {
          "ref": "835dc560-988c-49b8-8452-3742a608e6fd",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2eaaabb8-598e-4e5a-8b8a-b299453a16e5"
        },
        "item": {
          "id": "53876e26-f475-439a-a9d4-9e03ed6a683c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d48823c5-76ed-475c-a8e3-04583796286d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53876e26-f475-439a-a9d4-9e03ed6a683c",
        "cursor": {
          "ref": "835dc560-988c-49b8-8452-3742a608e6fd",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2eaaabb8-598e-4e5a-8b8a-b299453a16e5"
        },
        "item": {
          "id": "53876e26-f475-439a-a9d4-9e03ed6a683c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d48823c5-76ed-475c-a8e3-04583796286d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d3f7ba-a234-40ba-a344-3269a55fcbed",
        "cursor": {
          "ref": "f750a514-802a-4268-a7c0-faedcd74eaaf",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e71a9639-f858-4061-8107-e3e01549c277"
        },
        "item": {
          "id": "62d3f7ba-a234-40ba-a344-3269a55fcbed",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "81564ad0-d9ed-4e92-ad7f-de210b2a68df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d3f7ba-a234-40ba-a344-3269a55fcbed",
        "cursor": {
          "ref": "f750a514-802a-4268-a7c0-faedcd74eaaf",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e71a9639-f858-4061-8107-e3e01549c277"
        },
        "item": {
          "id": "62d3f7ba-a234-40ba-a344-3269a55fcbed",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "81564ad0-d9ed-4e92-ad7f-de210b2a68df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452aa100-5b92-4c98-835b-61478d35dd89",
        "cursor": {
          "ref": "1c8c15ee-71ca-40d1-b46a-ecfcecca12bc",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2114aa0f-4f49-432a-8e1e-bfc7587857e5"
        },
        "item": {
          "id": "452aa100-5b92-4c98-835b-61478d35dd89",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "50ad6909-2cb8-4da7-8bc1-037ac5697361",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452aa100-5b92-4c98-835b-61478d35dd89",
        "cursor": {
          "ref": "1c8c15ee-71ca-40d1-b46a-ecfcecca12bc",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2114aa0f-4f49-432a-8e1e-bfc7587857e5"
        },
        "item": {
          "id": "452aa100-5b92-4c98-835b-61478d35dd89",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "50ad6909-2cb8-4da7-8bc1-037ac5697361",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ccc629-2a2c-4d9e-9c1f-c28cf7ace20d",
        "cursor": {
          "ref": "0a3e65c3-be23-4f95-9416-221aa0122a16",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "071c3c22-34a1-4e82-95f8-21d46782b0cd"
        },
        "item": {
          "id": "66ccc629-2a2c-4d9e-9c1f-c28cf7ace20d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "736fa30a-e67a-4b8b-b18a-1716517c80f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ccc629-2a2c-4d9e-9c1f-c28cf7ace20d",
        "cursor": {
          "ref": "0a3e65c3-be23-4f95-9416-221aa0122a16",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "071c3c22-34a1-4e82-95f8-21d46782b0cd"
        },
        "item": {
          "id": "66ccc629-2a2c-4d9e-9c1f-c28cf7ace20d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "736fa30a-e67a-4b8b-b18a-1716517c80f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d9f5e1-cff4-436a-9fdb-dcf15acbd34c",
        "cursor": {
          "ref": "07a908a9-f576-43d8-b346-b8f90508775b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a5a4f68c-ad64-4cde-bc61-2aa882be17af"
        },
        "item": {
          "id": "a3d9f5e1-cff4-436a-9fdb-dcf15acbd34c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e8aa2221-a799-4f47-9f68-cc0acdc090db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d9f5e1-cff4-436a-9fdb-dcf15acbd34c",
        "cursor": {
          "ref": "07a908a9-f576-43d8-b346-b8f90508775b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a5a4f68c-ad64-4cde-bc61-2aa882be17af"
        },
        "item": {
          "id": "a3d9f5e1-cff4-436a-9fdb-dcf15acbd34c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e8aa2221-a799-4f47-9f68-cc0acdc090db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cad31ae-b909-4ec4-adb8-3de5c10547de",
        "cursor": {
          "ref": "7f233af3-29fe-4078-9edd-51836bfa79ce",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "76262781-3590-470d-8a24-2233bd9a1454"
        },
        "item": {
          "id": "7cad31ae-b909-4ec4-adb8-3de5c10547de",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c07153b2-2515-498b-a6e4-8497e37533a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cad31ae-b909-4ec4-adb8-3de5c10547de",
        "cursor": {
          "ref": "7f233af3-29fe-4078-9edd-51836bfa79ce",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "76262781-3590-470d-8a24-2233bd9a1454"
        },
        "item": {
          "id": "7cad31ae-b909-4ec4-adb8-3de5c10547de",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c07153b2-2515-498b-a6e4-8497e37533a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e6db5a4-3dd8-4aea-9671-332d89249791",
        "cursor": {
          "ref": "99871d93-325f-4980-a0ff-0e717e941466",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "eac8b267-b94c-4117-ac4b-287d8bb1c9e4"
        },
        "item": {
          "id": "7e6db5a4-3dd8-4aea-9671-332d89249791",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "de0e5f97-6dd1-4dbc-b588-e6f9fce0a4f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e6db5a4-3dd8-4aea-9671-332d89249791",
        "cursor": {
          "ref": "99871d93-325f-4980-a0ff-0e717e941466",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "eac8b267-b94c-4117-ac4b-287d8bb1c9e4"
        },
        "item": {
          "id": "7e6db5a4-3dd8-4aea-9671-332d89249791",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "de0e5f97-6dd1-4dbc-b588-e6f9fce0a4f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb36a518-5783-4207-b16b-224ceefd461a",
        "cursor": {
          "ref": "71ec659a-f7c6-4add-a737-2955f216f6f9",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "23e884c5-ed2c-40ef-8e53-3f6527a569f3"
        },
        "item": {
          "id": "eb36a518-5783-4207-b16b-224ceefd461a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f6bc046e-b609-43eb-905b-30a76be42c3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb36a518-5783-4207-b16b-224ceefd461a",
        "cursor": {
          "ref": "71ec659a-f7c6-4add-a737-2955f216f6f9",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "23e884c5-ed2c-40ef-8e53-3f6527a569f3"
        },
        "item": {
          "id": "eb36a518-5783-4207-b16b-224ceefd461a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f6bc046e-b609-43eb-905b-30a76be42c3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9a0879-0f0a-4609-97c6-af47da7de70c",
        "cursor": {
          "ref": "f40ebefd-67b0-4429-bc8c-39763359bd41",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "edb810e1-f028-46a8-9717-6260083d746a"
        },
        "item": {
          "id": "cd9a0879-0f0a-4609-97c6-af47da7de70c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "16e5cff9-e837-4cea-9da3-ee7dfc200dd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9a0879-0f0a-4609-97c6-af47da7de70c",
        "cursor": {
          "ref": "f40ebefd-67b0-4429-bc8c-39763359bd41",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "edb810e1-f028-46a8-9717-6260083d746a"
        },
        "item": {
          "id": "cd9a0879-0f0a-4609-97c6-af47da7de70c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "16e5cff9-e837-4cea-9da3-ee7dfc200dd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f38d44-e8fa-40d2-a249-811da040ce22",
        "cursor": {
          "ref": "2df72276-2add-42f2-85a6-e8026fcbecbf",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "54424474-3c28-4422-97be-9ac0a6027612"
        },
        "item": {
          "id": "92f38d44-e8fa-40d2-a249-811da040ce22",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "006d425f-54a1-4837-b160-a643baf0fffd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f38d44-e8fa-40d2-a249-811da040ce22",
        "cursor": {
          "ref": "2df72276-2add-42f2-85a6-e8026fcbecbf",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "54424474-3c28-4422-97be-9ac0a6027612"
        },
        "item": {
          "id": "92f38d44-e8fa-40d2-a249-811da040ce22",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "006d425f-54a1-4837-b160-a643baf0fffd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1e2eb6-c82c-4208-93f3-7db12f0205a7",
        "cursor": {
          "ref": "7313f394-50b4-4d7c-b621-de08cf44ee2a",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f570c023-807d-4793-9f61-58f46dd4567b"
        },
        "item": {
          "id": "ef1e2eb6-c82c-4208-93f3-7db12f0205a7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "82797f87-bf3b-486f-952a-021f79196d71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1e2eb6-c82c-4208-93f3-7db12f0205a7",
        "cursor": {
          "ref": "7313f394-50b4-4d7c-b621-de08cf44ee2a",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f570c023-807d-4793-9f61-58f46dd4567b"
        },
        "item": {
          "id": "ef1e2eb6-c82c-4208-93f3-7db12f0205a7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "82797f87-bf3b-486f-952a-021f79196d71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eceaa5-76a3-499e-b392-ef5873f05d76",
        "cursor": {
          "ref": "79f5cb9d-8566-476e-9f61-6caca0f437b6",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f8d2ace2-f5f9-4427-88a6-0b9d9e160fbd"
        },
        "item": {
          "id": "35eceaa5-76a3-499e-b392-ef5873f05d76",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "04ea9fbd-1c62-4c95-85c4-0d3e9a7e004e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eceaa5-76a3-499e-b392-ef5873f05d76",
        "cursor": {
          "ref": "79f5cb9d-8566-476e-9f61-6caca0f437b6",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f8d2ace2-f5f9-4427-88a6-0b9d9e160fbd"
        },
        "item": {
          "id": "35eceaa5-76a3-499e-b392-ef5873f05d76",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "04ea9fbd-1c62-4c95-85c4-0d3e9a7e004e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5d8922-95a8-4322-838e-8bb55896c4eb",
        "cursor": {
          "ref": "8ccaf673-6e56-4083-b826-627aa71409ce",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3399fba3-ffeb-4684-a35b-72d63718a049"
        },
        "item": {
          "id": "3d5d8922-95a8-4322-838e-8bb55896c4eb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "55eb2e63-eaac-40ed-8152-77853ca5acc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5d8922-95a8-4322-838e-8bb55896c4eb",
        "cursor": {
          "ref": "8ccaf673-6e56-4083-b826-627aa71409ce",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3399fba3-ffeb-4684-a35b-72d63718a049"
        },
        "item": {
          "id": "3d5d8922-95a8-4322-838e-8bb55896c4eb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "55eb2e63-eaac-40ed-8152-77853ca5acc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0c4d48-49c9-4728-b7e1-cea25906c578",
        "cursor": {
          "ref": "7abef0ac-b8bc-40fb-96cf-ad35f59e4c17",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7f620165-608a-4909-90e5-7ac0f4c917a4"
        },
        "item": {
          "id": "1f0c4d48-49c9-4728-b7e1-cea25906c578",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f287c3aa-7045-4ed9-a42c-e411da75e410",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0c4d48-49c9-4728-b7e1-cea25906c578",
        "cursor": {
          "ref": "7abef0ac-b8bc-40fb-96cf-ad35f59e4c17",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7f620165-608a-4909-90e5-7ac0f4c917a4"
        },
        "item": {
          "id": "1f0c4d48-49c9-4728-b7e1-cea25906c578",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f287c3aa-7045-4ed9-a42c-e411da75e410",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d95691c2-989c-4352-b1df-384ad275598b",
        "cursor": {
          "ref": "22d27260-60af-430c-82e6-280042ed72d5",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b3a00882-8961-469c-9c50-2e05204e7b1a"
        },
        "item": {
          "id": "d95691c2-989c-4352-b1df-384ad275598b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ab341d60-e039-4872-9d82-7e730221af13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d95691c2-989c-4352-b1df-384ad275598b",
        "cursor": {
          "ref": "22d27260-60af-430c-82e6-280042ed72d5",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b3a00882-8961-469c-9c50-2e05204e7b1a"
        },
        "item": {
          "id": "d95691c2-989c-4352-b1df-384ad275598b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ab341d60-e039-4872-9d82-7e730221af13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d85a108-260a-4e2f-a62a-b20068c863cd",
        "cursor": {
          "ref": "487941be-de91-4dd4-b59c-baf6f87f4b9f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ed93d33c-56d7-4b0a-925e-4039e9a9aae7"
        },
        "item": {
          "id": "3d85a108-260a-4e2f-a62a-b20068c863cd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9db5c0f1-c0ee-462e-98c3-1afdc7ccdb89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d85a108-260a-4e2f-a62a-b20068c863cd",
        "cursor": {
          "ref": "487941be-de91-4dd4-b59c-baf6f87f4b9f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ed93d33c-56d7-4b0a-925e-4039e9a9aae7"
        },
        "item": {
          "id": "3d85a108-260a-4e2f-a62a-b20068c863cd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9db5c0f1-c0ee-462e-98c3-1afdc7ccdb89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39061d5f-f86b-4923-845c-82424a68f6b8",
        "cursor": {
          "ref": "eb615e9a-4273-4cc4-b064-e7e3164064e4",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bdb4d5b2-8511-4199-97ca-2004bfdf93d6"
        },
        "item": {
          "id": "39061d5f-f86b-4923-845c-82424a68f6b8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "545c35d2-d1d2-473f-a112-ac9899b8a0e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39061d5f-f86b-4923-845c-82424a68f6b8",
        "cursor": {
          "ref": "eb615e9a-4273-4cc4-b064-e7e3164064e4",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bdb4d5b2-8511-4199-97ca-2004bfdf93d6"
        },
        "item": {
          "id": "39061d5f-f86b-4923-845c-82424a68f6b8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "545c35d2-d1d2-473f-a112-ac9899b8a0e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207d8266-a7df-4b7b-a96b-81df5203a2f5",
        "cursor": {
          "ref": "9db6f881-8372-41ec-b1d6-255e20c79268",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "85405f7c-87fc-4d3a-abe5-64d6798bb1fb"
        },
        "item": {
          "id": "207d8266-a7df-4b7b-a96b-81df5203a2f5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1d3e2beb-b52b-43d2-a7d8-35f298b5a6ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207d8266-a7df-4b7b-a96b-81df5203a2f5",
        "cursor": {
          "ref": "9db6f881-8372-41ec-b1d6-255e20c79268",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "85405f7c-87fc-4d3a-abe5-64d6798bb1fb"
        },
        "item": {
          "id": "207d8266-a7df-4b7b-a96b-81df5203a2f5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1d3e2beb-b52b-43d2-a7d8-35f298b5a6ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752b9243-889b-4da3-8c35-c62f37ef7ee7",
        "cursor": {
          "ref": "29bc88d1-c90f-4ba1-8093-72c00245619d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bd0cd060-96d8-4427-9e17-32e76567017c"
        },
        "item": {
          "id": "752b9243-889b-4da3-8c35-c62f37ef7ee7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3522993e-278d-428c-8192-d4de350c6b20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752b9243-889b-4da3-8c35-c62f37ef7ee7",
        "cursor": {
          "ref": "29bc88d1-c90f-4ba1-8093-72c00245619d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bd0cd060-96d8-4427-9e17-32e76567017c"
        },
        "item": {
          "id": "752b9243-889b-4da3-8c35-c62f37ef7ee7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3522993e-278d-428c-8192-d4de350c6b20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884beeb0-8ede-465c-b52d-1d06fbd1ebf9",
        "cursor": {
          "ref": "9daec73f-fffe-45fb-8a89-57e3d0b9c45f",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c86ad3d3-35d9-4b19-bf67-8baebc8f29fd"
        },
        "item": {
          "id": "884beeb0-8ede-465c-b52d-1d06fbd1ebf9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "df5a3f7d-f12b-4e6c-b3e8-1d6de8436cf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884beeb0-8ede-465c-b52d-1d06fbd1ebf9",
        "cursor": {
          "ref": "9daec73f-fffe-45fb-8a89-57e3d0b9c45f",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c86ad3d3-35d9-4b19-bf67-8baebc8f29fd"
        },
        "item": {
          "id": "884beeb0-8ede-465c-b52d-1d06fbd1ebf9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "df5a3f7d-f12b-4e6c-b3e8-1d6de8436cf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777d33f1-2708-4160-b578-f79928f7eca3",
        "cursor": {
          "ref": "50e6db12-52a0-4f1c-9ae2-8bd1e64b6e90",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dfd6f870-c4dc-434a-89ae-0b390b1499eb"
        },
        "item": {
          "id": "777d33f1-2708-4160-b578-f79928f7eca3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "adbbf22d-5f7d-4822-819d-757f576821c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777d33f1-2708-4160-b578-f79928f7eca3",
        "cursor": {
          "ref": "50e6db12-52a0-4f1c-9ae2-8bd1e64b6e90",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dfd6f870-c4dc-434a-89ae-0b390b1499eb"
        },
        "item": {
          "id": "777d33f1-2708-4160-b578-f79928f7eca3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "adbbf22d-5f7d-4822-819d-757f576821c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cffecd9-ae73-4b9b-b9c3-f6fc4ea47f8e",
        "cursor": {
          "ref": "ae76b3a1-28b9-4537-85a6-397e2f49b125",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ef0e3be3-6186-429b-b269-590a26cf3db4"
        },
        "item": {
          "id": "6cffecd9-ae73-4b9b-b9c3-f6fc4ea47f8e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "68962ce1-a493-4c55-b340-a5ac20199aaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cffecd9-ae73-4b9b-b9c3-f6fc4ea47f8e",
        "cursor": {
          "ref": "ae76b3a1-28b9-4537-85a6-397e2f49b125",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ef0e3be3-6186-429b-b269-590a26cf3db4"
        },
        "item": {
          "id": "6cffecd9-ae73-4b9b-b9c3-f6fc4ea47f8e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "68962ce1-a493-4c55-b340-a5ac20199aaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e789780-cead-4050-958c-1b0b0a971f7e",
        "cursor": {
          "ref": "38039b5e-1573-49b5-be0d-25578b6d819c",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "738c0065-d23a-436a-beda-5229d7417960"
        },
        "item": {
          "id": "5e789780-cead-4050-958c-1b0b0a971f7e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8b2dad83-faf0-40af-8c5e-ce73d1916251",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e789780-cead-4050-958c-1b0b0a971f7e",
        "cursor": {
          "ref": "38039b5e-1573-49b5-be0d-25578b6d819c",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "738c0065-d23a-436a-beda-5229d7417960"
        },
        "item": {
          "id": "5e789780-cead-4050-958c-1b0b0a971f7e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8b2dad83-faf0-40af-8c5e-ce73d1916251",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34f8159-7fb3-4f20-a6dd-928e99c4457d",
        "cursor": {
          "ref": "39641f61-82be-4c81-944b-a18a9c56d96a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a6a347a5-fa81-4088-b75f-f9aa11fa4ffd"
        },
        "item": {
          "id": "e34f8159-7fb3-4f20-a6dd-928e99c4457d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "65d1f488-6701-4189-91ca-46d8fa45a06d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34f8159-7fb3-4f20-a6dd-928e99c4457d",
        "cursor": {
          "ref": "39641f61-82be-4c81-944b-a18a9c56d96a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a6a347a5-fa81-4088-b75f-f9aa11fa4ffd"
        },
        "item": {
          "id": "e34f8159-7fb3-4f20-a6dd-928e99c4457d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "65d1f488-6701-4189-91ca-46d8fa45a06d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe05ec74-ec85-42e8-9f97-7e1150c9f325",
        "cursor": {
          "ref": "d2814f93-d27b-4f4b-8b72-21d2ed3bbb8e",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9357009b-63bf-4d32-925d-7e33ce080fce"
        },
        "item": {
          "id": "fe05ec74-ec85-42e8-9f97-7e1150c9f325",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "fb6f5a5f-c7ee-4fe7-a349-487a9b3d7261",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe05ec74-ec85-42e8-9f97-7e1150c9f325",
        "cursor": {
          "ref": "d2814f93-d27b-4f4b-8b72-21d2ed3bbb8e",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9357009b-63bf-4d32-925d-7e33ce080fce"
        },
        "item": {
          "id": "fe05ec74-ec85-42e8-9f97-7e1150c9f325",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "fb6f5a5f-c7ee-4fe7-a349-487a9b3d7261",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8995fb-7efb-4f14-b74c-51c2bb31639b",
        "cursor": {
          "ref": "26d5b65f-7c34-420d-9146-9a27283aaec3",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "11e86a2f-fa6f-4d6a-bac2-01dccf777bcf"
        },
        "item": {
          "id": "0a8995fb-7efb-4f14-b74c-51c2bb31639b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1489b0cd-aeb7-4a10-b01c-c76d8d00e657",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8995fb-7efb-4f14-b74c-51c2bb31639b",
        "cursor": {
          "ref": "26d5b65f-7c34-420d-9146-9a27283aaec3",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "11e86a2f-fa6f-4d6a-bac2-01dccf777bcf"
        },
        "item": {
          "id": "0a8995fb-7efb-4f14-b74c-51c2bb31639b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1489b0cd-aeb7-4a10-b01c-c76d8d00e657",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96c9f6f-c521-4544-a676-11c97e31c505",
        "cursor": {
          "ref": "3656e9bc-5b21-4669-a46d-f45bde704605",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "713a89b6-d873-4661-8906-90a09f57d4fa"
        },
        "item": {
          "id": "a96c9f6f-c521-4544-a676-11c97e31c505",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5992cb88-602d-41fc-a103-332630b71dd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96c9f6f-c521-4544-a676-11c97e31c505",
        "cursor": {
          "ref": "3656e9bc-5b21-4669-a46d-f45bde704605",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "713a89b6-d873-4661-8906-90a09f57d4fa"
        },
        "item": {
          "id": "a96c9f6f-c521-4544-a676-11c97e31c505",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5992cb88-602d-41fc-a103-332630b71dd6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3242eb01-9ba8-4471-9a53-ddc950b6a53b",
        "cursor": {
          "ref": "973a0a4e-6b31-4ee8-9d24-f8c83c00b3f6",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bd63109f-78ff-4f28-b16d-2b5a243ba7ce"
        },
        "item": {
          "id": "3242eb01-9ba8-4471-9a53-ddc950b6a53b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "665d70a4-cb5d-400c-9081-a04785846020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3242eb01-9ba8-4471-9a53-ddc950b6a53b",
        "cursor": {
          "ref": "973a0a4e-6b31-4ee8-9d24-f8c83c00b3f6",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bd63109f-78ff-4f28-b16d-2b5a243ba7ce"
        },
        "item": {
          "id": "3242eb01-9ba8-4471-9a53-ddc950b6a53b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "665d70a4-cb5d-400c-9081-a04785846020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c48ee5-bd30-4da0-ade3-bf6f708723ad",
        "cursor": {
          "ref": "57443a70-a2b4-4686-bdb7-fb1a307c590b",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "76c49530-3356-42be-a36a-c54fbd4f56e1"
        },
        "item": {
          "id": "31c48ee5-bd30-4da0-ade3-bf6f708723ad",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "25191c62-2d9d-489a-956e-84ce7ca38e72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c48ee5-bd30-4da0-ade3-bf6f708723ad",
        "cursor": {
          "ref": "57443a70-a2b4-4686-bdb7-fb1a307c590b",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "76c49530-3356-42be-a36a-c54fbd4f56e1"
        },
        "item": {
          "id": "31c48ee5-bd30-4da0-ade3-bf6f708723ad",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "25191c62-2d9d-489a-956e-84ce7ca38e72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8c6130-cdb3-4a1c-9a81-ade528df8cea",
        "cursor": {
          "ref": "7ec012a0-3c0f-4aae-8637-8ee31307ef01",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cf67bf15-0126-43c5-b035-2d876223cee0"
        },
        "item": {
          "id": "dc8c6130-cdb3-4a1c-9a81-ade528df8cea",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a3caffad-05f6-4fd7-be58-03510f17ac9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8c6130-cdb3-4a1c-9a81-ade528df8cea",
        "cursor": {
          "ref": "7ec012a0-3c0f-4aae-8637-8ee31307ef01",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cf67bf15-0126-43c5-b035-2d876223cee0"
        },
        "item": {
          "id": "dc8c6130-cdb3-4a1c-9a81-ade528df8cea",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a3caffad-05f6-4fd7-be58-03510f17ac9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa53d27-4509-4811-a283-e8f2f4587572",
        "cursor": {
          "ref": "8e53d512-9915-4dd0-b2b7-152038938ffe",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7187b59c-3787-4635-86fa-bea231c78084"
        },
        "item": {
          "id": "cfa53d27-4509-4811-a283-e8f2f4587572",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f9b0410e-3cac-47c5-8f5f-a15bd6d661ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa53d27-4509-4811-a283-e8f2f4587572",
        "cursor": {
          "ref": "8e53d512-9915-4dd0-b2b7-152038938ffe",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7187b59c-3787-4635-86fa-bea231c78084"
        },
        "item": {
          "id": "cfa53d27-4509-4811-a283-e8f2f4587572",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f9b0410e-3cac-47c5-8f5f-a15bd6d661ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6832e4f6-dc08-4d78-88cd-58b453f5f440",
        "cursor": {
          "ref": "c3a771b8-090b-41d0-8b9f-78606f1081c8",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b5df8d10-2ab5-43f8-905d-d92e7fe50acd"
        },
        "item": {
          "id": "6832e4f6-dc08-4d78-88cd-58b453f5f440",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1033d66f-e617-4b32-b1f4-3fe01c6b8554",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6832e4f6-dc08-4d78-88cd-58b453f5f440",
        "cursor": {
          "ref": "c3a771b8-090b-41d0-8b9f-78606f1081c8",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b5df8d10-2ab5-43f8-905d-d92e7fe50acd"
        },
        "item": {
          "id": "6832e4f6-dc08-4d78-88cd-58b453f5f440",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1033d66f-e617-4b32-b1f4-3fe01c6b8554",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb60a9d-9fe8-40b8-acd6-966e64228457",
        "cursor": {
          "ref": "24082c40-cfb7-481d-8fb9-3c35a8954d7a",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "81b503f0-d82a-4a52-b282-076ff1e74118"
        },
        "item": {
          "id": "2cb60a9d-9fe8-40b8-acd6-966e64228457",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5578d880-972b-434b-af06-8fa4c53a5109",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb60a9d-9fe8-40b8-acd6-966e64228457",
        "cursor": {
          "ref": "24082c40-cfb7-481d-8fb9-3c35a8954d7a",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "81b503f0-d82a-4a52-b282-076ff1e74118"
        },
        "item": {
          "id": "2cb60a9d-9fe8-40b8-acd6-966e64228457",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5578d880-972b-434b-af06-8fa4c53a5109",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fd0659-2467-4b83-a222-d6ca1f8d1d4b",
        "cursor": {
          "ref": "7775370a-fb41-4450-91d9-9881901fc610",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3333f788-e865-4fdb-ab23-4a1ddbf2dbbd"
        },
        "item": {
          "id": "97fd0659-2467-4b83-a222-d6ca1f8d1d4b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b36168ac-b84a-46c6-ab6b-a50ec0939611",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fd0659-2467-4b83-a222-d6ca1f8d1d4b",
        "cursor": {
          "ref": "7775370a-fb41-4450-91d9-9881901fc610",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3333f788-e865-4fdb-ab23-4a1ddbf2dbbd"
        },
        "item": {
          "id": "97fd0659-2467-4b83-a222-d6ca1f8d1d4b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b36168ac-b84a-46c6-ab6b-a50ec0939611",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6428d66-5151-4cea-9672-19f6c76c6fd2",
        "cursor": {
          "ref": "1f632bba-a77a-40d8-9093-b8753b592d65",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "caa80b0d-9297-49d2-8ad3-997c2b4d35f1"
        },
        "item": {
          "id": "f6428d66-5151-4cea-9672-19f6c76c6fd2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "65c3a472-85ae-41c2-8716-689c48722aae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6428d66-5151-4cea-9672-19f6c76c6fd2",
        "cursor": {
          "ref": "1f632bba-a77a-40d8-9093-b8753b592d65",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "caa80b0d-9297-49d2-8ad3-997c2b4d35f1"
        },
        "item": {
          "id": "f6428d66-5151-4cea-9672-19f6c76c6fd2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "65c3a472-85ae-41c2-8716-689c48722aae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ca24e3-79ca-4076-9160-a1c14db116ac",
        "cursor": {
          "ref": "112e0613-ef0f-4002-910f-1eddf45b7c97",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7fd54e6c-5d16-4600-8774-5cbcd05cd8ec"
        },
        "item": {
          "id": "35ca24e3-79ca-4076-9160-a1c14db116ac",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5d9e6ccf-2bb5-40fe-9ce4-92be70d383ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ca24e3-79ca-4076-9160-a1c14db116ac",
        "cursor": {
          "ref": "112e0613-ef0f-4002-910f-1eddf45b7c97",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7fd54e6c-5d16-4600-8774-5cbcd05cd8ec"
        },
        "item": {
          "id": "35ca24e3-79ca-4076-9160-a1c14db116ac",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5d9e6ccf-2bb5-40fe-9ce4-92be70d383ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b78bfd-8675-436b-b7ea-2b8ad9d9ffcf",
        "cursor": {
          "ref": "1ae3341c-0e5d-45ed-96a6-719c6c2790c1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "84272256-d5db-4163-9033-b7985d22ea69"
        },
        "item": {
          "id": "61b78bfd-8675-436b-b7ea-2b8ad9d9ffcf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "134fc375-529e-4a2c-934e-0f608c618276",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b78bfd-8675-436b-b7ea-2b8ad9d9ffcf",
        "cursor": {
          "ref": "1ae3341c-0e5d-45ed-96a6-719c6c2790c1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "84272256-d5db-4163-9033-b7985d22ea69"
        },
        "item": {
          "id": "61b78bfd-8675-436b-b7ea-2b8ad9d9ffcf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "134fc375-529e-4a2c-934e-0f608c618276",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74d75ab-a32d-4021-a19c-031b1b36e2f4",
        "cursor": {
          "ref": "40e948a3-bf66-43e8-af9b-9790918badf7",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d27dc34f-12b8-4ef5-939f-968651c3a151"
        },
        "item": {
          "id": "d74d75ab-a32d-4021-a19c-031b1b36e2f4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "13354b2a-62f4-41b3-9692-45e1e8a923e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74d75ab-a32d-4021-a19c-031b1b36e2f4",
        "cursor": {
          "ref": "40e948a3-bf66-43e8-af9b-9790918badf7",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d27dc34f-12b8-4ef5-939f-968651c3a151"
        },
        "item": {
          "id": "d74d75ab-a32d-4021-a19c-031b1b36e2f4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "13354b2a-62f4-41b3-9692-45e1e8a923e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0168190e-deaa-44d7-bc85-23732568907d",
        "cursor": {
          "ref": "37fcdef1-5b3c-4b55-a717-70ebea1edd4d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b0749e7b-5d3b-4784-9045-c15da15d166d"
        },
        "item": {
          "id": "0168190e-deaa-44d7-bc85-23732568907d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4733b64a-279a-418e-8f41-fe6628dbd147",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0168190e-deaa-44d7-bc85-23732568907d",
        "cursor": {
          "ref": "37fcdef1-5b3c-4b55-a717-70ebea1edd4d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b0749e7b-5d3b-4784-9045-c15da15d166d"
        },
        "item": {
          "id": "0168190e-deaa-44d7-bc85-23732568907d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4733b64a-279a-418e-8f41-fe6628dbd147",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72403fd-4bd2-4d01-b9b0-6ed884e2f175",
        "cursor": {
          "ref": "1ea58c80-a9f5-44d3-9c3e-7d6fb5e74409",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "90cb654c-8aac-4935-987b-105d89e291db"
        },
        "item": {
          "id": "f72403fd-4bd2-4d01-b9b0-6ed884e2f175",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dee5a1ae-bed5-4b96-812f-0be79f475543",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72403fd-4bd2-4d01-b9b0-6ed884e2f175",
        "cursor": {
          "ref": "1ea58c80-a9f5-44d3-9c3e-7d6fb5e74409",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "90cb654c-8aac-4935-987b-105d89e291db"
        },
        "item": {
          "id": "f72403fd-4bd2-4d01-b9b0-6ed884e2f175",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dee5a1ae-bed5-4b96-812f-0be79f475543",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69eaee72-7669-4b95-8518-28886cbb0d0e",
        "cursor": {
          "ref": "ec177a49-4165-4700-8924-557fe2b5467f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bfbea8f7-f7a6-493e-9c3d-5649998ac808"
        },
        "item": {
          "id": "69eaee72-7669-4b95-8518-28886cbb0d0e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "838d2240-48b9-436c-8e55-5bd1a5a1009c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69eaee72-7669-4b95-8518-28886cbb0d0e",
        "cursor": {
          "ref": "ec177a49-4165-4700-8924-557fe2b5467f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bfbea8f7-f7a6-493e-9c3d-5649998ac808"
        },
        "item": {
          "id": "69eaee72-7669-4b95-8518-28886cbb0d0e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "838d2240-48b9-436c-8e55-5bd1a5a1009c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1eaab0-d316-40f6-a898-b225be946eda",
        "cursor": {
          "ref": "2a7f1395-8f6a-44d6-9a98-3de309c0e25b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "78b7ac2e-a349-40a8-a597-95dd864fa84e"
        },
        "item": {
          "id": "1b1eaab0-d316-40f6-a898-b225be946eda",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "78b68fc6-6e24-4d6a-9272-ddd721807329",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1eaab0-d316-40f6-a898-b225be946eda",
        "cursor": {
          "ref": "2a7f1395-8f6a-44d6-9a98-3de309c0e25b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "78b7ac2e-a349-40a8-a597-95dd864fa84e"
        },
        "item": {
          "id": "1b1eaab0-d316-40f6-a898-b225be946eda",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "78b68fc6-6e24-4d6a-9272-ddd721807329",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6881d3e-06a7-4a4c-9ab1-90d5b6fe2acd",
        "cursor": {
          "ref": "0f04d1ff-69cc-446c-9ae6-dc31618fdeff",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bed97895-a2fd-440a-959b-c02bb711fdc4"
        },
        "item": {
          "id": "c6881d3e-06a7-4a4c-9ab1-90d5b6fe2acd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "44bef618-7b79-48d7-87e3-88b72b7f23fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6881d3e-06a7-4a4c-9ab1-90d5b6fe2acd",
        "cursor": {
          "ref": "0f04d1ff-69cc-446c-9ae6-dc31618fdeff",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bed97895-a2fd-440a-959b-c02bb711fdc4"
        },
        "item": {
          "id": "c6881d3e-06a7-4a4c-9ab1-90d5b6fe2acd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "44bef618-7b79-48d7-87e3-88b72b7f23fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dfe70c-3e52-4963-930b-8af63a20653b",
        "cursor": {
          "ref": "f917d113-29c8-4e3b-aaad-e76e11f5f7fc",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "378ffb2f-a343-4252-8904-4bd2dd2de7e6"
        },
        "item": {
          "id": "c8dfe70c-3e52-4963-930b-8af63a20653b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "25c15ca1-d364-4139-b791-9c85b8f130f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dfe70c-3e52-4963-930b-8af63a20653b",
        "cursor": {
          "ref": "f917d113-29c8-4e3b-aaad-e76e11f5f7fc",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "378ffb2f-a343-4252-8904-4bd2dd2de7e6"
        },
        "item": {
          "id": "c8dfe70c-3e52-4963-930b-8af63a20653b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "25c15ca1-d364-4139-b791-9c85b8f130f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf118da-9229-4f40-9030-9a5e1d0e704a",
        "cursor": {
          "ref": "a5fd2d99-283f-4842-9389-4d5d36a18fca",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e8050f77-212f-45da-9b7d-b4dbca56dec3"
        },
        "item": {
          "id": "caf118da-9229-4f40-9030-9a5e1d0e704a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "34d0bc20-816a-4c79-845e-2c0d220ce8db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf118da-9229-4f40-9030-9a5e1d0e704a",
        "cursor": {
          "ref": "a5fd2d99-283f-4842-9389-4d5d36a18fca",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e8050f77-212f-45da-9b7d-b4dbca56dec3"
        },
        "item": {
          "id": "caf118da-9229-4f40-9030-9a5e1d0e704a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "34d0bc20-816a-4c79-845e-2c0d220ce8db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab71c868-bd4b-4889-a413-93e7519011b2",
        "cursor": {
          "ref": "26c3b0d2-7aa2-454a-9301-3bd94bf5f6a4",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5c495a8a-f749-4557-83fa-b9ec986062fa"
        },
        "item": {
          "id": "ab71c868-bd4b-4889-a413-93e7519011b2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ddb45f8b-93d6-4030-9acc-3670da4d1e7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab71c868-bd4b-4889-a413-93e7519011b2",
        "cursor": {
          "ref": "26c3b0d2-7aa2-454a-9301-3bd94bf5f6a4",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5c495a8a-f749-4557-83fa-b9ec986062fa"
        },
        "item": {
          "id": "ab71c868-bd4b-4889-a413-93e7519011b2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ddb45f8b-93d6-4030-9acc-3670da4d1e7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e004d7-682d-4ca4-9012-53d0c3fe6faa",
        "cursor": {
          "ref": "3caae5a4-0169-4214-8e32-17321b3a6292",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ba24f6b9-8d9e-4ba9-ab61-fdf9f96507ce"
        },
        "item": {
          "id": "17e004d7-682d-4ca4-9012-53d0c3fe6faa",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7d0e9039-3a74-47ca-97a5-2b4b97b22d80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e004d7-682d-4ca4-9012-53d0c3fe6faa",
        "cursor": {
          "ref": "3caae5a4-0169-4214-8e32-17321b3a6292",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ba24f6b9-8d9e-4ba9-ab61-fdf9f96507ce"
        },
        "item": {
          "id": "17e004d7-682d-4ca4-9012-53d0c3fe6faa",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7d0e9039-3a74-47ca-97a5-2b4b97b22d80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ca0a92-d317-45a3-b984-10f1dbc53983",
        "cursor": {
          "ref": "6c461dcf-c749-4596-93ae-493d6d2942ca",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a28c0d25-ecfb-4f44-8db7-74c59f29d7b1"
        },
        "item": {
          "id": "86ca0a92-d317-45a3-b984-10f1dbc53983",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cafb7194-79cd-46a7-90d3-64920455ba9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ca0a92-d317-45a3-b984-10f1dbc53983",
        "cursor": {
          "ref": "6c461dcf-c749-4596-93ae-493d6d2942ca",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a28c0d25-ecfb-4f44-8db7-74c59f29d7b1"
        },
        "item": {
          "id": "86ca0a92-d317-45a3-b984-10f1dbc53983",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cafb7194-79cd-46a7-90d3-64920455ba9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcf7af8-da02-4d0a-ae42-359afc67d4ed",
        "cursor": {
          "ref": "d83900e7-ab88-44e1-9c78-f00d74b486e6",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b6b40051-1cb2-4cfc-9d8e-bb3868a1deb0"
        },
        "item": {
          "id": "8bcf7af8-da02-4d0a-ae42-359afc67d4ed",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6940b972-86ea-4675-9075-95d87a2e12a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bcf7af8-da02-4d0a-ae42-359afc67d4ed",
        "cursor": {
          "ref": "d83900e7-ab88-44e1-9c78-f00d74b486e6",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b6b40051-1cb2-4cfc-9d8e-bb3868a1deb0"
        },
        "item": {
          "id": "8bcf7af8-da02-4d0a-ae42-359afc67d4ed",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6940b972-86ea-4675-9075-95d87a2e12a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bf6bac-f2b4-4dbc-8838-ae7cba5fa186",
        "cursor": {
          "ref": "e1e4b4fc-82f6-4b90-9041-03e10aaa1324",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fa500a84-9d64-4df5-8eb5-d519c3a7ec61"
        },
        "item": {
          "id": "b5bf6bac-f2b4-4dbc-8838-ae7cba5fa186",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ed1de5e6-f4e1-4253-8be3-e2575b0aae93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bf6bac-f2b4-4dbc-8838-ae7cba5fa186",
        "cursor": {
          "ref": "e1e4b4fc-82f6-4b90-9041-03e10aaa1324",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fa500a84-9d64-4df5-8eb5-d519c3a7ec61"
        },
        "item": {
          "id": "b5bf6bac-f2b4-4dbc-8838-ae7cba5fa186",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ed1de5e6-f4e1-4253-8be3-e2575b0aae93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530e7fe9-ceec-485c-846e-1156f75d5f4a",
        "cursor": {
          "ref": "155a3964-9e06-4a3a-8315-c05dfc9adb51",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "005e22fe-2f35-4f32-9607-c97bb97ff99d"
        },
        "item": {
          "id": "530e7fe9-ceec-485c-846e-1156f75d5f4a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4236778a-cc76-4820-83cd-5a5b94f2be45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530e7fe9-ceec-485c-846e-1156f75d5f4a",
        "cursor": {
          "ref": "155a3964-9e06-4a3a-8315-c05dfc9adb51",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "005e22fe-2f35-4f32-9607-c97bb97ff99d"
        },
        "item": {
          "id": "530e7fe9-ceec-485c-846e-1156f75d5f4a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4236778a-cc76-4820-83cd-5a5b94f2be45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd92765e-22a9-46a5-b2d7-1e208e033691",
        "cursor": {
          "ref": "57dc9d16-8c1e-44ac-af10-b5e359046942",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "194d46a8-932a-4e57-8bb7-2a0a97550996"
        },
        "item": {
          "id": "fd92765e-22a9-46a5-b2d7-1e208e033691",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "37273bf2-af4f-488f-9367-0e887c5eac6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd92765e-22a9-46a5-b2d7-1e208e033691",
        "cursor": {
          "ref": "57dc9d16-8c1e-44ac-af10-b5e359046942",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "194d46a8-932a-4e57-8bb7-2a0a97550996"
        },
        "item": {
          "id": "fd92765e-22a9-46a5-b2d7-1e208e033691",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "37273bf2-af4f-488f-9367-0e887c5eac6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23c5dc5-2535-4b6c-918e-6c42f7ac6ba7",
        "cursor": {
          "ref": "1b14367e-f31b-4661-95af-744054f1426c",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "36a6b563-048d-4f61-abe6-ab48755943af"
        },
        "item": {
          "id": "c23c5dc5-2535-4b6c-918e-6c42f7ac6ba7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "856e952d-c3a3-4d18-bbfb-fd182f63e522",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23c5dc5-2535-4b6c-918e-6c42f7ac6ba7",
        "cursor": {
          "ref": "1b14367e-f31b-4661-95af-744054f1426c",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "36a6b563-048d-4f61-abe6-ab48755943af"
        },
        "item": {
          "id": "c23c5dc5-2535-4b6c-918e-6c42f7ac6ba7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "856e952d-c3a3-4d18-bbfb-fd182f63e522",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee34282-679c-46b0-87d1-341a1a508a45",
        "cursor": {
          "ref": "f2adb250-51ef-4cd1-b97c-736fe590783e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "eee78af2-6e21-4cbf-8c27-cfd5d9d6ac0f"
        },
        "item": {
          "id": "aee34282-679c-46b0-87d1-341a1a508a45",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fb78187a-ee3d-41db-bff4-d2495cf86378",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee34282-679c-46b0-87d1-341a1a508a45",
        "cursor": {
          "ref": "f2adb250-51ef-4cd1-b97c-736fe590783e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "eee78af2-6e21-4cbf-8c27-cfd5d9d6ac0f"
        },
        "item": {
          "id": "aee34282-679c-46b0-87d1-341a1a508a45",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fb78187a-ee3d-41db-bff4-d2495cf86378",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8367c594-b8ea-4c52-92d5-9221e2d47dea",
        "cursor": {
          "ref": "3537234d-7178-42b1-a7a5-5cc826471618",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "df5f34fd-b961-40c3-b303-744e663684db"
        },
        "item": {
          "id": "8367c594-b8ea-4c52-92d5-9221e2d47dea",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ad700af3-f822-42e7-8963-638b676ed7a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8367c594-b8ea-4c52-92d5-9221e2d47dea",
        "cursor": {
          "ref": "3537234d-7178-42b1-a7a5-5cc826471618",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "df5f34fd-b961-40c3-b303-744e663684db"
        },
        "item": {
          "id": "8367c594-b8ea-4c52-92d5-9221e2d47dea",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ad700af3-f822-42e7-8963-638b676ed7a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a860f30-4101-41b8-9406-136fadc547db",
        "cursor": {
          "ref": "9f70d5c5-2d5c-4f2e-b4a3-b0756603c74a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3c121811-47f7-4e4d-b539-c01a5f795044"
        },
        "item": {
          "id": "3a860f30-4101-41b8-9406-136fadc547db",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e57d2cca-e930-47b6-82d4-7a04627fe5e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a860f30-4101-41b8-9406-136fadc547db",
        "cursor": {
          "ref": "9f70d5c5-2d5c-4f2e-b4a3-b0756603c74a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3c121811-47f7-4e4d-b539-c01a5f795044"
        },
        "item": {
          "id": "3a860f30-4101-41b8-9406-136fadc547db",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e57d2cca-e930-47b6-82d4-7a04627fe5e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4f018d-0065-41f3-ae66-1ce07f3016ac",
        "cursor": {
          "ref": "bb2204bd-9fad-480e-ac76-cbaf61900efa",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c0b88c6a-4742-4aa7-bcef-01dd6571b45e"
        },
        "item": {
          "id": "cc4f018d-0065-41f3-ae66-1ce07f3016ac",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4d1df5fc-25d6-456f-ac4b-28b339478e44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4f018d-0065-41f3-ae66-1ce07f3016ac",
        "cursor": {
          "ref": "bb2204bd-9fad-480e-ac76-cbaf61900efa",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c0b88c6a-4742-4aa7-bcef-01dd6571b45e"
        },
        "item": {
          "id": "cc4f018d-0065-41f3-ae66-1ce07f3016ac",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4d1df5fc-25d6-456f-ac4b-28b339478e44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b242517-961b-4c64-a173-eea69fe89bd5",
        "cursor": {
          "ref": "bee20b60-c304-47dc-a2e5-86ff05a48680",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0c04efb4-54f7-4edb-9070-278692396255"
        },
        "item": {
          "id": "4b242517-961b-4c64-a173-eea69fe89bd5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d3a44914-bd10-4cb1-9ea9-aeb561ba14c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b242517-961b-4c64-a173-eea69fe89bd5",
        "cursor": {
          "ref": "bee20b60-c304-47dc-a2e5-86ff05a48680",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0c04efb4-54f7-4edb-9070-278692396255"
        },
        "item": {
          "id": "4b242517-961b-4c64-a173-eea69fe89bd5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d3a44914-bd10-4cb1-9ea9-aeb561ba14c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6e3bf6-9a61-43ee-bd19-e5b4d11a8ec3",
        "cursor": {
          "ref": "950a9ce5-79d2-4fbd-a694-7157c7dfe680",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "23d37004-2c11-4b46-b99a-eaf60976b119"
        },
        "item": {
          "id": "ef6e3bf6-9a61-43ee-bd19-e5b4d11a8ec3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "174d75cc-7f28-48cf-ba29-e5862cb805f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6e3bf6-9a61-43ee-bd19-e5b4d11a8ec3",
        "cursor": {
          "ref": "950a9ce5-79d2-4fbd-a694-7157c7dfe680",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "23d37004-2c11-4b46-b99a-eaf60976b119"
        },
        "item": {
          "id": "ef6e3bf6-9a61-43ee-bd19-e5b4d11a8ec3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "174d75cc-7f28-48cf-ba29-e5862cb805f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee33873c-6044-4102-a39e-e6fc755f1362",
        "cursor": {
          "ref": "c4aea6d3-e86b-4898-8861-7e77e346d456",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ddf981d7-3657-4fb5-828a-e90c4e96a449"
        },
        "item": {
          "id": "ee33873c-6044-4102-a39e-e6fc755f1362",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "63a9e2f4-f745-497f-a5ec-aa9a3f948901",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee33873c-6044-4102-a39e-e6fc755f1362",
        "cursor": {
          "ref": "c4aea6d3-e86b-4898-8861-7e77e346d456",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ddf981d7-3657-4fb5-828a-e90c4e96a449"
        },
        "item": {
          "id": "ee33873c-6044-4102-a39e-e6fc755f1362",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "63a9e2f4-f745-497f-a5ec-aa9a3f948901",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e79aba-78c1-4621-b304-76ec62e81f4b",
        "cursor": {
          "ref": "233f2766-8881-4b8f-ab9b-6223273bb30d",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d240a829-d48f-4a22-9af1-6f56d275a42a"
        },
        "item": {
          "id": "16e79aba-78c1-4621-b304-76ec62e81f4b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f9f7a13f-e59c-41ff-a2a4-0d47961bd883",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e79aba-78c1-4621-b304-76ec62e81f4b",
        "cursor": {
          "ref": "233f2766-8881-4b8f-ab9b-6223273bb30d",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d240a829-d48f-4a22-9af1-6f56d275a42a"
        },
        "item": {
          "id": "16e79aba-78c1-4621-b304-76ec62e81f4b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f9f7a13f-e59c-41ff-a2a4-0d47961bd883",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df345519-dc89-4c25-9af4-a3e75e92db65",
        "cursor": {
          "ref": "fdab6261-16bb-4dcf-ae3f-be8791290536",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f71f4f1c-10f4-44a9-86a7-20375c1f0dd1"
        },
        "item": {
          "id": "df345519-dc89-4c25-9af4-a3e75e92db65",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "397b3c12-3c78-4f13-b294-ee4e38fe5078",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df345519-dc89-4c25-9af4-a3e75e92db65",
        "cursor": {
          "ref": "fdab6261-16bb-4dcf-ae3f-be8791290536",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f71f4f1c-10f4-44a9-86a7-20375c1f0dd1"
        },
        "item": {
          "id": "df345519-dc89-4c25-9af4-a3e75e92db65",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "397b3c12-3c78-4f13-b294-ee4e38fe5078",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b93939-7b56-46d6-966c-d1417a399421",
        "cursor": {
          "ref": "75b0ed51-53d9-4cd8-b11f-8730682e81d3",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "09e469ed-070a-46ad-99b6-b4628d660783"
        },
        "item": {
          "id": "b6b93939-7b56-46d6-966c-d1417a399421",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0863b070-bbbf-416f-a286-a24fea40adcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b93939-7b56-46d6-966c-d1417a399421",
        "cursor": {
          "ref": "75b0ed51-53d9-4cd8-b11f-8730682e81d3",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "09e469ed-070a-46ad-99b6-b4628d660783"
        },
        "item": {
          "id": "b6b93939-7b56-46d6-966c-d1417a399421",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0863b070-bbbf-416f-a286-a24fea40adcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624ef819-4c82-47c7-8943-0750829ee23d",
        "cursor": {
          "ref": "cd98782f-40df-4ec6-930b-a44cbd9ae2ad",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "30fbd11b-77d3-4b4c-bd45-e48019003b65"
        },
        "item": {
          "id": "624ef819-4c82-47c7-8943-0750829ee23d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "31e85bd6-a79c-4782-91c3-8bc6092a7882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624ef819-4c82-47c7-8943-0750829ee23d",
        "cursor": {
          "ref": "cd98782f-40df-4ec6-930b-a44cbd9ae2ad",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "30fbd11b-77d3-4b4c-bd45-e48019003b65"
        },
        "item": {
          "id": "624ef819-4c82-47c7-8943-0750829ee23d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "31e85bd6-a79c-4782-91c3-8bc6092a7882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7571cfbb-b057-47dc-9ef7-5a4fb4364045",
        "cursor": {
          "ref": "995b8acc-0988-4e5e-99d0-2e931406247c",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4f5cd37a-6ee7-4c5f-b5b4-db20cd5d6c7c"
        },
        "item": {
          "id": "7571cfbb-b057-47dc-9ef7-5a4fb4364045",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d027bcee-db24-47f9-8ac8-805490d54faa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7571cfbb-b057-47dc-9ef7-5a4fb4364045",
        "cursor": {
          "ref": "995b8acc-0988-4e5e-99d0-2e931406247c",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4f5cd37a-6ee7-4c5f-b5b4-db20cd5d6c7c"
        },
        "item": {
          "id": "7571cfbb-b057-47dc-9ef7-5a4fb4364045",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d027bcee-db24-47f9-8ac8-805490d54faa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16600ad0-352b-43e3-981a-7107aec4cba9",
        "cursor": {
          "ref": "45c38d72-0206-4101-9a89-26d7252d93f0",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7a4aad54-8b31-4ab1-9baf-8a5fda9311ae"
        },
        "item": {
          "id": "16600ad0-352b-43e3-981a-7107aec4cba9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6b3b10e5-73e9-4c90-91ff-969ef3db3ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16600ad0-352b-43e3-981a-7107aec4cba9",
        "cursor": {
          "ref": "45c38d72-0206-4101-9a89-26d7252d93f0",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7a4aad54-8b31-4ab1-9baf-8a5fda9311ae"
        },
        "item": {
          "id": "16600ad0-352b-43e3-981a-7107aec4cba9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6b3b10e5-73e9-4c90-91ff-969ef3db3ac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "125e0fbf-c718-462c-9988-39ae6cca1df1",
        "cursor": {
          "ref": "0032366e-ac19-4d47-8ea3-be93fab60cce",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "96ac168f-99bf-4e9d-91df-7afa854808a4"
        },
        "item": {
          "id": "125e0fbf-c718-462c-9988-39ae6cca1df1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "35c69d56-49af-4483-8c77-9b686aeebbb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "125e0fbf-c718-462c-9988-39ae6cca1df1",
        "cursor": {
          "ref": "0032366e-ac19-4d47-8ea3-be93fab60cce",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "96ac168f-99bf-4e9d-91df-7afa854808a4"
        },
        "item": {
          "id": "125e0fbf-c718-462c-9988-39ae6cca1df1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "35c69d56-49af-4483-8c77-9b686aeebbb7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a63c33e-73dd-4fa2-a07f-4b1deca48ca9",
        "cursor": {
          "ref": "ad05c4c9-cf19-405a-9815-d87beeb3a4f8",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0507dc49-9934-4b32-a000-05bee763e6dd"
        },
        "item": {
          "id": "3a63c33e-73dd-4fa2-a07f-4b1deca48ca9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d9508a6d-6cfd-468f-9448-8f95dd739d70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a63c33e-73dd-4fa2-a07f-4b1deca48ca9",
        "cursor": {
          "ref": "ad05c4c9-cf19-405a-9815-d87beeb3a4f8",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0507dc49-9934-4b32-a000-05bee763e6dd"
        },
        "item": {
          "id": "3a63c33e-73dd-4fa2-a07f-4b1deca48ca9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d9508a6d-6cfd-468f-9448-8f95dd739d70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd953f48-2002-4833-8a33-f0d283f84ab7",
        "cursor": {
          "ref": "1699e04c-0561-4e51-9af1-ed7049157d6f",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f32a5d26-c3b8-48ed-8854-33ad68d5f2c3"
        },
        "item": {
          "id": "bd953f48-2002-4833-8a33-f0d283f84ab7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "00471842-590e-43a1-81e6-7e2ece444c8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd953f48-2002-4833-8a33-f0d283f84ab7",
        "cursor": {
          "ref": "1699e04c-0561-4e51-9af1-ed7049157d6f",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f32a5d26-c3b8-48ed-8854-33ad68d5f2c3"
        },
        "item": {
          "id": "bd953f48-2002-4833-8a33-f0d283f84ab7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "00471842-590e-43a1-81e6-7e2ece444c8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7cc3cf4-a48d-4f80-9454-793654125166",
        "cursor": {
          "ref": "0e056c1b-3091-45f1-9a86-a8345a4956c9",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b0cc334f-d388-4c9d-9956-20f1fc74e82a"
        },
        "item": {
          "id": "a7cc3cf4-a48d-4f80-9454-793654125166",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "64e10c0a-dbe6-4136-bb93-81b39a51f694",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7cc3cf4-a48d-4f80-9454-793654125166",
        "cursor": {
          "ref": "0e056c1b-3091-45f1-9a86-a8345a4956c9",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b0cc334f-d388-4c9d-9956-20f1fc74e82a"
        },
        "item": {
          "id": "a7cc3cf4-a48d-4f80-9454-793654125166",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "64e10c0a-dbe6-4136-bb93-81b39a51f694",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932d5578-e887-4e9f-b4dd-0104f5e6cb0d",
        "cursor": {
          "ref": "ad772a90-1ec1-4d92-837e-3b6e1980157d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "82f81e5b-c404-4a3b-8fdb-0b778b84e3d4"
        },
        "item": {
          "id": "932d5578-e887-4e9f-b4dd-0104f5e6cb0d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e39f347e-5b49-478d-a599-08f87efb082c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932d5578-e887-4e9f-b4dd-0104f5e6cb0d",
        "cursor": {
          "ref": "ad772a90-1ec1-4d92-837e-3b6e1980157d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "82f81e5b-c404-4a3b-8fdb-0b778b84e3d4"
        },
        "item": {
          "id": "932d5578-e887-4e9f-b4dd-0104f5e6cb0d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e39f347e-5b49-478d-a599-08f87efb082c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff86bcb-edf0-4c28-8c87-d44182ec83ca",
        "cursor": {
          "ref": "ddec4233-5722-4ee1-a89c-03f2c031981d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f3203e0b-b51b-4b6b-a27c-4c936f8eb0c0"
        },
        "item": {
          "id": "9ff86bcb-edf0-4c28-8c87-d44182ec83ca",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c5a4347a-0b14-4dfc-b4a7-52fd7666d1fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff86bcb-edf0-4c28-8c87-d44182ec83ca",
        "cursor": {
          "ref": "ddec4233-5722-4ee1-a89c-03f2c031981d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f3203e0b-b51b-4b6b-a27c-4c936f8eb0c0"
        },
        "item": {
          "id": "9ff86bcb-edf0-4c28-8c87-d44182ec83ca",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c5a4347a-0b14-4dfc-b4a7-52fd7666d1fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13d8523-a7f4-4604-848d-d90339b9b6d4",
        "cursor": {
          "ref": "dcfc4378-b188-4618-8cb8-f3121d81be96",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0de3d74c-fed5-436f-a0d0-26c391d4b601"
        },
        "item": {
          "id": "c13d8523-a7f4-4604-848d-d90339b9b6d4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1313ccd6-d684-4495-8aed-b47457e8a306",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13d8523-a7f4-4604-848d-d90339b9b6d4",
        "cursor": {
          "ref": "dcfc4378-b188-4618-8cb8-f3121d81be96",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0de3d74c-fed5-436f-a0d0-26c391d4b601"
        },
        "item": {
          "id": "c13d8523-a7f4-4604-848d-d90339b9b6d4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1313ccd6-d684-4495-8aed-b47457e8a306",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa0d5e5-393b-423f-aed7-09b884e8e210",
        "cursor": {
          "ref": "fcde315f-0e99-43d8-baa3-87218b255833",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "33abc105-94fe-4a61-bbbb-8ecb872f7986"
        },
        "item": {
          "id": "8fa0d5e5-393b-423f-aed7-09b884e8e210",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6eda00c9-f6f8-46c6-8db6-4d19da6c2b19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa0d5e5-393b-423f-aed7-09b884e8e210",
        "cursor": {
          "ref": "fcde315f-0e99-43d8-baa3-87218b255833",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "33abc105-94fe-4a61-bbbb-8ecb872f7986"
        },
        "item": {
          "id": "8fa0d5e5-393b-423f-aed7-09b884e8e210",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6eda00c9-f6f8-46c6-8db6-4d19da6c2b19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafa0603-94fd-466b-96bc-8fbbbd097393",
        "cursor": {
          "ref": "a3426709-895f-40a0-b972-86b1ed83b6d6",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2ca72360-1a73-45d6-83a9-bc1a3a27a808"
        },
        "item": {
          "id": "cafa0603-94fd-466b-96bc-8fbbbd097393",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0f9322ea-7d8c-48e8-b9b5-46090e5bdb68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafa0603-94fd-466b-96bc-8fbbbd097393",
        "cursor": {
          "ref": "a3426709-895f-40a0-b972-86b1ed83b6d6",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2ca72360-1a73-45d6-83a9-bc1a3a27a808"
        },
        "item": {
          "id": "cafa0603-94fd-466b-96bc-8fbbbd097393",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0f9322ea-7d8c-48e8-b9b5-46090e5bdb68",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fc56ae-c313-4322-8600-fa4d5780f8e6",
        "cursor": {
          "ref": "55c2845a-7993-4dac-ade5-471e44922fef",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cf9c31fa-d4fb-42f5-a788-52ab080e7d83"
        },
        "item": {
          "id": "96fc56ae-c313-4322-8600-fa4d5780f8e6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7ebae550-5125-4705-ac3a-316773529c27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fc56ae-c313-4322-8600-fa4d5780f8e6",
        "cursor": {
          "ref": "55c2845a-7993-4dac-ade5-471e44922fef",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cf9c31fa-d4fb-42f5-a788-52ab080e7d83"
        },
        "item": {
          "id": "96fc56ae-c313-4322-8600-fa4d5780f8e6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7ebae550-5125-4705-ac3a-316773529c27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceef1fac-c06c-4121-9d0e-97fdb55a62d3",
        "cursor": {
          "ref": "4e67362d-9a35-47bb-bd4c-ac3271b5d43b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3253ab82-999a-4e44-a22c-e6db832ce6bc"
        },
        "item": {
          "id": "ceef1fac-c06c-4121-9d0e-97fdb55a62d3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bb1022e4-c40b-438b-b7b9-36dea1fd30c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceef1fac-c06c-4121-9d0e-97fdb55a62d3",
        "cursor": {
          "ref": "4e67362d-9a35-47bb-bd4c-ac3271b5d43b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3253ab82-999a-4e44-a22c-e6db832ce6bc"
        },
        "item": {
          "id": "ceef1fac-c06c-4121-9d0e-97fdb55a62d3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bb1022e4-c40b-438b-b7b9-36dea1fd30c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7399e1-2912-44e0-90f5-bb7a036e974e",
        "cursor": {
          "ref": "9987e8c4-dcb4-48ea-9dfa-852243b28e1c",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "94e8ea9c-8327-4579-8954-25cb605d07aa"
        },
        "item": {
          "id": "aa7399e1-2912-44e0-90f5-bb7a036e974e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8519541c-fa23-4110-9f99-fe1f0084cf72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7399e1-2912-44e0-90f5-bb7a036e974e",
        "cursor": {
          "ref": "9987e8c4-dcb4-48ea-9dfa-852243b28e1c",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "94e8ea9c-8327-4579-8954-25cb605d07aa"
        },
        "item": {
          "id": "aa7399e1-2912-44e0-90f5-bb7a036e974e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8519541c-fa23-4110-9f99-fe1f0084cf72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce835d66-e4d1-4d9a-a706-740993fa80df",
        "cursor": {
          "ref": "ff396f0f-5705-4d9e-9a9a-00c335882b1b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d1f140bd-cd78-4252-9c72-16b8f75748a6"
        },
        "item": {
          "id": "ce835d66-e4d1-4d9a-a706-740993fa80df",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "86c5e086-d569-401e-b21f-d5e8817e28e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce835d66-e4d1-4d9a-a706-740993fa80df",
        "cursor": {
          "ref": "ff396f0f-5705-4d9e-9a9a-00c335882b1b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d1f140bd-cd78-4252-9c72-16b8f75748a6"
        },
        "item": {
          "id": "ce835d66-e4d1-4d9a-a706-740993fa80df",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "86c5e086-d569-401e-b21f-d5e8817e28e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278d1a1b-aa9f-42b9-aca1-021ecd8b6148",
        "cursor": {
          "ref": "006dd803-aed3-479a-bf28-9eb9bcda26b5",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2edb91d8-69f0-4d37-bc90-f2a1bb3a3d01"
        },
        "item": {
          "id": "278d1a1b-aa9f-42b9-aca1-021ecd8b6148",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cbb6438d-d6f7-404f-898d-876c215ed7f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278d1a1b-aa9f-42b9-aca1-021ecd8b6148",
        "cursor": {
          "ref": "006dd803-aed3-479a-bf28-9eb9bcda26b5",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2edb91d8-69f0-4d37-bc90-f2a1bb3a3d01"
        },
        "item": {
          "id": "278d1a1b-aa9f-42b9-aca1-021ecd8b6148",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cbb6438d-d6f7-404f-898d-876c215ed7f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea97a20-ebbe-4aa6-9bde-65eda17d2059",
        "cursor": {
          "ref": "52d203ec-fac8-4c86-915e-580e995783b9",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8b85195d-9542-4958-a3fd-be01247247a4"
        },
        "item": {
          "id": "cea97a20-ebbe-4aa6-9bde-65eda17d2059",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fc00ec6e-31e0-40a1-bd98-d1325bc28a10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea97a20-ebbe-4aa6-9bde-65eda17d2059",
        "cursor": {
          "ref": "52d203ec-fac8-4c86-915e-580e995783b9",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8b85195d-9542-4958-a3fd-be01247247a4"
        },
        "item": {
          "id": "cea97a20-ebbe-4aa6-9bde-65eda17d2059",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fc00ec6e-31e0-40a1-bd98-d1325bc28a10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e6b36d-e339-40b6-9212-f0b5f25fef0e",
        "cursor": {
          "ref": "1f0d6dae-1db2-4b1a-b737-3cc7877e2d01",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a155cb62-5917-4080-aadd-614adbad55b1"
        },
        "item": {
          "id": "62e6b36d-e339-40b6-9212-f0b5f25fef0e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "56a9c107-5bdb-4c9f-9951-b1d40723af97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e6b36d-e339-40b6-9212-f0b5f25fef0e",
        "cursor": {
          "ref": "1f0d6dae-1db2-4b1a-b737-3cc7877e2d01",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a155cb62-5917-4080-aadd-614adbad55b1"
        },
        "item": {
          "id": "62e6b36d-e339-40b6-9212-f0b5f25fef0e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "56a9c107-5bdb-4c9f-9951-b1d40723af97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90594499-cf98-439d-9008-4259d90e6002",
        "cursor": {
          "ref": "7593f52d-ec6e-4e3b-b093-1a65d212a0e0",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "050c9a23-e23d-41e1-8452-70b38958dff8"
        },
        "item": {
          "id": "90594499-cf98-439d-9008-4259d90e6002",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4598f146-740b-490a-b922-c0a2326ae84c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90594499-cf98-439d-9008-4259d90e6002",
        "cursor": {
          "ref": "7593f52d-ec6e-4e3b-b093-1a65d212a0e0",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "050c9a23-e23d-41e1-8452-70b38958dff8"
        },
        "item": {
          "id": "90594499-cf98-439d-9008-4259d90e6002",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4598f146-740b-490a-b922-c0a2326ae84c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679bc9f2-88f1-4f02-8631-d9301c135a50",
        "cursor": {
          "ref": "fc60f1df-b700-4f02-ba48-dcab12b933f2",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "189b5331-2858-442e-a69c-78cd6e9f05c2"
        },
        "item": {
          "id": "679bc9f2-88f1-4f02-8631-d9301c135a50",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "db4d3b91-49f2-4493-b549-bb107cdeaa18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679bc9f2-88f1-4f02-8631-d9301c135a50",
        "cursor": {
          "ref": "fc60f1df-b700-4f02-ba48-dcab12b933f2",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "189b5331-2858-442e-a69c-78cd6e9f05c2"
        },
        "item": {
          "id": "679bc9f2-88f1-4f02-8631-d9301c135a50",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "db4d3b91-49f2-4493-b549-bb107cdeaa18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd053c5a-80c0-4721-9cbe-3bb5cbf8c785",
        "cursor": {
          "ref": "6ade8ac4-033b-458f-90f2-eef3ed9ae7f8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ff3fff4b-b7da-4eb0-a49c-ab18865e969f"
        },
        "item": {
          "id": "cd053c5a-80c0-4721-9cbe-3bb5cbf8c785",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ab3f030c-62ca-4564-8b1f-7d8da98653c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd053c5a-80c0-4721-9cbe-3bb5cbf8c785",
        "cursor": {
          "ref": "6ade8ac4-033b-458f-90f2-eef3ed9ae7f8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ff3fff4b-b7da-4eb0-a49c-ab18865e969f"
        },
        "item": {
          "id": "cd053c5a-80c0-4721-9cbe-3bb5cbf8c785",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ab3f030c-62ca-4564-8b1f-7d8da98653c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f822d1b-3482-41b0-8175-0a46ff25447e",
        "cursor": {
          "ref": "9918d757-1bd4-4168-83f8-37a6f1e00b8c",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ae06e0a1-7435-4b88-94f6-621f638fcfa6"
        },
        "item": {
          "id": "6f822d1b-3482-41b0-8175-0a46ff25447e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f2edf03f-56f7-424f-b7fd-347b992b2bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f822d1b-3482-41b0-8175-0a46ff25447e",
        "cursor": {
          "ref": "9918d757-1bd4-4168-83f8-37a6f1e00b8c",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ae06e0a1-7435-4b88-94f6-621f638fcfa6"
        },
        "item": {
          "id": "6f822d1b-3482-41b0-8175-0a46ff25447e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f2edf03f-56f7-424f-b7fd-347b992b2bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86443d41-86ab-47e8-a715-749910f276f0",
        "cursor": {
          "ref": "d1a3d4a5-dda1-4025-8210-47f6b414bd33",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c95f3433-bb18-477e-8ff5-580cbf187bc4"
        },
        "item": {
          "id": "86443d41-86ab-47e8-a715-749910f276f0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "eefe2cd2-36e7-4127-8102-1e2f9ea67fdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86443d41-86ab-47e8-a715-749910f276f0",
        "cursor": {
          "ref": "d1a3d4a5-dda1-4025-8210-47f6b414bd33",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c95f3433-bb18-477e-8ff5-580cbf187bc4"
        },
        "item": {
          "id": "86443d41-86ab-47e8-a715-749910f276f0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "eefe2cd2-36e7-4127-8102-1e2f9ea67fdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8131e5c-4a23-4481-b520-c7c7d7233f03",
        "cursor": {
          "ref": "aeb660d6-2928-4ae5-a7e2-c3233997b19a",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5f86d455-c877-4d28-b14c-7134de4d6299"
        },
        "item": {
          "id": "e8131e5c-4a23-4481-b520-c7c7d7233f03",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "02454302-75fc-4755-ae4d-3acebd91868a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8131e5c-4a23-4481-b520-c7c7d7233f03",
        "cursor": {
          "ref": "aeb660d6-2928-4ae5-a7e2-c3233997b19a",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5f86d455-c877-4d28-b14c-7134de4d6299"
        },
        "item": {
          "id": "e8131e5c-4a23-4481-b520-c7c7d7233f03",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "02454302-75fc-4755-ae4d-3acebd91868a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0801b2da-d994-4472-9e15-f4c0d577bc02",
        "cursor": {
          "ref": "75858381-65fd-4161-9389-fe5fc313272f",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "399add37-5136-4270-89f3-3e2d82e003c4"
        },
        "item": {
          "id": "0801b2da-d994-4472-9e15-f4c0d577bc02",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "68ad7114-0dfa-4fca-9a41-38b3a72a176d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0801b2da-d994-4472-9e15-f4c0d577bc02",
        "cursor": {
          "ref": "75858381-65fd-4161-9389-fe5fc313272f",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "399add37-5136-4270-89f3-3e2d82e003c4"
        },
        "item": {
          "id": "0801b2da-d994-4472-9e15-f4c0d577bc02",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "68ad7114-0dfa-4fca-9a41-38b3a72a176d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16435fce-5486-49c3-9310-870079e0969c",
        "cursor": {
          "ref": "4cbbd0d5-60f9-4cc5-b445-71668bf2d1ed",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "465625d6-f1d9-4912-8ee0-8a6207858dfe"
        },
        "item": {
          "id": "16435fce-5486-49c3-9310-870079e0969c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f77438fb-71a2-4b9d-83a5-29bbcf5d3764",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16435fce-5486-49c3-9310-870079e0969c",
        "cursor": {
          "ref": "4cbbd0d5-60f9-4cc5-b445-71668bf2d1ed",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "465625d6-f1d9-4912-8ee0-8a6207858dfe"
        },
        "item": {
          "id": "16435fce-5486-49c3-9310-870079e0969c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f77438fb-71a2-4b9d-83a5-29bbcf5d3764",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205554da-1be2-4cc0-8ff3-cab191bf2d11",
        "cursor": {
          "ref": "34ce6ed4-328e-4fed-ab71-53104dcaef31",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d45ef6ea-ce1c-4ecf-a4ee-7227a9d4bed0"
        },
        "item": {
          "id": "205554da-1be2-4cc0-8ff3-cab191bf2d11",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4ce73f8f-7e93-4df5-8d80-075e84986647",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205554da-1be2-4cc0-8ff3-cab191bf2d11",
        "cursor": {
          "ref": "34ce6ed4-328e-4fed-ab71-53104dcaef31",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d45ef6ea-ce1c-4ecf-a4ee-7227a9d4bed0"
        },
        "item": {
          "id": "205554da-1be2-4cc0-8ff3-cab191bf2d11",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4ce73f8f-7e93-4df5-8d80-075e84986647",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c52453-f944-477e-a3d0-2d9cde1eb358",
        "cursor": {
          "ref": "2e6a9aa7-3f92-4f9d-aa13-96124cb9a0c3",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f460ba29-e126-4f33-9b24-19532701725c"
        },
        "item": {
          "id": "f5c52453-f944-477e-a3d0-2d9cde1eb358",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "082f78f3-b08c-4934-af82-0a49d6803631",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c52453-f944-477e-a3d0-2d9cde1eb358",
        "cursor": {
          "ref": "2e6a9aa7-3f92-4f9d-aa13-96124cb9a0c3",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f460ba29-e126-4f33-9b24-19532701725c"
        },
        "item": {
          "id": "f5c52453-f944-477e-a3d0-2d9cde1eb358",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "082f78f3-b08c-4934-af82-0a49d6803631",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185fab29-386b-44e0-8d9a-2f483d9e3a58",
        "cursor": {
          "ref": "ebda2ca7-c387-4a51-ac93-31eed33595c0",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0bdf30ab-53fe-4914-b627-acd0ca49206d"
        },
        "item": {
          "id": "185fab29-386b-44e0-8d9a-2f483d9e3a58",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a61f47bd-164b-4e64-a37e-23dedbb0e8c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185fab29-386b-44e0-8d9a-2f483d9e3a58",
        "cursor": {
          "ref": "ebda2ca7-c387-4a51-ac93-31eed33595c0",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0bdf30ab-53fe-4914-b627-acd0ca49206d"
        },
        "item": {
          "id": "185fab29-386b-44e0-8d9a-2f483d9e3a58",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a61f47bd-164b-4e64-a37e-23dedbb0e8c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12679cce-6d4d-4de3-8c0c-2a495657b512",
        "cursor": {
          "ref": "87bf58eb-54ce-487f-b248-2d5a6252c586",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "702b9c2b-4c1b-4bcd-91e0-dfb94ebca4da"
        },
        "item": {
          "id": "12679cce-6d4d-4de3-8c0c-2a495657b512",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c39dbdd7-5ac0-40c8-b08a-23b81dd49b94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12679cce-6d4d-4de3-8c0c-2a495657b512",
        "cursor": {
          "ref": "87bf58eb-54ce-487f-b248-2d5a6252c586",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "702b9c2b-4c1b-4bcd-91e0-dfb94ebca4da"
        },
        "item": {
          "id": "12679cce-6d4d-4de3-8c0c-2a495657b512",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c39dbdd7-5ac0-40c8-b08a-23b81dd49b94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ddfc4f-e0fd-4237-b601-2d349e41f666",
        "cursor": {
          "ref": "55b103af-6b2c-4bb7-8696-3a616076d5c2",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ab675451-d940-46f0-9ed5-9a2b7b577fef"
        },
        "item": {
          "id": "d6ddfc4f-e0fd-4237-b601-2d349e41f666",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fea876a7-934e-4241-8db8-11f3041f0877",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ddfc4f-e0fd-4237-b601-2d349e41f666",
        "cursor": {
          "ref": "55b103af-6b2c-4bb7-8696-3a616076d5c2",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ab675451-d940-46f0-9ed5-9a2b7b577fef"
        },
        "item": {
          "id": "d6ddfc4f-e0fd-4237-b601-2d349e41f666",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fea876a7-934e-4241-8db8-11f3041f0877",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a996a6-cc8d-4006-b15d-789e20c80eb1",
        "cursor": {
          "ref": "11c1dc5f-223e-45c4-89e0-395ebb5c5709",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "beb15210-9317-42ea-a232-2d103c5448e6"
        },
        "item": {
          "id": "61a996a6-cc8d-4006-b15d-789e20c80eb1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bbaa8821-333e-46eb-ab4a-34ce343321be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a996a6-cc8d-4006-b15d-789e20c80eb1",
        "cursor": {
          "ref": "11c1dc5f-223e-45c4-89e0-395ebb5c5709",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "beb15210-9317-42ea-a232-2d103c5448e6"
        },
        "item": {
          "id": "61a996a6-cc8d-4006-b15d-789e20c80eb1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bbaa8821-333e-46eb-ab4a-34ce343321be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d88f788-66db-4f58-95dc-07fc6706e19c",
        "cursor": {
          "ref": "100474d8-2a98-4799-839f-5cb735a7e929",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f3cd9cdd-edcc-4880-99c3-5c2a92a26f3c"
        },
        "item": {
          "id": "3d88f788-66db-4f58-95dc-07fc6706e19c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "de191e2b-ba06-4671-8bef-0755d73ed174",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d88f788-66db-4f58-95dc-07fc6706e19c",
        "cursor": {
          "ref": "100474d8-2a98-4799-839f-5cb735a7e929",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f3cd9cdd-edcc-4880-99c3-5c2a92a26f3c"
        },
        "item": {
          "id": "3d88f788-66db-4f58-95dc-07fc6706e19c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "de191e2b-ba06-4671-8bef-0755d73ed174",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbc82cb-5127-413f-bd2a-7ef60b06426a",
        "cursor": {
          "ref": "a00f626f-3d1b-4dea-85bc-7d59ef9ecf1b",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b382bf35-fbcb-4321-b9fc-933154611ad6"
        },
        "item": {
          "id": "9cbc82cb-5127-413f-bd2a-7ef60b06426a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0a5efc52-3766-46f4-8bb1-fc2404a798e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbc82cb-5127-413f-bd2a-7ef60b06426a",
        "cursor": {
          "ref": "a00f626f-3d1b-4dea-85bc-7d59ef9ecf1b",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b382bf35-fbcb-4321-b9fc-933154611ad6"
        },
        "item": {
          "id": "9cbc82cb-5127-413f-bd2a-7ef60b06426a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0a5efc52-3766-46f4-8bb1-fc2404a798e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f156319b-b32d-49e2-825f-8017f9f37743",
        "cursor": {
          "ref": "9a5b4a34-9f99-4c60-aca9-e88ab2942730",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fecffa0f-1174-496c-a945-f3479e487db7"
        },
        "item": {
          "id": "f156319b-b32d-49e2-825f-8017f9f37743",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "dddcc2be-ab79-40cb-baef-697bae2d5058",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f156319b-b32d-49e2-825f-8017f9f37743",
        "cursor": {
          "ref": "9a5b4a34-9f99-4c60-aca9-e88ab2942730",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fecffa0f-1174-496c-a945-f3479e487db7"
        },
        "item": {
          "id": "f156319b-b32d-49e2-825f-8017f9f37743",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "dddcc2be-ab79-40cb-baef-697bae2d5058",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcd2ab5-294b-4406-8b72-13eb4a77be84",
        "cursor": {
          "ref": "601f0fe0-1291-43b8-82d6-992f2d8b15d5",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dc28a35a-3e60-4a0b-9f25-dadf970983ed"
        },
        "item": {
          "id": "efcd2ab5-294b-4406-8b72-13eb4a77be84",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "254e4610-825e-486c-91d8-14e97b4cea5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcd2ab5-294b-4406-8b72-13eb4a77be84",
        "cursor": {
          "ref": "601f0fe0-1291-43b8-82d6-992f2d8b15d5",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dc28a35a-3e60-4a0b-9f25-dadf970983ed"
        },
        "item": {
          "id": "efcd2ab5-294b-4406-8b72-13eb4a77be84",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "254e4610-825e-486c-91d8-14e97b4cea5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ef545d-a853-4e07-854a-72b091560d07",
        "cursor": {
          "ref": "1834d044-a681-46c5-acce-2b8405a7bbc9",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "59dc4684-49c0-4f80-860b-9d98d5a0e274"
        },
        "item": {
          "id": "f5ef545d-a853-4e07-854a-72b091560d07",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "25b3749f-c87b-4b8d-ba79-9584cf8202b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ef545d-a853-4e07-854a-72b091560d07",
        "cursor": {
          "ref": "1834d044-a681-46c5-acce-2b8405a7bbc9",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "59dc4684-49c0-4f80-860b-9d98d5a0e274"
        },
        "item": {
          "id": "f5ef545d-a853-4e07-854a-72b091560d07",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "25b3749f-c87b-4b8d-ba79-9584cf8202b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eaeac54-ec1c-4507-9e08-1e598ef97e6a",
        "cursor": {
          "ref": "2aff2b39-f0fc-417c-b6e6-6fd80539848f",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8a76a69d-4087-4038-90a0-87c72d2e91e4"
        },
        "item": {
          "id": "6eaeac54-ec1c-4507-9e08-1e598ef97e6a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c2d142d0-e308-4282-810e-54f108d1f8a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eaeac54-ec1c-4507-9e08-1e598ef97e6a",
        "cursor": {
          "ref": "2aff2b39-f0fc-417c-b6e6-6fd80539848f",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8a76a69d-4087-4038-90a0-87c72d2e91e4"
        },
        "item": {
          "id": "6eaeac54-ec1c-4507-9e08-1e598ef97e6a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c2d142d0-e308-4282-810e-54f108d1f8a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39718a7-45bf-48f9-a37f-62095ff8b5c2",
        "cursor": {
          "ref": "4f26c621-eee9-4dbb-b505-3bd6c00ab4ec",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "19e5e18e-a2c6-4b4a-8baa-ce2bbcabe74b"
        },
        "item": {
          "id": "a39718a7-45bf-48f9-a37f-62095ff8b5c2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "dce3514f-57a5-4659-89a8-7b5dac36987e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39718a7-45bf-48f9-a37f-62095ff8b5c2",
        "cursor": {
          "ref": "4f26c621-eee9-4dbb-b505-3bd6c00ab4ec",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "19e5e18e-a2c6-4b4a-8baa-ce2bbcabe74b"
        },
        "item": {
          "id": "a39718a7-45bf-48f9-a37f-62095ff8b5c2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "dce3514f-57a5-4659-89a8-7b5dac36987e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f715656e-0781-4d2c-a0e6-bac981fb65ce",
        "cursor": {
          "ref": "3bf887a0-a262-4793-bad6-92e54d5283d2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "251bc172-07c7-4877-89e8-5ebce506869e"
        },
        "item": {
          "id": "f715656e-0781-4d2c-a0e6-bac981fb65ce",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bb4977b9-bc8a-43f4-81f7-a8442de43d71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f715656e-0781-4d2c-a0e6-bac981fb65ce",
        "cursor": {
          "ref": "3bf887a0-a262-4793-bad6-92e54d5283d2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "251bc172-07c7-4877-89e8-5ebce506869e"
        },
        "item": {
          "id": "f715656e-0781-4d2c-a0e6-bac981fb65ce",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bb4977b9-bc8a-43f4-81f7-a8442de43d71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5604442c-f27f-414f-9cc7-5376ff92008a",
        "cursor": {
          "ref": "86154b6e-8379-4039-993f-ae236dd1736a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4e9decc7-7916-4620-8705-011905983931"
        },
        "item": {
          "id": "5604442c-f27f-414f-9cc7-5376ff92008a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f8d3fc54-b81c-4b4c-a53c-e1182590caa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5604442c-f27f-414f-9cc7-5376ff92008a",
        "cursor": {
          "ref": "86154b6e-8379-4039-993f-ae236dd1736a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4e9decc7-7916-4620-8705-011905983931"
        },
        "item": {
          "id": "5604442c-f27f-414f-9cc7-5376ff92008a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f8d3fc54-b81c-4b4c-a53c-e1182590caa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fa0d4a-da41-4624-b8eb-f07fed933c93",
        "cursor": {
          "ref": "bb9eae35-bab1-4521-9140-81ffd5617775",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5613a9a6-1a5b-4294-8641-f74691bb67d7"
        },
        "item": {
          "id": "45fa0d4a-da41-4624-b8eb-f07fed933c93",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b54aaf68-9153-49bc-a960-3b0f8f1fa82b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fa0d4a-da41-4624-b8eb-f07fed933c93",
        "cursor": {
          "ref": "bb9eae35-bab1-4521-9140-81ffd5617775",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5613a9a6-1a5b-4294-8641-f74691bb67d7"
        },
        "item": {
          "id": "45fa0d4a-da41-4624-b8eb-f07fed933c93",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b54aaf68-9153-49bc-a960-3b0f8f1fa82b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0bd463-85c7-4f53-8f68-1bf61ac876ab",
        "cursor": {
          "ref": "976c9887-d960-4491-a2b7-8feabed204ef",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ede14043-81cf-4ffd-aafe-f40f51023445"
        },
        "item": {
          "id": "9e0bd463-85c7-4f53-8f68-1bf61ac876ab",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a39280f0-5160-4e8d-b15c-a58630777639",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0bd463-85c7-4f53-8f68-1bf61ac876ab",
        "cursor": {
          "ref": "976c9887-d960-4491-a2b7-8feabed204ef",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ede14043-81cf-4ffd-aafe-f40f51023445"
        },
        "item": {
          "id": "9e0bd463-85c7-4f53-8f68-1bf61ac876ab",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a39280f0-5160-4e8d-b15c-a58630777639",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e3aa7f-fe86-40a4-bbb2-43fd96439d94",
        "cursor": {
          "ref": "38930a53-aecf-4002-be4f-f56083c24911",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "163cbcfa-1bc3-467b-9162-f938cf6ff0d5"
        },
        "item": {
          "id": "c8e3aa7f-fe86-40a4-bbb2-43fd96439d94",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2e9822cb-864f-41de-b9f9-2f91c23c57a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e3aa7f-fe86-40a4-bbb2-43fd96439d94",
        "cursor": {
          "ref": "38930a53-aecf-4002-be4f-f56083c24911",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "163cbcfa-1bc3-467b-9162-f938cf6ff0d5"
        },
        "item": {
          "id": "c8e3aa7f-fe86-40a4-bbb2-43fd96439d94",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2e9822cb-864f-41de-b9f9-2f91c23c57a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f0c346-ce80-4010-b386-d6fb4090bcbb",
        "cursor": {
          "ref": "eb04e43c-42b8-48bf-b604-60803e372ab2",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9edb8386-ec08-45ce-a935-4a4bc9b473d6"
        },
        "item": {
          "id": "10f0c346-ce80-4010-b386-d6fb4090bcbb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "45801cd3-3b22-4df4-a073-93b1d4fac7ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f0c346-ce80-4010-b386-d6fb4090bcbb",
        "cursor": {
          "ref": "eb04e43c-42b8-48bf-b604-60803e372ab2",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9edb8386-ec08-45ce-a935-4a4bc9b473d6"
        },
        "item": {
          "id": "10f0c346-ce80-4010-b386-d6fb4090bcbb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "45801cd3-3b22-4df4-a073-93b1d4fac7ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8111c8bf-0969-40e4-9827-c6acb882afcc",
        "cursor": {
          "ref": "ebfdcc63-2262-4a13-84ad-35da28e12fbb",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "14097506-00d1-47ea-b4ef-6d8febbfa008"
        },
        "item": {
          "id": "8111c8bf-0969-40e4-9827-c6acb882afcc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3929de46-79e0-4ef2-85eb-54b3bbcfa2c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8111c8bf-0969-40e4-9827-c6acb882afcc",
        "cursor": {
          "ref": "ebfdcc63-2262-4a13-84ad-35da28e12fbb",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "14097506-00d1-47ea-b4ef-6d8febbfa008"
        },
        "item": {
          "id": "8111c8bf-0969-40e4-9827-c6acb882afcc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3929de46-79e0-4ef2-85eb-54b3bbcfa2c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a68970-ae2a-4564-b38b-9f7a9fc499f0",
        "cursor": {
          "ref": "a15f42ed-fa13-49e6-ade1-3d230b2382fb",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f94db27c-ff3b-43a6-91e6-39526ffa8d10"
        },
        "item": {
          "id": "f4a68970-ae2a-4564-b38b-9f7a9fc499f0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dae97c5a-4721-46a0-825a-8ad251d152c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a68970-ae2a-4564-b38b-9f7a9fc499f0",
        "cursor": {
          "ref": "a15f42ed-fa13-49e6-ade1-3d230b2382fb",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f94db27c-ff3b-43a6-91e6-39526ffa8d10"
        },
        "item": {
          "id": "f4a68970-ae2a-4564-b38b-9f7a9fc499f0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dae97c5a-4721-46a0-825a-8ad251d152c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb953eb4-fd28-435d-9e82-558a86d45fd1",
        "cursor": {
          "ref": "f8e1aa30-3842-4288-9760-34969b9de0d2",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e2dd3227-9226-4a06-9c2e-1659dc6963e7"
        },
        "item": {
          "id": "cb953eb4-fd28-435d-9e82-558a86d45fd1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6bc4a463-beb0-461c-a983-a263754c12cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb953eb4-fd28-435d-9e82-558a86d45fd1",
        "cursor": {
          "ref": "f8e1aa30-3842-4288-9760-34969b9de0d2",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e2dd3227-9226-4a06-9c2e-1659dc6963e7"
        },
        "item": {
          "id": "cb953eb4-fd28-435d-9e82-558a86d45fd1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6bc4a463-beb0-461c-a983-a263754c12cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44c6eb8-adc5-42a4-ae3c-b36b5ce0e733",
        "cursor": {
          "ref": "4eb7a297-6656-4b4e-ae82-2067b6930348",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "4cddd6ab-0976-4c68-93b2-d0c992173745"
        },
        "item": {
          "id": "c44c6eb8-adc5-42a4-ae3c-b36b5ce0e733",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "44703b70-a44f-4d51-8378-0c636435e24d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44c6eb8-adc5-42a4-ae3c-b36b5ce0e733",
        "cursor": {
          "ref": "4eb7a297-6656-4b4e-ae82-2067b6930348",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "4cddd6ab-0976-4c68-93b2-d0c992173745"
        },
        "item": {
          "id": "c44c6eb8-adc5-42a4-ae3c-b36b5ce0e733",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "44703b70-a44f-4d51-8378-0c636435e24d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556dafc8-ded3-4a68-bb03-753fe808ced2",
        "cursor": {
          "ref": "6396ce61-0a22-40b8-bbdb-e48bdcb96d5d",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "dfec1362-9af5-495e-93ca-35cb14b7fdc3"
        },
        "item": {
          "id": "556dafc8-ded3-4a68-bb03-753fe808ced2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9f7cf6b9-01e6-4721-ab9b-537c3b178588",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556dafc8-ded3-4a68-bb03-753fe808ced2",
        "cursor": {
          "ref": "6396ce61-0a22-40b8-bbdb-e48bdcb96d5d",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "dfec1362-9af5-495e-93ca-35cb14b7fdc3"
        },
        "item": {
          "id": "556dafc8-ded3-4a68-bb03-753fe808ced2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9f7cf6b9-01e6-4721-ab9b-537c3b178588",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9940330-42f3-4825-b172-8424491703ef",
        "cursor": {
          "ref": "eda5f3de-5c23-4299-bb57-bfa34e7ef6d7",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "9b23d9a9-b2ea-4201-98c6-8b6adc8307d6"
        },
        "item": {
          "id": "b9940330-42f3-4825-b172-8424491703ef",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "59bc1b7c-db24-4876-84e5-4ca34c056ae9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9940330-42f3-4825-b172-8424491703ef",
        "cursor": {
          "ref": "eda5f3de-5c23-4299-bb57-bfa34e7ef6d7",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "9b23d9a9-b2ea-4201-98c6-8b6adc8307d6"
        },
        "item": {
          "id": "b9940330-42f3-4825-b172-8424491703ef",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "59bc1b7c-db24-4876-84e5-4ca34c056ae9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25937f07-5fd0-40b5-a17f-bfdbce9140fa",
        "cursor": {
          "ref": "8f5e058d-2781-4fa6-8696-2d6979943913",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "cb7e33c4-bc82-4131-a4f9-e73b8599c672"
        },
        "item": {
          "id": "25937f07-5fd0-40b5-a17f-bfdbce9140fa",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "96fd715b-1dd2-497f-a546-a04edbe8e6d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25937f07-5fd0-40b5-a17f-bfdbce9140fa",
        "cursor": {
          "ref": "8f5e058d-2781-4fa6-8696-2d6979943913",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "cb7e33c4-bc82-4131-a4f9-e73b8599c672"
        },
        "item": {
          "id": "25937f07-5fd0-40b5-a17f-bfdbce9140fa",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "96fd715b-1dd2-497f-a546-a04edbe8e6d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab56fc0-1d88-4219-a973-2cce8f6dde20",
        "cursor": {
          "ref": "ec9e7820-d542-42a4-86ce-2002025f7235",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c89d91a8-7b3d-450a-b3ec-dc8c1377478d"
        },
        "item": {
          "id": "6ab56fc0-1d88-4219-a973-2cce8f6dde20",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4dcf0e57-ccc1-48bf-ac8c-afb545524b71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab56fc0-1d88-4219-a973-2cce8f6dde20",
        "cursor": {
          "ref": "ec9e7820-d542-42a4-86ce-2002025f7235",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c89d91a8-7b3d-450a-b3ec-dc8c1377478d"
        },
        "item": {
          "id": "6ab56fc0-1d88-4219-a973-2cce8f6dde20",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4dcf0e57-ccc1-48bf-ac8c-afb545524b71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8d01c1-4655-4744-82d0-08b8fe5f6dcf",
        "cursor": {
          "ref": "411fce63-fb73-451d-ba3a-a36f22741784",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "02fec10a-8250-4e2a-8e27-856767376c2c"
        },
        "item": {
          "id": "6a8d01c1-4655-4744-82d0-08b8fe5f6dcf",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cd92d736-215b-47a4-a658-e2e8ef946335",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8d01c1-4655-4744-82d0-08b8fe5f6dcf",
        "cursor": {
          "ref": "411fce63-fb73-451d-ba3a-a36f22741784",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "02fec10a-8250-4e2a-8e27-856767376c2c"
        },
        "item": {
          "id": "6a8d01c1-4655-4744-82d0-08b8fe5f6dcf",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cd92d736-215b-47a4-a658-e2e8ef946335",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edb3fb8-f117-41fa-9c2a-37098eec19ee",
        "cursor": {
          "ref": "74bad887-6479-4f41-ada6-e9715033575e",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a77c0cc9-a7a7-4eeb-b787-7ed22a89075a"
        },
        "item": {
          "id": "3edb3fb8-f117-41fa-9c2a-37098eec19ee",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f7e11a62-76a8-4eb0-a804-09cb8868d6ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edb3fb8-f117-41fa-9c2a-37098eec19ee",
        "cursor": {
          "ref": "74bad887-6479-4f41-ada6-e9715033575e",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a77c0cc9-a7a7-4eeb-b787-7ed22a89075a"
        },
        "item": {
          "id": "3edb3fb8-f117-41fa-9c2a-37098eec19ee",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f7e11a62-76a8-4eb0-a804-09cb8868d6ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106d83b8-2349-4790-8597-dd9e35b5a16a",
        "cursor": {
          "ref": "36f1e665-3268-47d3-87f0-3be924b0ce49",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c80e71b8-5337-471d-8e30-a4316ec4a6b9"
        },
        "item": {
          "id": "106d83b8-2349-4790-8597-dd9e35b5a16a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "defc7e54-e8c2-4363-900c-618ea5abbc24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106d83b8-2349-4790-8597-dd9e35b5a16a",
        "cursor": {
          "ref": "36f1e665-3268-47d3-87f0-3be924b0ce49",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c80e71b8-5337-471d-8e30-a4316ec4a6b9"
        },
        "item": {
          "id": "106d83b8-2349-4790-8597-dd9e35b5a16a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "defc7e54-e8c2-4363-900c-618ea5abbc24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84010d26-2f59-4e00-b2c8-fa6f1e0cde28",
        "cursor": {
          "ref": "42a9724b-dcf2-4731-8509-52e5b4f7d957",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "71841fa4-a6d7-406c-87a0-a1ad13f74800"
        },
        "item": {
          "id": "84010d26-2f59-4e00-b2c8-fa6f1e0cde28",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2c9a6c5d-e7d5-4ea2-8a81-51674e8e1ac0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84010d26-2f59-4e00-b2c8-fa6f1e0cde28",
        "cursor": {
          "ref": "42a9724b-dcf2-4731-8509-52e5b4f7d957",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "71841fa4-a6d7-406c-87a0-a1ad13f74800"
        },
        "item": {
          "id": "84010d26-2f59-4e00-b2c8-fa6f1e0cde28",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2c9a6c5d-e7d5-4ea2-8a81-51674e8e1ac0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2849ebe-9fdf-4db3-906d-4e9e2af5dfe6",
        "cursor": {
          "ref": "dcf6e250-273f-4110-a769-7923aed3b80e",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ecf8d827-b6f3-421e-ae72-ea21722b6c02"
        },
        "item": {
          "id": "b2849ebe-9fdf-4db3-906d-4e9e2af5dfe6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "620271dd-c236-4fe7-9bab-b50b8dcf0ef8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2849ebe-9fdf-4db3-906d-4e9e2af5dfe6",
        "cursor": {
          "ref": "dcf6e250-273f-4110-a769-7923aed3b80e",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ecf8d827-b6f3-421e-ae72-ea21722b6c02"
        },
        "item": {
          "id": "b2849ebe-9fdf-4db3-906d-4e9e2af5dfe6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "620271dd-c236-4fe7-9bab-b50b8dcf0ef8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243a24fd-e828-4beb-b9be-cdb574316063",
        "cursor": {
          "ref": "112352ba-f778-4a5f-8537-3366c649243b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "34b856d4-93c9-445c-a03f-ebae9cf0ffa5"
        },
        "item": {
          "id": "243a24fd-e828-4beb-b9be-cdb574316063",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "51619c1f-36cc-4135-9109-c3fcdcc4aa61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243a24fd-e828-4beb-b9be-cdb574316063",
        "cursor": {
          "ref": "112352ba-f778-4a5f-8537-3366c649243b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "34b856d4-93c9-445c-a03f-ebae9cf0ffa5"
        },
        "item": {
          "id": "243a24fd-e828-4beb-b9be-cdb574316063",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "51619c1f-36cc-4135-9109-c3fcdcc4aa61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2f040e-db06-4e85-b35e-4b5d476260a4",
        "cursor": {
          "ref": "cb4584d6-fc90-496f-9d8e-89f0a5c9b139",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1b611227-3661-4950-aace-0dfcba044deb"
        },
        "item": {
          "id": "ae2f040e-db06-4e85-b35e-4b5d476260a4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7003091b-9eea-46a7-bf04-5a063931b0ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2f040e-db06-4e85-b35e-4b5d476260a4",
        "cursor": {
          "ref": "cb4584d6-fc90-496f-9d8e-89f0a5c9b139",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1b611227-3661-4950-aace-0dfcba044deb"
        },
        "item": {
          "id": "ae2f040e-db06-4e85-b35e-4b5d476260a4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7003091b-9eea-46a7-bf04-5a063931b0ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7362ad16-3087-4dc7-b4e4-7cb4bbd93866",
        "cursor": {
          "ref": "a0a69bb1-0f10-412b-8a2b-23572f8f7e65",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7a0dd5dd-f02a-4530-8d97-5b81ea4ea270"
        },
        "item": {
          "id": "7362ad16-3087-4dc7-b4e4-7cb4bbd93866",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e084af0f-54e8-48b3-a69a-5d6604687900",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7362ad16-3087-4dc7-b4e4-7cb4bbd93866",
        "cursor": {
          "ref": "a0a69bb1-0f10-412b-8a2b-23572f8f7e65",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7a0dd5dd-f02a-4530-8d97-5b81ea4ea270"
        },
        "item": {
          "id": "7362ad16-3087-4dc7-b4e4-7cb4bbd93866",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e084af0f-54e8-48b3-a69a-5d6604687900",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f9a8f5-a50d-4dfb-864a-40f73bc19060",
        "cursor": {
          "ref": "4498b8d6-7a76-46c1-a1a9-696767348a2d",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1e2723bb-353e-4833-8dfb-3592046eed2c"
        },
        "item": {
          "id": "83f9a8f5-a50d-4dfb-864a-40f73bc19060",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "83105308-aab6-4d18-8b66-56668a89016f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f9a8f5-a50d-4dfb-864a-40f73bc19060",
        "cursor": {
          "ref": "4498b8d6-7a76-46c1-a1a9-696767348a2d",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1e2723bb-353e-4833-8dfb-3592046eed2c"
        },
        "item": {
          "id": "83f9a8f5-a50d-4dfb-864a-40f73bc19060",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "83105308-aab6-4d18-8b66-56668a89016f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0db795-d70e-400b-a8fb-ae84a58fe2d7",
        "cursor": {
          "ref": "8e6360e8-46a1-4409-a153-e656748b50c3",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "22d7c685-400d-4799-8bc0-25d9499b1600"
        },
        "item": {
          "id": "8c0db795-d70e-400b-a8fb-ae84a58fe2d7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5a743cde-0f2c-49a7-880b-0f93e292880b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0db795-d70e-400b-a8fb-ae84a58fe2d7",
        "cursor": {
          "ref": "8e6360e8-46a1-4409-a153-e656748b50c3",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "22d7c685-400d-4799-8bc0-25d9499b1600"
        },
        "item": {
          "id": "8c0db795-d70e-400b-a8fb-ae84a58fe2d7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5a743cde-0f2c-49a7-880b-0f93e292880b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a0ff6d-a763-445b-93d7-11b9192469aa",
        "cursor": {
          "ref": "dad4a603-bc98-49f5-917e-8a1d76c60e0f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6687ea7f-db82-4384-864b-9c9b3baf6328"
        },
        "item": {
          "id": "60a0ff6d-a763-445b-93d7-11b9192469aa",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0a54d175-380e-4816-82c7-d06fd98bd39d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a0ff6d-a763-445b-93d7-11b9192469aa",
        "cursor": {
          "ref": "dad4a603-bc98-49f5-917e-8a1d76c60e0f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6687ea7f-db82-4384-864b-9c9b3baf6328"
        },
        "item": {
          "id": "60a0ff6d-a763-445b-93d7-11b9192469aa",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0a54d175-380e-4816-82c7-d06fd98bd39d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3f2643-6dd3-4405-a554-d980a1ec02f6",
        "cursor": {
          "ref": "d74957c1-0206-4133-ae0a-0d63be264fc3",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "f1ae6bd4-8a55-4764-9d27-c9daa92caf99"
        },
        "item": {
          "id": "ce3f2643-6dd3-4405-a554-d980a1ec02f6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "72da46bf-a527-40a7-8c78-01ad51d76139",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3f2643-6dd3-4405-a554-d980a1ec02f6",
        "cursor": {
          "ref": "d74957c1-0206-4133-ae0a-0d63be264fc3",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "f1ae6bd4-8a55-4764-9d27-c9daa92caf99"
        },
        "item": {
          "id": "ce3f2643-6dd3-4405-a554-d980a1ec02f6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "72da46bf-a527-40a7-8c78-01ad51d76139",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d11dc8-d3bc-42d9-a334-1e339f177d28",
        "cursor": {
          "ref": "9d9187b6-09e7-4c93-bdbb-cdf845990f87",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "a33ce4e5-fe60-465b-8d4d-f7f7dc4705dd"
        },
        "item": {
          "id": "37d11dc8-d3bc-42d9-a334-1e339f177d28",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9b26fb02-aa6d-4c50-b7c8-e6100e3a1d8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "37d11dc8-d3bc-42d9-a334-1e339f177d28",
        "cursor": {
          "ref": "9d9187b6-09e7-4c93-bdbb-cdf845990f87",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "a33ce4e5-fe60-465b-8d4d-f7f7dc4705dd"
        },
        "item": {
          "id": "37d11dc8-d3bc-42d9-a334-1e339f177d28",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9b26fb02-aa6d-4c50-b7c8-e6100e3a1d8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "759e223b-6a8d-4b58-8b83-a17ce2b9c109",
        "cursor": {
          "ref": "5a3283d1-6413-45b6-86b6-3a92e1110604",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "48390492-c31d-46ab-96d4-19b046e8b4d3"
        },
        "item": {
          "id": "759e223b-6a8d-4b58-8b83-a17ce2b9c109",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4a417744-8f7d-4e9a-99c5-8788f51f6f49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "759e223b-6a8d-4b58-8b83-a17ce2b9c109",
        "cursor": {
          "ref": "5a3283d1-6413-45b6-86b6-3a92e1110604",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "48390492-c31d-46ab-96d4-19b046e8b4d3"
        },
        "item": {
          "id": "759e223b-6a8d-4b58-8b83-a17ce2b9c109",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4a417744-8f7d-4e9a-99c5-8788f51f6f49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "8f801809-6b79-445e-aaf5-15cb9ef3c9a1",
        "cursor": {
          "ref": "757b901f-a3c6-45ee-98cb-de4f41282ae4",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "47258475-ae01-49ba-8eb4-dd2273474ff7"
        },
        "item": {
          "id": "8f801809-6b79-445e-aaf5-15cb9ef3c9a1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0e4c961e-f858-476b-b941-5c1ad004b47c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "8f801809-6b79-445e-aaf5-15cb9ef3c9a1",
        "cursor": {
          "ref": "757b901f-a3c6-45ee-98cb-de4f41282ae4",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "47258475-ae01-49ba-8eb4-dd2273474ff7"
        },
        "item": {
          "id": "8f801809-6b79-445e-aaf5-15cb9ef3c9a1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0e4c961e-f858-476b-b941-5c1ad004b47c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "58b7179b-0207-4d21-87a8-fecb3da9cdfa",
        "cursor": {
          "ref": "4b411950-056e-402f-9532-183d1a614194",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2fa6b5fe-270f-4434-8a9c-e45d48080ca8"
        },
        "item": {
          "id": "58b7179b-0207-4d21-87a8-fecb3da9cdfa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3d784f4a-3b23-486c-9608-1899921b8486",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b7179b-0207-4d21-87a8-fecb3da9cdfa",
        "cursor": {
          "ref": "4b411950-056e-402f-9532-183d1a614194",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2fa6b5fe-270f-4434-8a9c-e45d48080ca8"
        },
        "item": {
          "id": "58b7179b-0207-4d21-87a8-fecb3da9cdfa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3d784f4a-3b23-486c-9608-1899921b8486",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b7179b-0207-4d21-87a8-fecb3da9cdfa",
        "cursor": {
          "ref": "4b411950-056e-402f-9532-183d1a614194",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2fa6b5fe-270f-4434-8a9c-e45d48080ca8"
        },
        "item": {
          "id": "58b7179b-0207-4d21-87a8-fecb3da9cdfa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3d784f4a-3b23-486c-9608-1899921b8486",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5823b965-168a-4406-9084-ae851cde140d",
        "cursor": {
          "ref": "60fd4dcf-66cd-4017-a903-9c7022cd96e1",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "66b4bd57-b895-4d7e-9cb0-fd529f711fcc"
        },
        "item": {
          "id": "5823b965-168a-4406-9084-ae851cde140d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "20ccc9d1-da0a-4c14-ac13-d45956859a7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5823b965-168a-4406-9084-ae851cde140d",
        "cursor": {
          "ref": "60fd4dcf-66cd-4017-a903-9c7022cd96e1",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "66b4bd57-b895-4d7e-9cb0-fd529f711fcc"
        },
        "item": {
          "id": "5823b965-168a-4406-9084-ae851cde140d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "20ccc9d1-da0a-4c14-ac13-d45956859a7e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f69681-ee68-4b9c-b735-b7fd1fbf6ebe",
        "cursor": {
          "ref": "d061bb4d-3839-4293-87f4-2a54679d81de",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "1e369d37-b276-4f0a-a766-2bbbf6c1cd31"
        },
        "item": {
          "id": "10f69681-ee68-4b9c-b735-b7fd1fbf6ebe",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e2cfff61-1a10-4c97-a4f4-75a753dd39c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f69681-ee68-4b9c-b735-b7fd1fbf6ebe",
        "cursor": {
          "ref": "d061bb4d-3839-4293-87f4-2a54679d81de",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "1e369d37-b276-4f0a-a766-2bbbf6c1cd31"
        },
        "item": {
          "id": "10f69681-ee68-4b9c-b735-b7fd1fbf6ebe",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e2cfff61-1a10-4c97-a4f4-75a753dd39c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}