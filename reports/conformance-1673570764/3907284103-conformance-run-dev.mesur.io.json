{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "861c5fd2-2c45-406e-90ab-3f88aa9749de",
        "name": "Clear Cache",
        "item": [
          {
            "id": "679876aa-6bba-48c5-a806-613eee1cd558",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c9b5534-6ffc-402a-bf5a-f4d688c5feef",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c532058d-a39c-4685-9718-d590dc158b41"
                }
              }
            ]
          },
          {
            "id": "7ad3e0a0-10d4-4852-a19c-227838047fde",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30259ba8-455b-47b6-b8c9-6195b3f52d37",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f1d48324-23ae-4c52-a764-68cb2bfd32bd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "865abd95-3662-4792-a423-4603348ad715",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "aefb3772-378d-4db5-97e1-dc7188939ab2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "825ddca1-f664-4ec5-9ad2-3cfe079bb5fc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f12ddf48-c742-4247-9be5-062f575b2095",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "315adc29-caa0-4807-b7ee-9a35d8aab10d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4641a1dc-b629-4b61-af95-82ce0f5062e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bed87ec7-176f-48a9-b3a3-967b2262524c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "108a6242-5108-43ab-9317-5f5a4f184ec3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5761c6a0-78b3-495d-adfc-b6551540a9f4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20074535-ae9e-4c71-b032-171c0f6ed84a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "25d1b33f-0f6a-45be-b311-08019ef200a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40633b0a-94db-493f-8c21-dcab027caa56",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "826ff755-a699-47bc-a843-d3116d5cc58a"
            }
          }
        ]
      },
      {
        "id": "bed9ed51-42ee-4c57-9553-26d75a9ec5e1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a6293be0-7ca7-498d-90e8-807e61601849",
            "name": "Negative Testing",
            "item": [
              {
                "id": "751124ec-f06d-468d-8acf-09cb893eb5dd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8d478e31-2880-4007-bcb5-c474e0f45263",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837fcafc-9fa2-4f73-a242-d666fdaaa35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "675392d4-ce3e-44ce-9e9c-e83b5be97ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0293fa-001e-41b0-b7af-d4968a2e07d6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a7a7a5-3d84-44d1-8ada-df3e9299ddd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b13d6c3c-d5b6-432d-ba82-b7f43b705ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee78ae6-4091-44a0-9350-7853917d403f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49675f9b-5b2d-48fb-8597-06652d5e89e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43a876ea-136f-4f9f-a4b2-e796fb198d33"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7ad6d603-6b1a-4ac0-8a53-f835e56630ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b078cb5-c19a-4ed8-bf75-42baeb8c9373",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70dcc153-4281-48f7-b73f-f69b2295a936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cd70efb-9733-48af-9455-35b30dd6a10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461ab19c-ea96-43a6-a297-5e86b6f7bf76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43394e5d-8b6a-409a-9950-8ecd2416d97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d5ae05-b7d5-48ee-acd9-d24971a83835",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37823620-a222-49c7-ad75-f345f3c535c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8983f617-26c6-4f41-b1fa-a451448dcfa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8920f402-32f5-4818-b84f-0e95c2cb8c72",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "dc36af39-444f-470d-8076-1e89d3d24e76"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "80572a2f-8273-4b17-8048-28ac6da7246f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6c404a2-c9fe-4abc-9e35-639e1fba5acd",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "011b26e9-eee5-40fd-bf06-e7cea78e6090",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5d35430b-eb7e-4214-8c99-e1a68955431a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51855df6-f8b2-44df-b30b-52d11c48023a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7e9f8a05-7e4a-4b28-b240-385ba412eca2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "585b355f-fb55-4c67-866e-47c69f08f681",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf395e39-c459-4a61-b4b5-9c65758cfbca"
            }
          }
        ]
      },
      {
        "id": "1b49e577-8d65-4a54-b692-062bc2e3e79b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "60f2f717-f89a-44a4-988e-33b42a912805",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abb7ac0f-823b-47eb-9786-974871021def",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "85936a52-b0d0-491d-a108-c4cba3f29312",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53d9eb4-3e1c-4f17-b812-1f246842fe49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "366b5e5a-4def-4e9d-8eca-2e2ebd633d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd56b33a-60a7-4fda-b89e-7290281fc190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05783ef3-4abd-49f8-8bc3-321892ee7368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9ff72c-cc07-454e-9e8f-6098978f351c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffef8f7-1f6a-48ae-a3ac-30dfc5762723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac13eea-600c-4867-a8d0-99941f480c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518b9c65-94a0-4dcd-abf8-f7cadeb83f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94a87049-383f-4a1f-8480-703591da7196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2df0161-d3a9-4a00-a7e8-25fefb6822d6",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320bfb97-8d73-46f2-ae57-93820f7593e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa5b2cc-f337-40c0-adeb-f42d1fd5d09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c6a207-44e4-4cbb-8e4e-c3f4dd3c7c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66424d1e-21bf-4277-8ceb-22e752b51015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfe8c4b-a92b-4888-b738-551114d9915c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbe7321-cb62-400c-b625-c69199a019d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8acae3-3e91-4db3-80d6-496dc022cbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5375264-0413-4bc6-ab58-9eaeb8387cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d913d76c-477d-4144-94a4-ac16b6afe2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97376683-cda8-4439-8a7c-bd9febda47f2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10bdf23-9538-44b0-926f-58ba1478d393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0240f9-cade-463a-aac7-980c26c3a4bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1e9991-5eb3-40d7-81eb-01176c75e057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7271f87e-ef1a-46e4-a67b-22081cd4d308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d02a5ad-3a0e-49a1-a220-ca13908eea2b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6732468-fd30-42cd-8b6f-4708025fcbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51de0353-4c84-464f-90c0-d76f209bc6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7014de-d3fb-48eb-97b8-e2b380a76fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f8ff92e-c12a-4ed4-967a-f7de6de83811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71df37da-df37-4aab-9e9c-6f4012b0ad24",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826fa041-be3a-42ce-996a-3780bc242f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd00bf0-24b1-462c-b28f-c843cb9b7457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533aee53-cfd9-4e3e-a34f-720770a6e52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "036cc3fd-aba0-4d4a-acf0-400fa808bc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efd278d-f721-4631-8b51-dd5805f5a6f1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "013b1111-63e4-45f0-b53c-965efc522a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c68bd1-8d10-409b-a3b5-43d62627df3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6c4c0f-b490-4b72-9c37-71f799fb3d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f61be51-cb92-46d0-9790-26ebc5cf3796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a84654-3bc7-482b-9d4f-1a15f14febf2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b203f2c4-c8fb-4cf3-91c7-b33f30250f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a47bbf8-0fdb-4ec9-a89c-fe8211f2f9eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0353e331-a50c-4eae-86a6-504d95450ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea8a9e6b-e792-42b7-ba44-8af82bd0327d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bea9cc-286e-4730-a89a-76e8b0117888",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7ce058-0c5a-4d2d-97c0-915160bc9ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8531b9-0031-4526-93b2-b8cda3066fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4219c8d6-1235-4764-a9c8-3ea3f5d52c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33c54126-f2e9-43da-bd03-56a2bbb2b8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e938a897-3e55-46fe-9105-4c3b60e376a3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6890b2f0-939b-46bf-b6f6-63e97fef01bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ccefd2-5e6a-4df5-8b9d-ed1d15ec89a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20250820-53bc-48f8-b2c5-807ee4885f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72d76858-2ab7-4239-8da8-19e1bd1b1c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc21b47-377f-4ad0-9b96-07ada88f84d4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab63c62-4f96-407c-a96c-d0f056c8705c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a5b96b5-c51f-42bb-9a24-c5838118ebbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f528f1ac-6560-48eb-bb2f-a4bcf573f71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efed56a0-d63f-4eb6-a3af-0c3bfb437dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd25a3c4-8946-4d61-9017-d1e64f28bd69",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03618dce-5a8a-4260-9476-92a10cb451c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eadc9009-5885-4066-8e83-23551f207907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ba626f-0a38-48b7-8914-8348bd37990d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a2f1b2f-4403-4d27-bb4b-0aec85d49e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f772e5ef-0cb9-41fb-96ec-a33f34eb8e88",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9e6eef-cebd-4eab-ac9a-d688898d0f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97ccd8b-16aa-422d-bf6a-f149d5f4e30e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a12751e-d9b2-481a-b815-88fbfb53097b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "633b47a8-894a-43c4-bf0a-eb0f9de12d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc62d112-bae2-40b3-9f60-bc39db29c0dc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2caae0-0394-499c-b90a-8e44916530cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b12e5ef-4d7c-4e04-98ab-b970e8d37b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1d77b4-45a6-4699-b7af-b863ba70cb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c07699e8-303d-4d31-b369-5edfbf4a1a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a37f9e-1c92-49d5-a071-ecd96ba2a0e0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d698992c-2718-4e30-ac43-2b90abe07475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02340f2-adbd-4b5e-9ec1-b6b4cac725cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4403a6ce-ad23-4eb4-8176-2a5a949f4b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11630ab5-8326-4cb4-96fa-8b99416b5b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba41c156-e3b2-4c8b-9b9d-6f07c2c7f3f1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40fc94d-d2e7-48f4-8e74-bf4f8b0ca351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73947a8-99a8-495b-9ff6-3b381e747a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfbe200-5d36-42da-826d-dc034b61ce71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "281a8401-b4b5-4faf-b845-d8cde2606e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cec50a8-ddce-4fc9-9e2f-c194e3a11ab5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadc1994-1aa3-4e75-a391-d9baeb07d462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945f1273-aa15-463e-9663-68de20fd1ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9393392-8308-4b07-b770-a0fa8beb14f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49eeeaee-517c-4d74-ae18-c259e73df15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad57bec-73dd-4d9e-a883-406ca21bc38a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b255e26e-0be3-4d77-b4f6-1fe7f3b8672b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bbe5374-8cf0-48b7-8939-1923a1e8134e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea41b72a-c920-4047-97cc-0e0a8e8decbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc6d6e4b-d88c-47ed-a70c-9f064b41ba6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21cc741-d214-4d86-9728-efd69cb5df79",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edcc9f8-7683-4850-aa0e-5438a7e364da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c76917-89e0-428f-9fc6-f4a97c915a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946cdbc9-05c8-4496-88ef-f5117a58a2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd30298-572b-429c-9473-03fe9ae2c342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08a3436-8a53-4c71-8def-ea607a98a562",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a78318e-9289-43a6-8b4d-b13aa3237026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ef894a-8c11-4f6c-89bc-b63555c4ae87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6b3987-f31c-468b-a5b9-a96020cc340d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82b5293f-bdcb-4259-ac4c-51ac634b2f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b44b491-7c43-4ca5-bbc7-a15b07a0baf9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7212ea1f-7c2c-48cd-9b13-82a3a274ad43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b23a29-5348-4647-af5d-7dc434ec29f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136a722f-53e1-4e75-944a-68c734e83915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d44523ef-4c3e-4c53-ace7-a2beb03f1ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6132fe-19e0-41a5-9ffc-9f9a73d62b93",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5b2856-98c5-40bf-a730-acffc9f3e33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f0412a-c50a-42c3-a05a-47897c99f38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b260e9e0-4a08-4c5b-b972-f0f824f89534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "befe5ec9-dfee-42cc-9103-92aa88d9bf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c3e641-2bb6-480c-a1a5-e47db48e2c33",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9feb7936-7ba9-4ef5-a30c-55a92e9067fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7466f23e-8739-43de-8444-d33ef1cd1cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e040724-215b-4d88-9835-0ed1691b0395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c39e6b76-af91-4012-b12e-187aed132e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66ffbd7-1fd3-46ea-ab16-f607858a3757",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989577c0-e2c3-4928-983a-bdbfb9d07c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a2a0c3-5269-40cb-8dc8-3a0e7a3669c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d274ec-7445-4894-9d02-2bd5481e43b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c846b95-05d3-4199-92db-42c855bcb400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b54fd95-4593-4652-8417-5dc9be4acff0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1880132-62ce-4086-831c-fc00de7a5a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6cb406-858b-453e-8ea0-016ae8d6e74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d7f3b3-3b36-4fd3-b591-a6b81310d4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b52dec4c-9445-493c-acdc-6af23b1ec784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4382a254-2f39-4c71-91a2-fd4f5d1d9031",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e665921-228d-4aa4-bb0a-6535887ddca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b244857-bf28-41a0-9eb2-532f19055040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758e895a-1d1c-45f0-8239-88518fd2d334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d33cc8e9-e406-4cef-af13-05f056f8a41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c971c147-af04-43a2-9edf-e1354ba02028",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722912be-fee8-4cba-8920-0e6ef5659b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b980b684-d18a-4787-af5e-6301d701b1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd05569e-b0a4-4f3d-94a4-def76f57ba7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "58fb18c8-1dc9-4b1e-a75f-29a2342431b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c88e80e-560a-45bc-a6d1-00096c8fb2cd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01c6e76-477a-44f7-a39a-266eb422463a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8729f58c-0698-4e7f-833c-db916f93121d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e998eca6-62ef-4034-a818-150425b64b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73de19cb-4a33-4b65-9da1-81300e030c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0658b60d-410f-4639-a257-0783ea11e1c6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbd7227-e1df-41c0-b5fd-541f56939e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06f305e-f9bc-4a09-9c6a-0df6d9d752e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe38fb9-195c-4b88-9546-f6eb58ab4c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f706648c-8fa3-403c-a274-4c52d2ec255e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2f17f1-f786-4962-8a80-c8a2ef31d390",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ea1d20-8107-4599-8af5-cfc6b87dce00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f41c093-1149-4078-8ec6-7374c584215a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1432814a-defb-41e5-9ea1-1a05a0216593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae2822a-efc2-42f0-a894-383601226c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f69f949-c808-490c-b2c1-692f0416304d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34525307-f0e7-43e5-88a7-7a36bc82825d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45e0584f-ddf6-4495-9c45-9cc5b1b1fe1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fa5685-fd67-41ec-b4c4-7e18038e0f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "755a4754-979e-4608-bf49-71ca82be4481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63dbb67-f42c-423e-83b0-a9b7f2a3920b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ee58df-8105-4d6a-8672-1c49e4a36382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de10775e-d2bf-4f3d-8f68-3bdce92ba16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da459055-67ac-40d6-97d2-88d6acf7cb3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "015038ba-66a8-410d-a62f-b3cf497cb30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddef75e-cbfa-4b10-8ca7-ce996e067c16",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b474f8e-8125-4e44-bbfc-60b39eacc82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8808a5-f013-4c27-a169-dd81419f3624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58fe0ed-b417-4870-8d7d-f9f43cbbf6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0bacd35-fe14-4d6a-a69c-986ca50b1677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a7eee7-1bc1-4995-b7a0-3f4eb718cc44",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c79b9a1-661b-46de-8a1f-0680a09b49f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f426198d-b87c-4438-8676-32b89d2c4d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4565588a-2702-41fc-8073-ab1fbb292337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0334811-6f97-4bf8-8365-41172278601d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7c3574-6090-4167-8499-41fdef73ecea",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e405dd0-a56c-4792-9214-7847beb4e7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380838f8-2e46-409b-ba40-e7b134470e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ca0bb1-afa1-4b2c-a959-9630784cf0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd518512-394b-4f94-ac31-f258d58c66b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a876a2-7465-4d8d-a31f-15b4a1f5c866",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc11d1d-4bea-4c93-8e7a-c398f7edb95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee1544e-2d2d-4d55-a6ac-ed37bd603a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f2cdb6-9e8c-403f-ab48-c2471fc499d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab6e90f-18d7-4c0d-8486-c4b725be42cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37446234-a5f7-4c62-afd5-1aa0ead51013",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76edfcde-fe2a-44a5-8459-63f757bc4d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43f4cf07-4834-4bc6-9986-919afa322500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7960a8-f56b-4351-9cce-bbc68977d8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e51a32d8-9eed-4d93-b4de-36f14b97e7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed378129-5df5-4efe-843d-ff34f00bdaeb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53b8170-9016-40ef-8a7c-81842bbeaf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b30d6ed-2e06-4c39-a742-8129afd915b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2fcb63-b341-4b2a-8b7c-acaf5e6e8166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb13ebf4-8877-4e89-88e1-25857758bbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111c2b7b-cd4a-471f-9d87-97484756a711",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f03c0e6-21b1-4050-b28e-084b0e677304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68910a37-529a-4406-be14-7f950d847596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2d00f3-10f4-4197-845c-6a19a3a406a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a261033-564b-4275-9e2c-225133df9957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e99258-4e83-4d33-a672-8b322f90ec33",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4228b241-c20e-4eae-811b-0e9a548f4560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ae118a-213d-4ab6-9782-485582a6bd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5840b684-cfe0-4121-83f9-0750dcc76c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6932642-70cc-4a6c-9267-56f03bd2a6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b617397a-ee87-4d62-8f7d-8095fa89fe6d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8e6a15-1085-480a-9e16-1cc092a6d5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8688319-0b0d-4bdd-b437-837d54c56acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aad2838-f8d8-4661-bef7-0488aeefa037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c19ca4f9-6b08-44bc-ad5e-44cbc5bea078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e8d539-6bc9-4dae-99cf-86c20d91041c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490a5990-1a2a-4dd5-9d35-81cf1b21efdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f29ebd-0b0b-425c-80e6-c700b84bc954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2fb8f9-8425-4878-9f08-013072acc661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9586f280-fde2-4249-b9e3-0ad5bae923af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75587d4e-cdd1-4551-9c82-5e5f42e68593",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4270efa3-3032-4684-b6fd-e615cbe76718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f06e1b-c98c-4707-91e6-e70d1b38e8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7ca7dc-15c9-40ca-ba64-8f3e45f37367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "262c80bc-d3cf-42ac-ba4e-148e3ccfdd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc9234c-8ae4-40cf-b82e-75080e2650ee",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2966ca-c39b-4e62-ab0e-e4e63a5d1022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d477335-d496-4a6c-a784-b758a2247052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c09275c-836a-4a4a-bfb7-340b6a7c233a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8be6b2f8-72ec-4f98-93ea-247b6cb23941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cbf80f8-1cab-43a2-b4d7-280d8eae8af8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "356592d9-91b8-42b9-83b5-0f1d697245d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159a4dc9-5427-4e82-a903-da2101517bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92b953c-c138-4d74-92f4-722540bf28d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a7790e-ee8c-4479-8040-e06072764282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b89af4-2a81-4b8e-bf90-92cbd3f0ea19",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e34ca1-dfe2-4cf4-b6f5-86b431d90bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552cf596-ebef-4f62-ac06-0d5dbb98c665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54530636-aa0c-4139-8e60-b578e520f09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3526aae0-3812-48ab-9b9e-1da79b703120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a4f980-702e-40ca-b44c-1afe15c157ae",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e561d85-9238-4703-82e0-4c9158426b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4476ea7-1011-4715-bd11-68fb9238fcce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b2201e-0266-4675-9f3b-35cdab4f246c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c57188bc-626c-4b6b-89f8-e3dc669b0626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22283e54-2d2d-4bd3-9d53-a28af707cb6e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05ce44f-866c-4d0f-ad7a-e19642c41ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ceb5af1-499c-49e6-8453-862b96c5f2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44de5a73-062b-4ec1-9245-d6321766f0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8db04723-2351-4e6e-b28f-d2d7790d6c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2b4949-0a87-4b7a-b7d9-c9cea2cdcf0d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8a6a43-3395-49f6-bf47-bef678b52ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "134806e8-274e-4c31-92cb-e8151c075ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc7bcc2-83cb-4ffb-8bef-c8bad126a38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff99d2f-e409-401a-a8ac-b7be5038b020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e10b45-9f3d-4210-88a5-1cb67368c82c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0058d887-fdd3-4bc4-bd10-7ec305f2483b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0b2390-6596-41a6-a3ee-26ae6d6bd7fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666e8444-9a0b-4443-a71f-2556aaff20da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b45e7f-fd1a-43e8-a36e-291ee58207c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618392fc-ff64-44bc-8aac-11c828be4da5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25e2ed1-45f5-463d-a9ea-fb9bf14c9b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d506289-c702-4b2b-90c0-6c54c312377a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b780ea7e-3ef8-4660-85cc-8e935da4011d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1716431-d321-44dd-bbbb-15084ba89212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bd3b4a-1ffe-48bc-aa6a-b4062eb15231",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec6597c-98f4-4759-a58a-e941fcd5c4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec413cc-ba64-4f11-b256-d88a7cb200cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d1661c-356e-42ac-9b5e-68266df64a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "df48ce0a-e3c7-4a2b-9f4c-640564b99729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c102bc3-8dc5-4128-bb2c-4bb19d1038d9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b45d1eb-f08c-48d3-8be3-931af2030945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e4bedd-087a-44a8-a577-db5d662dc20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebff7a2f-049f-43ba-a1e9-f7441bdcc9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d874504e-a587-458b-aaf8-34a60af89893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bf35f0-0abb-4360-a086-db6681eaa113",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eace22bb-5f29-4b5d-9736-c8ca20eb318f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125eaeff-f961-4bf5-9104-008dad68b82c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed33447f-7077-4752-bc65-4c60314e10e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d787426f-d628-48a9-928b-0dc523ff3896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf02372-3447-4935-a298-2e752d17d985",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4733469f-1fe3-4241-87a0-63bbf2eb2332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daaa5df9-35db-40e8-a1aa-7eb42d616726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3890c1-7966-42e1-a7b3-f27d7b382874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "262058a8-65e6-46cc-80e2-7108d4667b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933465ea-8e36-45b6-8e7d-15540789d914",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5936b3-5deb-4e92-95ab-fa1500c2f6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18846a03-b35d-41ec-b6a8-295821717157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce7952d-fcfc-40ef-bf43-b6fecd95e5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a360e0b-9f07-486f-80d9-50ee49710082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b744b1f-2e71-4a6a-98ad-e715f7185570",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ec9ff8-fb83-4c11-8a9f-4b731979a97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44f058f-6c58-4253-a69e-e193b98da9a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b39a1bc-79d8-4a47-a3c6-74f2c47404e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5c12b088-8e8a-48c4-aef1-70740cde475d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3db7f93-f55d-4978-9109-c59bc69dff86",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79023f64-6bcf-4fd6-b09d-120f399bd8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "220d9ece-a9c3-49ba-a9f9-3a6179e57bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b18b23-83f9-4e03-9c6e-69e5a0a96596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "13ffc8ed-c1ae-49d2-82ff-49bd0e06f503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739bb28d-fcde-4f26-baa4-bc242a753d02",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce490a6-a650-4ee8-be9b-392a70d8e983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29173031-38b7-4815-bd26-b8f4ef685e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40be2557-ffc9-4cc9-8f40-6f9abc78bf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb99fbf0-d94c-4f37-8c60-89a141237e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22b2f17-8887-4aa0-ba30-912d99fa6ea0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba388ddc-9892-46a7-af3e-ef19e43d2798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b5c5f9-7525-4a42-832e-bba1dad8035d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c656d8f1-3b24-4cc8-9894-2b7755358552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "691eb1bb-6de2-4950-b012-3b400a038b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f303fb1b-449d-4561-ac84-15d7c1aff5bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77586e2f-b195-438d-99f4-1b8a7c4392cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c0a8e9-2612-469e-a980-dee74f6ba053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253c9f66-4d04-4790-8e65-940da6a86793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "504e5998-113f-4503-80f0-7a352b808749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3705112-2870-46c6-8762-bc3ffe98166e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c4a368-7e94-4f87-b306-0a4e9d9c5b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff966c6-63e5-4014-8257-bf81a27a34b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f704906-e29a-45cd-8430-5c56afff5376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ddeb831e-bcbf-4161-807a-fc5d882e33e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d09f9d-a612-483f-ac67-ec18ce5d82c5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5df4961-f011-41f8-9125-c9cd37dda8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e71ab2-a5dc-4f7c-a122-4eef25ab0b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c309d6-f0ee-477c-901b-f60ad4745646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "51f37920-ccbf-406d-96b9-d9747a665cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188d51e9-9938-4bf2-b8f6-5eb29517eab2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "861909c8-abb1-427e-904b-96b7c870198f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ba8606-ffeb-48ed-8f87-620132f1ccaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e39bce1-e915-4870-9743-94cca2488f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "22d72656-4f39-4513-a317-f601b654f981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ed9e52-43dd-474b-8f09-d10e5e9c903e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6acc55b-b8b4-43b9-8827-8802d5013a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e52265-e0ac-44b0-a384-473ee2d00ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e124d3-7b63-45a1-b2b5-1c724dafdaff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "015dc19c-bd8d-47f6-a787-a9e44fad54c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb1f04e-a21e-41fd-a5c2-57da3bc1ab0d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f1c266-841d-49a6-b0d6-af77b1e1a221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d24707-9439-4e02-8db1-32c5c678c288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0a8954-9296-4bb9-87d2-9649d6f11c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "760dc187-e617-4e80-b314-bd85cbaae0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd0b978-040b-47f5-940c-edef4e1f1060",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a20a046-b395-4165-bc75-9871060dd442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86e67f4-1cb9-451a-b950-e4c8d4b113de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2629a67b-079a-42f3-ad0a-66316570e7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7979fb87-f844-4b25-91fd-9ace365da282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac855929-1af3-4916-9df3-bb32adbcbb21",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da22228-2d3d-458b-8cc5-91441bc7f849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7afe77-f1b5-414d-bdd0-987783493d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e8bfe1-555f-436e-aca2-067ff27fa1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c38e45ec-4a54-4a91-814f-5f9276b9a23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c43209-0187-49ef-b1e9-f72a8ad4ea92",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3bc1eb-2ab9-49f4-920d-25a38cea66f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea25a5a5-b155-4b61-9676-012b2ef62c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf7d66f-22dc-4949-aa84-14633317b0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eab14632-f50a-41a9-a758-d15f328b70dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8542a29-6ed5-4219-baa6-09f56c03e286",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a02c97-a72b-4f35-bc7b-b0e1d5f071ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea40cbbe-b300-4531-83ce-17e04bf89c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe49f5d8-893e-45e9-8ac4-39c27b23420c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5892296-b49e-475c-b411-5bfd870eb8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771277a4-bc14-426d-b1b3-c6745ac7f8c3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c79f39-d285-49fc-aa9f-312c9f748631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb8d526-0940-4682-b523-120248f4208d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987774ef-7bdc-434e-8e71-7244fc2ceace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89bf00c3-01dc-4827-82ff-c16c5be2f40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74531664-cc91-4a29-92bd-b339f7edbf14",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83525558-2158-4798-afca-01abf1aced43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b1de09-d9f7-43be-a832-2988412f6f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e95f14-9bc5-42bf-bafd-39635998cd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db7bf548-7274-44a2-9f8d-791401d94350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971a3afe-4352-47c8-b567-602fef3033a2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dec458f-5158-4b12-80b7-e22249f1a3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a02139-9cfe-432d-9d2d-d2aa4ba1ba1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c09b557-2aa4-47a5-ad6d-b964cad9985d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb81ab2-00eb-4a09-b713-2f8de87333df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f462d43-c19b-45e6-adf9-48594d53e5e5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acf4691-2e09-41b8-8e51-e3c9001c456e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93acb88c-9e61-4423-9b7e-39c692e76f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c026ee9-71af-4003-9ee1-f1c7b9c6563d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f967781-99ff-4b74-b363-42c5cc1927b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433dbb0d-fcf8-4090-9493-2efa1cf6c18f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80ffc0f-58b3-4344-8d65-9bc7d8621f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c97c43-ee46-4411-8a03-2b2d0846e3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf29426e-a55a-4897-938a-2ac00de14122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93ba8533-9168-4ff9-b920-d1e95aa1d3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48554fd6-da1c-444e-a888-1933f3b752eb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6014da4e-77a5-4b10-af6f-b7157a5eb864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291327af-b3fc-45e3-9b53-8ccdae628f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479ccf7f-5790-41c9-a249-e05966497426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0399b681-d571-413e-99cb-24c7977b85c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8b4d50-cee8-442f-887e-5f7b4fb776ff",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b472e8-97d4-4139-aa13-847df20c0f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f0ce2b-0923-47af-84f3-f475500c240d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30783a41-1a61-441e-a2fb-3af094550bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8ce11b-b3a7-43ba-8bef-1a9d8707ffd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7004dc6-4f87-4200-873f-87c511ccf0c7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded05c48-0535-4b2c-aa18-aec3f3f9433d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0c93fe-adac-4d65-80e2-2142442739ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c3dbef-3020-4346-91fb-d933f706fc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f7e1e8d-b5c0-4998-bfad-1dc0ceebff57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d83fdb-828b-4c32-8846-6dd5d92113f4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabf80a6-5f95-405c-a03a-ae5295e6a311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ca1868-d9df-4dcf-a01b-46943c7ba534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87150f2-57fc-4da0-9402-24057d06cc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "763078df-eafe-4f2c-bb6d-cfbfed29769c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa9ac78-329f-4ff2-a58d-f7af6a66cb47",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bde392-7dc0-4f43-9777-541d7b456510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "593f06e3-3d32-4786-9608-be4739956b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff50f44-02b9-4aa5-bc58-5696ce945c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8192fa64-a256-4808-8bd7-484e316d7be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f257e1-99d7-4e9c-908b-044dbdca0926",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d2e7b9-e64d-4955-aaa4-313d2d226ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189a47cc-f308-4796-a55a-d96aecdc3949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4370842-7270-46e7-a414-e5cf164cb07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd089e6b-ac4d-4820-a554-ab56f37d6894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f391d9c2-bd6a-413f-8564-5888c974cb1b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50cd7c8-221f-48a7-bbd6-8246ecfdd428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32e8b85-166b-4b3e-a0b3-726efbefe27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c460b212-d6d3-4492-b360-bd2e29a1444e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a27529-69ca-44c5-a772-3392a7a11ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "790f0d81-acaa-42ce-a829-e98397d5f1c5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd0b8a0-f284-4a73-8e78-27fef2de28b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e76810-7809-43c3-9d08-39baef880482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03ca57f-6b38-44b6-93f3-3bb854a585c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd1d0da-7b53-459a-9e16-66a328f94021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af42116f-4eb6-49bc-9a77-c9a25ba71366",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92af18f-b181-4a01-8cd3-03ae4c917e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e997173-bdc0-4430-ae9d-5aa8930c67aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbd61ce-9f6c-413f-8ac2-ba2d3eab9556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27e422ab-b5d5-4ed3-a4cf-32caf3bd3a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0fde8ab-be9f-4210-a41a-c968dc272877",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f29dc3c-b0ed-45d7-be0a-8ed0899152a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2ec7a7-f935-47dd-86f6-59d1f807b642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0051edbc-e85b-469b-81ad-bbffbdebc2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d934bc54-8a81-442a-8ad4-575afc0c1cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4fac9e-af3e-4add-9a52-5d5672941f69",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034f66e2-9e99-4de3-81db-06d1cd2e77ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ace2ae9-0169-4a05-b24a-e007a5980a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43016f37-b7e3-41b7-a898-7c9112af0159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b01a8e46-4ec8-45f6-8e50-8c503578ed49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def78b0b-069a-4932-a446-2f9b86d849bb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6f9706-3edf-4981-9d68-6bbde23b1712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01917113-aaf4-4e5a-a309-229e091deac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979e982b-61d3-480d-a6f3-d94fe1cf1644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "72202a4a-6b79-44c2-b96c-f081fa53e0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c68389-4cca-4f4a-8878-6a326f84c16e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8672b451-9020-48ae-89b4-c26757330ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eef3430-c49b-4acb-b879-eed33c78e91d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d0365c-bdf0-4236-8e14-78d58e59b35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "73ba5f37-af67-4635-a54a-99ca919812f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e57ec9-c588-45f6-a821-b35ee3b74a7a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cbd7d7-8904-497e-89e3-a3cfbff43db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dddc79b-cbba-4cdd-b789-495bafde358b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1018da35-f450-482b-8da4-54529e89c806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a79155-b600-4369-aba3-7f68c3445644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab092d02-8788-4b3a-81a7-fd9cd2a061b8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e827ea-3f57-4a27-8704-e9348098d902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "131c8dd7-437c-4faf-97f1-1a3f9645f44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11235ada-7753-461e-ae2c-7916de989b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ccd9b13-bed1-4ddd-ba75-363d1d20ad91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8492eca4-a9bd-4dce-a1a0-a3146d69d84a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bf3a89-6c11-4245-8ae7-0f3e52e79fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a458a86-09cf-4ab9-a8db-116ba37ee812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9dc846-c226-405c-a637-7d4870937a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd4aef0a-b514-43b3-97b6-f2cbca27b371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b178426a-81bb-4b37-a534-00df5fe71984",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4531c36-f920-4e54-a32f-da6e453aa661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7f683d-9b33-417c-a687-a2385f977fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a4e1dc-b87e-43a7-b5da-6e3f9c455b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c21b7742-de7d-4c5c-afb4-c5e0cd5a02e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be15e9fb-7bd4-458f-8301-5525c2f74f6b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c2627c-9de6-4209-ba49-0746087a9beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fddf232a-fb60-401a-b2e3-df6b4cb7060d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c575ddcb-6d1b-4b40-8e9f-b9ea3eeeb523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "01616598-5450-454e-a325-4a8a3aa7506f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b9a803d-1aeb-4d53-a9f2-e25209bc7590",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5c29b88-330a-4008-a2ac-2f4c5314a79d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d16616a-3ded-4520-b123-ad6f9a1a2bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b788c309-28be-4f33-845a-eca20f05aefd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f8fe5b-41dd-4494-ad47-dda2a8906b01",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "19876218-0879-4d10-96ef-4ca3181b89d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82c5f31-f0ea-4970-8892-6472e9be1712",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f85f9c3-1584-4399-8408-3be16f231c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d67d085-8845-47f0-bdab-32ac50f5faff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf34623-755b-4868-a4be-f1f640c921a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "16c009c1-6c3b-4894-a955-eae918e4fe9c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c9e1528-1b13-4e53-a8c9-4dbef7dd556a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1de2b0ce-bb03-4a96-ae38-8182715e3ff7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "875a1032-b7cc-475d-82ff-67ef97df1c54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "251b5c20-bddd-41b2-ae1b-0c8403430f4b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3627d519-e26a-4602-9449-691ce7b526b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9853491-ed02-4e77-a4b5-eb82e88ae731"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4e8092a8-7c60-4bb2-9e57-4b0be268be5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed8c9196-d0e3-4bfe-b7a5-66f70295793e"
                }
              }
            ]
          },
          {
            "id": "07320d60-5215-4ec0-a8fe-37d9b250f0a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aa1c0c7d-e974-4fd9-aa2e-fd289ccebaf9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a1fdd6b-e79c-4bdd-870c-0bf1e63882e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50fa1e59-68a0-4016-91d4-1c64c06b5d44"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f0f8b6a-5883-420a-99df-57739ac46be2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2da9ddf9-1b11-4ad6-b2c0-64632768ea5b"
                    }
                  }
                ]
              },
              {
                "id": "3445792a-56b6-49b0-9be1-eadf1b748578",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b76a7001-7beb-45b2-bfce-4c01e6689ca7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67c3baaf-3a28-464e-91fe-61355666b7b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4814b44b-5cf3-4e69-a419-1f13f0cb3683",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "312e5147-c2ca-4d48-8692-d21d73807c38"
                    }
                  }
                ]
              },
              {
                "id": "6153c53f-d715-40be-82fe-37c76e748974",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5004c5c9-0982-4c06-8d75-be7bf1ed2818",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b2148b7-70e0-4906-87d9-432efff3b61a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6bf6f818-2ab7-4d05-9aa6-39d8cfac85ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "695f1ac9-4cea-4c1d-88bf-7eddbf633e98"
                    }
                  }
                ]
              },
              {
                "id": "770b1616-96b8-484f-b3e7-8ed5b0b2dd75",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6a05c5c-601e-4835-a36e-04a4a69c2c3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0368db75-0a71-47f6-b210-6309f7003a9d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d32d09e-bf26-433b-b9c8-1b4617a496d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "44f3a14e-f97a-489b-b108-519d956f332e"
                    }
                  }
                ]
              },
              {
                "id": "cf0b5b70-c8e5-4f4c-9778-a9afcf312f51",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e93d917-82a8-43bb-b6d7-8608e8dda9cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a85757f1-bf6e-436d-ba18-d85158872b01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15b52a21-fcde-4535-b9e2-bb4224ca7903",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "83000978-31e1-4da4-82af-c0de728449c6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c0501c74-9b93-4ef9-aef3-14d1c86b9a65",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1655d647-fe75-4782-a812-9fd2fb563fab"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "54b73a19-8fb6-40ad-9de0-f828effc4d9f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4981ab43-6c38-4415-8845-daafe1859b79"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2b39cb7-93f0-4e3e-b787-3d8035180c00",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cbfb74f5-8f07-4f66-ab78-241ad1decdb5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a8c972a-cc76-4c6b-a76c-a1f3fff71087",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fcc1457d-671d-4908-9f82-46e94ec339e6"
            }
          }
        ]
      },
      {
        "id": "89fe9750-3f7a-456c-bdc5-e97dd77c2b87",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "89cf9a79-dde0-4d39-8e9e-ba0e99a1fbb9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bfdeac16-5e40-4f4c-b822-4d32deafe37a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7cf69dc3-9a1b-4713-8686-a5c4bfcb4abc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b396987f-24d0-4e06-895c-0defb7e86569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e37bc75b-784f-4011-ac8d-2396cb0e49d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82f4b36-4462-4908-bf69-a6e223e67bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1edb72a6-d9f2-4724-b877-d02e17aee86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfd25b3-e042-4dd6-9e7a-1535bcd26456",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410e7971-0043-43a1-a24f-06bc5c4aadf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109953a3-ae14-4e29-9314-f2b2a29104ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbab0c1-8caf-4291-adb1-6ac3bd056052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e60f7c4b-5f0c-4ab5-b9ff-d9b4ff983f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fb403b-c648-4182-84a8-b1d3155c48b0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "303826a3-41c9-4ff2-bb3b-d590e4a60301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af678183-82cc-4144-9ea4-14130b821dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe9b947-b8fd-4245-af29-865575c1d840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be81f707-0247-45f1-b01d-9a5690d94e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cbc5b4-a999-42cc-b6d9-e48aeceec371",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9398c5f0-a9b0-4ca3-bbbd-5b6e53ac76f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb37518c-96aa-4bba-bebe-60421b8eb0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173c51b3-9efe-4007-be8f-f130d9750ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "562156ea-97d5-42fb-b4e7-68af1e0d05f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1692a6-ef88-4d4f-a725-7758b46b2a3e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fd469e-35c6-4e13-9ea0-e7035e0cd293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062f3a6d-c4c6-4876-acb4-c508a3092659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f3f1f3-d756-4844-b11e-e27d692c5da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0690a79f-5b13-41a2-82de-e7e4e040aff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f5e024-ea0f-44de-b78b-7947acb01f9c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffd797e-16a6-4fda-ae50-6857f1e25670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a80e148-e3e0-4aab-9a9e-4f4e2ac24ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4de9e9-6ca7-4bf5-a6dd-f201e28610f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1470e980-4614-4016-a225-0dce2df7428d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a9e174-19dd-4eff-9f9b-2f43489e60e8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb70359-6792-4b40-8976-807052207446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d6aa46-a138-45bb-a44d-3164f613439a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88db42d-2bed-43d7-95eb-cf58b0b1c8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd639cec-bbe3-4bf6-9c18-f627958abb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04fe43d-1bd6-4152-b5b9-0c8b228146a6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af910ca4-9fe5-4fe1-a528-c10cee4777ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df1e8d9-5f1c-466b-827e-58f42ac8d599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb86b4e6-5bd5-479d-bef4-c5ec94f7adce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffbde027-fec6-4ce9-99a4-c75d795f8403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ace76d9-1a70-45b0-84c3-c2c93e0eb9cf",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc91449a-b2ec-4965-a444-18b73d163ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2a18b9-08cf-4edb-a101-69cb9ef8ba08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9923b49-9e8c-4cad-926c-1c1d6a12de3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2a14e2-4054-4308-91d0-cc9c0926a02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4270d0a3-19c6-4d5d-a81e-929cb39237b7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c3b157-2845-48d4-86ca-838975411215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f760289-cf41-4770-874f-0e40e877e67f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f7421b-880c-49eb-8403-b44410b36eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9585543d-94c0-434f-bd22-d0b51c51bb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac844345-1800-44c0-824f-2437f3d761ee",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9d8941-1e55-41c7-b3e3-f25158c33216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0946e264-2db4-4d82-8834-9d143161a4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54a021b-8aa4-4b1f-a634-6b17d2f4fae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b338c930-1599-4619-be1d-f050c02c2685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab26121b-8473-4e3c-b2b0-0bc2194d325b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59565ecf-cf39-4f74-b426-56654ca6b0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc11931-f755-4205-82f3-fda8c933b0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53583214-eb74-4c17-b25b-fbe7017ecd1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78825a41-1f1f-4acf-b56d-f83cb196077d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81579c9f-2504-4fba-ac33-b7087eb3a82b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b909be-d3a9-4713-9475-3cea8b630131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0888c46-ae3c-477b-8e20-6ca4c0d53ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1079f26-fac9-4cc9-b340-3912e8085f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1593378c-1c76-448c-911e-2795cdf6f31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa684417-b946-4897-af44-8b030aca3caa",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f91e2e1-8fa8-4795-a285-07bab0f4f6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d021a1-a2a1-4bc8-8a82-475af27ce030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ef0237-3ed9-44ff-b0cb-2ae1426c7c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d9b46ae-a7a7-46c8-be08-c7b4d540f315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114a813d-f7b4-4107-a70c-08e4741133e3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c1f798-fb3e-44e8-96d1-2c38316caac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ac2669c-2b08-41eb-ad55-034fec8272be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1e0ac0-3f0b-4ff5-95bf-cd875d34d243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f66b93-d2d3-4435-9b93-7e8d598ba918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b93b9aa-691b-4533-8732-d3b4a147ea4a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477da433-423a-4840-81f5-f59258d7dfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a4265ed-66a6-462e-8b80-ffc39a43b8b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956e9f0f-97b4-4e4d-8adc-d9b743b90942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "45ac46bf-3476-4802-acdf-4b19e9fa90a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624daaa9-624a-4d1d-9ffa-f65671826075",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4185b15-2179-457a-8b03-f55099dd4c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7b1920-c039-4ae2-bd24-13837ba47922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7428848e-64a0-4bba-9548-be6d01dbc860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f7faae5-f6a8-42fb-af30-264573847f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee4c4a5-4e23-4fb5-902e-78730cf8c493",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64dfdd8-8221-448f-bff4-88f9dc83b59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efba8d5f-55ca-479c-a195-9f4bbbf0246c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f28e45-0968-4315-9ead-705bd561709d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "315fb4c1-19fe-4260-95eb-2c186b261c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4c8472-9470-4362-8f24-000c6b320050",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985c1a2a-8ef6-4c5e-b649-1c1331129f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b869695-d3ba-4206-a421-5d72d4676c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5799d4-b289-410d-b3ca-496545309043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdbe6009-61e8-45c3-a2ed-8b5c05a8e838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20ca11c0-95d6-4e54-9a92-16c4f5251c71",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cecb28f-1cf0-4494-8229-51ec31db967e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5013f812-e51a-4a25-b2d1-a428509239ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa57dc6f-3b1b-4422-be1e-03bd7233fc04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0133994-08b5-4ac7-93cd-411b83643d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9890f3de-366c-437b-b409-995ec1bebf73",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a648efe-bb7d-4897-88b6-126c36a269bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e60bc17-79cc-42db-bc5f-37fe7ec9c3a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb9bd09-9c33-4080-998c-636ca7ff5c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ddb2f3e-6d6e-47ee-9541-1c1219d52317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55484311-6333-43d6-aa66-a3a332b68675",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9589a3d7-e016-4829-9d04-5d469c6a7cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2879b64f-30d7-4ca6-add3-d1dc54a25ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc37a209-00be-4430-8abf-511b06f015f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f22d9499-4854-4e5e-816f-6bf8bb6b36c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b45a1aa-138f-490d-aa03-b4eef40fc244",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa8b385-d7ff-4d45-8f69-06f3f663ec36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a26b937-78e6-41e6-8036-93f4a99f6ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38fc8f0b-b0e9-467a-84fd-17ee50e11fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60216226-5e37-43b6-a64a-85f267b1e365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f7c52c-d6f1-46f9-a380-0e62629d35a8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fa9744-5939-46b5-96b4-398a3404a5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb235b04-037d-4b21-a630-8b5795d909d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d61adf3-2d37-419e-8288-dbcd48ff38e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f32dca83-8475-46d2-901d-b791348c9465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c478eae-0eb9-4316-840f-606343b9aab6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3e0cb8-1356-4add-ab14-1449a48e3984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee180d7-a305-4a75-b47b-a255c596ed72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de08d01-185e-46a2-ab33-84a74c91ad7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35e60ffc-e2f9-459a-aaa9-3dac6604f6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64363f11-ae3d-46df-b446-a5d5694f6da0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c1a832-9f65-4619-9b99-504126e7f96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f19c6b2c-0811-4f84-9cd7-551ddc098f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a03931-fd78-46b7-bb0b-3796daa3fd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b83f519c-d285-4c8a-acfa-6b6eea4484ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdf9638-0476-44c1-ba0a-27387dd1d280",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a79a1b-27ea-4315-9afa-b30b7d4c8842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe0c84a-6295-4be0-b1c4-62fe59fb2648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0a172f-ca51-4890-826f-b63a00f695ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "892f2b37-88af-4f6e-95d9-9498f0171784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c84fd4-35a0-4b3e-a2f5-977e787613bb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1223f5d-7c24-421f-9f39-946df14558a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e00df5ca-77f1-4ec8-8fc8-3632a5e1043f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba05bdb0-adce-46cd-900c-897fd67be7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "401bbb23-5f60-4cae-adaf-a99d02de82e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5643691b-398c-48eb-825f-452d7726683e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47a6f9f-81c2-4db7-bf9f-e3c70646184c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d15906b-8088-4c54-ae9c-75b27617395e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add6bd86-d8f7-4f20-9474-bc8062cb606e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76858594-3035-4122-8dac-8a06db3070a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55103e4b-a210-4c92-b8b8-84dd32a0db32",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d8acbe-ced2-4c22-96d6-a15ca9033c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd8e5a1-7f80-4292-85ac-fcc31af10d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b6dd37-b277-4323-a0e7-3dcca8f4a7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "144616f5-385d-4dc3-a184-3a9afee22fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d792df50-4433-45ca-99ea-5eaed4ed3b01",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11d9966-33ee-48b0-8dff-c036ddfd913a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6547ebc6-90a9-4add-b78c-f240c5edb1bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751ceeb1-30b0-4a44-a7ee-60d32d6cf1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c43bc652-6e09-4582-b78e-65320547ea5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f793d0-a15f-42c5-96a2-d232b2c85fca",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685cae8a-5693-4ce0-b0e0-9733fe5138b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02201d33-2675-4657-87b3-d6bf36571be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca513a1-6afe-4b2b-b200-4bd1b22628ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c0e11cf-d6f2-4915-8e38-7cd0c3cfaa5e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6b1a7d8b-2c61-42b5-a477-372ebc9f7937",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8ad4077-04bf-43dc-b50e-c16b778ec7e9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6d8968-9594-45d0-8ee7-f458a768c4bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0e7633-0649-439f-91c8-7655ca926a3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9196608-30de-42b1-8fd3-1cc4f166c41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc8ea359-926c-4a98-89ff-b46c08b43f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01f32ac-6631-4a07-b1af-de94d6cde1db",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdce4341-2477-419b-8838-ba8e528e8f1f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "60efcbf6-053b-4ccc-bbdd-af13c679f4a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b203deec-a0f9-46f2-83ba-0732e60a8421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c26907ae-ae25-45f6-9964-5e7852e86bf5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6996c202-f0cc-400f-a547-6acd28a64092",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53e56a77-26f8-4d63-9a68-50b5aff14be3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3700712a-e0bd-41f5-bc42-1f64cb9c8527",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05242c35-2ff6-4671-ada6-2b53bbefce00"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c875b6c-6cfb-4b1d-958e-d8436e056f71",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "38c32fcf-b63d-444a-bfaf-1d33074faef6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69af1cce-5212-4382-acb9-55264c3b704b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f9ed1fc-b1e7-470b-ba6d-949468db6c44"
            }
          }
        ]
      },
      {
        "id": "07b665c2-d497-4f44-b733-3fdedd511862",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "174855a0-07c5-4d30-9f54-c67c7fbc82cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a20ace52-a4cd-45a9-bd0f-4177ec30dea8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ab10a36d-cfcd-4e3e-8288-618f224b4f3a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbeebf19-251e-4f89-a5a6-83500c551b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a1086ab-efea-4c6d-add1-826c653bf8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4e2c5d-9436-46ad-802f-e816b39178a8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ef932c-8405-49e3-850f-10957e408d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ed07b3-79c5-4445-91bc-272cdad6338e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aea4208-7cdc-4f5c-8bc4-7b70113fda1d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc63cb6-c49e-454f-ab08-aa3a63097cd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cfef5b9-fc25-42a0-8d69-d46aea945103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f2314e-9325-44fa-a41e-ef55d80574f6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5653ef-dffe-4a6d-bf01-79cfd9a01d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea6fbab-d3e3-4687-8616-9d3ef716332d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc9a600-5f97-4898-a69b-5bfc759ea1df",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520f3667-b20a-48e7-8300-32c44a8bfa3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222ad864-c98d-447c-a411-d3393858a961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4c3a3d-072f-4f81-b7cb-be199e308627",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c45591-1277-4d62-b39b-fbe048cb31b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf148e45-56c9-4151-b2d6-559bb11f3600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d97e984-7f5f-4392-89c5-cfc03d6cb969",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4057f06b-6f97-4265-97ec-296964f23e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9a6498-7e2f-4647-8638-35c96cb18fae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e56806-b51b-4494-9091-ff7964e33c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ee78a5a-bb76-40fb-8235-4fd427644ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6d571c-b6a4-4483-87fe-bd4ff689e45e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fc4b7b-2d23-4864-88b1-2e8c008ea4f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5fd1876-7b52-4c8b-8267-e0cdf3bb032d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "946f2b7b-e159-466e-b14b-3e05256e3220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380b02fd-5b41-429a-9d22-c1e6ca69e2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fe286c-52e7-40a6-b2fa-15b2d126903a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95dd61c5-af9e-474b-bfca-4d86a7b7f2a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d3f4ef0-ae76-486c-900a-5c5dc7e51c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a86af9-6e8a-47b8-961d-29dbe0ee866e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd08b6ed-780c-450b-8db8-30de9a047367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f60790-ec32-4ff8-8d12-ca7f1bff36ce",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134e0daf-a615-45dd-9059-d99e1e24492e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "190b3ce5-0ab1-4508-b395-532312aa0e63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f537f05-b974-4f1f-a2a1-5d20160b45ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a1ee89-0b47-4605-9e27-f4126c33c5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb068f8-d3a6-4ea3-8765-016ffee7a043",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd0296b-58d2-4374-909b-c3e1d65fc564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6627f33c-ccea-4287-a63b-f8750dc698cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900fd0de-3618-45f6-a76a-eeb6e0b2406e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c67563-c5b8-4f24-9b0a-fcf11f03cd77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1270f0-b11c-40f7-a544-5268efe34eee",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd71e71-a38a-4dc2-ae63-a11b3fa1eeea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e5e0c16-e653-4925-b5ba-a8156a04b95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38282c0-df3e-4c16-a496-fadc263d13a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2fe0ba-320c-4a9b-bcf6-6f13b44dac93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9a4202-790b-44e7-af19-d4c6d328e828",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70018ea-6b7d-433e-b66e-dcaeeb495b9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eff2e6d-2792-4f5a-9a1f-2c2a00575a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7537a301-b41d-4e9d-ba0c-6b71e37d4bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b209c947-4d5c-4622-af4a-b46210a7d621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cac198-9900-4d8e-a80e-6f0c62b70d57",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0582aa-74bb-48a0-b92c-0e36726cbb48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fa42289-2fbe-4978-a955-56c373d76961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dece12fd-59ac-49d4-883b-1edd01a982e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119d40fe-4f71-40be-8508-f2a829c3fd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe24a5f0-e4e8-488f-b6b5-e0db1cad5bca",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3dd20c-3366-42bf-8a64-fd39206de6c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe8e5f8d-9f02-49b8-8bb4-9f467446e0d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32794a1-d79e-4b96-b9b7-5589d89a491b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ee940b-d0b1-4dbb-9817-503b114b9284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480c6f15-2360-4c55-af35-d44ab2549365",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e396b2b-0192-48d9-9dd1-e6c9b1b14abe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3434ce8e-68fe-4c69-b72b-caf6f4798b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f736ec20-7f15-4924-a383-8374a1cdb1e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d236c82-0beb-4f48-9143-6f73dac01c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2d6278-1f45-4f06-b381-abeb6b047f4d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5c6a0f-a36f-4f75-a365-fbbfff9bcf6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8350e30e-a231-43b5-9207-ae88a98207c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "954ed9f9-31e3-4697-8a1d-573e4ea0b4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "572876ad-73b9-476e-8e31-ef3167f0acf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cee146-ad91-4aaf-8d17-aece7a817356",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af2077c-74bb-4e77-a76c-5fb331044344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "265e0b54-a332-4fee-943e-3debb8d12a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5207e69-e741-4f46-9b26-18b25f988596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90cfb01b-5b3a-4e26-87e6-871596f688b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dad3b2-3120-4c08-9a56-5e1ae88ee990",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9cec5d1-d9c3-470c-93f3-5e7070917a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e811da8-cbdc-4450-a061-c7781584ce02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddf9c7f-9f71-44b9-807d-918106ac1ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099e87bb-2637-4620-b611-b9648141e916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda4f65e-367f-4a5d-9bd2-b4b64465af5c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbcb006-3aa0-4b8b-8d11-731b67ad0abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ccf037-f831-46a3-ac43-a42142a2bdbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e025d3f7-7ec5-4c49-ba48-f0b449fa8539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d515d31-6379-4c11-8d0f-da745d475a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1ead42-360d-4204-b6d5-49ad93bbd36e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1148d4e-3a0f-47b7-baa9-13b6c2a3e94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140fad6d-0be1-4cb8-9785-91d4b4a89b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a2a94f-b85e-427e-bf5a-72cba83c35bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3739a0-69eb-4c9a-87d2-301a234f6efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58027714-c4f6-496d-9f32-651e205669f0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e653ebda-465a-4d09-bd00-05f79fc9829d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e4b444-6961-43ce-81b7-734345905459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19eeb598-1892-4912-97be-5280b35898dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75108e45-5adf-4e02-9cf1-3288b4099d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2807c6ce-b98b-4e5b-bfdf-e64c2673adcb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4c7e65-d870-41b8-a846-8eebdf37d9f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f392a8-9b7b-4e54-af04-814293e119be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67920eb8-e721-4238-b9e2-ebf8e7c0fadc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea648ad-6d93-4eec-818e-59487865bbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40096389-bf63-45a5-9e14-bfa9963cdb9d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c98823-211f-4795-b324-b876991abde3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c061c1e-cce3-41e5-96bb-917a48689013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5485188-740a-4fe0-a656-3e6064fae03e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff5ae65-49f5-45ba-b7bd-62d5c398587e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d525b64-5eaa-476f-ab9e-c180b402f850",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9253b9-bcf1-4e70-a8b8-806685d21b67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7305e6c-a7b9-47da-84c7-801d8bf2a574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73dc20c1-e88b-4bb5-8035-bb0be6ef18f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2b6a75-54b2-4faf-86ef-d1ae5e87970b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1e35b1-c4f0-49b1-9096-42020cb62adc",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70d9a84-78d0-4fdf-8cf0-95326c762bba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4107185e-fa06-427b-86e5-f89ac204f4da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25459d8-8d1a-4811-9cf4-19e24036436b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c598c10-0122-4902-a308-370be8a3ceae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e055eb49-ff37-498b-9dcb-0605f983d5c7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389b0710-20f9-454d-93e3-2a7a1bc0702a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb3cff42-edd3-406c-b9b9-c677a4fbaef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fde759b-cfd6-469a-b321-d4e49b0e25fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61892f4-d121-46f8-add5-041b12f94c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617e91a1-7413-4e68-bbe8-4cf55b282372",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3570c4a8-66ff-4003-92c0-aa8df47b81d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e424d96a-4575-41f2-a99d-2e1ca3ca781b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2f9895-a9fd-4d33-8691-ce1991dad36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717d4868-8daf-4176-ada9-194b2e480b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f246ff8f-6ff9-486a-ad5d-466be43b1b11",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6186758a-7112-42d5-b3e1-ea9903596c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab370a6-36aa-4ed6-b2c2-983820362a63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82cb879-98f3-4db1-ac66-afaca459d8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1721a3f5-350a-4c73-bd76-d190f841e10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cb84e4-c07e-46d3-bd23-6aa115729625",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1baefd45-0578-4fc2-b5f2-9b38a6ee2023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d15dc04-e0e9-4cd0-b1a8-b38ed233e4cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0851cfb-bb81-46ac-9910-602685b94d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36408e01-7874-4a0a-bbe6-563e95270ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bf18dd-ced4-4a7f-b5fc-b7cd02505f9e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169b4dcb-88d1-4e3d-9691-cb5738d07ecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "155f992a-9221-432c-8939-5656587e22e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "713fef85-be91-4248-af90-1f400cd52a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5befa5ae-dcf2-440f-a242-d16ab3dc78cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9a8f19-3f68-4448-a2ec-72214e929bc8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4c3b64-5311-4088-a0eb-f86550d94e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a57b726b-b847-4963-a9a5-016b6d23f093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bde0e8-0f73-4ff0-8843-0216e20755f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f15ea0-0819-44ef-9bf7-83b082b56e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9904b79-2c1e-4e96-8eb9-fef6f2aaefe9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a0b62d-d87f-4688-b540-a3275945fdd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59ae96e5-18dc-4070-92cf-f8f6db7ef7b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70efe1b-e24c-49e0-bcac-858c5a73aa63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc08143-6dc3-455c-9674-be858549eeb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add01aae-d1f0-4f65-863d-1fd516fd009a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51423b9-0017-4657-bfb6-f0a587f0fcdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b669d400-46f9-44b4-bba8-00c1088224bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de3a65c-14ef-4917-a43d-fe5a9dead51d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "384fab81-4629-4c4f-ad04-b2c6d113cce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea48439f-12d9-4d5a-9eb8-ab6dceb54e1b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4a4e5b-af0f-418e-8095-a5a9b7e04fb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80526c78-3330-420e-919d-9f71b268ddd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72990ab3-502b-4d0d-9037-2d4499f133cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "622e77ad-05b4-4397-bf6b-b19c5cf35440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83122970-0455-47ae-8e11-d5dc84644482",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46381549-ab7d-469f-a9a0-7723d35c0b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511f8a2c-3d6e-49ce-aced-46aba840b2bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82ec6d7-0ca8-47a3-8576-d7b932043d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b67c3e-1659-42d0-bd61-521d76873ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d40c3cb-2c44-45dd-b118-1ca781727ae6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb786ab9-30c6-4c6e-b89b-a91aedc1ac81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d58a0016-720f-471c-b7e3-9db86a7c1ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1226ff4-a082-475a-8954-52a3a86a9e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa1b263-5f0a-48ed-b467-a88508dd520f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41102ed9-75ef-48fd-990b-f15d4fa74417",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742a96f5-83cf-4d73-a9e9-88c3c3f56a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69460aee-eea2-4638-a367-a49382bde1e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d69f9e-8009-484a-a897-f38644838baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2aada5f-6e4a-4214-91c5-bd0c11a54124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af189ac0-531d-4303-bf9d-7e53dcc22c59",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1cc572-f1c2-451d-9449-374f5de9189e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba474de-2f01-4723-b9ce-3cb6ee99109b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed629d56-fc38-40b9-a412-7d73f3ac05f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d920f0a-375d-4ad8-b495-61e6aa280622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4919fb95-bab9-4aae-b2cd-42abbe2b9bad",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b268f2-d11e-4b91-b0df-35797b118821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d253e90-b33d-4744-a898-fd07e1787471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe1dcfc-3ea8-4a24-ad66-6b5207530f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7cf6900-fe3f-41eb-8b77-e5ef146e7261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb78d11-3e87-431a-809f-fe050163aa19",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2f6af5-ac27-4041-9b26-08bc9c732248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f2ebd73-5221-4811-880c-bbbcd15c0e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca40f3c0-1255-4b57-b2c1-7ef30dde876a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cf17fc-6db1-423b-bbc5-d4f769ddafec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e15cac-84df-42e2-a627-19a412e541a9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4ee229-b70b-4e25-b7ae-f8e921dc845b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e436b6-4987-43bb-a7c2-5f462f95b4a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849769a1-38c2-4dfd-b9a6-7c9e05cc5aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5952149d-6980-4945-8e5c-672a4d216189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be622049-9a54-4dab-8b9a-2807ea5327e3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69e3b63-d2be-4257-93a4-2d525a8e4d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32396977-83f5-42fa-a4d0-f1a1a7d02ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90f0537-7ebf-43d4-bda9-312ddaa26f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11180f1-3bb6-4d88-af28-db60dd78f3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e78b9d-9132-4729-8b5a-1b3eb777d09e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7eb96a7-b757-4f8f-9ff1-2af64ab23777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5fd654a-dcec-40ef-856b-78d118d9d351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae61128-044e-48c2-b478-a81a920f770e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb38818-8ce2-4022-9891-38a8eabf4317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2858e796-35e1-4ebb-a3ff-1f1347cc2721",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "337654f0-fed3-4fff-9d53-3a4d9720feb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3854a8-4724-4031-80e4-e05a7bfd0e21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b9fac8-db68-4ee1-a6d1-068427e36374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47be9bc2-dc96-4bd6-92db-f5f75d4f795c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afc9563-076f-4ddb-8dae-232d492ffd20",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521a1d1f-9db2-4dbb-ba4c-99d33785ca8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c532f8-605f-4338-a9ba-503592a2ea9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012e14e2-152e-4a04-9260-dc597726d1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7d835c-aca8-4def-b8d1-e91ec770dbbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c17789-f0cc-492c-a723-520cf934d53f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b52969-45b7-4663-96fb-ebf8266883ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ceb06a-eef2-40f2-9dce-68e1e0de8ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d213fb-94d4-45cd-941c-ac79cdff90a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d418cad1-7b7a-4dac-b84b-210c6ba3b9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db133640-b71e-47db-8c5f-7fc53181115d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efec7c3-d324-4c50-a710-323a598fd4c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f09a767-2af7-4599-8758-f22be24670c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d7ac61-262b-481d-871f-1316f2dfe6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7352239-9f0c-48f6-98b7-334916f29737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5637e7-7a61-4391-87b1-9b8c5b36c019",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feac1d32-aec6-4273-8d80-5233a38a7c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42b5873-01bd-4de7-89af-d7806e2492ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbbadad-a166-4dbc-99d3-5fa3deadfb67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22bd0485-c183-4bd6-b7ed-dd3c805a0ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef1b2b1-582b-477f-afca-d7ef097f9ea8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89b61f6-4f0b-40bc-8745-cc789c6200f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a58ad2-a1fe-497c-9ef5-c15a006313be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e979f02-6130-4691-a70c-22cf8d884b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56c2e07-5757-4bfa-91cc-1da17a8d9f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47feaf1a-d2a6-4aab-bfa1-0446ca1e63cf",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e910f5f-cea4-4117-a239-4dd85c3d520a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d76e8c53-6256-40a8-848f-d012a51b0d01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c00aa84-cbb1-4e18-87fb-f08edf8d3457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1cf26a6-f735-4592-a727-fc7af952d694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5739d6-658c-49ea-8721-d03a15d26792",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8624b892-f7f6-4bba-8d54-46cc0b232179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b621482-9fc4-4e7f-96b9-594f8eeb6837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b237aa-ab81-49d5-a92e-84fb7bac0da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31b62ce-6f7e-4d92-943f-037b8abf2067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94457135-bc01-4ff2-9e3a-4ae3dd881e43",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df9e84d-9aec-4db7-86ce-781a58328467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80cfedfb-194d-487d-bba2-fa0b52b9887c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9323e0-0dbd-4daf-8c8c-0b8499cc9a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d677e5d-f12e-41d4-96f6-494208c8444e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2585b433-2c51-4951-bbe2-08ab788f9788",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b912a3f2-590d-4ae9-8d92-3ebcca57f4ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc7408a-e837-4415-8d76-a99c08d64995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16cc9192-6b63-40f6-9de1-9952f4a7b591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772a175f-f2d1-4cc9-8a65-7a28d4f2e3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022d0071-9a39-4f97-a025-e9d069090785",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3b8a90-295e-43c2-bf93-e75eeb6ca0f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c81b5761-0657-488f-aa39-fbcbdaecb390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf3851a-180f-4f5a-9d07-f66ccac74758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd72193-644d-41ab-910f-edcb329fae55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09ddb72-cc1f-492d-884f-7cf070b40108",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b1c0d8-d32e-425b-ab83-f1f96bd0da56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7429f64b-efb3-4c92-a282-726352130c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fb4443-be4b-47ad-8970-922650be8590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d85401-54bf-4720-b69d-d70dd79c3453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3404f2f9-8211-4bef-831d-c2194df5803d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e6feb0-09da-4e12-9086-7fc18595cd14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8bcea3-fd66-4b71-80ec-c2dd56388492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ee1c26-d71b-4c7d-8536-1336b619c911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d7a18f-e0d8-4b19-a05b-7b3d04bfd6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b2e564-a369-4a71-b552-7d26d8677a45",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d14d016-083f-4800-8400-17a55438f296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb19dd37-ff24-4191-bd59-9a03488cd918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0606afc1-0ee4-46ff-9d87-e1ec7137ba20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ac516c-837b-4a19-9d0f-429d7cb484d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2230ad22-d0ab-4198-96bb-534e11185ebc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25e183f-5b44-456a-a4e3-c84b4b88ca7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de39e3b5-8f20-4553-9197-7572e7176965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52533ba-f832-42ff-a6c8-16431547b8f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a1314e6-e91d-4224-968f-6ac9252de02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9547546-c521-4f35-932f-4b228ee7dda2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d36eddd-38c3-4b05-8bce-d063e5ba713b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b98efff-1b46-43d8-9c29-77a267c8c439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04c1ce4-e1e1-4cc3-bb5d-9b098d2eac5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039f0286-7afc-4f41-898f-e4f1e00506d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da946186-0709-4f82-9bfb-674d00049cc0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f2a824-225b-4268-91fe-856e9bb6b225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c28b89-d33d-462c-98c9-596d6711cc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed9bfde-92c7-4c64-b82a-6f99c97f1624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa03a3d-4ec3-4eed-bc2f-3f2a34d89123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1a4000-733b-40c0-971b-211095eb4c67",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6350af3-9a6b-4f7c-afc6-d3aa2e8c63c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c68fe6-8276-4390-a81d-280bae8413db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045cdea0-360a-484d-b076-12448a6adc2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a9c810-bbf0-4fc3-8a0e-e476fd2f38d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628ee084-f347-4d8f-a499-3b4b75fde4da",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10292df7-0bbe-4f75-9d49-515e14dcf6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f597ec-1765-444a-89b5-bc6a34568d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefe7479-8118-411f-aa54-3b75f309f128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "367e2f0f-7047-4a19-b3f5-d05e9a3d0908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10025ab3-ba10-4cf8-b259-60d89fdd5783",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b533658b-b5ae-415c-b2e8-5c7a8ea854a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c9f348-db7b-4c86-9b5c-064e3d677404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32eaf36b-667d-4378-aec0-b159e634168b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd0fdca-49c4-463b-aec3-78f9b2aa3b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cee694-79b7-49a6-bb97-b923cb3df75e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002ae86f-1ca3-4324-8122-25fa3f4a11d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98e31ec9-3048-4fb7-b3b2-3956ac9167bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a09488a-f65e-4a50-8557-34e90897ad4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e6af7a4-7e42-46c2-8aa0-fbb86426aa9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24dfefad-77f0-40bc-9573-a6caad88fe93",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445e6e2a-6a9f-489a-b9af-56705ec2ce9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3fb142-2dd8-497f-837f-14243b1e2a88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61550b48-408c-4c20-b3e1-952754e9bb96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69ec16e-b665-4f88-87d3-bb514830581c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27e78e6-a292-4212-be49-cef041194aa7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27341368-68ae-405a-86fa-3ec965248828",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5afe9a67-4db9-4bd9-ba5a-87b2b787db16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43244635-4945-4cd8-8325-062ada66a6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93083893-08bc-4ff1-9fd6-e89a80bf5208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2672653b-0a60-4ad1-8614-bc09f01f4f20",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f888bc15-507b-44e5-a7e8-d8443b569963",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47926b93-c146-46d4-8ec5-6d0490ba4e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab99fbd-497b-46a1-b1b6-fb5fcf218718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ea5893-ff20-46fa-b66e-7882d00e09a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57f8892-3c66-43cd-b1bc-4bf29d13ec3d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92438fd-5891-4385-b92f-06e926df2731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49f82d3e-8527-41f2-8286-0b518cad6d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745537f5-74fb-4240-910c-5e5505dc1347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee3598b-bc72-4ea0-8144-75c8cce6faba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26330bb5-e94e-49e3-90b2-90a7f605d544",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07ac9dd-b0a0-49f3-abb3-c39b20be033b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67694ee8-262d-4daa-bf6a-4a70bc4a79e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29fb310-a643-4445-8602-b65ed252ab98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7ee34c-1e95-4884-b4ea-fc8981b7de0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10299a7d-65d9-4400-8b75-9f2e2482633a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae1f0e2-7dd3-44a1-871c-198303171354",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "982853fe-cd98-4291-a4fb-70463b6a1a09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fff055-74d9-41b4-9f2f-c149951f6b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00d86ead-834f-4b72-937f-88344184960d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29856090-6255-440b-8050-1e798ced3a34",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2090a139-c78b-49e8-9d9c-1afe63254b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6861bd32-c63e-4b74-939b-e8698726aeb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cdd33f-208b-49da-87fc-2cb80ecc00eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460366c2-27d8-4328-871d-0dbaee365bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d43981-df59-4ceb-af40-af671d8e95e9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abcfe17-2248-4ec6-b0f9-8a6e9c15e62e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d7dce04-dca6-4e1a-ac56-65fcab7874d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a18d1c-bdab-4a74-8cd6-77c55b43efe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c078de47-99dd-461a-8468-1adbaf271e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14ee127-2069-4ce4-b3a2-41fb0cb867df",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f05933-6aed-46e4-9521-33c59caae4c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58d23276-8ea0-475a-b58c-86dc65fd4d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5e3bc1-65cd-4e65-993f-c8eda4e65309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e6347b-c674-4b7b-b386-5a0904eb50df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab1233f-b4c6-4186-beb1-bf484d6088cc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239d8b60-259f-46a1-871e-041fcb08e381",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80d2630e-a0a4-4b3a-aa7c-9e3812f901e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abd119f-85b4-4b12-8f80-44862a377c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f309d42-32c5-4045-9786-f525d1151192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7497b7f-32d6-43ee-8af8-74031ae1a421",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc94279d-dc80-45a9-a0c1-21451d5c6890",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ba92d24-49d7-4495-967d-cff69163a7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fedca6-b87a-4d8a-baa8-cc8ded6ff488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f735d83-ec4e-492f-81ac-4c3d66eb6fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00114f1-29d9-4ee3-8114-f0dc7ee3e5e2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271d9f93-66b5-4127-8cfa-9e469cdeba6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95c6da66-a829-477f-934f-2ffdec4e1af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba23e4a7-bfc1-4da7-b5be-dfab6c95f2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f20acd-029e-4fc9-a6ee-c6984d3d4885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372d34eb-a03a-47dd-ba0b-f982eeabb577",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5737c51e-e683-472d-bd79-257317a8cb1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e491203-2e7b-4183-ac84-8155c85e955f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "305a38f6-12c4-41b4-a7ca-9c698fb93f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2109ce04-75d1-48c7-9ca8-cc02d547112c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5a6d9a-4af3-4cfb-ab75-27d02b09635e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30efa6eb-d4b8-4655-ade3-63bf49b200ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "841fac19-6dbc-4773-86d3-37cc08f51fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7495173-1001-4e1d-b49d-cd68914cdaf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de8a488-d251-4acd-8170-a7eaa90edd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235cf676-0afa-4c6f-90d8-ebaab44d1dfe",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557391bf-2237-4714-b3b7-32d8c9a9c95b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "097b8189-1f53-4136-b853-fe134446838a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c454f3c-ee74-4843-87ce-9da400a6ac77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89385694-32cd-436d-a169-7386dc9e60a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c95ce52-75c3-4080-af08-0e652e0f4965",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fea164-eb38-4f47-98a2-1acd2169c008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9068e43d-d0d7-4335-bed0-adf89e9b0297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b678c9-ec98-42bc-baf4-27be12216f94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ecff92-61cb-4fb3-8c15-c8f725e1e449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b99a9a-4606-48a6-8979-af63140fe877",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da55950-27d9-47bb-ba9e-f95b6f86e937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c11933b4-8032-46eb-8450-41180b7f1820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "221b9999-af98-48e1-a64b-0655c4abdf18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c482f2e-5594-4e55-a967-e89cdcd0b066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542a60d9-8d72-4bc9-86a8-c9435d37c4f5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6b7751-a1fe-4be8-9117-ea7c64d008bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d52b2386-2ae1-4ec2-afdc-1b590d7f816f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c6d013-fb92-4c76-adb2-7c1f38b9626b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a5f092-12ce-4d67-8766-0fafd40dd69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9a92d9-ef11-4b04-b677-e05876f601cd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e38972d-b1bd-4ba3-a626-ff88990d19c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a1a49eb-0bca-4e3b-a2dc-5f39def10d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1749ef0b-e990-4e8a-96a5-c0b7b8056e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900b29ca-0e8d-429f-b1c5-165167af18c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136e8665-d7e6-48c6-ba0b-463bafcae0f4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686d930c-6296-4169-ba76-488f1bfcf047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2091484c-e61c-4d09-95c1-7408d6f9cf53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485a5628-5c54-4427-adea-8067927e9d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccff1b8e-20c1-491b-9e13-0ac1ee0b5529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d53db4-6fad-4066-8c5e-04af7281dcd2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945aea3a-ab3f-4f71-9ba2-a82b96db6d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b98180-46ae-4861-a063-db31029bd5c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513adab3-9ba8-4725-95d0-a7e2e91bb7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44463b3c-3642-43a4-872e-1ec84de93995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a311f43-3519-4a24-87c9-4a2951a4899a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521e799e-7e62-4263-ae8c-424f552482b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa73be76-fd9c-4934-a248-13545b053129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09620354-72e8-4082-ab02-fdfd1b048093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329350d9-7cfc-4468-bb10-46c637fe2aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d704363-76de-4b6d-82b8-1847d6feb831",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50779ac5-a442-4d93-aad3-763f02744290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fc05f36-0096-43e0-93a1-62e70b90927d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f36c1b-2e1c-41c0-b082-a279cdd06216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77182050-5c20-4d89-ad7c-2295b42ccc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a84dbc-911c-43cf-b349-4fc77fe6838a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010280a7-6e73-4809-9121-b315185735f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e8d139-d272-4e01-bf15-2d3a2c8a5665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4893fcca-ce94-40ca-95a7-5a221ab0d48f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3a5572-a31e-47d0-b9a1-ae623e0fa7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fe1d0a-a8ff-4467-bd74-745d5fa4201f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a518b80b-611e-4aeb-9549-62d4f4fde562",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c73a3cce-efc3-4c68-8b09-e9c74866f36d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "866fcc44-e8a9-4baa-aa10-583fb0e5e6f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017de543-6372-4492-ab6a-fd33f6acf9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe8fad8-1724-4481-9d3a-1f842b694ef8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282854b4-6971-4a73-9a35-4369acbd4d31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a08ad32e-a1ef-4dc8-8ee1-9abe03727065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52324e6b-4dad-4c1c-a505-a1f17078f56f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0c2e5f-dfa6-4a63-a3a2-14d0323c17f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fff72e-5431-42fe-97ed-12f86edef530",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7572c88-6083-47dd-99ab-a3b3076b823f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfcc6805-8fd8-4b7f-af28-bc56875cb6ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e771b3b-9eec-4a03-b79b-ac485125e7b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a84971-af3d-4b3c-b29c-45f64d9bc27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19e2c7a-0d19-487d-a74d-6f84eede7942",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d718435c-1e1c-4ad5-9b9d-24b4c01dee8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4d614b3-e33a-460f-8705-137e4ee7989e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e73f6a-9cd9-4aab-88e0-e97d9a7fd932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ed5607-4cae-4f87-8c83-24c7f4d28bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2201e8-c134-42e7-aefe-8ecf06531936",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390d5189-0b3d-4611-8ec4-8930c7e5b998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3776e69-5a3c-4db3-b8af-83b2a55a8ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57a4ab0-d5fc-4493-ac27-a76c18e85f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29835757-d43a-42dc-8d51-263635fcf691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c30d46e-ab59-42f0-a9c5-08afdc41cbce",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e6729d-8e67-479e-9373-8f2fcfcffe47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c74f4486-4374-4eee-bada-b3a7485de834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f958bad2-eb24-4ba2-8a0c-1a06be376b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff48899-6ed6-4671-9443-0030223aafc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db30905-ae46-4816-ae2e-3d32df5f3ee1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0b40bf-edbe-4597-b169-7ed3812da34c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2462b67-ccd7-47d3-bc9f-b58c1e001e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17c6e29-89b8-4fdb-a373-83d640f62dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee531223-e1c3-4306-b8da-35867c765df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8131ba10-b5b6-4a76-adeb-68f1eb07ba85",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532b3146-b2cc-4644-99a5-0e304a0e775c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c774f47a-f6c4-4c3d-b41b-7833ae559a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eedfb49-ba67-42ec-a3ac-7cd0bac9c96d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5023950a-67d4-4b2d-ba62-9654af7e7970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aec8c19-f39a-4bb9-a5a2-61530f082b13",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4b872b-ea39-4cf0-b848-03d20e326258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dabf14b-de57-4800-b92c-d456a7b71c0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bc2eb1-1042-4541-80d5-fda4a6e027a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1b6e32-2378-4070-b0de-d4feaeaf0229"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ee99383-e9c6-408c-95ea-b960576e10e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a6e9854-c33d-4760-a149-e8681948de7d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f00fd300-2aa6-40db-81a1-c32745852a8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62e0f81e-f6a9-47ec-92e9-71080248fe85"
                    }
                  }
                ]
              },
              {
                "id": "585c8607-a0a0-4af2-8f02-2739b854a9c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00c349da-9445-4c7c-9a41-642024a7acfb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3e7e39-af98-4199-9dc8-9c0542370076",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5f3b84c7-974b-43b8-8157-c3a44e0b3594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c27c8aa-2955-4162-8958-41f61442cf7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c242f66c-a2c0-4d3d-ad2b-1556dbbb9da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b19c9eb-303a-4c5b-a9f4-df6d13940664",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b77b096e-2709-4caf-9009-5e79614d17ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b64f04bd-f677-41d3-ac78-86419aa7ac4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "035ea199-8249-484d-bca5-de1ca42aaef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "349242ed-4f99-4540-ad18-d37d74870b1a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3aad2c29-c5e3-485b-950f-5a80e47cb4fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be1bd443-a4de-4e94-9110-07e342fe3acc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f9075f4-8cfb-4919-96ad-001d1c35026a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4facfd6c-ddca-408a-aacd-ece907095651"
                    }
                  }
                ]
              },
              {
                "id": "ba329ba6-ac71-4523-8b99-fc0c4792a670",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "86384129-a5e1-4a2c-8710-ad5075517e79",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814ef714-8c32-433e-b5f7-f192961972e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cbe0e1b7-bfd3-4916-8590-48b3888effad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a46cbc-ff5f-45c5-a10e-a219d9eae555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3bf279-cb88-4498-b591-1c8855361c9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4252cfc8-5798-49d4-896b-bb8b2601fdcb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b93681a8-6272-41b1-be91-40d0c150804c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b1c2f96-dfd8-4151-9f06-f980a165ee89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "daa76c6b-9ad3-4be7-aaad-b31084cbc3a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16747db5-681c-4088-b2df-05c5e58d574a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cd5ee53-cf4c-4340-a3b1-7c3c1567757b"
                    }
                  }
                ]
              },
              {
                "id": "eef76846-9aac-4eb3-870c-bbc1900ff8d6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "484f4c3c-acca-4b41-a323-13e92fb5bb24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "26e1edba-d1f9-4cce-bba7-ee2930cc9bc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e07b46bb-1031-404b-b7c1-e1025cf6627a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05d6e75c-39d5-462f-a06e-703c4fd66ca9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b94529e-26ed-4cb0-8625-30cc75376abb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ae61deb3-bc13-41a8-977f-8c51630f564f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75b1d644-984a-4c2f-b2d2-0ab581e178a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bad6fab-558d-4619-979b-8ee74d39dfe2"
            }
          }
        ]
      },
      {
        "id": "72ef2947-921d-4f8a-a8c3-6f11176566c9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f59287c9-c808-4e17-bab7-dc5b068e6a29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "54a453fc-f689-48eb-8d4f-8747b60d14f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44571907-63cd-426d-a7fb-db5543ea9a4a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e626a626-f610-4132-aa5a-ae4bd57b55cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "274ec653-5bd3-4ea3-89ab-ab28fd35933e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f8f85f-9291-4987-95ed-644f079bd4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ef3f69c-6f21-4716-b0eb-9c88b714f78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6c3216-20da-42e7-a1d5-77672b201bcc",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0455dc66-2db6-46bc-93f5-33e40aa44da8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4a246447-a370-4f7c-877b-0576dd3cac28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e54fd2-09f9-4d84-88c0-f1b6b48412bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad898e25-46ef-4bf3-b445-0e4fe82fee12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebf59c2a-d7a8-481e-a23e-2abaa027d14b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e052e73-b2c2-465b-a2e0-04b8b579979c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9edf7980-1f55-4194-87b7-6c9b1d6d2e9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3dd9955-7f91-42a2-96d1-42e43473c1a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef5f3631-8c08-4400-aca8-556b1a3da8de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3faf5e21-1be2-4fea-a50e-dbb2eff04a65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77d99915-c039-4838-b36a-72fb9c21e6c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6225dd0-3cd4-4b7e-9146-7ea9e7d3a22c"
            }
          }
        ]
      },
      {
        "id": "cee582da-8d2c-4a41-a15d-82416564062c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9301c7db-82a0-4650-a1f1-0c11ae2d319a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60576754-55fb-4909-aafa-7b87ba4af1c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9dc44e7d-c802-4f87-96ee-f5c00677261b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd21611-dbee-4036-bbcc-0cdaea76dc7f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c826c413-1940-4e6b-b8fa-5b28e08ac56e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47319bb6-5997-4efd-9716-ce31624aef0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b9d0bea-1c59-4f23-9f2e-06f839c045d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8484481-404e-4501-9c2b-10d32745e51e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4780e981-7c28-459d-aff8-2b61c147c0f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4a97ab2e-660c-4856-9b7b-0a0014161e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa1cfcb-eb74-4d10-86db-41ced7717a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03917921-d41a-44d6-9c2a-f5962c9c2d32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e8be282-6b61-4f7b-8e03-7e3362fd8de0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "689ad5a7-0514-41e0-a4f0-3d7aa74d9b1f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f9bafb5-7859-4ec4-a2d4-fdd8ce8190f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2210879-bb12-49db-a861-398fec298367"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e51be9f-8616-494a-90f5-94658daae460",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3bb21079-6cf1-41dc-af9e-3bd310ae4a75"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b4e5982-82e4-46e2-8e34-ae3e6d6331e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7661ed1-33b2-4414-8a17-464f42d7110b"
            }
          }
        ]
      },
      {
        "id": "a85afb91-5234-4096-81da-c608fce895e9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7fa3aafc-a724-4da9-97f3-69b9e95a70b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06df9eb2-54b8-4625-88f0-1c2725209e8b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec09d6dc-d052-4bad-a4ca-a310b0210aa0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a1791f-3795-4185-a89e-64e15cd96209",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f234b973-14e9-4164-8228-1ee6f3e034a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38abf4b-d46c-400d-bc09-c1b5db9ac5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca600c0f-3e66-4bca-a726-f95405a0e495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bef9ea-7b3e-40ef-a6af-f44249a5fc53",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c43134-3e5b-4117-92bf-d6f4c70ce723",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9535c7af-1ad9-4cb0-82da-4eab321f8d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "664c450b-dc72-40c2-ad6c-018312b97053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be8da18f-a364-42f0-af3f-f18635fee598"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56b29e86-cf19-49cd-8725-2003cdd556da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dca89e41-e0fb-4260-9f81-f44223b87b13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75e07e84-994f-4bb5-86a5-efee5e0aac4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe690e0a-b2d8-47e2-89db-4656caf30f8d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "519f8e85-a649-44a8-8daa-fa3c142b67fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "595e76f5-4f60-4726-81ac-6f7f6710a015"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f1a53f4-25d6-4dd4-8c1c-ebec1366d838",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c0eec46-3441-44c6-90dd-79f29b35e5e2"
            }
          }
        ]
      },
      {
        "id": "f15326a7-70de-4d9c-800f-191f092d084c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "727ee8e9-6058-4139-89a7-cf1f4b934524",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "760066da-32fe-414f-b44c-9eccf57c1899",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "518b28e9-aaa6-4b30-9717-c7d053e339c9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9cc12c31-465d-4633-b232-75bcf775deca",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df3a563a-db49-4c9d-a110-b56c0eae68f9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 107.87022900763358,
      "responseMin": 16,
      "responseMax": 984,
      "responseSd": 164.88545165393796,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673570406997,
      "completed": 1673570445771
    },
    "executions": [
      {
        "id": "679876aa-6bba-48c5-a806-613eee1cd558",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "66b79398-6ade-4784-be1d-855f7fc26198",
          "httpRequestId": "31acbf59-f2fc-4aab-b8a1-358e307baec5"
        },
        "item": {
          "id": "679876aa-6bba-48c5-a806-613eee1cd558",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c77149d3-3c07-4268-a75a-b1bebb5a0a9a",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 0
        }
      },
      {
        "id": "7ad3e0a0-10d4-4852-a19c-227838047fde",
        "cursor": {
          "ref": "738aa795-5b65-4f7a-9db1-9bc092792cdf",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e4b6dd18-3189-4c6b-b551-3162e5734343"
        },
        "item": {
          "id": "7ad3e0a0-10d4-4852-a19c-227838047fde",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "597ea208-a327-484c-8673-aea0b79cc2a4",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "825ddca1-f664-4ec5-9ad2-3cfe079bb5fc",
        "cursor": {
          "ref": "0b68269f-21dc-4a71-9779-c462e47ee163",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f9d4ab13-7703-4c91-a108-b0f038328258"
        },
        "item": {
          "id": "825ddca1-f664-4ec5-9ad2-3cfe079bb5fc",
          "name": "did_json"
        },
        "response": {
          "id": "84a21c3a-a300-412d-bcdd-b736bdc55f11",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d478e31-2880-4007-bcb5-c474e0f45263",
        "cursor": {
          "ref": "4a417586-522c-452a-bdb7-4d8dd4fad591",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7b0889b4-120c-4d30-ba65-16f0b4810678"
        },
        "item": {
          "id": "8d478e31-2880-4007-bcb5-c474e0f45263",
          "name": "did:invalid"
        },
        "response": {
          "id": "988422b4-e81a-4f1a-b9d0-84196c5c0c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d478e31-2880-4007-bcb5-c474e0f45263",
        "cursor": {
          "ref": "4a417586-522c-452a-bdb7-4d8dd4fad591",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7b0889b4-120c-4d30-ba65-16f0b4810678"
        },
        "item": {
          "id": "8d478e31-2880-4007-bcb5-c474e0f45263",
          "name": "did:invalid"
        },
        "response": {
          "id": "988422b4-e81a-4f1a-b9d0-84196c5c0c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0293fa-001e-41b0-b7af-d4968a2e07d6",
        "cursor": {
          "ref": "f05e6b95-4776-41bb-85f5-321fcf4a82a0",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4d356daa-1cc9-4e4f-8db0-2bd5e9016548"
        },
        "item": {
          "id": "eb0293fa-001e-41b0-b7af-d4968a2e07d6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e0dac6a1-0e92-4677-814e-3693ccd02d62",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee78ae6-4091-44a0-9350-7853917d403f",
        "cursor": {
          "ref": "ec555662-8a06-4656-88fc-52f0f4cc46c8",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e71b8303-e9f5-4bf8-8c7d-2c59a2a1fa7b"
        },
        "item": {
          "id": "7ee78ae6-4091-44a0-9350-7853917d403f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "199483d4-7e4d-4886-bd8d-70065a480026",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b078cb5-c19a-4ed8-bf75-42baeb8c9373",
        "cursor": {
          "ref": "9fe65e01-f506-476a-b470-2a2fce2a4ea1",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fa287b45-55c9-4a67-be4b-2c1c46b6b089"
        },
        "item": {
          "id": "7b078cb5-c19a-4ed8-bf75-42baeb8c9373",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ce1a3a04-4778-4ef1-84a2-1a4e9f5e7750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d5ae05-b7d5-48ee-acd9-d24971a83835",
        "cursor": {
          "ref": "d11e52dd-7435-4df3-89b3-8566520eb01a",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4e94c59-b8be-4802-b576-ea8b844d5558"
        },
        "item": {
          "id": "16d5ae05-b7d5-48ee-acd9-d24971a83835",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1c2378cb-7987-4ad3-ae6e-db85507f57e8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d5ae05-b7d5-48ee-acd9-d24971a83835",
        "cursor": {
          "ref": "d11e52dd-7435-4df3-89b3-8566520eb01a",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c4e94c59-b8be-4802-b576-ea8b844d5558"
        },
        "item": {
          "id": "16d5ae05-b7d5-48ee-acd9-d24971a83835",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1c2378cb-7987-4ad3-ae6e-db85507f57e8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c404a2-c9fe-4abc-9e35-639e1fba5acd",
        "cursor": {
          "ref": "16649691-a58e-4a7a-9804-c6076a36cd09",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "49883375-2974-49de-b35f-a440a23fc895"
        },
        "item": {
          "id": "b6c404a2-c9fe-4abc-9e35-639e1fba5acd",
          "name": "identifiers"
        },
        "response": {
          "id": "320d9ca8-9923-4766-adb9-ab9237932e8c",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85936a52-b0d0-491d-a108-c4cba3f29312",
        "cursor": {
          "ref": "5c42939d-18fc-4b6b-bbda-dcdd84aeaac5",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bbab3b74-25ab-4bcf-9f49-136afc30015a"
        },
        "item": {
          "id": "85936a52-b0d0-491d-a108-c4cba3f29312",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c26e1048-5186-4e4e-8227-1f471c5cc475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85936a52-b0d0-491d-a108-c4cba3f29312",
        "cursor": {
          "ref": "5c42939d-18fc-4b6b-bbda-dcdd84aeaac5",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "bbab3b74-25ab-4bcf-9f49-136afc30015a"
        },
        "item": {
          "id": "85936a52-b0d0-491d-a108-c4cba3f29312",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c26e1048-5186-4e4e-8227-1f471c5cc475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9ff72c-cc07-454e-9e8f-6098978f351c",
        "cursor": {
          "ref": "94346ec9-06de-47fd-96cf-0c4fa40d0108",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c3c6a08a-49fe-41c5-b564-69c78e93238d"
        },
        "item": {
          "id": "8a9ff72c-cc07-454e-9e8f-6098978f351c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4db5ea57-d7c2-425c-a384-d4406d582364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2df0161-d3a9-4a00-a7e8-25fefb6822d6",
        "cursor": {
          "ref": "93b0ae32-4759-4fb8-b37b-aa61fc331dbb",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "635d3028-f5d0-4b72-97fb-7cb222859b68"
        },
        "item": {
          "id": "e2df0161-d3a9-4a00-a7e8-25fefb6822d6",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "a360d25a-94d9-4f36-860a-1a7dda454bf5",
          "status": "Created",
          "code": 201,
          "responseTime": 626,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "adfe8c4b-a92b-4888-b738-551114d9915c",
        "cursor": {
          "ref": "7fce208e-ad6a-406a-8eff-a37747e7e23c",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "38ef1b21-ba64-40b4-a665-0d3375e7ad1b"
        },
        "item": {
          "id": "adfe8c4b-a92b-4888-b738-551114d9915c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2c0253d8-a118-476c-aff6-8fd91b2dfc9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97376683-cda8-4439-8a7c-bd9febda47f2",
        "cursor": {
          "ref": "11c339b2-8e77-4f61-9ce0-f1792716ea04",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "de3797c4-dd0b-471a-8f38-09ef1206ce77"
        },
        "item": {
          "id": "97376683-cda8-4439-8a7c-bd9febda47f2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "25362f6b-97bd-473f-bab2-ed0a39dbe6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d02a5ad-3a0e-49a1-a220-ca13908eea2b",
        "cursor": {
          "ref": "875460a1-f2fe-47a7-933e-7e9e2d6c36cc",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0be23a3f-caf9-440e-a0c5-29e2d774442c"
        },
        "item": {
          "id": "5d02a5ad-3a0e-49a1-a220-ca13908eea2b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "19584f6e-fd09-432d-875f-28e069c25c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71df37da-df37-4aab-9e9c-6f4012b0ad24",
        "cursor": {
          "ref": "19c2196d-d8c5-403b-b7b7-e303a76638f4",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c8692a6e-e0b2-4fad-a133-4bf0c3c417a8"
        },
        "item": {
          "id": "71df37da-df37-4aab-9e9c-6f4012b0ad24",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "746f00d9-2601-4f8f-90fc-166d2fae2019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efd278d-f721-4631-8b51-dd5805f5a6f1",
        "cursor": {
          "ref": "c3066889-a8f9-41d4-9c33-ad9fea267450",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d95bcd89-8c36-47a3-84a8-d4b49651cbcd"
        },
        "item": {
          "id": "5efd278d-f721-4631-8b51-dd5805f5a6f1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e35a86a8-1454-435e-8311-c2883b00fea6",
          "status": "Created",
          "code": 201,
          "responseTime": 548,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "35a84654-3bc7-482b-9d4f-1a15f14febf2",
        "cursor": {
          "ref": "45ca1856-0ffa-47d9-9d8c-959931b802b8",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d77563ee-24d8-4cdb-9879-ec94cc6f4fd8"
        },
        "item": {
          "id": "35a84654-3bc7-482b-9d4f-1a15f14febf2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fb399a27-295d-4477-8085-3648d87be95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bea9cc-286e-4730-a89a-76e8b0117888",
        "cursor": {
          "ref": "1875a838-53e9-437e-8720-abae68fb38cf",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e2111836-6407-4da2-a680-37e84c263d11"
        },
        "item": {
          "id": "e6bea9cc-286e-4730-a89a-76e8b0117888",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "96d7b491-d529-48bd-a8aa-db45160a6b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e938a897-3e55-46fe-9105-4c3b60e376a3",
        "cursor": {
          "ref": "469985c4-df1d-4c75-ba94-ea76f779b64b",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9d208e7b-c222-4795-97d6-9e64c42bfe85"
        },
        "item": {
          "id": "e938a897-3e55-46fe-9105-4c3b60e376a3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fa645dc7-0d6a-42db-9252-f6f448e10eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc21b47-377f-4ad0-9b96-07ada88f84d4",
        "cursor": {
          "ref": "766c6a3b-9c70-4ec2-977f-9e0482fafdd5",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ec2672b8-895b-4a0b-ba66-8a35f201074a"
        },
        "item": {
          "id": "7cc21b47-377f-4ad0-9b96-07ada88f84d4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "36768f63-eae9-4610-9ca8-629de9b54f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd25a3c4-8946-4d61-9017-d1e64f28bd69",
        "cursor": {
          "ref": "c6839a86-cd18-49f4-9318-ea96733b6d06",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b46a3d49-bd63-45a4-a311-5dac1bafa848"
        },
        "item": {
          "id": "bd25a3c4-8946-4d61-9017-d1e64f28bd69",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "67a5f324-44ee-4a78-8b9e-8f888a1e14d4",
          "status": "Created",
          "code": 201,
          "responseTime": 515,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "f772e5ef-0cb9-41fb-96ec-a33f34eb8e88",
        "cursor": {
          "ref": "24fde0ed-0984-4977-b0f5-fb452fc9617c",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2dc6e544-0a5c-4596-9425-1f4354523ea0"
        },
        "item": {
          "id": "f772e5ef-0cb9-41fb-96ec-a33f34eb8e88",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "268d9821-c87a-4a5f-9347-585cca844922",
          "status": "Created",
          "code": 201,
          "responseTime": 984,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "dc62d112-bae2-40b3-9f60-bc39db29c0dc",
        "cursor": {
          "ref": "4c3feb23-48ca-4509-876b-812b63cc9366",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9ad1df41-f2e3-408a-a89a-a653be6e4d7f"
        },
        "item": {
          "id": "dc62d112-bae2-40b3-9f60-bc39db29c0dc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b7310cf4-7ea8-4abc-8f25-3a0f4d391c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a37f9e-1c92-49d5-a071-ecd96ba2a0e0",
        "cursor": {
          "ref": "13f01f6d-8419-409b-93d4-b32a8caed927",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1d7b49c4-dd09-4daf-8922-9baa461b7c8f"
        },
        "item": {
          "id": "57a37f9e-1c92-49d5-a071-ecd96ba2a0e0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "974e1fa0-3991-4685-b5b5-8af3ac1994f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba41c156-e3b2-4c8b-9b9d-6f07c2c7f3f1",
        "cursor": {
          "ref": "b17f6865-66cc-4b5a-a81e-e8515ad30f20",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f3de6824-1fbe-4f6e-af4c-0823d1122c4c"
        },
        "item": {
          "id": "ba41c156-e3b2-4c8b-9b9d-6f07c2c7f3f1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e7b647db-efda-4dfb-ba0e-fe3137ac8f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cec50a8-ddce-4fc9-9e2f-c194e3a11ab5",
        "cursor": {
          "ref": "bbd912c2-c315-441e-a623-e6ed4fd213bc",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "90da11a1-bf1e-4571-acb3-162fceec0f41"
        },
        "item": {
          "id": "6cec50a8-ddce-4fc9-9e2f-c194e3a11ab5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f23d63b4-36fd-432c-91d3-73c8f551a0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad57bec-73dd-4d9e-a883-406ca21bc38a",
        "cursor": {
          "ref": "eeda8458-6162-428b-97fc-b4519c64e75e",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a4b88055-337a-487f-b067-d3158c34d422"
        },
        "item": {
          "id": "aad57bec-73dd-4d9e-a883-406ca21bc38a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "10fe2627-505b-4443-85aa-9c82e0b02c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21cc741-d214-4d86-9728-efd69cb5df79",
        "cursor": {
          "ref": "230f712f-f2f9-41d6-8f7a-1206365c0bab",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "77f43753-15f0-4ce6-bfe6-4a3c8858f217"
        },
        "item": {
          "id": "a21cc741-d214-4d86-9728-efd69cb5df79",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "15a40288-c251-4f2c-bd95-a8aa1ee0e34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08a3436-8a53-4c71-8def-ea607a98a562",
        "cursor": {
          "ref": "8829936f-b8f3-406f-b271-604f1887e144",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "506ce12f-3c36-4b5a-8705-0a029382a9f7"
        },
        "item": {
          "id": "d08a3436-8a53-4c71-8def-ea607a98a562",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5c42a4a9-c295-4cd7-ba7f-bf0a4c0db3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b44b491-7c43-4ca5-bbc7-a15b07a0baf9",
        "cursor": {
          "ref": "fea2e117-962f-44e2-8ebf-825f061da4ce",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1eb733d2-876a-4ce6-83e3-5df19f85d515"
        },
        "item": {
          "id": "2b44b491-7c43-4ca5-bbc7-a15b07a0baf9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "69dd5866-2303-41c5-b89d-a91b01eb8ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6132fe-19e0-41a5-9ffc-9f9a73d62b93",
        "cursor": {
          "ref": "b330c2aa-55fb-43e2-8fcd-2e7ba101c741",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c686f637-69e2-42ae-9321-52a13e52abf0"
        },
        "item": {
          "id": "ee6132fe-19e0-41a5-9ffc-9f9a73d62b93",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5093a0fe-72ab-4a4f-8668-b9e18169a9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c3e641-2bb6-480c-a1a5-e47db48e2c33",
        "cursor": {
          "ref": "9be105d7-b4ba-42f0-8acb-e40f8ffd8331",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b735545a-de89-4e97-9bd6-6da6542e39ae"
        },
        "item": {
          "id": "b4c3e641-2bb6-480c-a1a5-e47db48e2c33",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d2eeaa3f-da7f-4930-b42d-e805fbd5d7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66ffbd7-1fd3-46ea-ab16-f607858a3757",
        "cursor": {
          "ref": "6bf2fa9c-640c-4a80-9cd9-86bd93fd5c78",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "759bb075-04d3-45cc-b92f-68feadf190bc"
        },
        "item": {
          "id": "f66ffbd7-1fd3-46ea-ab16-f607858a3757",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ff65966c-1f15-4b54-a363-dd8129e13c48",
          "status": "Created",
          "code": 201,
          "responseTime": 643,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6b54fd95-4593-4652-8417-5dc9be4acff0",
        "cursor": {
          "ref": "d901604e-3f1c-4462-93cd-b10abeaab48c",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d5a35368-adb7-4b61-ad26-9d646d456361"
        },
        "item": {
          "id": "6b54fd95-4593-4652-8417-5dc9be4acff0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ed89eae8-5687-4328-997d-3fce4c2291b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4382a254-2f39-4c71-91a2-fd4f5d1d9031",
        "cursor": {
          "ref": "56fb032d-4de7-4223-a54c-b6b4f7c5847f",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3f558ee2-5f29-4b15-99a6-4ff3f69c5dbe"
        },
        "item": {
          "id": "4382a254-2f39-4c71-91a2-fd4f5d1d9031",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ca3824ce-134a-47d9-85c2-ae9fee279b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c971c147-af04-43a2-9edf-e1354ba02028",
        "cursor": {
          "ref": "2ddfa214-2ad7-4436-bf3d-47e0897e23d7",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2a489585-6e13-403a-bf77-1d0484d89648"
        },
        "item": {
          "id": "c971c147-af04-43a2-9edf-e1354ba02028",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "300522d2-92f9-4b48-922c-8fb48708a4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c88e80e-560a-45bc-a6d1-00096c8fb2cd",
        "cursor": {
          "ref": "79c8b8d3-1cff-4e9d-b493-08d07b1f8851",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "03601a27-d9d9-49e3-89a8-8f0adb2450c2"
        },
        "item": {
          "id": "7c88e80e-560a-45bc-a6d1-00096c8fb2cd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d83a96b3-8f58-4a55-9165-00e28e6d56bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0658b60d-410f-4639-a257-0783ea11e1c6",
        "cursor": {
          "ref": "61b87278-9e17-438f-80e5-bb5e17b008ab",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "722a0e0a-960a-46ac-b97e-b76e07f283d9"
        },
        "item": {
          "id": "0658b60d-410f-4639-a257-0783ea11e1c6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ddc8eeab-2eee-473f-b820-58ce03819492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2f17f1-f786-4962-8a80-c8a2ef31d390",
        "cursor": {
          "ref": "5b56fe93-3608-4001-973d-304e5ead7266",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9f43e865-4a0e-4b93-8365-66173f3cdf82"
        },
        "item": {
          "id": "5c2f17f1-f786-4962-8a80-c8a2ef31d390",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "23debdf1-2f29-4e98-99ad-f7863afa121c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f69f949-c808-490c-b2c1-692f0416304d",
        "cursor": {
          "ref": "89c65bf7-cc1c-43fe-a9a1-ba952bccfc32",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c1b1788e-18a7-482c-851e-b830b189282b"
        },
        "item": {
          "id": "0f69f949-c808-490c-b2c1-692f0416304d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "663a8ed8-c5a9-4bb9-a5bf-e04b14703260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c63dbb67-f42c-423e-83b0-a9b7f2a3920b",
        "cursor": {
          "ref": "66dbb3f7-03b3-4757-b5e2-a7d1fad99fe6",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "68f77d1c-30bb-4f29-839a-4d036319d2a3"
        },
        "item": {
          "id": "c63dbb67-f42c-423e-83b0-a9b7f2a3920b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "089bb358-d00d-483b-a26f-a5e156c76c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddef75e-cbfa-4b10-8ca7-ce996e067c16",
        "cursor": {
          "ref": "e222614a-d692-4ed7-91aa-3f67ff4b75b2",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1175557e-c871-42ca-bd4a-3b75ea0759bc"
        },
        "item": {
          "id": "6ddef75e-cbfa-4b10-8ca7-ce996e067c16",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c2cd66b9-2e45-4a1d-90e0-fbce49b35241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a7eee7-1bc1-4995-b7a0-3f4eb718cc44",
        "cursor": {
          "ref": "58c84d8c-25c0-4800-9f2d-9cef46882076",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "16fd3db7-438a-483d-aef4-12050dee74e7"
        },
        "item": {
          "id": "72a7eee7-1bc1-4995-b7a0-3f4eb718cc44",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6645e6b0-4085-49a7-8a39-a28e4dcd5f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7c3574-6090-4167-8499-41fdef73ecea",
        "cursor": {
          "ref": "eaa6b8a4-8048-447a-ac1e-d33914d00e9b",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "098d61ac-9857-44b6-abbe-70c3bc706f1f"
        },
        "item": {
          "id": "ca7c3574-6090-4167-8499-41fdef73ecea",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0c351b44-c102-47db-9053-387e0221c7ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a876a2-7465-4d8d-a31f-15b4a1f5c866",
        "cursor": {
          "ref": "a9988c42-4934-403b-8405-a1e3ba90adc2",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e2b29063-01fa-4909-9904-87828093b533"
        },
        "item": {
          "id": "80a876a2-7465-4d8d-a31f-15b4a1f5c866",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "814defd6-6348-47b0-8ce6-231a1c5df8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37446234-a5f7-4c62-afd5-1aa0ead51013",
        "cursor": {
          "ref": "81fdc317-b23e-4e63-b789-e4d82972c32e",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "46ae50de-18ac-4276-aba5-3dee79754f04"
        },
        "item": {
          "id": "37446234-a5f7-4c62-afd5-1aa0ead51013",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5f129ca4-c18b-4914-ace7-37c593ad0220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ed378129-5df5-4efe-843d-ff34f00bdaeb",
        "cursor": {
          "ref": "47008518-3bef-4840-8400-05694bf9311e",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b6a3999b-4836-4c03-bf2a-1c3d36f256e9"
        },
        "item": {
          "id": "ed378129-5df5-4efe-843d-ff34f00bdaeb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b2cd9986-00ac-4cfb-84eb-0b742dbca6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111c2b7b-cd4a-471f-9d87-97484756a711",
        "cursor": {
          "ref": "ee561387-f79b-4d94-a777-d4574485cbd0",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4281c3d4-9692-4fa6-a865-f3203352c06a"
        },
        "item": {
          "id": "111c2b7b-cd4a-471f-9d87-97484756a711",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4bd1518d-a594-4c10-b65f-fc134f9c7a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e99258-4e83-4d33-a672-8b322f90ec33",
        "cursor": {
          "ref": "5c599ac6-211b-48b7-9f6e-91fe763832fb",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bce6f5bf-48d8-4a11-8fb3-d0f1c032b001"
        },
        "item": {
          "id": "48e99258-4e83-4d33-a672-8b322f90ec33",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2348b866-713b-4c24-ac58-9c54c99a155e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b617397a-ee87-4d62-8f7d-8095fa89fe6d",
        "cursor": {
          "ref": "e8131721-8541-4fa0-898b-f11eb374211f",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "af940668-2470-405c-816d-70c69da91ff0"
        },
        "item": {
          "id": "b617397a-ee87-4d62-8f7d-8095fa89fe6d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4f14f548-3520-47a7-b29d-bddcbd340be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e8d539-6bc9-4dae-99cf-86c20d91041c",
        "cursor": {
          "ref": "762789eb-befe-4dce-bb8f-3ecd7563d6f1",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7b4cabfb-425f-47cb-9835-a556c0fb5b9d"
        },
        "item": {
          "id": "03e8d539-6bc9-4dae-99cf-86c20d91041c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "13c786e9-4e1c-4952-b9fe-bc46df84cfbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75587d4e-cdd1-4551-9c82-5e5f42e68593",
        "cursor": {
          "ref": "7468ae5a-ba30-45cb-8a19-c36731fa8a68",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "39deca74-6f58-47b4-9919-8acbf3da9d05"
        },
        "item": {
          "id": "75587d4e-cdd1-4551-9c82-5e5f42e68593",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6631d876-1b9e-4b63-bd74-b03b0b8d4414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc9234c-8ae4-40cf-b82e-75080e2650ee",
        "cursor": {
          "ref": "cb7b6c43-bcb8-4976-9686-10508b16313e",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "590bf242-99c9-499e-b737-235026e70db0"
        },
        "item": {
          "id": "7dc9234c-8ae4-40cf-b82e-75080e2650ee",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "64434301-2eaf-4ef0-9b9d-6cb0d3502815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "4cbf80f8-1cab-43a2-b4d7-280d8eae8af8",
        "cursor": {
          "ref": "b4345a63-ca34-47c7-a8e5-a76e6220cd37",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "30cfaff0-708a-411d-8b7e-878f1c74589b"
        },
        "item": {
          "id": "4cbf80f8-1cab-43a2-b4d7-280d8eae8af8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3cae9ea4-f213-469f-8590-3f5164f51c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b89af4-2a81-4b8e-bf90-92cbd3f0ea19",
        "cursor": {
          "ref": "234628dd-83dd-498e-85ba-2c2cb1dceab7",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b49a4980-2620-414d-bd57-126052588adc"
        },
        "item": {
          "id": "46b89af4-2a81-4b8e-bf90-92cbd3f0ea19",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9da25de3-a534-4c70-ab3b-cbda13be8df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a4f980-702e-40ca-b44c-1afe15c157ae",
        "cursor": {
          "ref": "77cee32e-e6f7-4800-90ac-c6a4045b75f2",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f2862b89-791f-446e-87be-1f11ef887d76"
        },
        "item": {
          "id": "73a4f980-702e-40ca-b44c-1afe15c157ae",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "312ac4e0-2e02-4354-9c13-9395153bde5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22283e54-2d2d-4bd3-9d53-a28af707cb6e",
        "cursor": {
          "ref": "41ebeb32-4b69-425f-968c-c37300014363",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3b6cfbf0-9d2a-45f3-b638-2ac9fff35b38"
        },
        "item": {
          "id": "22283e54-2d2d-4bd3-9d53-a28af707cb6e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "aa89d83f-dc9d-4d07-967e-fc9b5432ec35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2b4949-0a87-4b7a-b7d9-c9cea2cdcf0d",
        "cursor": {
          "ref": "8a5ca8d0-e11b-42ea-8c34-e9bfbcf416e9",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4d808a05-163b-4ef5-9995-f4fd8b848226"
        },
        "item": {
          "id": "de2b4949-0a87-4b7a-b7d9-c9cea2cdcf0d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ca4b108f-4f05-4b9e-8331-7ce09c3e2ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e10b45-9f3d-4210-88a5-1cb67368c82c",
        "cursor": {
          "ref": "14234107-ec38-468c-884f-c0731880d871",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "06bdf0fc-b216-4f30-9ecb-f56556e18e57"
        },
        "item": {
          "id": "07e10b45-9f3d-4210-88a5-1cb67368c82c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a7656125-ac15-49cf-a1f6-de5d27b74ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618392fc-ff64-44bc-8aac-11c828be4da5",
        "cursor": {
          "ref": "8a331403-2136-4346-b1e7-c91c25a37f70",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5f414cfa-1f8c-4a46-8541-7514599f2f0b"
        },
        "item": {
          "id": "618392fc-ff64-44bc-8aac-11c828be4da5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d81ce950-eb59-4b17-a463-87e04e61f742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bd3b4a-1ffe-48bc-aa6a-b4062eb15231",
        "cursor": {
          "ref": "991fb895-2931-4a2a-a135-ae6bf5d56747",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a7d5b4cb-6c1c-4f67-abc0-c073bb39cd8c"
        },
        "item": {
          "id": "79bd3b4a-1ffe-48bc-aa6a-b4062eb15231",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e15c9884-e3d1-4979-830f-bacce7b33ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c102bc3-8dc5-4128-bb2c-4bb19d1038d9",
        "cursor": {
          "ref": "14bd5e5b-cec1-448d-b2c2-822a7b7ff865",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "07e1bfd2-6b3a-4407-bd94-0ce337ad4e48"
        },
        "item": {
          "id": "9c102bc3-8dc5-4128-bb2c-4bb19d1038d9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d4a8769c-6ec4-49fa-92bf-31a65d08a7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bf35f0-0abb-4360-a086-db6681eaa113",
        "cursor": {
          "ref": "80b7c0a0-bfa4-4476-b2a4-7e14d5a0241c",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fd0528d4-70a7-48ef-a8d7-77d178cb6229"
        },
        "item": {
          "id": "14bf35f0-0abb-4360-a086-db6681eaa113",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "12bfab2d-8770-4af5-9045-4b00dee475f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf02372-3447-4935-a298-2e752d17d985",
        "cursor": {
          "ref": "3e46965a-5057-4a9d-a30d-9bbf051799ee",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bc360b87-c64a-4d5d-ba41-cd8a1ff24772"
        },
        "item": {
          "id": "7bf02372-3447-4935-a298-2e752d17d985",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "826c4796-5ac1-4cdd-a92b-97c34fef6a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933465ea-8e36-45b6-8e7d-15540789d914",
        "cursor": {
          "ref": "01c1b78f-5af1-485c-a135-527b222c9546",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1d8b673e-3902-43b1-8ae7-cf2754a79e0f"
        },
        "item": {
          "id": "933465ea-8e36-45b6-8e7d-15540789d914",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "525e219a-e1c8-45fe-b1b8-baf11e06af6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b744b1f-2e71-4a6a-98ad-e715f7185570",
        "cursor": {
          "ref": "3829b404-cc52-4261-97d2-5baa365c25e7",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9358978a-8e0f-4bbf-b590-a7db3b24dcde"
        },
        "item": {
          "id": "5b744b1f-2e71-4a6a-98ad-e715f7185570",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a708c52d-37e9-436e-b907-ec32d2728201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3db7f93-f55d-4978-9109-c59bc69dff86",
        "cursor": {
          "ref": "7762f345-4232-4336-9896-7a0105f76539",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d0d333c3-a1b9-4689-90b7-1059dba2bae3"
        },
        "item": {
          "id": "e3db7f93-f55d-4978-9109-c59bc69dff86",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ef093134-3c09-453c-b02e-5258bb684280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739bb28d-fcde-4f26-baa4-bc242a753d02",
        "cursor": {
          "ref": "c7cca2f7-c6c1-4e36-97bd-f9a7a3643b20",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ec63bf5d-e1dc-4934-8b0f-214c2f9609d5"
        },
        "item": {
          "id": "739bb28d-fcde-4f26-baa4-bc242a753d02",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9fdf43c6-41fd-4119-b47b-0b4c60d7641c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22b2f17-8887-4aa0-ba30-912d99fa6ea0",
        "cursor": {
          "ref": "00a4c289-676e-45f0-98ae-c687582945a8",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1ef266d2-053b-4d65-9173-9ae7efd760b9"
        },
        "item": {
          "id": "a22b2f17-8887-4aa0-ba30-912d99fa6ea0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ecf5d6dd-116d-49ac-893c-e9d77bffafd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f303fb1b-449d-4561-ac84-15d7c1aff5bb",
        "cursor": {
          "ref": "54f464ac-6b4c-4c9e-96cb-09de17804684",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2e4cade0-50e8-4ff7-8020-e2a5d3f5845d"
        },
        "item": {
          "id": "f303fb1b-449d-4561-ac84-15d7c1aff5bb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ad6adf16-0eb0-43e2-ac39-dec1c5d30b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3705112-2870-46c6-8762-bc3ffe98166e",
        "cursor": {
          "ref": "7ec5a5b7-3469-4d4e-8d43-079e0cfb89b7",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9dd85ac1-4445-49cc-9632-7664b63ee320"
        },
        "item": {
          "id": "c3705112-2870-46c6-8762-bc3ffe98166e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "869703ab-bb40-4c7d-ab50-887f728b223b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d09f9d-a612-483f-ac67-ec18ce5d82c5",
        "cursor": {
          "ref": "7e5d8f8b-4a45-48b3-96bd-b916f28be077",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "97f53417-5f85-4b6d-ac6a-754b41fcc84c"
        },
        "item": {
          "id": "07d09f9d-a612-483f-ac67-ec18ce5d82c5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7dd59e0a-fee6-43f2-9fe7-abc732a875ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188d51e9-9938-4bf2-b8f6-5eb29517eab2",
        "cursor": {
          "ref": "1ed1e1eb-726a-4d9b-b9f0-d4f27902af36",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "63d6747b-0c2d-41f8-ae8b-c92b4d8c13bd"
        },
        "item": {
          "id": "188d51e9-9938-4bf2-b8f6-5eb29517eab2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3f6dea12-3008-486a-902c-e3de95e59af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ed9e52-43dd-474b-8f09-d10e5e9c903e",
        "cursor": {
          "ref": "3d6f4b34-316e-4147-a895-d6a4a42a56c1",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8b485639-8c63-492c-a459-63353b00a15f"
        },
        "item": {
          "id": "82ed9e52-43dd-474b-8f09-d10e5e9c903e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e9bd05d3-2558-4fb9-807d-7737216a551e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb1f04e-a21e-41fd-a5c2-57da3bc1ab0d",
        "cursor": {
          "ref": "525f76f7-5d37-45ad-92e1-2e161dd555bd",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1ac36dd3-d84c-49ff-b309-43b29bcfd903"
        },
        "item": {
          "id": "8cb1f04e-a21e-41fd-a5c2-57da3bc1ab0d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0830ad09-fb5e-49bb-93a1-42771a32eba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd0b978-040b-47f5-940c-edef4e1f1060",
        "cursor": {
          "ref": "0bb93d30-456d-41a8-ade3-aa631397b224",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "64113722-1b8a-4724-b0ab-d46508b900b3"
        },
        "item": {
          "id": "fbd0b978-040b-47f5-940c-edef4e1f1060",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "73fccaa8-7db1-4c51-8ab7-d4c469ebd996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac855929-1af3-4916-9df3-bb32adbcbb21",
        "cursor": {
          "ref": "029f80ab-19ae-4c15-8277-e3fca7b2c616",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "da8a510c-7eae-4b3a-938d-c9a0fc8afe35"
        },
        "item": {
          "id": "ac855929-1af3-4916-9df3-bb32adbcbb21",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3ddcb1bb-e951-47f9-8d0c-4c03d0affba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c43209-0187-49ef-b1e9-f72a8ad4ea92",
        "cursor": {
          "ref": "4674f215-cfc4-41d4-8628-404998d29b46",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "088f2734-ff3f-47e5-80b5-032c63463c60"
        },
        "item": {
          "id": "d6c43209-0187-49ef-b1e9-f72a8ad4ea92",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c7314020-9fe4-42af-95bd-e9cf8ed2585c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8542a29-6ed5-4219-baa6-09f56c03e286",
        "cursor": {
          "ref": "45937000-76ae-48d3-8123-331d503558a3",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6bd56356-27a9-4118-a7fe-6220b408a966"
        },
        "item": {
          "id": "e8542a29-6ed5-4219-baa6-09f56c03e286",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3bb55c53-84b4-4019-83e6-32d3294ecb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771277a4-bc14-426d-b1b3-c6745ac7f8c3",
        "cursor": {
          "ref": "b7a29cad-cbdf-4cd4-9119-a15d1f878677",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "58c86c7f-b658-40fd-8db3-459737143dd0"
        },
        "item": {
          "id": "771277a4-bc14-426d-b1b3-c6745ac7f8c3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "06e56b5a-6722-4bf3-b36f-7018d11a71cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74531664-cc91-4a29-92bd-b339f7edbf14",
        "cursor": {
          "ref": "d4f2feea-0595-4a08-955e-5a83ea7aced1",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8e594ac3-9ae0-47bc-856e-990b41881b77"
        },
        "item": {
          "id": "74531664-cc91-4a29-92bd-b339f7edbf14",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c2079716-7462-4ca9-8899-0c7afb54b96a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971a3afe-4352-47c8-b567-602fef3033a2",
        "cursor": {
          "ref": "e69692e3-bfbf-46a2-b975-f5f14a1608f6",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "97cebf04-4eca-42ea-a19c-0ea112a3fffe"
        },
        "item": {
          "id": "971a3afe-4352-47c8-b567-602fef3033a2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bab21cbb-ba45-4832-ae13-1b0ead89761f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f462d43-c19b-45e6-adf9-48594d53e5e5",
        "cursor": {
          "ref": "534eadc7-317c-4cb7-b378-d6793aca2b9d",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8f40ece3-5358-4f07-a2c8-0cefeeb119ed"
        },
        "item": {
          "id": "0f462d43-c19b-45e6-adf9-48594d53e5e5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "66062ee4-2ad1-437b-a7d3-c16f9e3f4309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433dbb0d-fcf8-4090-9493-2efa1cf6c18f",
        "cursor": {
          "ref": "1850352a-1413-44c7-b86e-0daa5115e095",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6cca205a-e564-478c-95b1-2ef7f8ca76ac"
        },
        "item": {
          "id": "433dbb0d-fcf8-4090-9493-2efa1cf6c18f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0097b9b8-50c5-438c-8d73-e9ef6a455a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 346,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48554fd6-da1c-444e-a888-1933f3b752eb",
        "cursor": {
          "ref": "f5625284-9d06-4c8d-8ca9-dd476cb1a29d",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1e389c0c-648c-457c-b433-738481ef2db9"
        },
        "item": {
          "id": "48554fd6-da1c-444e-a888-1933f3b752eb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6b986765-ccc0-4bf1-9479-644bc85e66c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8b4d50-cee8-442f-887e-5f7b4fb776ff",
        "cursor": {
          "ref": "6a308da0-ff25-4854-ba30-b707ca7d72d6",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0e5c6925-6876-4b24-991d-6dde712518b8"
        },
        "item": {
          "id": "3d8b4d50-cee8-442f-887e-5f7b4fb776ff",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ba1dddc3-032c-48f1-a4bc-5c663ebc7a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7004dc6-4f87-4200-873f-87c511ccf0c7",
        "cursor": {
          "ref": "7cec9b3b-95e3-4e0a-8adc-9a343370842b",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a928c89f-d215-4eab-a10c-c711c64d503b"
        },
        "item": {
          "id": "d7004dc6-4f87-4200-873f-87c511ccf0c7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "42af5837-7a1e-475f-9b56-ef0305fe19bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d83fdb-828b-4c32-8846-6dd5d92113f4",
        "cursor": {
          "ref": "5ba46a52-6f99-4a26-bb2f-e62d2e6c8b44",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a13d5088-9af3-4c97-9582-24c80e569f3a"
        },
        "item": {
          "id": "96d83fdb-828b-4c32-8846-6dd5d92113f4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e9234390-73c9-4655-bfe7-00f5cba96710",
          "status": "Created",
          "code": 201,
          "responseTime": 739,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "6fa9ac78-329f-4ff2-a58d-f7af6a66cb47",
        "cursor": {
          "ref": "6e5b50d2-c26a-4b0f-a895-83228038112e",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b0b2a1f6-c173-4aab-a579-b0e67743d6a4"
        },
        "item": {
          "id": "6fa9ac78-329f-4ff2-a58d-f7af6a66cb47",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1a8db259-f1fa-4d0f-9468-ea7bf551a291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f257e1-99d7-4e9c-908b-044dbdca0926",
        "cursor": {
          "ref": "34bd1068-3a6d-4497-a565-ff864bc1af56",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c84ba256-d6da-40eb-9a1f-bc41ceda1c1a"
        },
        "item": {
          "id": "f1f257e1-99d7-4e9c-908b-044dbdca0926",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d08c755c-bea5-4523-9b57-2a2941b2a0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f391d9c2-bd6a-413f-8564-5888c974cb1b",
        "cursor": {
          "ref": "a577b5a6-ff3e-4fe4-a44e-cf29433bce72",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6b91aea2-7507-4bb3-a6ab-bbffee13e3fa"
        },
        "item": {
          "id": "f391d9c2-bd6a-413f-8564-5888c974cb1b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a6d35d90-ae48-4dad-b4c5-62932c80e786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "790f0d81-acaa-42ce-a829-e98397d5f1c5",
        "cursor": {
          "ref": "fb01e9aa-ec60-4081-84a2-2d6bea1b8320",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6def7f76-9af2-4903-880a-ae9779b230c2"
        },
        "item": {
          "id": "790f0d81-acaa-42ce-a829-e98397d5f1c5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e1c78ca8-0fff-425e-a669-4f1f6054ef65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af42116f-4eb6-49bc-9a77-c9a25ba71366",
        "cursor": {
          "ref": "fd36e824-c33d-4902-b784-465206d6a6be",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6da6fb99-524b-4271-8fc4-e5bb59c5d958"
        },
        "item": {
          "id": "af42116f-4eb6-49bc-9a77-c9a25ba71366",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "46f51944-f22c-4e3e-9dd9-1b86f3432e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0fde8ab-be9f-4210-a41a-c968dc272877",
        "cursor": {
          "ref": "b6d962f1-b30a-436a-8fb3-a258b504361f",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7c06a03d-ac65-4b56-bf0b-fe55eb748d44"
        },
        "item": {
          "id": "a0fde8ab-be9f-4210-a41a-c968dc272877",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1e9736b2-10ef-41eb-8258-ba11b5fc2b09",
          "status": "Created",
          "code": 201,
          "responseTime": 646,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "eb4fac9e-af3e-4add-9a52-5d5672941f69",
        "cursor": {
          "ref": "9c4745ae-f806-4cd0-a1ba-fa180bd2e977",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "624bc6e3-cb70-437b-bf84-7f5c76dde9a8"
        },
        "item": {
          "id": "eb4fac9e-af3e-4add-9a52-5d5672941f69",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "aba0690c-fa9c-4980-8d1e-b9f361ac5466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def78b0b-069a-4932-a446-2f9b86d849bb",
        "cursor": {
          "ref": "1f3e9785-fe9b-4635-b08e-18aa8c9093f1",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "16defcbe-cdc4-4887-aec2-71ed6355e450"
        },
        "item": {
          "id": "def78b0b-069a-4932-a446-2f9b86d849bb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e062810f-568a-407d-926e-70e67f2be478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c68389-4cca-4f4a-8878-6a326f84c16e",
        "cursor": {
          "ref": "ee3bac29-f566-4252-bd44-3a2bf39a1d3a",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b7b25e89-e143-48f4-8259-97f89ebaef6e"
        },
        "item": {
          "id": "93c68389-4cca-4f4a-8878-6a326f84c16e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "798b63d0-80b0-4f69-a4ac-5ba24aa0960a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e57ec9-c588-45f6-a821-b35ee3b74a7a",
        "cursor": {
          "ref": "6e602286-50c7-492a-8683-0d2ffb8e9e4f",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "881602ec-bbbf-4ce7-9a5c-a1a91dbcfa1e"
        },
        "item": {
          "id": "15e57ec9-c588-45f6-a821-b35ee3b74a7a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a4e78011-1d5f-43b8-b726-90caab6e1d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab092d02-8788-4b3a-81a7-fd9cd2a061b8",
        "cursor": {
          "ref": "6f0a814b-d109-4752-ad71-9954d99f7ca0",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "84f3e8fe-7096-4edc-a67a-4b7c21a59a6a"
        },
        "item": {
          "id": "ab092d02-8788-4b3a-81a7-fd9cd2a061b8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ad70714d-c632-4924-877a-68c6eec22321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8492eca4-a9bd-4dce-a1a0-a3146d69d84a",
        "cursor": {
          "ref": "5c7ae149-a288-4f3f-82f3-2584cc6d4fde",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "70ff65b5-666b-46d2-a158-3ee265556b82"
        },
        "item": {
          "id": "8492eca4-a9bd-4dce-a1a0-a3146d69d84a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4178f818-6717-4833-90ed-d38f040fe917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b178426a-81bb-4b37-a534-00df5fe71984",
        "cursor": {
          "ref": "ac296f84-4da8-4150-a645-32abaee0f99d",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f7fc40ee-1d2c-4fd3-8508-aa41d433f457"
        },
        "item": {
          "id": "b178426a-81bb-4b37-a534-00df5fe71984",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0c3106ef-ecf7-49e9-ba41-63764e66126a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be15e9fb-7bd4-458f-8301-5525c2f74f6b",
        "cursor": {
          "ref": "64422ea7-0316-4b0b-a777-11b5229e1a84",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0f1bf77f-54da-40e0-9085-3c98b9181b3a"
        },
        "item": {
          "id": "be15e9fb-7bd4-458f-8301-5525c2f74f6b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "380fc8d2-647b-4ec3-9a36-93711f635229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c29b88-330a-4008-a2ac-2f4c5314a79d",
        "cursor": {
          "ref": "7151b40c-f5c6-4597-8ea6-f2273b7f81ab",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "948c2c99-b351-4abe-8eb7-fcb780d02ee9"
        },
        "item": {
          "id": "d5c29b88-330a-4008-a2ac-2f4c5314a79d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c5c1fd32-a989-44a1-b8d2-85f86f78807f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "a82c5f31-f0ea-4970-8892-6472e9be1712",
        "cursor": {
          "ref": "31195da9-8e35-4d7d-8cca-bcb0683c96ac",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b2369e30-bc1b-4970-84ae-afd7c39867a2"
        },
        "item": {
          "id": "a82c5f31-f0ea-4970-8892-6472e9be1712",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3c9b4062-d881-4790-9697-8990b5d2436c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "aa1c0c7d-e974-4fd9-aa2e-fd289ccebaf9",
        "cursor": {
          "ref": "c0a98372-1825-4899-b46f-97d20bfde3a8",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7b817d21-f2bb-4134-81e5-3fb963313acb"
        },
        "item": {
          "id": "aa1c0c7d-e974-4fd9-aa2e-fd289ccebaf9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e029153f-3292-4f2f-a2ad-0e2792bdc23f",
          "status": "Created",
          "code": 201,
          "responseTime": 674,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3445792a-56b6-49b0-9be1-eadf1b748578",
        "cursor": {
          "ref": "130e8588-85c0-4640-a2d3-38fcaecbb66c",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e348f233-0a5c-4f8d-b98d-0d7f115c1f54"
        },
        "item": {
          "id": "3445792a-56b6-49b0-9be1-eadf1b748578",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "efb4811f-6e97-4372-95b6-4936c144752e",
          "status": "Created",
          "code": 201,
          "responseTime": 673,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6153c53f-d715-40be-82fe-37c76e748974",
        "cursor": {
          "ref": "4dba6877-3acd-4b98-b01c-294ba1a063af",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "41f0820d-8b48-45f2-b980-3dcfcc48b77b"
        },
        "item": {
          "id": "6153c53f-d715-40be-82fe-37c76e748974",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d386ce95-55c6-4dab-a472-b6179384ee47",
          "status": "Created",
          "code": 201,
          "responseTime": 638,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "770b1616-96b8-484f-b3e7-8ed5b0b2dd75",
        "cursor": {
          "ref": "dbc9dc07-21dc-4bdd-a1c7-7103aba1447b",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d55c5ef3-6e56-4c7d-8fde-e20e4809cd65"
        },
        "item": {
          "id": "770b1616-96b8-484f-b3e7-8ed5b0b2dd75",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a09fe6f1-4454-4bf0-b96f-137c7783c3d4",
          "status": "Created",
          "code": 201,
          "responseTime": 628,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0b5b70-c8e5-4f4c-9778-a9afcf312f51",
        "cursor": {
          "ref": "e5870e80-a95c-4792-814f-46afd3338b6b",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "44456f1a-dea0-4201-8e24-383a768e421c"
        },
        "item": {
          "id": "cf0b5b70-c8e5-4f4c-9778-a9afcf312f51",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "48f30502-d212-4643-aa5d-0d838b633958",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf69dc3-9a1b-4713-8686-a5c4bfcb4abc",
        "cursor": {
          "ref": "5b789337-5ffb-46a2-9c7f-ac09459b6384",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ad1fc403-c710-4ab8-bd1f-3ebb34917354"
        },
        "item": {
          "id": "7cf69dc3-9a1b-4713-8686-a5c4bfcb4abc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7cb146bc-bd61-400e-afe6-50f4bb9f9770",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7cf69dc3-9a1b-4713-8686-a5c4bfcb4abc",
        "cursor": {
          "ref": "5b789337-5ffb-46a2-9c7f-ac09459b6384",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ad1fc403-c710-4ab8-bd1f-3ebb34917354"
        },
        "item": {
          "id": "7cf69dc3-9a1b-4713-8686-a5c4bfcb4abc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7cb146bc-bd61-400e-afe6-50f4bb9f9770",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0cfd25b3-e042-4dd6-9e7a-1535bcd26456",
        "cursor": {
          "ref": "7b6051d9-4822-4ef0-9fbf-915d0e237ed3",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "97cd7e90-d1e5-459b-ab85-880643b06166"
        },
        "item": {
          "id": "0cfd25b3-e042-4dd6-9e7a-1535bcd26456",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8d58bcde-ae4c-45e1-a5f5-1a03aff219bb",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c9fb403b-c648-4182-84a8-b1d3155c48b0",
        "cursor": {
          "ref": "e5146f13-ac7b-4537-9d91-c981a235066a",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c5ed852f-d0ad-4e98-8683-dfabf08480c6"
        },
        "item": {
          "id": "c9fb403b-c648-4182-84a8-b1d3155c48b0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "270b73ab-8fd6-4b27-ad3e-ce5194ca073c",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c4cbc5b4-a999-42cc-b6d9-e48aeceec371",
        "cursor": {
          "ref": "62edb27f-8937-4b9f-ad2a-6eb6c4c1460b",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cec969e4-4bbf-47e2-9c72-08a8bd5000aa"
        },
        "item": {
          "id": "c4cbc5b4-a999-42cc-b6d9-e48aeceec371",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "30fbb92d-abc8-4b33-82b0-12ed13b93bfe",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "7c1692a6-ef88-4d4f-a725-7758b46b2a3e",
        "cursor": {
          "ref": "5f5b85fd-bc6b-4f2e-aa48-01062e91ea80",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e09152ba-f836-4955-956b-2261d71dad4c"
        },
        "item": {
          "id": "7c1692a6-ef88-4d4f-a725-7758b46b2a3e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3724480a-55ca-452d-b8d1-18414cc6d630",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "71f5e024-ea0f-44de-b78b-7947acb01f9c",
        "cursor": {
          "ref": "04bfbc28-ecb3-4bdf-9e51-d41850dc8222",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8a3e635f-7b2d-45c3-9ca4-7d6ff66fb826"
        },
        "item": {
          "id": "71f5e024-ea0f-44de-b78b-7947acb01f9c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d18c848c-57e5-4162-9a1e-3995f554cac0",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "b3a9e174-19dd-4eff-9f9b-2f43489e60e8",
        "cursor": {
          "ref": "518f6d3d-ade5-4325-b159-f07c1dd2e542",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e1d2082b-62cf-4ccd-b716-3a8be32c1e04"
        },
        "item": {
          "id": "b3a9e174-19dd-4eff-9f9b-2f43489e60e8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ebea7f77-6f69-4f6f-8732-0a3ce5196683",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c04fe43d-1bd6-4152-b5b9-0c8b228146a6",
        "cursor": {
          "ref": "71de1b5f-012d-440b-a60d-d37cc4cccb44",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "24e3060a-9b8e-4b76-9cc4-e19ce6c6a7a0"
        },
        "item": {
          "id": "c04fe43d-1bd6-4152-b5b9-0c8b228146a6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ff666986-b3d4-47d2-a161-95dad7ad69f1",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "1ace76d9-1a70-45b0-84c3-c2c93e0eb9cf",
        "cursor": {
          "ref": "521ad902-fd13-4a08-83a1-5a22fd42feed",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "450a679a-b9e0-4a27-8e4d-9c7bff8cf037"
        },
        "item": {
          "id": "1ace76d9-1a70-45b0-84c3-c2c93e0eb9cf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6173d0ec-9565-4541-8fe7-8ce81211dafb",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "4270d0a3-19c6-4d5d-a81e-929cb39237b7",
        "cursor": {
          "ref": "2cc826c0-a4fd-4000-9dbe-34d77620c527",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3b212ddb-25c4-405b-92b6-88be1b7f8d59"
        },
        "item": {
          "id": "4270d0a3-19c6-4d5d-a81e-929cb39237b7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "026d7b64-170f-4074-a71b-4964205c780f",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ac844345-1800-44c0-824f-2437f3d761ee",
        "cursor": {
          "ref": "721ff6dc-f46e-438f-92f8-4b4485c0cb48",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "26fa1bd0-f0e4-49d8-b1ab-2c81cb4eb6be"
        },
        "item": {
          "id": "ac844345-1800-44c0-824f-2437f3d761ee",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cb2fd374-3f7d-4ca7-ad32-7eb263e3010a",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ab26121b-8473-4e3c-b2b0-0bc2194d325b",
        "cursor": {
          "ref": "107cc6a2-88af-40ce-95e3-6af6bd1155be",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c0995dce-9dd6-4979-9500-9da439d621f8"
        },
        "item": {
          "id": "ab26121b-8473-4e3c-b2b0-0bc2194d325b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5b264692-4787-44b7-bbda-111e9085e9dc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "81579c9f-2504-4fba-ac33-b7087eb3a82b",
        "cursor": {
          "ref": "a4e73798-b96c-40de-8992-5cb4b3b3dd30",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ebc7025b-4fd1-4b03-a92a-316f54d30389"
        },
        "item": {
          "id": "81579c9f-2504-4fba-ac33-b7087eb3a82b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "107bd739-11df-41fd-a55d-e8c8f5fb8c80",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "aa684417-b946-4897-af44-8b030aca3caa",
        "cursor": {
          "ref": "fe857f3d-236e-4ee3-91f1-7e4b453e8a8c",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e34bd3a1-0a61-464d-bd81-e2ca954d5b83"
        },
        "item": {
          "id": "aa684417-b946-4897-af44-8b030aca3caa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5803c4f6-ec7a-483f-86e2-4375bbd8f4a9",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "114a813d-f7b4-4107-a70c-08e4741133e3",
        "cursor": {
          "ref": "dc690443-ffe9-478d-bd35-98de58ea859a",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "02faddf9-0e9e-4778-ab0c-04e7c01087ef"
        },
        "item": {
          "id": "114a813d-f7b4-4107-a70c-08e4741133e3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ca897b82-8a36-4148-9118-805c0776f1f5",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "5b93b9aa-691b-4533-8732-d3b4a147ea4a",
        "cursor": {
          "ref": "e63de115-22fd-4fb4-ba52-abdf70813ae7",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "534206a9-93ec-4a83-b6bb-a251c848996e"
        },
        "item": {
          "id": "5b93b9aa-691b-4533-8732-d3b4a147ea4a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b19f8235-dd62-4189-b7c0-edeace563635",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "624daaa9-624a-4d1d-9ffa-f65671826075",
        "cursor": {
          "ref": "d038fe7d-8519-4b33-8f17-1a4990d7fd1d",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3b35d010-0039-4e6c-bf03-12c8687e5c80"
        },
        "item": {
          "id": "624daaa9-624a-4d1d-9ffa-f65671826075",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "24c6ae68-b0e7-4215-9d1f-8f5a22766883",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "fee4c4a5-4e23-4fb5-902e-78730cf8c493",
        "cursor": {
          "ref": "ab5a6558-6094-41ea-8350-4e7bc34b1ca0",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3d274362-b359-485d-8252-e426f6190954"
        },
        "item": {
          "id": "fee4c4a5-4e23-4fb5-902e-78730cf8c493",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ee6091fe-6ef9-437f-85cb-b9c648163f72",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "9c4c8472-9470-4362-8f24-000c6b320050",
        "cursor": {
          "ref": "69aecb04-7a1a-493c-a9e9-a76afa99ecf8",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2fc83d97-d8e6-49d0-930e-585ead80e683"
        },
        "item": {
          "id": "9c4c8472-9470-4362-8f24-000c6b320050",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "78e71eac-b4c7-4d28-b963-5a6af64801cd",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "20ca11c0-95d6-4e54-9a92-16c4f5251c71",
        "cursor": {
          "ref": "d726cd42-e635-4c55-9126-57d510a2fe34",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "72529dbc-84e2-4f8c-9946-a0e165703bfd"
        },
        "item": {
          "id": "20ca11c0-95d6-4e54-9a92-16c4f5251c71",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9eada1a7-503b-466e-94f6-47d0992f227a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "9890f3de-366c-437b-b409-995ec1bebf73",
        "cursor": {
          "ref": "948dddc1-90c8-4d40-b33f-4abed26372a6",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8b9daa6e-6c83-42b1-8883-1b08782d1eee"
        },
        "item": {
          "id": "9890f3de-366c-437b-b409-995ec1bebf73",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9c1529a5-c7b3-4925-883b-7eafd401f2a5",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "55484311-6333-43d6-aa66-a3a332b68675",
        "cursor": {
          "ref": "bd163be5-1947-4438-be4b-340d1de75bd0",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e21cb4ea-ad0d-48fd-8110-d327a56c69b6"
        },
        "item": {
          "id": "55484311-6333-43d6-aa66-a3a332b68675",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "94da8486-6e43-44d6-af0b-5fa6a0bd392a",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4b45a1aa-138f-490d-aa03-b4eef40fc244",
        "cursor": {
          "ref": "cb8eeed4-2a19-498f-8b3a-5f3387ff8997",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "92a42539-41e3-47ea-a0f8-b7b3f4f70196"
        },
        "item": {
          "id": "4b45a1aa-138f-490d-aa03-b4eef40fc244",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2712a7ab-a747-435f-b98e-2268cfe64d77",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "92f7c52c-d6f1-46f9-a380-0e62629d35a8",
        "cursor": {
          "ref": "1d7a142f-8e63-42dc-b7e6-8a1f0313b7db",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "143953a0-cfbb-4dfb-9c5b-6e60c9e49731"
        },
        "item": {
          "id": "92f7c52c-d6f1-46f9-a380-0e62629d35a8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "03439f84-4d89-4748-a70c-b38e9af3ce60",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "3c478eae-0eb9-4316-840f-606343b9aab6",
        "cursor": {
          "ref": "e54aeada-e6dc-4913-ac9f-6099fc441543",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d9ea01d7-88d2-44c6-bcc0-b57eabba6a8b"
        },
        "item": {
          "id": "3c478eae-0eb9-4316-840f-606343b9aab6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6ce5a1a1-b298-40b0-9a16-9873b3c634a8",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "64363f11-ae3d-46df-b446-a5d5694f6da0",
        "cursor": {
          "ref": "4200e61b-842a-4a1a-bdf6-423cc0e16a6e",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cc20b1ae-6f64-4f9d-a3d1-9257d455174f"
        },
        "item": {
          "id": "64363f11-ae3d-46df-b446-a5d5694f6da0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0c30aa62-bd43-459a-ab04-39979b8fb5af",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9fdf9638-0476-44c1-ba0a-27387dd1d280",
        "cursor": {
          "ref": "3940d039-e3b1-4fb6-9878-71f32ce8631a",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "002aad3f-b1cd-4793-b94e-ba805f13d42f"
        },
        "item": {
          "id": "9fdf9638-0476-44c1-ba0a-27387dd1d280",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b25d095a-de68-4190-b331-2606c6acb774",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "f0c84fd4-35a0-4b3e-a2f5-977e787613bb",
        "cursor": {
          "ref": "247cdcbd-5982-431e-a36e-ca6cb69845d2",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a1feed24-c03a-44d6-bfbf-5dce70b362de"
        },
        "item": {
          "id": "f0c84fd4-35a0-4b3e-a2f5-977e787613bb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8448c435-0fea-4cac-8df1-869c37e94706",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5643691b-398c-48eb-825f-452d7726683e",
        "cursor": {
          "ref": "14ac25b8-9dab-4886-a1e0-3822903f80f6",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "280b8b12-3921-4d73-82d7-e230cbc3a898"
        },
        "item": {
          "id": "5643691b-398c-48eb-825f-452d7726683e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f103b855-fe68-4ab3-ad2d-8205bbc62f69",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "55103e4b-a210-4c92-b8b8-84dd32a0db32",
        "cursor": {
          "ref": "137cf326-cd8f-4bb9-8fb3-5cce1d47d47f",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "40ecbf60-8d6b-4310-8c7e-190193a9da62"
        },
        "item": {
          "id": "55103e4b-a210-4c92-b8b8-84dd32a0db32",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "40cff05e-5ec9-43c6-85ee-00e22ce79db0",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "d792df50-4433-45ca-99ea-5eaed4ed3b01",
        "cursor": {
          "ref": "61a2c2ca-0303-45f2-9d56-c4fe7cfe034e",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a7263b6a-7212-40a8-af42-b499a99e5e89"
        },
        "item": {
          "id": "d792df50-4433-45ca-99ea-5eaed4ed3b01",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "188cfaa9-4950-493c-83f7-c24839e299a7",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b6f793d0-a15f-42c5-96a2-d232b2c85fca",
        "cursor": {
          "ref": "3f24d5e1-3b60-42d4-9dd0-9365d1eabb48",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9cc3587a-d871-4e17-b006-43a699b61ac9"
        },
        "item": {
          "id": "b6f793d0-a15f-42c5-96a2-d232b2c85fca",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8447517d-fdbc-4a2b-993f-788eeac72d6f",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c8ad4077-04bf-43dc-b50e-c16b778ec7e9",
        "cursor": {
          "ref": "7cb78a97-596a-4a14-9133-6c864a4b6d5a",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "831b941e-292e-48b2-9e50-b76bc4b9da90"
        },
        "item": {
          "id": "c8ad4077-04bf-43dc-b50e-c16b778ec7e9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "917e7790-678b-4fb6-b2a3-61b29f4fce06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01f32ac-6631-4a07-b1af-de94d6cde1db",
        "cursor": {
          "ref": "f11304de-504e-4f9d-bff6-59c626d2bbad",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "727f31c2-5854-4c05-a78a-400242f35adc"
        },
        "item": {
          "id": "b01f32ac-6631-4a07-b1af-de94d6cde1db",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f3edaf00-a4ec-423b-ac1b-8514e83c4df9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab10a36d-cfcd-4e3e-8288-618f224b4f3a",
        "cursor": {
          "ref": "d30154b4-44cc-4d68-b387-e2a5f70d7e9f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c0309d4a-8555-481c-b6c1-e14ca6fbb8c7"
        },
        "item": {
          "id": "ab10a36d-cfcd-4e3e-8288-618f224b4f3a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5bb771cf-6438-4e2e-bd6a-f1a78f255ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab10a36d-cfcd-4e3e-8288-618f224b4f3a",
        "cursor": {
          "ref": "d30154b4-44cc-4d68-b387-e2a5f70d7e9f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c0309d4a-8555-481c-b6c1-e14ca6fbb8c7"
        },
        "item": {
          "id": "ab10a36d-cfcd-4e3e-8288-618f224b4f3a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5bb771cf-6438-4e2e-bd6a-f1a78f255ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4e2c5d-9436-46ad-802f-e816b39178a8",
        "cursor": {
          "ref": "8b2630be-1e84-4e38-8a45-49deae2e265f",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cbb151bc-728e-434d-baa1-812cc97f912d"
        },
        "item": {
          "id": "ac4e2c5d-9436-46ad-802f-e816b39178a8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "24e657ff-4460-46fe-a9a5-329a5f3c7d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aea4208-7cdc-4f5c-8bc4-7b70113fda1d",
        "cursor": {
          "ref": "89848393-43e9-498c-9521-9dfef3d7ae36",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c58a0749-0656-4179-9ca0-12158c72cf35"
        },
        "item": {
          "id": "6aea4208-7cdc-4f5c-8bc4-7b70113fda1d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b48e28d7-a2bd-42dd-ac5f-7fb9215f3327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f2314e-9325-44fa-a41e-ef55d80574f6",
        "cursor": {
          "ref": "791efc20-d50c-492f-9534-95fd7c939b0b",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "56d8e2de-825a-49e3-bd9c-790dae83ee79"
        },
        "item": {
          "id": "01f2314e-9325-44fa-a41e-ef55d80574f6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8d5b3b09-6026-441a-8d7b-450b2f8d5672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc9a600-5f97-4898-a69b-5bfc759ea1df",
        "cursor": {
          "ref": "94570f32-cd11-49d3-8b75-575640e026e2",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9bcbd91a-bd3e-48dd-b3f0-6ef90318bdcb"
        },
        "item": {
          "id": "6cc9a600-5f97-4898-a69b-5bfc759ea1df",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "72737101-5b5a-4d0a-9064-eb5c83f0f580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4c3a3d-072f-4f81-b7cb-be199e308627",
        "cursor": {
          "ref": "0e665457-2d62-4ed6-8022-b7b5ab6ba5e8",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "64d0d31b-e630-4c96-8371-a01795835cad"
        },
        "item": {
          "id": "ad4c3a3d-072f-4f81-b7cb-be199e308627",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "77639860-ed62-4aa8-8ea5-86ea716b00b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d97e984-7f5f-4392-89c5-cfc03d6cb969",
        "cursor": {
          "ref": "f1ef9dfb-93ea-4f39-b2a4-36ae3efe39a6",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f79c18d4-a241-485a-905b-d2a5b53c47f9"
        },
        "item": {
          "id": "2d97e984-7f5f-4392-89c5-cfc03d6cb969",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ccb33463-168d-4db7-832c-d59d63280359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6d571c-b6a4-4483-87fe-bd4ff689e45e",
        "cursor": {
          "ref": "4f349116-6934-4a14-b3e5-7a28dd9b9502",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f8993d42-0bb6-4108-9616-b4f0e1918402"
        },
        "item": {
          "id": "aa6d571c-b6a4-4483-87fe-bd4ff689e45e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8ebddb99-9459-4f46-b6f6-a80df1ab3515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fe286c-52e7-40a6-b2fa-15b2d126903a",
        "cursor": {
          "ref": "ed30644c-7393-49f0-b8e7-327025266820",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b5d7d97b-8923-4778-a650-6d02de09144b"
        },
        "item": {
          "id": "c7fe286c-52e7-40a6-b2fa-15b2d126903a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7d04afdb-26db-411c-9ddc-b485d3efe020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f60790-ec32-4ff8-8d12-ca7f1bff36ce",
        "cursor": {
          "ref": "93873d7e-a92c-4fb7-93a8-1f895d0c5aca",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "95c6817c-9dda-402e-8d6c-d368901bf6f5"
        },
        "item": {
          "id": "85f60790-ec32-4ff8-8d12-ca7f1bff36ce",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "dab0cb9e-5e89-4f3f-a74f-58f52fcf969a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb068f8-d3a6-4ea3-8765-016ffee7a043",
        "cursor": {
          "ref": "2b22ebbe-5b6d-47f1-ba4e-00a8adc4ce20",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ec894ed5-4593-4451-9f37-9486aadac025"
        },
        "item": {
          "id": "3eb068f8-d3a6-4ea3-8765-016ffee7a043",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "838be01e-81ac-4d25-a61f-96540a367b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1270f0-b11c-40f7-a544-5268efe34eee",
        "cursor": {
          "ref": "906f9346-67f3-4e8e-98a9-2cc1b6956f5c",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2fda4ed4-3e66-4899-afd2-9ad2935b828b"
        },
        "item": {
          "id": "8a1270f0-b11c-40f7-a544-5268efe34eee",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "76798923-bd1d-4788-9a8d-1468cea89246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9a4202-790b-44e7-af19-d4c6d328e828",
        "cursor": {
          "ref": "c6951ba2-71b7-44e6-bba4-5a6ee1b0a220",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1338b0bb-fc88-4eee-ab2e-aebf1d4bfe7d"
        },
        "item": {
          "id": "0f9a4202-790b-44e7-af19-d4c6d328e828",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "246bcab4-e8bf-44de-b8d6-16ee08a4562e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cac198-9900-4d8e-a80e-6f0c62b70d57",
        "cursor": {
          "ref": "c53588dc-aec7-4cc1-ab5e-bdec5ed10562",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6eb48927-1807-453b-91ab-c1f5a1f8a203"
        },
        "item": {
          "id": "72cac198-9900-4d8e-a80e-6f0c62b70d57",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "edcdb8a1-c528-4a11-9c61-0efc20f1aa8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe24a5f0-e4e8-488f-b6b5-e0db1cad5bca",
        "cursor": {
          "ref": "4e47c2dd-829e-4d46-a2f9-2eaedd93a86a",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "60018c01-0f8c-4642-b634-11095f8a88ad"
        },
        "item": {
          "id": "fe24a5f0-e4e8-488f-b6b5-e0db1cad5bca",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9275525c-2484-4094-b8f6-c274c0de71a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480c6f15-2360-4c55-af35-d44ab2549365",
        "cursor": {
          "ref": "01961260-396f-4716-a06f-586bcd99ce8d",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e197cfbb-95f5-4385-bdef-00f647c8299d"
        },
        "item": {
          "id": "480c6f15-2360-4c55-af35-d44ab2549365",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bc063e5d-abc8-4f09-92cd-c6ce6aae3494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2d6278-1f45-4f06-b381-abeb6b047f4d",
        "cursor": {
          "ref": "a6c0c0a1-a429-4efd-8759-f5290de2a6ee",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e9124559-94ba-4b6c-831c-c3b4dda604b7"
        },
        "item": {
          "id": "9e2d6278-1f45-4f06-b381-abeb6b047f4d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a84d5aad-2788-46f7-9e5d-c69644a60911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cee146-ad91-4aaf-8d17-aece7a817356",
        "cursor": {
          "ref": "bfb3cd37-1ea8-488c-bd99-0147617de02c",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fb3581c9-49b3-410e-b9aa-5351f020da2f"
        },
        "item": {
          "id": "c7cee146-ad91-4aaf-8d17-aece7a817356",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "ebc1508a-74f3-4282-bb43-0965fdc9c601",
          "status": "OK",
          "code": 200,
          "responseTime": 598,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "78dad3b2-3120-4c08-9a56-5e1ae88ee990",
        "cursor": {
          "ref": "2fd8458c-5020-4ae2-955a-8ddf4838e40f",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3b1288ea-b3da-4b41-929a-3f91f4bc8c2f"
        },
        "item": {
          "id": "78dad3b2-3120-4c08-9a56-5e1ae88ee990",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f34f9458-80e6-41b8-8f9e-36a2f2f82555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda4f65e-367f-4a5d-9bd2-b4b64465af5c",
        "cursor": {
          "ref": "e2981aae-fbc2-4bab-b5b0-aef17b6d99f0",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e2e0ef09-0b10-488a-aeb0-1571825a4cf0"
        },
        "item": {
          "id": "fda4f65e-367f-4a5d-9bd2-b4b64465af5c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "741c7642-aaa8-43d1-9bd4-559655feb5f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1ead42-360d-4204-b6d5-49ad93bbd36e",
        "cursor": {
          "ref": "246f4f71-c8d1-4c6a-ab40-961069fbb19e",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "58f7b65c-5b01-496f-9fb7-07e00a5694da"
        },
        "item": {
          "id": "cf1ead42-360d-4204-b6d5-49ad93bbd36e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0544a307-b013-435c-a89b-03b2d92d9b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58027714-c4f6-496d-9f32-651e205669f0",
        "cursor": {
          "ref": "2d8f075f-d590-40de-a0aa-b825b9237663",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1223c7b2-ee01-4667-a645-dc21ab072e1a"
        },
        "item": {
          "id": "58027714-c4f6-496d-9f32-651e205669f0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cb977707-4c8c-4e27-b898-5044affe16af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2807c6ce-b98b-4e5b-bfdf-e64c2673adcb",
        "cursor": {
          "ref": "d2b17d85-4a31-4286-ab95-447477b7e212",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dd03a961-3f4c-47fb-8982-5bd3da0238b5"
        },
        "item": {
          "id": "2807c6ce-b98b-4e5b-bfdf-e64c2673adcb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8d58261f-97a8-4ab0-8433-4ae919f63ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40096389-bf63-45a5-9e14-bfa9963cdb9d",
        "cursor": {
          "ref": "7b7d75ae-70e8-4f0f-b11e-c4d74c26279f",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cbefe501-7ab8-48e7-a52c-4c0811e1dc2d"
        },
        "item": {
          "id": "40096389-bf63-45a5-9e14-bfa9963cdb9d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "787d69cf-1d47-4859-8de2-f572cb9c6bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d525b64-5eaa-476f-ab9e-c180b402f850",
        "cursor": {
          "ref": "91ddd8f1-6652-415d-bca5-e4149ff4b5e1",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8f269bae-2532-42cf-93b8-7bdb404b2bd3"
        },
        "item": {
          "id": "9d525b64-5eaa-476f-ab9e-c180b402f850",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9bdcfe82-2555-46b6-8d57-98bbe921d33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1e35b1-c4f0-49b1-9096-42020cb62adc",
        "cursor": {
          "ref": "4719fbaa-7a51-4bc0-bccf-18e4d0ae68f3",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6e11a3b2-7051-42ba-b227-f5c988261407"
        },
        "item": {
          "id": "9e1e35b1-c4f0-49b1-9096-42020cb62adc",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c6d3f0f5-dc98-4e17-8198-e9008c4cc6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e055eb49-ff37-498b-9dcb-0605f983d5c7",
        "cursor": {
          "ref": "a327d1dc-65e4-42a4-ba8f-d6c33c43cfc8",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ba82c75b-7ee2-4cb5-ab28-e7ad7d1eb162"
        },
        "item": {
          "id": "e055eb49-ff37-498b-9dcb-0605f983d5c7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4e45dd67-fa6d-4f50-8d39-63b33053a0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617e91a1-7413-4e68-bbe8-4cf55b282372",
        "cursor": {
          "ref": "383e44c5-e2bf-438a-962f-ab4cbd47328f",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0d696ac6-2320-4923-95c2-b8e71aff72bc"
        },
        "item": {
          "id": "617e91a1-7413-4e68-bbe8-4cf55b282372",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cca5f601-802e-430f-a7ed-09c857bdfdb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f246ff8f-6ff9-486a-ad5d-466be43b1b11",
        "cursor": {
          "ref": "0b8a5a06-f114-4487-8ee4-8315f733bb5f",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ad4b1ad1-1698-4611-a7e5-34d5f73a7138"
        },
        "item": {
          "id": "f246ff8f-6ff9-486a-ad5d-466be43b1b11",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1d4aa200-417a-4c0c-aa4c-6e490558bb80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62cb84e4-c07e-46d3-bd23-6aa115729625",
        "cursor": {
          "ref": "6a0fae6d-356c-41e5-b098-1bffd3b1fb40",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "66f19e8f-1ef6-4a7b-8949-47bd0a51c9e2"
        },
        "item": {
          "id": "62cb84e4-c07e-46d3-bd23-6aa115729625",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e6072edb-221f-4371-a99c-8c7e16c79993",
          "status": "OK",
          "code": 200,
          "responseTime": 232,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "47bf18dd-ced4-4a7f-b5fc-b7cd02505f9e",
        "cursor": {
          "ref": "52257357-be0a-428d-b229-3dfabdb9ec5f",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9a88d14d-f34d-4f78-8e37-7ef1da00c484"
        },
        "item": {
          "id": "47bf18dd-ced4-4a7f-b5fc-b7cd02505f9e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f1602882-d942-4628-98fa-d30bf9bd70b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9a8f19-3f68-4448-a2ec-72214e929bc8",
        "cursor": {
          "ref": "043cad8b-7116-496c-8839-56baae0b9ae1",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4bbb6d83-6bd2-4217-8627-03987695acf6"
        },
        "item": {
          "id": "aa9a8f19-3f68-4448-a2ec-72214e929bc8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c326700b-40af-45e6-ac16-408a8ad679e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9904b79-2c1e-4e96-8eb9-fef6f2aaefe9",
        "cursor": {
          "ref": "02d76ea4-71b1-4df8-b506-e32e6f739d5e",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "18512771-f639-473e-8742-e5046d7d1065"
        },
        "item": {
          "id": "a9904b79-2c1e-4e96-8eb9-fef6f2aaefe9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0d72fb10-2fd9-4fd3-8f42-7be7da3ec4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add01aae-d1f0-4f65-863d-1fd516fd009a",
        "cursor": {
          "ref": "3dc497a9-b46b-4fc4-92b4-696ee70160b1",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9696301f-dc80-414b-a405-ce59015bef45"
        },
        "item": {
          "id": "add01aae-d1f0-4f65-863d-1fd516fd009a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "60cbd0d6-ac33-438b-a802-8ec4d1510e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea48439f-12d9-4d5a-9eb8-ab6dceb54e1b",
        "cursor": {
          "ref": "5fbdc018-067e-4614-a122-a7103f8f8613",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f4428228-bd61-49ed-97a4-43b348b101a6"
        },
        "item": {
          "id": "ea48439f-12d9-4d5a-9eb8-ab6dceb54e1b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "464cd48d-5874-4309-a5cd-d1a99450f158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83122970-0455-47ae-8e11-d5dc84644482",
        "cursor": {
          "ref": "eea0be15-e655-4473-8bb0-74f8eb0029f3",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6201577a-4432-403b-8c34-1abb2223d20e"
        },
        "item": {
          "id": "83122970-0455-47ae-8e11-d5dc84644482",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4336aca5-409e-43b7-81a0-eaafe545a53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d40c3cb-2c44-45dd-b118-1ca781727ae6",
        "cursor": {
          "ref": "7abf3c65-2b54-4816-8f9a-f64a93e2e4a5",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c181ee91-26b2-4c20-a3c5-b1d624af76a2"
        },
        "item": {
          "id": "4d40c3cb-2c44-45dd-b118-1ca781727ae6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f5acb18f-0b72-48c4-ab89-aaa9c18e0704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41102ed9-75ef-48fd-990b-f15d4fa74417",
        "cursor": {
          "ref": "3705dd9d-9d0c-47a5-a797-6f30204d2013",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c0143e64-c091-4a34-9ccb-dd7aef3fbd8e"
        },
        "item": {
          "id": "41102ed9-75ef-48fd-990b-f15d4fa74417",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e1437874-7c1d-43b4-b809-05a062dbc943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 275,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af189ac0-531d-4303-bf9d-7e53dcc22c59",
        "cursor": {
          "ref": "adc55ff9-ccec-46b0-9209-345f37b2dc3b",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c06f7c8d-745b-466d-ba71-cc4844962067"
        },
        "item": {
          "id": "af189ac0-531d-4303-bf9d-7e53dcc22c59",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0284c308-2bae-4c88-8b49-3a8e4e93f993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4919fb95-bab9-4aae-b2cd-42abbe2b9bad",
        "cursor": {
          "ref": "7b4b4761-c443-4526-b630-c57f6d4822b4",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "77af72b8-86a6-4b22-b131-05c30292e6eb"
        },
        "item": {
          "id": "4919fb95-bab9-4aae-b2cd-42abbe2b9bad",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "431a73ba-f122-4190-98ba-deaea397fb48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 363,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb78d11-3e87-431a-809f-fe050163aa19",
        "cursor": {
          "ref": "0c56c627-1203-49e8-84df-790e547323f9",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6673911c-b16f-4d2a-9dbd-b3c1983d2ed6"
        },
        "item": {
          "id": "7cb78d11-3e87-431a-809f-fe050163aa19",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0136bd2e-fea8-49db-b28e-7296a30aa969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e15cac-84df-42e2-a627-19a412e541a9",
        "cursor": {
          "ref": "7a5f17b8-74e1-4108-be31-6606181dafde",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f6ea9108-b4ba-4950-b8c8-0cc04cf390f1"
        },
        "item": {
          "id": "74e15cac-84df-42e2-a627-19a412e541a9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "335e0ab1-c8ff-4cd4-afea-1430506ad88b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 285,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be622049-9a54-4dab-8b9a-2807ea5327e3",
        "cursor": {
          "ref": "44b5e44b-da44-48eb-81ca-3a8049ceb7bc",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c5b9d2e9-5342-435a-b727-d1b9de80f62e"
        },
        "item": {
          "id": "be622049-9a54-4dab-8b9a-2807ea5327e3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7449ed10-d30f-4816-b99e-e75734068aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e78b9d-9132-4729-8b5a-1b3eb777d09e",
        "cursor": {
          "ref": "9eb57a07-6864-46f4-bc6d-4722127770d5",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cfae78f0-4507-4b9f-bc83-d9c1343565ee"
        },
        "item": {
          "id": "c3e78b9d-9132-4729-8b5a-1b3eb777d09e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "82382eee-be6b-46cc-b99b-d9eb8a353c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2858e796-35e1-4ebb-a3ff-1f1347cc2721",
        "cursor": {
          "ref": "a1446546-d1c1-44af-ad8f-9896fcc6f11c",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7f749316-2166-4000-91f4-73e2a2a1f60c"
        },
        "item": {
          "id": "2858e796-35e1-4ebb-a3ff-1f1347cc2721",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ee1dc3b3-1e86-46f4-93b9-4b6cb68e558d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 326,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afc9563-076f-4ddb-8dae-232d492ffd20",
        "cursor": {
          "ref": "efe45c37-ffc0-452e-9a79-ab1eeb4804e0",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "622b0661-6b0f-4ab4-8e77-c9e829d9da47"
        },
        "item": {
          "id": "1afc9563-076f-4ddb-8dae-232d492ffd20",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "779dea8c-ec86-4a19-a4a5-b566675b049b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c17789-f0cc-492c-a723-520cf934d53f",
        "cursor": {
          "ref": "28bf1f4f-c780-4416-8d5c-292c5892626c",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e8ff17f1-2c62-4c57-a147-c3986f686478"
        },
        "item": {
          "id": "85c17789-f0cc-492c-a723-520cf934d53f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "88af5536-ed89-4c24-9a29-e55e0b7cc8b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db133640-b71e-47db-8c5f-7fc53181115d",
        "cursor": {
          "ref": "1d7229d5-7927-45c4-a899-fba2065e0e7b",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ca85bba6-d928-4e8c-bc67-749ea4358cc1"
        },
        "item": {
          "id": "db133640-b71e-47db-8c5f-7fc53181115d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0d78e9c4-251f-4fb4-9295-d18d6739de7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 289,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5637e7-7a61-4391-87b1-9b8c5b36c019",
        "cursor": {
          "ref": "a209cd5c-920c-459a-9423-e3937a68b5fc",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "222140ce-da48-404a-934f-1a74e14783fa"
        },
        "item": {
          "id": "2e5637e7-7a61-4391-87b1-9b8c5b36c019",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0474e322-3056-48b8-a258-2fee61d2f745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef1b2b1-582b-477f-afca-d7ef097f9ea8",
        "cursor": {
          "ref": "67519061-35bd-4dd7-a2e6-c6b6ebf663e2",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8dbbad8e-8471-41d4-99da-2bf638730adf"
        },
        "item": {
          "id": "3ef1b2b1-582b-477f-afca-d7ef097f9ea8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "beaf9b56-9722-4b13-ba0b-950057370143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47feaf1a-d2a6-4aab-bfa1-0446ca1e63cf",
        "cursor": {
          "ref": "576e1e5b-0617-45dc-8d76-0b437815ea28",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "46df228c-ceb4-4c4b-a3ce-759b7d3efbdd"
        },
        "item": {
          "id": "47feaf1a-d2a6-4aab-bfa1-0446ca1e63cf",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bfac79bc-636b-4f2b-9228-2ce8a5dcc734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 293,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5739d6-658c-49ea-8721-d03a15d26792",
        "cursor": {
          "ref": "0abfdd17-60de-457d-8ff6-bd6942d108f9",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4a7dd181-9c42-4ebc-8132-92b99b4c3826"
        },
        "item": {
          "id": "cf5739d6-658c-49ea-8721-d03a15d26792",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f8511a60-0524-4d1f-b133-63c554b69f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94457135-bc01-4ff2-9e3a-4ae3dd881e43",
        "cursor": {
          "ref": "0d7d5145-915f-4026-a3f1-eb6f5536150c",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ae6e3b02-bd2c-4a4d-b753-16292e1228fd"
        },
        "item": {
          "id": "94457135-bc01-4ff2-9e3a-4ae3dd881e43",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ffee02d4-d0f3-4744-839f-f68f93297dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2585b433-2c51-4951-bbe2-08ab788f9788",
        "cursor": {
          "ref": "b040d3a2-309d-47ff-a389-98514fe33723",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "51ba0ce0-7087-4d89-a015-e55fed5ab5d9"
        },
        "item": {
          "id": "2585b433-2c51-4951-bbe2-08ab788f9788",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "bd7d1e07-46e3-4bfc-81e6-26b7a425a219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 297,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022d0071-9a39-4f97-a025-e9d069090785",
        "cursor": {
          "ref": "0bf90d6d-157e-41ed-a0e9-4fecd3cfb979",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8ff5ce0a-500e-4587-9b74-5bf88a04336f"
        },
        "item": {
          "id": "022d0071-9a39-4f97-a025-e9d069090785",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c82054a1-c9fa-4f67-806d-c43b153cce6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09ddb72-cc1f-492d-884f-7cf070b40108",
        "cursor": {
          "ref": "25bbac30-319d-4360-9f9e-324d44b6ff31",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b23aa397-a480-4248-ae4f-22872071c13d"
        },
        "item": {
          "id": "f09ddb72-cc1f-492d-884f-7cf070b40108",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "534426ff-0f76-46bf-bd78-e70bc05f277a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3404f2f9-8211-4bef-831d-c2194df5803d",
        "cursor": {
          "ref": "395bc953-6fea-4169-bba0-d902201792ab",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "95c06ac7-47b5-43bd-8ecb-08f7952a7fa8"
        },
        "item": {
          "id": "3404f2f9-8211-4bef-831d-c2194df5803d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "134420d4-2021-42b5-bf7a-db1d26e7cdc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b2e564-a369-4a71-b552-7d26d8677a45",
        "cursor": {
          "ref": "5a00eff8-2f91-47d1-8c02-b890c1b535bd",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6a1bdd75-3e3e-415f-b443-a3b93098c5fa"
        },
        "item": {
          "id": "b3b2e564-a369-4a71-b552-7d26d8677a45",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c57892d7-a2d7-4cb3-a321-b019756f2ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2230ad22-d0ab-4198-96bb-534e11185ebc",
        "cursor": {
          "ref": "dd833779-f9ec-4c90-9d97-e6b33ccbdf61",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5f71d143-78b0-4f36-a191-4330211f0c0e"
        },
        "item": {
          "id": "2230ad22-d0ab-4198-96bb-534e11185ebc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3383e676-57d7-4ade-aeac-fc079ea6ff7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9547546-c521-4f35-932f-4b228ee7dda2",
        "cursor": {
          "ref": "384fdf17-c984-4c92-817e-befc9cac9eac",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "755853e2-5e7d-4533-a568-f7f7d6228e27"
        },
        "item": {
          "id": "b9547546-c521-4f35-932f-4b228ee7dda2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "eb35bd24-bd78-49d6-a5e5-1be4672427e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da946186-0709-4f82-9bfb-674d00049cc0",
        "cursor": {
          "ref": "e948702a-68fc-461d-9db8-02ebe4f699ea",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "aef0432c-1990-48ca-926b-e07defff36b8"
        },
        "item": {
          "id": "da946186-0709-4f82-9bfb-674d00049cc0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a36973b2-e12c-40c2-b27b-8096ac73ccd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1a4000-733b-40c0-971b-211095eb4c67",
        "cursor": {
          "ref": "824e4dbc-8b37-495b-98d7-d31847e11606",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "61bf2539-bb0c-4a49-a539-f8952704d488"
        },
        "item": {
          "id": "fd1a4000-733b-40c0-971b-211095eb4c67",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0f5b616d-7d35-4762-8e7e-d61e26105f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628ee084-f347-4d8f-a499-3b4b75fde4da",
        "cursor": {
          "ref": "66521a0d-ecca-4be3-aa9f-0e0260a6989d",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "61b3c989-7a6d-41ef-b412-324af9346950"
        },
        "item": {
          "id": "628ee084-f347-4d8f-a499-3b4b75fde4da",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "09a5b80a-af79-47ae-b123-f2433fae85c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10025ab3-ba10-4cf8-b259-60d89fdd5783",
        "cursor": {
          "ref": "3ec281c8-9f97-46e0-9a66-7dcd07626e85",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4fa987cb-fce6-41f7-9c22-8bf1fa22f280"
        },
        "item": {
          "id": "10025ab3-ba10-4cf8-b259-60d89fdd5783",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f9e3f6e6-f8cf-45aa-99ff-f75cfcb24402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cee694-79b7-49a6-bb97-b923cb3df75e",
        "cursor": {
          "ref": "ffaafae9-7501-47bc-979e-13692def3bf4",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "eae04716-9c6e-4a6f-8ac5-3e35fa74f8fe"
        },
        "item": {
          "id": "58cee694-79b7-49a6-bb97-b923cb3df75e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1664fefe-099c-4b22-839e-8898744753da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24dfefad-77f0-40bc-9573-a6caad88fe93",
        "cursor": {
          "ref": "f38bef75-8450-40e9-aa48-295d1e1527d2",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "38fb4d7b-ad8f-4cc5-b73c-313724bd2abe"
        },
        "item": {
          "id": "24dfefad-77f0-40bc-9573-a6caad88fe93",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fc3bbf83-4918-4e77-8e9f-816fb272420d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27e78e6-a292-4212-be49-cef041194aa7",
        "cursor": {
          "ref": "bce87894-cb9e-477e-bb29-532c658ea778",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6d257a31-ac8b-4136-bcc6-fc66e37a739a"
        },
        "item": {
          "id": "c27e78e6-a292-4212-be49-cef041194aa7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "15d570f5-fe2c-4846-8a6d-b968ad82f830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2672653b-0a60-4ad1-8614-bc09f01f4f20",
        "cursor": {
          "ref": "c0a6b415-953e-4496-89e6-1cf2ff6980e9",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "38cd6171-fc6f-474d-ad8b-12b768d27add"
        },
        "item": {
          "id": "2672653b-0a60-4ad1-8614-bc09f01f4f20",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5bbd91a0-8bd4-4dd4-923d-31e31a5cdace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57f8892-3c66-43cd-b1bc-4bf29d13ec3d",
        "cursor": {
          "ref": "99dc8e2a-41b5-4835-b861-c98454108bfc",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b5e0d014-4031-4510-be2c-6b31681f37ec"
        },
        "item": {
          "id": "f57f8892-3c66-43cd-b1bc-4bf29d13ec3d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2a17ec0f-de62-4115-b254-b0a8c0325640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26330bb5-e94e-49e3-90b2-90a7f605d544",
        "cursor": {
          "ref": "f2f7c943-4a3d-4acc-8f14-7511a1e057cd",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9d6d9791-7f2e-477d-9e9c-a3fbab6c747b"
        },
        "item": {
          "id": "26330bb5-e94e-49e3-90b2-90a7f605d544",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ac104d22-373b-4137-8e98-237984904ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10299a7d-65d9-4400-8b75-9f2e2482633a",
        "cursor": {
          "ref": "a18036fd-5e0d-401e-bda8-fe7231366dc5",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ede47ffe-4bae-4439-9b64-e604481368d1"
        },
        "item": {
          "id": "10299a7d-65d9-4400-8b75-9f2e2482633a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "29bfe87a-a795-46ae-8c29-26b31c3ddac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29856090-6255-440b-8050-1e798ced3a34",
        "cursor": {
          "ref": "f938bcb3-8f53-4633-88df-7833ddba2199",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a539bfb6-ef62-4bb2-be43-99cb280dfbe9"
        },
        "item": {
          "id": "29856090-6255-440b-8050-1e798ced3a34",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d93bfb43-d511-4c1b-a1ae-162c66e8e487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d43981-df59-4ceb-af40-af671d8e95e9",
        "cursor": {
          "ref": "f3f1009f-3703-4b6c-8a73-f20733e9df43",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7e31763e-9c70-4516-b83d-87d6fdb7fe31"
        },
        "item": {
          "id": "f6d43981-df59-4ceb-af40-af671d8e95e9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b06d13b0-1fbe-40ef-b0c2-d2d6d48ceae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14ee127-2069-4ce4-b3a2-41fb0cb867df",
        "cursor": {
          "ref": "30196a15-57e7-4200-b005-ea377d33c2e2",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "382843a2-acf5-4c16-a6c5-240ca6e5bd1d"
        },
        "item": {
          "id": "b14ee127-2069-4ce4-b3a2-41fb0cb867df",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "30106305-4b1d-4aef-aa31-5d1ecae6646e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab1233f-b4c6-4186-beb1-bf484d6088cc",
        "cursor": {
          "ref": "79494239-92c9-4a2e-9c77-d0b227cc767b",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "29ded9a0-e0fd-412b-86f3-400d878fee5e"
        },
        "item": {
          "id": "fab1233f-b4c6-4186-beb1-bf484d6088cc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ae8acf38-84a3-4881-9286-249a01d6caeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7497b7f-32d6-43ee-8af8-74031ae1a421",
        "cursor": {
          "ref": "db2c073d-e4bd-481a-b37d-d3e81fe1ab9c",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "baf52482-091f-441b-8e2c-c6307eb867b4"
        },
        "item": {
          "id": "c7497b7f-32d6-43ee-8af8-74031ae1a421",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1a778a0d-183a-4523-acd6-2557ab4f90fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00114f1-29d9-4ee3-8114-f0dc7ee3e5e2",
        "cursor": {
          "ref": "a384e1dd-74eb-4c32-b334-837346c435fb",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "95cc657a-39ab-4fe7-a9a3-70049038c090"
        },
        "item": {
          "id": "e00114f1-29d9-4ee3-8114-f0dc7ee3e5e2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "725c3420-0853-4f42-bb36-18caeaa478ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372d34eb-a03a-47dd-ba0b-f982eeabb577",
        "cursor": {
          "ref": "9a745ead-685e-4f51-a1ab-b685bdbfdd07",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3135bf9d-f8d6-4538-ad38-88a6e880c6cb"
        },
        "item": {
          "id": "372d34eb-a03a-47dd-ba0b-f982eeabb577",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3626e043-8054-4161-b02d-70e7324248e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5a6d9a-4af3-4cfb-ab75-27d02b09635e",
        "cursor": {
          "ref": "6c7a87fe-91a4-42dc-8627-bbcb88f705b6",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a86c745c-08eb-469a-8aac-8da518b7000f"
        },
        "item": {
          "id": "5b5a6d9a-4af3-4cfb-ab75-27d02b09635e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3fb39d19-aa4d-4557-acf5-5c051a9e7a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235cf676-0afa-4c6f-90d8-ebaab44d1dfe",
        "cursor": {
          "ref": "f7253343-1c6b-4375-9950-c859199de5c1",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "10e9798e-1ee7-40fd-b053-25f74416b735"
        },
        "item": {
          "id": "235cf676-0afa-4c6f-90d8-ebaab44d1dfe",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fb9ebf1d-9443-42fc-a7ea-cbc3afbbafd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c95ce52-75c3-4080-af08-0e652e0f4965",
        "cursor": {
          "ref": "3bb5b874-3de1-4a4b-af47-ff6221fc205b",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f2ba89f4-a021-404d-8d35-26d91a85f96e"
        },
        "item": {
          "id": "2c95ce52-75c3-4080-af08-0e652e0f4965",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "28bab63b-38ba-41f1-bde5-f3497669a8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b99a9a-4606-48a6-8979-af63140fe877",
        "cursor": {
          "ref": "7d65d10c-c90e-4a35-bfb5-70faffdc34dd",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3ffb2756-d821-4299-b6b8-db209dd8716c"
        },
        "item": {
          "id": "51b99a9a-4606-48a6-8979-af63140fe877",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0baea449-ad75-4d9b-873b-5a5dbdffbe7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542a60d9-8d72-4bc9-86a8-c9435d37c4f5",
        "cursor": {
          "ref": "5dcb0f09-6820-491b-885d-6a24663aedb4",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "05471f73-5ef4-4568-93dc-659a40c526e4"
        },
        "item": {
          "id": "542a60d9-8d72-4bc9-86a8-c9435d37c4f5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "00494a5b-b152-4f7a-ab3f-56fd5071cb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9a92d9-ef11-4b04-b677-e05876f601cd",
        "cursor": {
          "ref": "2da01266-2828-4f23-ae99-ab676d25f795",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "efd7d59a-2056-4cde-813c-f5d5c5319d31"
        },
        "item": {
          "id": "eb9a92d9-ef11-4b04-b677-e05876f601cd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1d21eedb-c27e-4142-85b3-5283e0237f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136e8665-d7e6-48c6-ba0b-463bafcae0f4",
        "cursor": {
          "ref": "e3dcfab2-1c00-4026-a398-833c9adba361",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b1dd24f1-7f28-47a4-92a4-321a07268314"
        },
        "item": {
          "id": "136e8665-d7e6-48c6-ba0b-463bafcae0f4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7863a116-9f23-4f11-a860-2689e0b17971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d53db4-6fad-4066-8c5e-04af7281dcd2",
        "cursor": {
          "ref": "d181e9a5-f2ad-4a9f-8aed-00ff17c9cec2",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "28e219f1-b4ac-44c1-acc2-03fef4c7db20"
        },
        "item": {
          "id": "05d53db4-6fad-4066-8c5e-04af7281dcd2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0d8b1848-c50a-4a67-ae31-0444531d093d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a311f43-3519-4a24-87c9-4a2951a4899a",
        "cursor": {
          "ref": "4a71b816-7150-4c05-9d6f-82a0afba470a",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0f3966bf-ac8e-41fc-ac9f-db89901baa18"
        },
        "item": {
          "id": "0a311f43-3519-4a24-87c9-4a2951a4899a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4ba19306-d681-4d33-b5a3-6d93d28d1c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d704363-76de-4b6d-82b8-1847d6feb831",
        "cursor": {
          "ref": "b43b26d6-3c62-454f-b48f-ea530cdc3951",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "060b02fd-22d3-4e7c-999e-37c6805129d7"
        },
        "item": {
          "id": "2d704363-76de-4b6d-82b8-1847d6feb831",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2c416147-ec99-40cb-8ffd-d361c0cdf9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a84dbc-911c-43cf-b349-4fc77fe6838a",
        "cursor": {
          "ref": "76e4c268-7a5e-4cc5-8bfe-ccbf3b83dc0f",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d3faffcb-7a09-4ce8-8630-6a7fd706fbf5"
        },
        "item": {
          "id": "c7a84dbc-911c-43cf-b349-4fc77fe6838a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "46cdf07a-e88e-4c55-9e08-dcbb96a6e3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fe1d0a-a8ff-4467-bd74-745d5fa4201f",
        "cursor": {
          "ref": "c8f07a43-3640-46cf-aa56-b5a492840e9b",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "eb8d3696-2eb5-480d-b24a-9333a59363b0"
        },
        "item": {
          "id": "42fe1d0a-a8ff-4467-bd74-745d5fa4201f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f28883f4-2b14-4b12-b4d8-afafc40763f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe8fad8-1724-4481-9d3a-1f842b694ef8",
        "cursor": {
          "ref": "d21aec42-3859-4873-8486-00b3c9803228",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5f81588e-3b2e-4183-9094-bbbffbbaacd8"
        },
        "item": {
          "id": "0fe8fad8-1724-4481-9d3a-1f842b694ef8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7a82a8f6-5141-4c98-9330-5b823cc0f85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fff72e-5431-42fe-97ed-12f86edef530",
        "cursor": {
          "ref": "43a3ce79-3343-4c62-b7f1-cc6a4fe26107",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a27cad08-7e16-4f7c-a4ec-478261171fd0"
        },
        "item": {
          "id": "77fff72e-5431-42fe-97ed-12f86edef530",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "134ff81b-a1d2-4872-810c-3aa21e8d0efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19e2c7a-0d19-487d-a74d-6f84eede7942",
        "cursor": {
          "ref": "4703c2a3-63a1-4c6a-996d-1c251b359692",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "05d26a50-a110-4496-87c5-be9bf43b8220"
        },
        "item": {
          "id": "f19e2c7a-0d19-487d-a74d-6f84eede7942",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9fa47621-404e-43ea-aa4b-5a57fe735b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2201e8-c134-42e7-aefe-8ecf06531936",
        "cursor": {
          "ref": "24f45ab4-b2a1-4bc0-8665-ddd99083226d",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6f1f542b-7c51-4ff0-bc6d-852f8a9ea9de"
        },
        "item": {
          "id": "9c2201e8-c134-42e7-aefe-8ecf06531936",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1b922219-64ca-42fa-88f7-0ec66ae8f190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c30d46e-ab59-42f0-a9c5-08afdc41cbce",
        "cursor": {
          "ref": "5ac6e24f-fa9e-4b9a-b95f-aac271892cc1",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "09d6f8c1-b159-42b1-adcd-dbeb58359fd0"
        },
        "item": {
          "id": "1c30d46e-ab59-42f0-a9c5-08afdc41cbce",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3c318b03-a4d7-4fa5-80e0-1beec0a08fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db30905-ae46-4816-ae2e-3d32df5f3ee1",
        "cursor": {
          "ref": "1fab3487-a546-46f5-b329-f67aac30116a",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "87a58f84-97b1-4e2c-a13f-61f251625688"
        },
        "item": {
          "id": "7db30905-ae46-4816-ae2e-3d32df5f3ee1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fca5113a-b9ad-4da7-92e9-8abcff25990c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8131ba10-b5b6-4a76-adeb-68f1eb07ba85",
        "cursor": {
          "ref": "bd44c8c4-253d-43d6-98f2-364e3b1bbd07",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "30241bf2-ab82-4d2d-b78c-e93e0e7d42f6"
        },
        "item": {
          "id": "8131ba10-b5b6-4a76-adeb-68f1eb07ba85",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6a567c0d-c39f-4452-a0f4-89779fee161e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aec8c19-f39a-4bb9-a5a2-61530f082b13",
        "cursor": {
          "ref": "95a5b05b-467f-45e3-9e27-38a4fe81031d",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c0a2ffed-37cb-405c-abc9-ca9cd1119816"
        },
        "item": {
          "id": "2aec8c19-f39a-4bb9-a5a2-61530f082b13",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "83470ca6-3914-476b-b197-8e73356307b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c349da-9445-4c7c-9a41-642024a7acfb",
        "cursor": {
          "ref": "09e32aea-0db8-4caf-8cbc-4e7b451d579c",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "75a312e7-07cd-44cf-8964-59810bd3be2b"
        },
        "item": {
          "id": "00c349da-9445-4c7c-9a41-642024a7acfb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a9a71dee-0940-4c07-9fd8-d3ee721dfbd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b19c9eb-303a-4c5b-a9f4-df6d13940664",
        "cursor": {
          "ref": "2cf0c4c8-03a0-41d8-9372-4a1160bcbd10",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a2896e07-42d5-4b1c-8efc-d5a1f2aabb3a"
        },
        "item": {
          "id": "3b19c9eb-303a-4c5b-a9f4-df6d13940664",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d8724184-0f66-4805-816e-366adaca6d82",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86384129-a5e1-4a2c-8710-ad5075517e79",
        "cursor": {
          "ref": "9ca9f62a-7019-4317-9aac-f618b93b4b2e",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cf51f3f8-4d86-42fa-be04-0fcf7b20fe60"
        },
        "item": {
          "id": "86384129-a5e1-4a2c-8710-ad5075517e79",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fcce3751-2bf8-4ac2-9247-9b2f85a015df",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93681a8-6272-41b1-be91-40d0c150804c",
        "cursor": {
          "ref": "85eb98a2-edcf-47ab-bbb8-840733b3be97",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e466dcc6-aa6f-4054-ac3f-821f0e00dced"
        },
        "item": {
          "id": "b93681a8-6272-41b1-be91-40d0c150804c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "991726f4-c5f0-4011-a0e9-292119892d26",
          "status": "OK",
          "code": 200,
          "responseTime": 672,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef76846-9aac-4eb3-870c-bbc1900ff8d6",
        "cursor": {
          "ref": "c38781bb-df91-4af8-9616-d5d7c007a2ed",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "904d5000-4520-493f-90ba-53c8a6f8f35b"
        },
        "item": {
          "id": "eef76846-9aac-4eb3-870c-bbc1900ff8d6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "58145792-bb5b-4ff6-9750-66fab2d52a45",
          "status": "OK",
          "code": 200,
          "responseTime": 629,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "44571907-63cd-426d-a7fb-db5543ea9a4a",
        "cursor": {
          "ref": "37864524-6b0f-4072-b318-2dd6830135f6",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ebae4c77-505d-4c0e-8aac-b8ce43e7c190"
        },
        "item": {
          "id": "44571907-63cd-426d-a7fb-db5543ea9a4a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "afd5036a-e97f-4d81-9ecf-170eba99a3b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44571907-63cd-426d-a7fb-db5543ea9a4a",
        "cursor": {
          "ref": "37864524-6b0f-4072-b318-2dd6830135f6",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ebae4c77-505d-4c0e-8aac-b8ce43e7c190"
        },
        "item": {
          "id": "44571907-63cd-426d-a7fb-db5543ea9a4a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "afd5036a-e97f-4d81-9ecf-170eba99a3b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44571907-63cd-426d-a7fb-db5543ea9a4a",
        "cursor": {
          "ref": "37864524-6b0f-4072-b318-2dd6830135f6",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ebae4c77-505d-4c0e-8aac-b8ce43e7c190"
        },
        "item": {
          "id": "44571907-63cd-426d-a7fb-db5543ea9a4a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "afd5036a-e97f-4d81-9ecf-170eba99a3b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6c3216-20da-42e7-a1d5-77672b201bcc",
        "cursor": {
          "ref": "6df449d5-cacf-4b8c-b1a8-accc050d0334",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7194b148-275b-4328-b975-fac364ed397e"
        },
        "item": {
          "id": "2a6c3216-20da-42e7-a1d5-77672b201bcc",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ff6a0d5c-0ab5-4c27-978f-6d3041b44698",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 29,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc44e7d-c802-4f87-96ee-f5c00677261b",
        "cursor": {
          "ref": "153845c8-77a1-4f59-b0bf-2f0d6d9753be",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "63ebff26-9340-40d9-8379-a32c15acdc86"
        },
        "item": {
          "id": "9dc44e7d-c802-4f87-96ee-f5c00677261b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9b4b1142-dc03-43ab-83ed-da4d016061a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9dc44e7d-c802-4f87-96ee-f5c00677261b",
        "cursor": {
          "ref": "153845c8-77a1-4f59-b0bf-2f0d6d9753be",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "63ebff26-9340-40d9-8379-a32c15acdc86"
        },
        "item": {
          "id": "9dc44e7d-c802-4f87-96ee-f5c00677261b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9b4b1142-dc03-43ab-83ed-da4d016061a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a8484481-404e-4501-9c2b-10d32745e51e",
        "cursor": {
          "ref": "890b0e48-6a49-4c63-9747-94d7b39e6057",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "90cfe211-bf52-43b8-a502-9e9b3447717d"
        },
        "item": {
          "id": "a8484481-404e-4501-9c2b-10d32745e51e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4a5f983a-f9bf-45f7-a00c-cbca81f4e557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ec09d6dc-d052-4bad-a4ca-a310b0210aa0",
        "cursor": {
          "ref": "6e3bf41c-c3ea-49f8-88bc-c614b3dcf1bb",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "dc8503ec-3469-4e4c-8eec-02b0d05489ed"
        },
        "item": {
          "id": "ec09d6dc-d052-4bad-a4ca-a310b0210aa0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ec5c278e-8f59-4856-bcc8-2ffe0144d3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ec09d6dc-d052-4bad-a4ca-a310b0210aa0",
        "cursor": {
          "ref": "6e3bf41c-c3ea-49f8-88bc-c614b3dcf1bb",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "dc8503ec-3469-4e4c-8eec-02b0d05489ed"
        },
        "item": {
          "id": "ec09d6dc-d052-4bad-a4ca-a310b0210aa0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ec5c278e-8f59-4856-bcc8-2ffe0144d3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "48bef9ea-7b3e-40ef-a6af-f44249a5fc53",
        "cursor": {
          "ref": "da839143-961d-4c43-8526-c98b6ae0cb76",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "05173e6c-64ad-4fdc-a642-36c3d3cada1b"
        },
        "item": {
          "id": "48bef9ea-7b3e-40ef-a6af-f44249a5fc53",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "9e4c851b-0f7a-49c8-a133-8d5798ec3539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}