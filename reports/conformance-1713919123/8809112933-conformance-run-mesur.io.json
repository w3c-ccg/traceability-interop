{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "77cabc90-ae87-46cb-8592-040367f77408",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7b6cddec-c063-41e6-9cd1-781aced29558",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0f0bc193-ba38-48b2-98ee-7aef2841e02a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "01966688-0536-45ef-973f-3d20129deb24"
                }
              }
            ]
          },
          {
            "id": "bb9cc752-8649-46f9-948b-a2d97868287c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21429298-c924-4bd8-8aed-c66d7c719cae",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e64cb051-74e9-4f08-8da1-eee1ce74c4ce"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d6b93b7d-ef3f-4183-a0d1-44fec904571d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "72fae9b8-5502-4cf1-839b-702f47277fcf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4885387d-8f77-4073-a35e-69afe6ec790a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3f73df9-0b16-499e-8d3a-fb8dddf96dac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "135406bb-07d2-4069-b35f-9d8908c6b2a5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8b0da1a-d9be-4d6a-b3b8-892e73d4fecb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4a2d5dfd-3a44-4870-892c-19f65863e81c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "20b62422-6f8d-4a93-ba16-5f63da52a92e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3f95c461-9f13-4a20-a8a9-d6f5098ea778"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1d5dc7e-1733-47ec-a6bf-310dcdb9c21a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "654c7b10-7553-4eac-8d03-841ffb399ab7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c50d95e-91f4-409f-a24a-27dfd8552c51",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f7ea8a9-2ef0-4576-9e2e-ef128ed0a41f"
            }
          }
        ]
      },
      {
        "id": "d2376bed-0984-4441-a8be-a09fa292ed37",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2002a401-33fd-43e6-b2e9-5aab11c4d660",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ee3a02d-bbaf-49d0-9ba1-2c2fa92645e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f0b3b32a-4987-4e93-8bf2-5a3b1d42215f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d5a43b-94a3-4d59-8b0f-ff8d3589ce51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6b14b42-5f33-4778-b428-0d9743c4d619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39191461-23aa-4e96-bb68-475f42b8af57",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d0439b-779b-4870-96ac-78ee564fe325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "860e86e0-3694-4bbb-9785-507fc5b555d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e813bf9e-0556-4ee2-aa14-18a56a7ef992",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14537d2e-c085-4b46-b102-2d05c058f789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "406d9fb8-20f1-411d-8480-c453424b571f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f7dd42df-2583-45b0-bbf9-b3ebb29354f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60a60d2b-dd70-4921-b112-8fdc3d3f3718",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4bd520-4ca9-4a29-a7ff-8ea4e3660324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5ca224c-4b03-4e87-981d-dffc5756bd78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd24096-3c84-4bdb-a0ba-40bb1bc5f546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36fcc7a1-f943-41b9-b154-58ed1c0225d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1a568761-498a-46a8-a778-aea2f9b37689",
            "name": "Positive Testing",
            "item": [
              {
                "id": "16caa4dd-bee8-4b55-92a5-3ef215a84705",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2efce79-eafb-48c9-afc5-acfb1c5463ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "df5bfc5b-5f7b-445b-9de2-b7d223774025"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11ec58ed-242e-485b-94f9-dfaf3972e9ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7aae27dd-c1ca-4ef4-9247-759449274c6d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cbdde5e-ba68-44bd-82b3-9d6fa53f9c17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e03fd95f-ccba-448c-adc3-7699d7fc3098"
            }
          }
        ]
      },
      {
        "id": "7d2f5eb7-f228-4d85-8c43-58ca730de383",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8404dc36-be4e-4f5d-b3ab-e76b0d8f0603",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8ac9497-437f-4002-bff3-526c41ea52bc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6c522770-cd6a-4d37-b82e-26bf90bb44ad",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61aa045-fb45-4a19-affe-be93a96518ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9394d258-0bc1-47d3-9f69-8bcd0a72cfcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce374259-ca58-4259-9b6d-cf275c1f858e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb3116e6-0f43-4b5b-8498-bd125a63f032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d808a054-81b5-4f24-a092-ee5a95b95520",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4556a64-d5f9-4032-9954-1fda212d172c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea8d3eb-12a3-4d03-875f-0a92f698aa58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26a101b-3897-4181-938c-630ad698da9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec463122-6dff-4911-b98a-29b80c4f023b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e122b2c7-d781-4609-91db-5796f889ea1f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e714a3-2341-43db-84ae-8575b3c77045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6659d08d-7d16-401b-aee6-7e5085cc58c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10aac9a-47a0-41c1-ac3b-329c1c719390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ada22fc-5fff-40bf-b0c7-c1ab698778d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139f7588-65b5-4926-b16e-4ca9d7f974e6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0408ac-2f27-4a25-beae-4b58e58e4a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea7017f-12cc-44db-bd9c-b421ba9937f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b35596-b7bc-43a3-89e3-f096b97e9eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90d96984-8bc5-4e1d-b13a-86ee3b79c01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a10368-4fa9-475c-b644-df1b7e14c7ad",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bd8c76-2cc4-4a88-9ed2-54bff333ee4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0bb896a-2d5c-4ade-858c-01becbe2aec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02b38e6-82e5-4fe4-bfbf-2f7085132267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b41c9f6-512f-4e16-87eb-04ea2fd78755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd661f1d-20c8-4eba-9313-51cf1e2d2c8b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d87b307-5679-4277-8646-baacd718a428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "642300ab-957a-47bc-9649-12e30b7ba16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc93797f-45a6-48fa-a9bf-d6aa79579042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b1a819b-504e-45ee-bfdc-a62417de5b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a63468c-309b-4ab3-a693-079097616a17",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce100ad8-55c7-496a-9cfa-f871f6fa4a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a79cb3-518c-48bc-952c-002a48eefd84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d516e7b7-29d6-4f32-b936-d8f91d192f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58407d84-0e1e-4e1f-9492-0e47c0e439ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5370ee5f-3551-488a-9878-3a71db2e822f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8174efb3-5050-43a4-85f9-632815d92b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00bf7ed-8dbc-4b37-96a7-4ddf68870da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbe29e7-7eff-4948-af9d-2826daed0423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "392dd721-33ca-49b3-ab3a-7b39b3fb2c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a791542-42a1-4dcd-94c6-a0b2c700ee86",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abee3f9f-16a5-40a0-be1d-561e003a6c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a271a4-e90e-435c-bc8c-85fc2c22a4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c51dc4d-e7c7-4bfb-93c5-0cccc02ee14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60641c5d-edb7-48e7-a40f-b7305c2341be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793877a6-e8a2-414b-9a17-2bb628f8340a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a606437-c3b9-4f8d-abab-141483407b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a3f44c-8059-4879-9135-92ce25796351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a015b4a-8fe8-4d2d-94d2-ec6f463a360b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa133c60-69f8-422d-919b-27f98916961f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2aa7fb-03dc-431a-aa82-b85327bfbe81",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10aed1ca-6897-4c9f-9b05-d07aa89dc290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de597d69-3847-439f-912d-6e15ade49065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5666aa9-663c-4af6-a495-86fd708896ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ab6fa12-2700-4874-a609-d55a1b2271a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b8bf63-f6b5-47c5-8e45-b122e3e9f329",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1a871f-aed5-482d-8eff-3493d62a1639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88679632-0a19-43dd-93f1-33856ce29346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cace659-8d78-431a-9741-02b9f8006212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35c8a877-7727-448a-a818-fd550b1bc4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65855517-0a27-4ffb-9ff9-74cddd27566b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dfdf24-00a8-4876-bddb-232a920432ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d066e2-2f47-4bce-b39d-0d3b8b2b0054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60ad76a-9b42-4d27-95ff-bed0e98d710c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f83c323-4caa-41b3-b059-218119392a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e9e771-46ff-4605-8427-ebe048e8c82e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f839d2ea-82a4-4cbc-918c-e226d5916c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211ae98a-1b50-48a7-8973-1c2ed4a18d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee2dae1-661d-43b9-9436-eb9973f7afa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c779c22-1717-4a68-8631-2124bf8009b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a07061-5dfc-4fbb-a29d-e44ab698457f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82b52b0-c795-426f-ab7f-bad5a66aedbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0415ddae-0456-49e8-9f4f-af93b7721f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17954c3a-2af6-4c1e-a13a-47df2a97733a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c42a351f-3fec-4d1d-b8ce-e31d6510e134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d006d89b-4d83-428f-ac90-ae78446c855c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ce94f8-f1e9-41d8-ac6a-e7b246d1b489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3342b46-a80f-4bdc-b36b-79aad375685a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924a00f3-f25e-4f3d-95cd-57545c96c8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ab7c16a-3178-4b6e-ba19-fbda9ceb86d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d96e4af-1c8c-4400-858e-f325e0443426",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cef081-81de-4cfc-8a5b-a9121df14db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71564ee8-37d8-4a74-aef8-483c9372095e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827bfb3b-a378-4021-9fe5-4d5476bb2df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f55532f-b020-4082-a995-1c0b8cebcdee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5952346a-c3f1-41bc-9cfc-77a43b369d1c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c34b33-c72a-4071-89ba-930906ab64f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56995ad1-47e6-4e64-b044-24879e91fdfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359efa54-f2d2-444e-828b-c7c4bd57cde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "81ed5bc4-5ab0-4380-9b27-6ee6ac48414f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c3596d-a087-4562-a55c-71908ffef3a5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3c228b-43d9-4cce-9de5-ec639e0e75e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dbee8fe-c801-4fcb-976d-2abf1add9811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c60114-c00f-4b00-85e5-e3bddb93167e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3ccf18-7169-4c89-a120-4a898f8bd9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df08020e-e58d-474a-8b78-5f3842109f9d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0460ce60-9974-4a84-9676-28724cfb173e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e552ac5-e7d2-476c-9b8a-339b28481a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832d0fb1-1846-4d77-9748-32ee230f9dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc138e31-e25b-46d7-b01a-93ae26a8067a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066b5907-71e5-41c6-b8d5-cdfe34af15c2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "873beb98-248e-44db-af6c-e115c3ba2cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb8078f-910d-4b70-9712-a280cb9fd8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37999f59-fa3d-4c49-84be-519cb5d7d613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b1200e-0bcc-4530-bde0-9aedc8424737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d934802-8229-4291-b8cb-eff613b6d830",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5564df2e-3633-4cab-b7bc-f9ee0d3a1641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7e3bb0-dbe8-46a3-8983-2a8c43b82a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdbe3c0-04d3-4d0d-9656-f1f086afdc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe2a949-ed68-467a-a775-5dd38a6b0979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a424857-7657-4510-a347-ee304841efbd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee66c22-0c33-439a-8528-44c1ed915ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da0cab8-7af4-4c9a-b3ee-1eeede006404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc4ca9b-266e-4b14-8fd1-809ab0f57c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f00a1f0-7eb1-4529-8af9-5a139d144d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da1f106-5e3c-4cbe-ad04-d15fe236f504",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43d7166-718f-4a48-8357-c18d1d0e9c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c121d1-ee9b-4503-95d0-cd3df53d20e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2b5fe8-c056-4927-b7f9-188ae99a14b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac86d2e-3f16-4ab5-a6ab-00c70629f8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce20bca-8d80-4b48-b36d-cbb2d5f6a650",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ead6418-76fb-4c16-a774-e7c3022200ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e6635f8-6710-48bb-8409-b7a6e1c09300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e19f552-7911-4a68-9165-d5806a18ccc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6781efa-76b2-4ecf-9d79-e76716465542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54109f77-86e9-465f-babd-11b412a2fc9e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf286ef-bed0-4d26-8abb-bbdb5153850f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0a5a71-287d-46ef-b892-950c238d9286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83557d2-63ba-4dc9-ada3-ae1d0fe3489c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1ca3b9-1a76-4b95-bfbe-6b2718e50a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac5b2dd-ffa0-4c83-b849-fffbd270ca89",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475fd6d4-a612-4fdc-8cf8-1e38c540b31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a67285-b2aa-44ba-bc4e-a0252870f0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e3dca3-e5ad-4ec9-8cee-883d685fb2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bae1885-0ac7-4309-a71c-5273f53f3e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cc29e1-57fa-4c8e-b628-70738465c32a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3ff5ea-53da-4a71-9ab6-c386a9bd8cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40cfccf9-3ae8-419b-bd74-d0fdc0703056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5d6ff3-25b1-4dfd-a506-1a941a5f9c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2c05ca-ad88-4a62-9948-665d6dabff01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e68094-88c5-4143-8397-22dfc8945709",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fa2705-7c49-4984-96f2-41f02ac36e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0670bdef-b373-4e2c-a958-ced3a35521db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565af672-1b02-4bd9-97e4-152a9c14c4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b32b0f-d6f0-429a-be75-a45e840d84a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068fbf2a-bc25-44e4-9792-98a4c452bc5f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "367560a7-86ec-468b-a858-6769ae7ce815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75cffda8-6593-4695-a817-1cff80486533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab158a0c-7233-47a6-b464-712d3b2f567b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "683f8ea0-7ba8-4047-94a6-de95c5acc6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35cd9dd-3389-44d5-a0b8-e20fd417b54e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1c435e-a7ec-4864-b2b1-b9f5cbda5829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2604abdd-ce99-4b5f-b602-a569b2f834c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9eca9e2-4376-4878-bbb8-8ff53c8d178b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f26dd4f0-2d3b-4b28-99e0-b4a7e1643b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e0dd94-772e-4e7f-9edd-d61dfcafd6b3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4c7fdd-76bb-4957-9017-67d0306a9a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0a5453-fc33-42e4-9bdb-874758c3215c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5235e5ed-659f-43f8-a26d-b422e10c5b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b73bf29-4e24-4e45-a77a-3e7335fea6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179ecd08-7d6f-480c-94d1-697fa93b0c4c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fada6f-d044-4a21-9405-e5eeb9e66d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660579ce-4308-4ffe-b3e5-766e1cce5e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1896fe01-3413-4ec0-8a4d-6815f48e0802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a87fb176-29e3-4eea-8e1a-d39281bc66e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f78c646-a368-4ac6-a475-2d6abfd0bb1f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c971cf6-fb06-49f7-aaee-af153fc97727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f193ef77-dd3a-4dcf-ba41-65b042e17307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6424c41-c0f9-4a75-8315-8aecc817c5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd952c4b-7f6f-4567-b648-0e12aaed66e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4098ade0-8ff4-4d5e-b6ec-1a9dc69c9975",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318c93ef-70d6-4ed6-96b3-c473bf4d035b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bff8007-4c06-4ac0-aa79-eb31325db1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc19b5a-3bbb-4350-aaa7-98cda3476c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9c22b7-e17b-4f0f-878a-fedbda0361a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9f9f30-cd08-4150-943f-6c5b7c75cfd4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d1b4fd-06dd-4531-8819-4df2b0667022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "184792fd-b5cf-4908-abcf-a3af8d17cce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c1ee00-94f8-4478-ad71-9d008649341c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee8b83dc-d7db-4928-a301-06dfe60b7795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f0fcd2-4222-4040-869d-f21a18eaa0e3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2814d4ef-321b-4dd5-b7be-9b4b48f0292f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591a62cc-1b1d-4f4f-babf-6a471a46aa99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0544b43f-1b52-43cc-ab46-0acce961149f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f610e1c8-4b4d-479c-9223-0c7875a93417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e529293a-9349-490c-b9e0-b33a743d98ed",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4aadb86-2a9a-4dac-bd0c-d5d48490891e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb48ab0-dc52-4a00-a5ec-2956264f1131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd5a3f9-45a2-4212-9aa8-e1dbf4aa130a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "864f0b61-9fcd-467a-83bd-208e14c67313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360fb77e-6258-4c44-9972-f6379feb7157",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05ca845-f2ef-47dd-b70c-06b0e8f63b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8183e71-8d98-4271-96e4-240ce61225d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f59329b-370e-4383-9ae5-2685feab33e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "267faba6-9448-4f5a-9a42-ea10f1d540ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb07476-1a8f-4f96-b6cf-a0705998d4ac",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf287048-478a-405c-8b51-42ede4064eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1dfa15-30e2-4f4e-a9ed-b93b789cd9ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a9b87c-a609-4fad-813a-d8e51fded1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a44494-d58e-4be1-ae36-3e321e5b4d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cce3687-50ca-4392-9cac-c2ada15319ee",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62a78c0-93e9-457d-bbac-8c3155ebb184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b87562a-a4bc-4d6c-a834-171d3b039d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d9d919-7db9-4e37-b6fb-215d125dee63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9143b0f-d022-48c4-bb16-9930ec6bef77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32ce112-ccc7-40bc-8b70-48c66b60ad7a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6f8a4f-c8ef-49fb-b408-8cdd02118a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6d98c4-4f6d-497c-b4ea-9d5587f67365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8619db4d-91bc-4a19-8e15-db2d68b02bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1fabbd-61aa-4360-a49b-b476c85c60b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac5ac2e-fed3-48fb-8f31-63c75f965f29",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af35bd38-83eb-416e-89dd-418ea4c54fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f898662-bd95-4810-960f-f02fcfe2e85a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9092031-f545-4caf-8150-201460c0b3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "83a77da8-cf04-4131-a25c-edaf72736c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70943f64-bd19-41a9-9df7-8afe059fcfc5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410f5f34-c1ac-4938-9878-155f1cdc7147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50125cf9-b34d-47cd-95b8-a15a857e9f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02780cdd-7474-4eac-8515-aa6cf8354311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5352412-0ad5-46fb-aa73-e3c63cf6ad27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbb0c0d-da85-453f-9fa4-9278474db3bc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7491a5bc-92cb-4c30-9721-174031d88154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a348349-06aa-43fe-a4fa-8642d9755735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3d22d7-c1e2-4fd0-b097-3c2a1991bc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3cdb4fa-7d28-4538-8da4-824aa26c1b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a374fd-356c-48e6-8061-f1dee6da63e6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30ce5a2-43d2-4bc3-8161-a8c7ff595c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0576f6be-e4bd-4a48-8b95-bd2266508ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa8d4a8-70fe-48e2-93e3-24f80d334b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0eec5c-0261-41fe-b813-b88d2e6e26d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e75753-8847-4953-acd5-71b1948a7cf5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9574a6b2-0d1a-4fff-a4bd-b8a6683d64ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d58f87a-dddd-465f-8a49-27098ff9e55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc280a18-d572-427f-8b08-ea3a0bf4b13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5082dbb-e351-4c1f-aa06-6efc96878d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1ceea9-cae5-42a6-ae76-19b9359ec755",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585beb0c-b359-488f-9018-1edc4cd18b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f32bba6-0830-4ae4-8a82-cb2c0bb0f285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7269f4e-82d7-4fbf-af09-b472f81ed154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3974d119-b056-4687-bfd3-9d7bba2aef09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2712e6-db37-42fb-ad61-16ea62eea9be",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a14deb-a5ac-4818-a8d8-87c68959990f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3763dcd-8cf5-4154-b920-d5c58a6ead6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32eeaa8d-4b8d-440f-87f0-3df54e0ac209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61a66de8-e069-487b-8b51-b7acead44e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c771955d-c9ac-439a-b9e9-5e3200298102",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0c5ba7-6b79-4e7b-8d95-7cd831f1c56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633fe9d9-c255-4b26-a2af-8ac0906212ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60e6b22-f384-4765-b986-26405a447290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1a299b-36c6-482f-b92b-ab8ee119374d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba97a0a-8ca9-4537-8ee8-84c651d16390",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8543de7-fb88-42ff-bb60-1864308b7d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a15e554-727c-4972-8c17-849d8b2adb8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d28e68-9b7c-4f8b-829c-700a96b8692f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6dd7f0e-2880-403f-b99a-f86f5de53b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7d886e-9c7a-40d3-b4da-1322802cdd33",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee1da06-58f8-4abb-b714-750a8b94fb9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b772800-00fa-4355-b3fe-3670b3c4ff0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7d1f90-0d97-443a-8faa-0a185b6bb597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ff18f7-9dee-481c-a44f-7c268d496829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e980e48-ce90-4d9c-b4e6-2fd69c2880ba",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5845dee-66dc-48fe-8a2a-c0d12de3ce4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a409ad07-220a-40ae-a531-e6cab22da7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e09f99-91e8-49fe-84aa-4720c7319955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19fe7b20-5350-4aae-b02a-9f5b498e6b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7489e1a8-8fda-47b3-a32b-e07b1280aca0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fb94f7-0b87-412b-b041-a954bf93a58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabf8c58-053b-4985-956f-64bb135685a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03869690-8ee7-436b-b259-9b76a1277b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e84bd7-8147-4ef6-a913-575503e731e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d46a12-0267-44f0-8aff-6acc7645a047",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2eaadc-7787-4598-a4f6-1a555c594523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd2e0ce-b979-4781-811b-0bd74288de7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba46d281-aa26-4637-a3c1-63f21fa884b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "690cf414-08b7-4e3b-ae41-f5e72cafc5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a3eb60-6b01-466b-a48f-c1676b9459b6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97bdc7cc-bb95-4bc8-9804-4015c6575345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb0420d-42e7-48bd-ac4b-079ef434d2d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e883ff-7869-48be-a804-f068dfa27ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "220d1b9a-f160-43f2-a1f7-6027a3cfc45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4398e4c-01d7-49b9-a776-25ee9db277a1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d52128-12c6-460c-917c-afb9f4836ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c251c13-6218-4e8a-beb3-d9b9c270aeda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea33302d-49b1-4770-b558-ce62ff2e422a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "44bbb5ee-c2f6-4a3d-b0f9-27430a1b8cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57525ff4-b628-432b-ac0e-bfb920b79048",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb42115-e695-4c4a-ac74-52922b585479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2adc46-3745-475e-b886-1ce12a4d5c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30ec7be-a1fd-43ac-9951-5d06f7b556e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "35fe6153-9ece-41b5-8dca-53bd09fd83de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78545392-486f-4362-b7e4-486347c6c9e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5790da2b-5220-4ec2-9607-61b72512b759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d1ff1b-c200-464a-8600-ab6530b8ab27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfbc82d-49d9-43e8-9b28-d6a0a9f2d454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "64e17038-ed31-44cd-9f0c-3f3b2a0da23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6398b2aa-ef03-45f9-8924-b79494d55a4a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a8f608-01b1-4f18-8114-489280d1f65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c2db5e-61d9-47e7-870d-9e23278fb36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416faf61-8734-4528-b20b-7cf723a97a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "75de6768-2142-449b-89a7-d8ac48f47dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe1ed56-2cb8-4d6f-9057-d197ab8728fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad61300e-571f-4381-bf32-20cc595c6c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062451ae-055a-4ea4-bf04-05bae49d4924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309cab03-5bd7-4577-bb5c-42d88159d820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "72155d74-912a-49d0-b3d6-998172177297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7821646b-0029-41a4-90be-b7ecf0ffc73e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5df9479-7b45-4db7-a2dd-5f0e0b9fc091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc98ca3-64ac-4b47-abb1-237a60d873e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5582f68b-1ad5-42fe-ad71-3cc9d51bc83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c92460e0-1779-43fc-8b1b-e83f185500bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01dd6c21-cd67-4643-b751-93dde668fe29",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d78a0b-8dca-4167-9156-530290d2eb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5923b087-ba94-4ced-950c-57edd447c375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f620f0-cc59-483a-96af-07ef2f6c39ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "29ee961b-212d-406a-9c0c-cec0db766f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d621d27-9c55-41a2-a92c-51bb81d1a753",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d1fd09-fd54-4ca8-a0ed-a8946de95e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18713c4-2049-430a-81ff-9ec2cf2feea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b385ab52-20c4-4715-965f-577d96dc58c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7e5487-657c-450d-8136-867752d774bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec8bc90-8067-4346-aa27-c56bbb82162e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f584f7d4-c13c-4b7d-bab8-06d4a97e8fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6efdaf18-d1b0-46ca-9554-d63251fff2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f08f145-f464-4358-82ec-10145931b5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f29a81be-395f-4196-9cb2-60d56b6fda43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec41ec47-2a8d-4c61-9a00-75582ccb8588",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab071e3-2600-4ff3-ab45-4b46bae66dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1195b0-480d-4b2e-9d1d-a5f21b0edce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c69c9fb-eec2-4f44-9756-935b7898aa23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ae91ba1-23fb-4623-b25e-ac94bde0fef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede5f296-afe9-493c-9ec3-d48fb5c743ff",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fd2e69-b739-43b3-8835-1946d3abb740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b374fc9f-3f73-4fda-a705-ea90de037228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88888478-9cd7-4d9b-bd0a-36392005b622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0123da-7826-40b6-b365-38e60f86b1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a9b5f1-7edb-46ea-9165-e578157618e6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bf899b-460c-41b4-b96e-98ab286f1f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d86c0b-77cc-4c42-96a5-6bca2eb3bc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282c58dc-7c9d-4fdb-85dd-2c97df952e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c74f21e-1e9e-4287-8dbb-a36397c91417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d19bb2-22b5-442a-a89a-224a10f6536b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8055c9fa-4222-46ac-8b5c-73f855f37d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13afcf2d-2156-4d2d-98a1-b88c4b0cd9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac5ecd4-be90-49d5-abd1-0bdfdbca177e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fccf3ed-ae5a-44e1-890a-1d42ac49ef10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a7bfad-b3a7-4696-a614-7c82f4d87e09",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337ee7de-045f-4ad3-8383-4ab1b00c7f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0c90f04-a95e-488c-ac7c-010541cf0bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c51cda2-68c4-46e5-97e6-7c273a28ce8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf84bd9c-e401-410f-ade1-af7976ddef6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24c60ec-6594-4e42-8c41-deef35fc45ce",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6560b616-ecac-4754-aace-57045bac27cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f407e09-81f5-4487-b187-55d6f987afef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49306839-e716-4518-88de-b7d47a791c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7377d944-6520-4966-b5a0-15444561200e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f9db48-a37f-4e60-86ff-fec9594686cd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f62c55-baec-4a51-8e30-01cadc321970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5cc101-1cc9-4b7c-9e62-533f1d81cfd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed43806-557f-4ce5-b89d-2a317cd7c446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe32f43-69ac-4cf5-93ee-d994f517197e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122435a1-bd06-43b4-9ce9-939ef37cfdc4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b3f60f-9174-45ab-827d-0e134fde0d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d9f785-6281-42b6-8d5c-3e3213436a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882b4d12-b843-456e-9797-87dff243611f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aac6e7d-6bd4-4084-8123-34e66fb4ead0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e141c7-8273-45fc-a7a2-848df97b3e6c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb6ace3-f5ef-4685-9cb9-5a15e67705cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29e4b743-dfb1-4fd9-8eaa-eb5477861508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675c4dcf-0a7f-47ef-9f51-3f0af9504f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a329dd1f-74b3-4b3a-bac5-57d66553b3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbb5627-eb86-4ad9-9de1-d7dea8466138",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b64a84-16f5-47d5-a612-461ab7839889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d5bf9a-4da7-4423-8f60-e698e4238473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31306ee0-7de3-43e1-89e0-d547b1d1cba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "efb27d48-80d9-40ab-9050-71f4da1b638f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a544225-20d7-4d4d-b8ac-3de475db4aa6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53af40c-f0f8-47ad-97b8-f676ec1272cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618f3848-2552-4012-aad9-5f5abd01a551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015dea5f-742a-4f3e-b0cf-d3a286e4d3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb22686-e94e-449d-a4a4-c9746a674137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ce6581-902c-4ce4-922e-29a4d4b63b03",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a9e172-0b19-4898-ba74-fbc6bca91284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da5f076-87b8-49dd-b29c-6974e537dedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1bd65b-e0e8-484b-8282-c57a08b368eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9383ca7-ea59-48ff-b35f-069b2188e2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42c7d12-2b4c-46a3-a745-85d0d1235aa9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9da71d-8335-46dc-9718-5bd23080618e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e677132-4e09-4aee-8c9e-0f4e50f44c16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6043e519-746a-4886-9467-08a0593bf0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd3f18a6-07fe-47bd-b044-0f1a1791a901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a24aec-47a2-4789-bf2e-239ee8aa54a1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8e3381-97f3-4591-82d6-70267e6f529c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01213655-8ad7-4a88-b746-8898a2357411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320cf24e-4d0a-4f17-8354-847281f307e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "23f9a3be-13ec-4120-b112-403fbad02c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc807ea-9715-4aba-b4b8-5c8ae6e8876e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffff2c8a-6f1e-410f-ae87-41cec877eade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b17c775-2b65-4ec9-a975-7d8cf3832517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fa4069-28a3-47fa-bfbc-4ae93a0c19be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e01eeba0-b408-4977-9c82-db0ab5b3de33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9203ed01-afd3-43e4-9ea5-47201a95211e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76f9372-4d6d-4099-92a9-339a48a50268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdf7a61-3373-4ec3-93f9-72bf9654883c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d075f6-dcbe-467c-8671-1d8f51f16d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1bc769-5617-400c-b2c3-048052a7b88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad78387-b67a-4f19-a26c-1c2613c5b77e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df837971-f4bc-4dd4-86df-3f215cc2526a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8deda137-98ea-4cb3-a7b8-c4e40c947fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809590e0-64bb-4b3a-9cb0-bd31f6e563aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66659439-843e-4d9a-9059-7af8989e442f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30c2c2d-1db1-4de4-92a1-3668729d2ddb",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c627ed-8d02-4aaa-bb6e-a06671597078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff565c8-1cb2-47f8-b231-6027c37c1d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86bc5847-b498-484f-9f2c-d0ba33f21b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b846db1-94b3-4561-bf5c-ce871382aab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f2fedc-143b-4b31-b9e4-88ed70834335",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6a5f0c-3cca-4384-ad06-7f85b580978c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3fe74c9-944e-4358-846c-7e6a8984406e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240fdb5d-d695-4746-b695-a60bc848b837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a75dae89-7179-46aa-9e8b-e4919f1a7b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9545d465-f6ad-462a-9b1e-f686205d9707",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25557c55-0804-49e4-9792-7f2eef8499e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390fcb3d-2dac-48ff-95b5-b0d33e62d32e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90017c6-95b2-4cdc-ba36-fbafa79e41d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b67cd4b-2d06-4147-8dc7-428158ca0e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caeea90a-884d-4058-b417-d80bd9d37c78",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59e3971-dd57-4e70-a70e-8172a26e1490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c135cc00-f594-4eeb-b79d-210001363f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f50108-b1b9-4a86-93d9-1809e504199c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f31630-5b68-4ae8-87d5-d8204547cd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3af0232-acd4-4a01-ad86-4e17a5ba6007",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d52c5e-5618-4715-bef1-7e1a85d3d2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4daf988a-4027-4b74-a773-7ae70a03f0a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c27aca-f1a4-4a55-af4d-0625ebe94e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe0f47e-fe75-4e43-b5ab-c89e1be8faf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8529411-1df6-4f7c-8894-6ca42473ec90",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2aff687-92cb-4475-a1b5-d6b1a6cfb1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e3a29f-b789-4163-81db-3bdd0c7c96a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1c6609-6de8-4eac-bc9f-341d867476f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "318c5345-3572-4a8b-9ccf-36bff6c7bcf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b47ff75-a7e9-4d49-8ea8-7f4ae435d91a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fe0a62-c056-4749-89af-d422bf3af413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff47aa16-ce49-444e-bfbd-5926748ddbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0c8229-8333-48cd-9572-2996a1d3d491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "69c0ac9b-87ef-42f9-9c2e-9c8fc757079c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b39050-a50c-4e2c-a3f8-18d4f07d0e4b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eacb7e6-3244-4821-bdc5-5af45fb435d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356213c9-326e-4401-b840-dd1c84b740b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da42e7b2-a73a-4d31-947a-1d838e03bea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a93625ba-f214-44a7-94f5-3a28a03883bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881c1d85-4da7-4f6c-9adf-f2db46348a2f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0253f6f-c4a1-444e-94ec-e6f13e7fd286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d7b4247-f66a-4948-80a4-0d1dee0b387f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e66daaf-6ee3-4135-b106-d2e97a47a1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5630cd0e-9216-415d-a11a-a6b86b0b0633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2253315-189c-4d78-a7ae-cbac7e41a765",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0576dbb5-325e-42c6-a7a3-b6a50b0f75a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ea31eb97-8960-484c-b2a0-64fdd9a5bd70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed78ef1a-62bc-4093-a7db-ea6b7a72e101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "20e0d520-b2ca-4493-a1d8-829e7ad2e403"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f9aec229-2a1d-479d-b88d-a79da1442b6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e0f4624-e7a7-4b5d-a5be-3cf5f41469b4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fea007d-ea77-4890-8d5e-519755060bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6407365-2ae4-45c9-81c2-4eb6d57dca71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ce8fdb-5402-4747-8a95-57e5f34bcaa2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58838f2c-e8d5-46bd-88f2-8487b41d7a7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "719b68c5-0c84-43e5-8142-ffd2f362e88c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e7e7337-94b8-4470-8833-6e4a0b49bd86"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "805f16c8-379b-422f-b1a7-1410cce5a5cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e3c7dce-01d2-4941-88a9-14d63e6d241b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "78a26ec3-570b-40a6-adb7-5d4c1de1501b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d19997b-b436-4071-ad79-c8f324bc541c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1e473036-75c7-4bfe-89ee-976c9b03dc95",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7dbb45ee-def9-4d74-9aa3-47e0f9854f84"
                }
              }
            ]
          },
          {
            "id": "bf71283c-0fdb-4162-a1d5-71a6b016d757",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bbd25c3d-3bb1-4d97-863d-b4cfde142b5a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e77c7694-9724-45c6-8071-a3cc705dd100",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7880ae9-35ac-4d79-9336-d807c3200e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7961b1ca-a2b2-4d9b-93d2-606a61ea36ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f095b05f-1334-4166-bf49-32c1ce56a117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3fc5b1-7fe8-447d-9b43-f71a2e7973b2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "30203675-8849-4f50-ae83-37d894316f61",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae809961-444c-428d-9972-1cc63f24e7e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb2145e5-ae22-4baa-9a5b-2d3e678a1e01"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bff100f8-e50c-4c25-98b7-ad4fa39421f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d19e3afc-ceda-4c37-85c8-faf00497ce96"
                    }
                  }
                ]
              },
              {
                "id": "9cfe7a4d-5e4b-4370-87a5-c645bbb8d1f0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f66a6da1-c856-4914-9f24-a6dc680d829b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f895d44f-1445-49db-800e-d0c10844d607"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ff13aef-46b4-4119-ae22-3800c0d4022d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1195aafe-6a4b-46ad-86ff-004bb32c1820"
                    }
                  }
                ]
              },
              {
                "id": "39844d6b-3cd7-427e-b5ce-395ac64e87ca",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04185272-432f-4fe6-b176-b99600a49499",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03c085f5-9e26-4226-8b0f-d1d547ec2806"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "86c263d1-b695-4ee1-b6a8-927dd84af471",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "649a15d3-6518-4e71-b410-8c6905b7dbe6"
                    }
                  }
                ]
              },
              {
                "id": "afe60e40-b26f-460f-809d-af8830505fd6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45b2ab03-b78b-4289-92d2-5f88e86b9d95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5942118-779f-4cc6-b034-8d2c1b3ab74e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5240ba1b-2da6-4c69-a02d-3ee4ba665505",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b204dde2-55d6-4774-b6fd-d573e3574cea"
                    }
                  }
                ]
              },
              {
                "id": "6b907381-f1b2-4f23-afbe-4be8e52e6d20",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a08010b-d06a-4f07-b282-9afc7ae1e808",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f577b811-969e-4b69-89a2-4fc0020d7ba8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f0610cc-c1a1-4450-8ce6-f8418d357a1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "abf320e6-b19c-4371-8c8b-4c3adb6f07f5"
                    }
                  }
                ]
              },
              {
                "id": "25f3ba5b-1ee0-4bee-be0f-2c52a9486c71",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "636619b0-e77e-4a08-b2b3-de9f61702e23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4cbccff0-9d5e-436e-9324-17bd1452c20c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b2e0cc2-3300-4853-8382-394812d87a25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "491182a5-2265-4d06-918d-5b7fe6d97b45"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "88f64872-8ee5-41bf-bea6-055afc12ec14",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e79b78aa-4233-4f66-a37c-d1e1c6abcd42"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9017db6b-c990-4415-ac45-21e88c12453f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a1a9705-cf5d-47b5-b3a9-f9eaa1d46049"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79f01c6e-353b-49dd-97b0-ccce908628f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c78b3670-1fe0-4994-b874-c153b42322c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf34d879-4517-4481-bc4a-1e592ac3dea1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77e4d93f-6123-41f6-8c51-1f4c48fa6ea1"
            }
          }
        ]
      },
      {
        "id": "c15b256e-04e7-48f3-bc62-34c46d82199c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e3d174cd-d562-4b42-9eb6-96419badfd39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0d8889f-442f-456c-9ac4-db486c97c759",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e9282c1d-f017-4845-a587-7cd475b99fb0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c96ecbe-46d2-448b-af8a-e5ce3e813e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46fe2473-0059-4a75-ab15-9bfa67b7ba66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a724899f-8659-4c78-9dd0-665dd2b6793a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "23106bea-a90a-4d92-ae7b-b5d0ca1d7494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e378e3-7109-4b02-b3d5-5f50860429a4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309bcd50-b607-4d39-9e78-799cd06da3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3785cb30-f591-4cea-9a2b-54e35ecc9704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1e8d8d-0fd9-47f1-8e0c-95011f6cc871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba08aea-00f4-4cf8-83fa-c2234b3985ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc7a278-0c0b-43da-a82e-25f380c1de18",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759cf15c-a932-4659-a606-b3aa992a41d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3b7d3b-5c9b-4535-803f-3e550066fa10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfe6734-713f-4b57-af2f-2fc1dd51964a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d14a8ee5-b75b-403b-a722-2b4720a7f89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec45ca63-50aa-40ad-ba2b-19fe96ff365f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cac60ec-8aa8-4287-ba6a-8895abcac907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c34ccd57-7b45-43ba-a294-b5e90f61c2a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231f5cf6-3cc6-4d15-a950-30e26a11f837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7fbedd4-cc5e-4940-9763-98a6ff77ebab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10387f05-70ae-4c0b-9a0b-b7e23a4c55bc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea943aed-875c-4698-943c-8ec9c81b0cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5800a3f5-be2e-4ec0-b979-af1eaa7ca359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08449a90-b33c-4407-b551-25633aa1ee4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee50dc68-8d6f-4b34-a49b-f4b8f802aab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd839a3-7d7d-40be-8def-3f3971e24d8b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb19d97-08d3-4b63-8c22-1cf1f297d617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32466ace-e005-41df-be92-673c68ad79b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8880923-e8ed-42cf-ac64-810ae4026a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe6e3ce-8e78-42a3-b23d-494921ed9d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b960ae4-df2f-4d31-a088-032918648b25",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130721e9-5b95-4ec9-ae9a-f58344d8bc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36467309-89de-4fc2-a1d5-db4c75dd6514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31682561-d5b3-4cdf-b207-0dc473fb91e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f54e913f-9555-4be9-8907-d1236adf3e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c8723c-636a-4ac0-b909-458f57b8a86d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc41172a-261e-43f5-911e-48c973ec98eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0a3477-d10a-4d12-9ab4-c18601eff6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0d5815-b205-46c0-ae70-c78247325d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a031d1f-f44d-4336-a9d6-527f4b32ba93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae71d3b-c61a-42e9-a6c7-fafaef6d5ab7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47b40c1-09e3-4d67-be32-c4e1834853ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080c3689-5eaf-4e0e-8197-0f449b662874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a11d0b9-77fc-4cad-b431-322e2ac826c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5164070-716d-4c2c-b29b-8cdc08d7f32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08033444-3620-4942-aaaf-6d4117901320",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b89d8dd-b875-46fc-a69c-31c5738d1eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6104557e-3cf6-42d3-a3fa-0d5ac4b583e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60946299-4f5d-41f7-84d0-c4bb44bae7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a31699b8-a47e-4565-800c-aa19f25e7653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b95d7d-f8de-4c9f-9fad-76f613741ced",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12eab1be-c233-46d6-a932-a9fc8b31a98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dde0ad1-8c9f-4f75-9861-4d64d36d8182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b52ef2-54ec-4a8c-a6cb-acd345285fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b44ab0b2-ab14-466e-9ca0-a6097f35c0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedd4ab9-41a4-4202-baa5-10a1eef28de9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6ba720-68b3-4b75-845b-aec25421fece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1005914-7bce-4482-836f-7c353d198932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a0cf44-7663-4884-80b9-d2c543282ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5c2dc4-be97-4e64-a2e9-381e43170fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31136d7e-bccb-40b4-b936-0f0a647aefb8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1df586d-e550-4f8d-87b1-8b6d56916477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c364cbe-02f2-4db2-9eae-87028e053d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193a858f-f41b-438e-b652-15113bb27c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd2fd84-9eed-4eef-aa45-783a08c62d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1205d56b-d973-4f76-aa02-029b7c83955a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e838fd50-9fb7-4aa4-898e-1086aed85bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d497b7-2c46-4574-91af-51d106f86fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c17e3a-35bf-4149-83cd-a8f6717c6531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "367648f0-4e5b-4880-8971-a7f6333b866d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc807cf-8533-4eea-b7e9-f6f191b3f58c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "701c0a8e-3c5c-42c8-bb87-c13d0129cbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77f447b-8c8e-4910-9b8b-5c5701660982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b02a6c-16e4-427e-9538-3998a2cd92a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "83a401b3-e113-46aa-a235-97ffa14f2f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671a456f-924b-4ffc-851d-f4ec4610c12d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38dcd838-8c43-4677-a67a-4621e89eabc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb35d71-6b1e-44bb-a698-2f0723c457bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7907c4bc-8ddd-4499-a29d-191dcb147aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "023ae1f5-3815-46bd-806f-6ca92134fd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1978e5-cb6c-423e-869b-c1894ea2d2cf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62e82cb-bee1-4f70-82c1-cdd6b456346f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be49819-4157-46ea-a40c-da53956d403d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "178b5766-9fe3-43cd-86fe-44a7efb0a70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd21d1e9-bbc5-44d7-9b5f-534f39b3716a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218200d5-dbbe-4c7a-ad5b-2da04414539a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f9e51e-182b-41e2-b9b7-8a5712e736b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390dcc5c-87ba-4e81-9480-84d2ec848b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656e7f6c-4377-423c-80d2-d3f55e058e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "95a03475-793e-418f-a64a-c748554df684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196667e2-709e-42d6-8d80-d3b152a076d7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378ce4ab-8c0c-4d93-a926-55781fadce74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734b91a9-0d1b-4b77-bcbe-bbdf1168c8a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60fd083f-dfab-41cd-8235-fa16457a150e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68c3c47a-29fc-43fa-af2e-6453ea0daa6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4d9703-075a-4313-9881-50bf1f00bedf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6087bf42-aa87-4504-8e27-b384acd6d1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ed3124-c1c0-432c-bcae-2763064e85f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389b15c5-711f-4d7d-adc4-77f1222795d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef84e83a-8142-4475-b7a1-8b7d2c39b001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372edfab-201b-4f40-8eef-fa3833c2cba5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd99cc1-5e0e-4ca6-8ac5-dec71dea05ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ea9841-1368-41c0-93a9-4aa1cd7e7cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2155b70d-cd65-459f-8f6d-b8f78f1031f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9db5cba1-fca5-45db-9ada-bd56e56bb7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6395aba3-ae0c-45a2-9556-334582649fac",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49dc6c07-92c3-481a-a23b-0424d4e9e432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b7361c-cbd8-43cf-84d9-9d84c41d87e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39e7453-39f4-4ef0-9fc3-634ac38a6dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7626771-0646-4c69-a1ef-eef01b749def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5150f335-30e0-4b1c-bf0d-42915b499261",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ff0333-9c8c-4e58-b274-f41646f69a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfcec64a-4530-4730-afdb-42198f2bb3e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b32b49d-e6b8-4b96-aee4-5206a314be0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f69ee13-a972-48d9-b23f-1822f689323a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498a686d-ac88-4acf-85cf-e5724bf658f1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17dde3c9-7b2e-4028-aa9a-6bcee4c2163c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7562d85-b4a5-4ef9-be88-65a3574aac6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea614b31-4067-4b43-a35a-f5a55567b891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a91b9cbe-c07e-4e4d-a73f-19782bc6a6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6142ec-ae36-49c7-87e4-196c8f1c8c4c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1df742f-8c77-46db-9000-7e6b03f204ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ae526d-8653-4e38-afe9-91a0f0718533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e712d3a-d011-4857-a6e1-bf1f2a2127c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97f2e399-936f-4d84-8a06-5987a8f3493e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170e509f-2c0a-475f-8a2c-c6064c0fcf2a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5a7e72-de40-4007-a276-7ea2d9319eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ed62e7-adec-4093-81f9-5ae4d337b233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdbd2ab-b88f-4b41-a181-6275df85ae13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c10544-4e0f-429c-b553-1abd8381c2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90844556-89dc-46c8-9e2a-68394be31446",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f3a47c-3721-4358-ae17-4c04b6c7c405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "742703f2-1987-4c5a-9e30-b6e49e879208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376c3998-a43f-4dc7-ac2a-6b88903e4301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f5426e-6676-4840-be6f-3850e4484d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711584bb-711c-4b00-8f41-7de4877c90f1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fba87b9-8e66-4a72-96c0-0252cd7777e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe73f98-e7f7-4b8b-b1a7-c91d332a107c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a719d8-0913-415e-8997-220063c05b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67edbb79-5ae8-464e-b07f-cd3c6d150b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c95fcd-0c50-412d-ad0b-da27bd475d95",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3687742d-52fb-420c-a20d-ed30b851f758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9975a909-d4f4-42f2-bb7d-5c9b6f3a208d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebba5f4-567d-49a4-8b19-68bfef75f779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c624afc-8325-4c70-8732-b42ea16666be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5829f6-a76d-4c28-81b3-108d34362e2b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f39040-1390-493a-b19c-c30d6fcda36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2bc9f3-2e7f-4db9-af22-260b90a8ec43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dc1b80-3633-4c93-9109-5f80a7a82bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f8fa3e2-20f1-4ff7-a634-4cdf54972759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6863867-a0a9-4a14-ad02-06d7f5d37cb5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5c3c4a-622c-4673-924a-91625d6c7381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4257787e-b6bd-4df3-8bcb-f1bda609f9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda1c13a-6d50-48c2-bc7a-0e73fdd90cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b7a3f45-0591-46e5-a155-07fd3f2b6bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42c7523-7f6e-436e-aa68-9ecbd1eeb257",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2052f754-3a30-448a-ab0b-cc966ea78200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9649584-a981-4afb-9a0d-32c93b125511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fff2164-5b3d-4552-9c92-f278bbdeb70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be87a013-56b3-437d-a5ef-030b1eddda36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de9786a-750e-4145-987f-908125f622b4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4e1d34-8f9c-4658-bca8-a8dd4d867d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a26dc65-1c57-4868-946c-9bfd30df13d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7995d7e3-8475-4245-a22c-3dac1c0b12ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eae860af-c08f-49f8-bb33-6309deed08c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30208217-cf2b-48ea-86fc-b6d75531252b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74851f70-cbbe-4a29-a8ba-73734fad9b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f718039-17d4-4b9a-b954-54a36acbbb84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff586e67-b0c0-4f8f-b8e0-16a164e9777b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc89b657-51d5-448f-a54f-be386ddae7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5708d0-14d7-43b7-adde-b326670b9a66",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c8c4b9-bc51-41c8-8c09-c93640d2fdc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71261b09-dc38-441d-982b-e031c91add30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8d70d7-84e7-42c4-86a5-18df5d77c47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aaa4b9e-ff40-46ed-a8be-9f50ca100586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0999da52-facb-4b89-97e2-d5c984476e70",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d69fbc4-934b-4ac1-a724-4cd44fcda93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d57646c-dbf7-41f5-8bb7-a9b818f141e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b5863a-5b1a-49a7-a6dc-01ea3e688a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afe35cbd-497e-4883-ad10-15645991e9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10103875-4583-4d8a-96b4-8e89ca70c9bd",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd3786a-2d71-4ce0-873d-719d6e074db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf15cbfb-6f03-4ba8-9a5b-e85baf3a7c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79a359e-f13e-49cf-9e3c-885b5744582c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e87baf-6538-4431-954e-393f33be882f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "36ec355c-cdee-4852-b26f-e109179c146c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c9c5593-d887-4d1c-a095-6905cb69ff63",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03f00a1-612f-4aae-8283-d155e698c9e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bda0692e-0afe-4996-97d8-2c569bb7f330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1503a5-c5a0-45f2-a25f-3035f4600f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3d73139-eaa4-4d03-a371-3f96a5ac5bba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d8790ec-646a-444f-b7f7-ec8db1f87d5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9dd1e170-8ac6-477f-b5e3-f09a412762ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab990ec2-0ba9-4254-a663-1a9824ecf5e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dec2a5c9-9d46-4a6d-a77e-543ffe5cba06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb6ddd3d-ddd7-4ffd-af1b-26fd3e6129b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a2307a95-08a2-4b0e-a338-acecf6c913ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "504cde68-0eff-4dbb-b0b8-5069e16550de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5aa2c172-6fb1-4089-b128-36c571099164"
            }
          }
        ]
      },
      {
        "id": "a3fa1f86-ed8d-479a-a8bf-60a7cfe43fc1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4bc6688c-8ec0-48a2-9a89-f65015477f84",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7ab020f-54f7-4d2d-8a31-4f97ca0cf601",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f3857c21-d443-41cf-a105-1c21087a2daa",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87ba9b1-51aa-4750-a108-47bfef7c0fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158ddc22-c0eb-41ce-a33d-8f1bbdae7dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5177d86-4c1b-406b-b2fc-5a3b522efe8c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22e3ce7-1d87-4917-84d5-686d6aca8579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1138f10-252b-4635-bab8-e24d0c7d1103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d922f873-1123-468d-a5c4-0746cb1e38a4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd5ce41-0451-499d-9eda-d839aebfbed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81fdc66-a6ac-4419-bb50-ee040be14c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457e0561-d630-4798-98e3-a5a52b0491ea",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8c0d1b-c5f0-40c7-85af-ac6286f87d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a12fbb08-513b-48d3-a57f-5df66a310eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa43d8b8-0776-430e-95c6-7ec34ba68d9f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd39403-c803-4609-aad9-ee7e8240bb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f23d4f0-f80e-47f4-b26d-f6ce45a01031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f827ce-1916-4f9d-b199-6c0ab9db31f5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf195eb-b24b-471c-8a03-87619d886cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c1a835-665a-41a2-91fc-c5ed2a37c4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99414b0b-48b8-4195-826a-77853c4635fe",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee829175-99df-41b6-93c0-e57dd517d58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7410258f-eb80-4a8e-9f93-7ff2915dc903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4737c82b-4b3b-49b9-b4ed-770d650ee0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7432c18c-7982-4520-a653-4a60029034de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fa70e8-58d6-4243-a44e-35af0c782bde",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d061d61d-9fe2-4399-9042-1ae804ad1144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87a41327-3b06-4bd9-93ae-95e043e5569a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e64cff-4322-4534-958e-af99ec5af4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d067f5-786a-4a78-8bb3-d11d7a696399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c3d42b-23d2-4bad-a5fd-a14119dc5a3e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ec215c-8e25-4ed7-b3ed-7dab73b47491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca135faa-4fc5-43f9-82f6-d2594b5be90f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6beba813-4b02-4c60-8caa-4a15c2f01621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b135ec-9ee9-4220-9e37-49a065865411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802925e1-8d24-4a47-81d4-b615c6921d7c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6a7d2a-952d-4f3e-a770-fde4c3164ae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6680d2b-a2ad-4cb5-93ae-c78c89653dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9988ec79-0408-48bb-a2ac-a344fe930354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c75bd394-20cc-4cfe-b3de-79243780fcd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693f9bb9-284f-439c-bb8b-a890b82296bf",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ece885-6892-4ae5-8790-edc5aff0250b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f18689-e2f2-4919-aeb3-df53195029f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8130f74a-8b13-40c9-9fe7-36e90c6bd611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3f233d-93c2-44f9-8356-388e63829078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bacd869-9177-424f-8537-07344a210700",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf0c8eb-2c51-4652-ae3d-0d0c44a91a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df40dbf-bcac-4867-b4d7-2ca49f9e1c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db50e4c-6ca4-4879-88cb-5c081de5260f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2bb98cf-18d4-42d7-b879-2989e8aa075d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284cfb4a-e572-492e-9012-f48b99381826",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1ef839-dcb2-4170-880c-c086c0752392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63aeb6e3-6307-425c-8966-cbe3c923653b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2818695-a065-42ae-a87e-3be2e3f11870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770cc685-a76d-4512-9313-5b05514aab92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1ebe7c-a5fd-4f17-8726-a52e0a01a32e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c910da1-d634-4409-a75b-1ee59134925a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b19a1060-045b-4993-af2d-83b61e55572e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3c570f-48f1-458d-881e-a442adc9e55f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403bf6cb-0e3f-4a5b-8a2f-d837a3f4da19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4ef505-9c5c-4051-bdf8-03d4d45d2334",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04666765-e91b-4872-89dc-35c6a39d4e9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eaee363-70a4-41fa-9bb6-98e6be828319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06f5c72-17d4-45c3-9546-405ef5e215f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ce5f1c-dfc6-43cc-bd6d-8e2697eccf1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f44c827-aa99-41f5-abc9-6f50a86e853a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdcff87-da1e-4604-b3e8-063533f04866",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb0184e2-61f7-4267-950f-033441af3bd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff8b26d-36ff-49e9-a6e7-751215aafa99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d377e76-c1fc-4b49-a733-1f29f2dfc8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0e6c3f-c23f-4767-9402-cf3322d9283e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8ab157-26ca-4f53-847a-9644865bd710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292f1c14-41cc-4473-a303-dcf9b3ed4ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac71e08a-198e-4881-a602-8d0c03e974a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28aa9d6f-8b48-4e76-b581-4784097199e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff5a349-1f5a-4529-b319-e4c443c8a42b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4a5669-75ed-4427-b00c-9839784f0f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbfb937-927e-405c-a8b5-62e616d5a8b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d66d083-d168-49ea-882a-c051661263ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e387ef0a-591c-4f57-b3fb-2a96a2e557b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50230636-6cc5-4a2b-bf85-4b3608b5f9de",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa63fc4-bff6-4564-8fc5-06288318334e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f4fba0-4a6c-4cb8-9f2c-1a264a322bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbba77a-5691-4b93-8470-1b4b9f5c9cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d172df5c-1218-4683-8aea-27820f59ac26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70411c99-9cf7-4f61-afa4-3ebf0bea598a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27903aff-dd82-4891-9407-bc62d2d17317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9888e3-b1d2-4cac-b46e-776688b6bde4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f9f180-d39b-459e-8aca-c7c4a27e449f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05684890-c2a5-454a-a0a8-55a8feb223fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0f5841-340b-411b-a047-a8a26516a2b2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19308b6f-9f60-4f66-8323-5151794b6b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2213084-bcd8-4371-9dd8-406574b566b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8015fde-1779-4b89-a09e-622a8c3d0698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59261c06-d834-4a98-ad0b-c8644b5bcd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1427f48-6f98-4dc4-8ecf-28e75eace8cb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243f0fd7-69f0-4e7a-9132-0a6a3bab4550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b425bd4d-9034-4825-9d9e-8e5fedc2ecdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb62e830-5262-4bc6-8f0d-63d295ad86af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d990d4-b8b8-4543-8cbe-c3eec50bcc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537e1e34-ee68-4763-a923-d69463e07bcc",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9527d04f-7394-44a5-aa26-299e5888c3d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3305c1a-5ee6-4ae8-81e4-dee0e2a920c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4fe37a1-e7a4-4cf3-9720-ee8f58d6ff89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea81964-416d-4a35-8ad8-8a3435806abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e0196d-fc3d-42ee-9f2b-0a8365a8a5c9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d527082-f9d3-4d91-8d21-9208119c07be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99898616-6a12-4fc2-8248-af9b9777acb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df7a2d4-7845-4051-84e0-423b35b84f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01355e10-11fc-464c-8c8b-c8214018174c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8b21cf-a68e-4004-8d61-d87cf21514d4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ea2f85-0bf1-49f1-9083-3c05d6bf5158",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5337be42-500f-47d4-b938-8c9c32998ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f6669a-5d57-4f64-bbe0-ec3a928b9365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "babf0651-3f5e-4251-9bad-c736e3005769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f54108a-04be-44b9-a860-136fed758b47",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfae5724-86f7-441f-8d6c-8abb425ff01e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee784bc-eee8-40a1-95ec-63c2e2298053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdcf833-2957-4077-a713-9b84dfa7b411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6b2d5c-a132-4461-9671-b08744a571f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c7c38e-46b0-4d3b-8ee4-a6ba592c7dc1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e546da-1a6a-4504-aa23-19937e3792ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01c7bac7-bbdf-4b65-90c7-4b50fffb87ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefe6961-b74e-475d-8f62-c13e50e9b7af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406aef60-c8ea-4c97-a27b-65ed28b8d00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a303d7d9-2ecb-4c80-9757-85366a3956e1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26e462c-0021-48ec-adab-35c58bb95fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a979628-7694-40c0-87b1-5466b499872a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcae04f-1ac8-478d-ba71-e3cafc369e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01af3b55-dc95-4d2d-817f-a883018164c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48de4d3-4f10-4fba-8e56-799c1a2cd226",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8d7ba2-1143-44bb-8dac-b2adb60ad2f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ab7a8ac-e557-45e6-9722-5756c3153be1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d214e32-55da-49bd-8400-158a0a7fb10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf64e969-8550-4cdc-86f8-cf0331268a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68dffc4-dcbc-49da-89d3-646f2622bdba",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce20844-4496-4239-9787-c2743ca25678",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2da6a6c3-740f-452b-bbb2-fac46b186c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8ee0e4-dcf8-4184-aba5-58586821f833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e4aca30-63a0-4077-a9ae-82e7877b1948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587a4ec7-0ce8-4fd9-80ae-733a68e2faa0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613f2c7a-c5f2-4a39-ba81-7fdc65122ac4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac733837-2df0-4885-a131-011824ec09a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e86e37-dff0-4d8f-84b2-16916e7ee5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec44440d-673e-4386-a854-07022e907007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79df9de0-e9c4-4ba9-adad-2f6bdf67a2d3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52584315-27b1-4c09-b3d2-30bd0b8b48fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c88b6405-b4d3-41be-a114-c5922fa845b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfc19ea-0dce-4533-9b12-46758955d7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a97266a-2b76-4e2c-bcb0-1202f9581a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc8f918-c269-49b8-880c-87e1d8fe9a21",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e23b7f4-9451-4473-a0be-0443145f4bb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6d4b0e6-7475-4c5a-baa6-acb51f011927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "680ec096-79c6-47fc-be79-fa82a776432a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60df800b-fff5-4c4b-9c65-9a2a65a63094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172ee20a-20a1-478e-b136-38c7e366a9e8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d733ea-2727-494a-90d4-78e95498f955",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3359ff2e-e634-4558-ba93-4027ec09272f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "565b6829-f411-4572-9b74-b96426a6c30a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f1b583-9723-4336-bc98-124b5a5fd1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb140925-21c9-4247-bf94-5f7d92d0a486",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9671afa-3b25-49f7-958d-364c27b05e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7831d82-5838-47e4-a32d-8d145672301a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d67474-832e-4b0c-888a-5b9b60584503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c06a231-d78e-428e-afdd-59e454613fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff8f6de-b456-48f3-afd2-f14e7bc5c2b3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5ba57b-602f-4c7c-b94b-0497d7d3dbd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8c7ef0-836d-43d2-91e9-72a4b34d499b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ae5502-006c-4aca-acc8-ef91303677a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c0d323-1844-4a67-ba5c-aa17ed856292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5b7c2b-1321-4df5-b5f3-2aa57a894a04",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05e58af-b10e-4f74-a949-304732a1a59b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb8a77a-f196-4078-a656-c64e57ac4601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c19e255-2cb6-42dd-b08a-447e765f387b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb3b03b-6248-483a-9974-a4a7534f3f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c7b4ef-5dfa-46ca-ae39-3b3f99cc8434",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c00311-fde7-4308-b5ff-df320629b741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5368738-8418-4d96-a401-c5cec26751f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a93c4f6-bd6f-411d-ab24-de56f5bd41c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f39e3e29-54e5-47d4-a72c-a7ae7fe2723a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057de60d-eeea-4c90-8447-891bcd723984",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0437194-f91a-450a-ac32-8f561c70fce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f84d0d-187f-4d3f-9ef9-a1bc28cbbdc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76a4108-fcc7-4535-a624-273fa7e2c443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215d4982-9508-42f3-a869-1c5fb6b59839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b9d7c9-cd82-4dc8-b828-bea1918d54db",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca82bde-9776-4e4a-b872-79e34f232975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "970e15a2-8234-489a-a6ce-5b53d8f4b312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0b509c-1602-4b6f-8a44-6eb6d3603cd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab871502-e9d4-447d-810d-cd7dbe05c48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdb6bd1-4497-4ee1-acb7-01b8c2f73557",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999bcd6a-2427-4459-9607-ff6c02aac8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b799a9-fff8-4b43-b80e-3913afc9cb6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "451e6b81-5d9a-4abb-9f93-983ddecb2443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca25b7a-2777-4b82-a386-8b067391456f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b31fbcf-1937-403c-abae-42d0a9cd9fcf",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2d0706-a86f-46b8-9fba-49c15bdd492f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6291ffa-3e09-49b0-8ac9-a80be404d918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2697e444-179d-4f5b-bdf1-58c827c4c0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a769668-7a7d-486e-8dd2-0f463cf6e332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7b911c-8837-4cc5-b06b-ae5d3fa9bd33",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19794a11-0903-456f-9d26-2559c54a503d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa4969e-2aef-4f9e-8b2e-d1782e05a29b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "198dfac4-50fa-42b1-842b-36ecdec5bba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac44372-3e54-4a8b-b5e6-087ec6e00cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77882ce0-2792-491f-9cc4-df4ff5712847",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f45de8-a8fa-4dfb-8845-9fe8280f93dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff4704b9-c67e-4f9f-ac06-4887732d942e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0aa9bb-4aee-4f48-9ab4-6d7f79472b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05582676-e924-43e8-8c00-83a084d37a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a66b789-7084-456b-b254-10aff9cee949",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c886a1b6-82de-4891-bbd5-6b367d1edd00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7da738-b986-45b4-8e47-4ef5d0321150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efa4a06-96e1-48a7-aa7d-7861f80ce274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb7c2a00-636d-4941-bb93-be80abb62b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5a6c3f-6031-4523-b8c0-bd2f4ab79f1b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d90f76c-972d-4b89-909b-072a26dd8c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08b8ab78-5560-4ac9-aeda-ffcc72dac76b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e1cc77-96ae-4628-bede-ba06c3d5b332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47eeb489-66a5-4c2e-8f47-756aefac6f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111351f6-cd86-4a94-8e67-6a614c33cdc8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71a861d-8300-4b9d-af11-031ac34997fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aeceacc-d4b8-4b08-bf09-efe8569535a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e820c917-7cee-4e48-8f55-2213589062c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333cecc9-8811-4db3-b676-08cc3c1bdaec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb65ecd0-4b17-41f8-bd51-82f4ee4961ab",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364ccb81-69c5-4be5-a423-c1a51dccfc98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c23e3eb-b746-4da6-8014-7034a5dfaf2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7bcb9c-6a8c-47e5-9b1f-e724c6086053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5feb1cde-de6d-45a5-852b-1a00b37d134f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee42f85-b8f4-4afc-9b16-97e426efed53",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12dbdb8a-d725-494f-bf6d-cea9ca268b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535a8f03-4488-4afe-89ed-ef5c145219cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4365a178-dfbf-4264-8c64-0560864e0ec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87be78f8-4067-457d-949a-8f1476253cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70addac9-1e02-4f83-972c-62e8f80b5951",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28b75fb-a8e2-4e53-83ce-1928e95e5a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7d08d88-0ee8-453f-9ca2-d830aa2c4f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ab3a4d-6fc9-4b15-9fbc-365fc2a28569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "013e9b25-fcd2-480d-8d04-2fe8f8ea1dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40505c8-80ed-4d86-a603-47f8f95fda42",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04ae0ef-cf66-4c0a-a4f5-679bf027903e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b337a9-7e94-4055-b6d0-d33b2f1fee5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "401dd066-57ee-4166-8b35-e4f8c07b21c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade937d1-3d67-4743-8696-00dc920a6d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e520647-fd0f-4e3d-a365-3cab7e4d8a14",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7102d8a1-1d88-453d-bc66-d996061d2deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f1d8d4-c9e2-45eb-a9f7-ab443fa771ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a335697-17a7-4f7f-b301-37bd6965b8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e3c7cba-59db-48f1-9a3c-de2e0ea8958e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d820f4-2935-46a0-b38c-6cddea3f8e10",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a78b0bb-160d-402e-bb91-9e0d5c5fe9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d7e440-e813-447c-8d69-91f7bec666d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c88bff-68a0-417b-8846-73786d2f098b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9987289-ea6e-40ba-88d2-ccfa1ffd91be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f75756a-a61c-44ae-a4fa-7a30f95af8f6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad88380-28fd-478b-8d54-742fa4129858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15251a4a-3108-468e-888c-2499c162033e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c1f403-fe43-4269-8fa4-e557455a61e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e18f90-8c74-4d09-9360-aa1be84ad3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c24edba-1d5b-4268-a13e-f5062f0ac8bd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2e98e2-f3e2-4ff2-a97c-a41af46afc9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dc59dcb-b9cb-4f41-a684-cd733cfcfc51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e249cd1d-09c2-41e1-a970-95c8a3570495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ea03ab-9d60-4985-a202-36f051704a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a08a39f-02a3-4c4f-82f4-dd33f9973078",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabdc525-964b-4236-bc1e-c6b0f57279c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ef7af6-46c2-4ff5-9666-631b1979e683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfe2d9e-723e-4d85-8e9b-df0b94e6a87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da92c4b-3302-4163-b69a-0d6f60587305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792cf03f-a534-419f-b24a-c7d6e8fee9b1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fc4b7b-7b2d-4462-bf5f-559feb75247a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb9fa1e-5bfb-4c41-bff1-0c2d48ef3a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2bb2ce-74ed-4f9e-9bea-dcd143fb8921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f13878-89cd-4a67-ad94-bd4d00e1d1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3443ae4f-660c-4163-8c0d-7caf31993e3b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb34030d-5b84-411f-b2b7-64a60bc9d82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394a343f-8f5a-4258-b0db-3e4d1e1cc970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cca219a-4980-478a-92dc-8e5837490402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "485cf214-21af-4915-83d2-a0586ec2bde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6589a33e-6e30-491d-84c9-6782476cc50f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e877b4e-ca33-4f8c-a55b-a0f48a3b72a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a62e1ee3-735c-401e-9ad3-54f31f7d3883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb735758-dac0-4938-9bfd-450349d76007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1160f6a8-54e6-44eb-b38e-55e8e6203b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a46267-4e04-4df8-b51d-9b03e1ef57cf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b04d23-8690-43cf-bc3a-4f381c94019c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e87dd2-b8cd-475b-8602-27925286a536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85beb04b-f871-4909-9e34-1004107a32e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41671fb-d0e2-428b-a85b-4e90f0d56165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de922b8-2383-4503-97f6-e88d2a9fb68c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebf494d-ea49-413d-874f-708e7b93ae10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ecc2cae-7eb2-4495-85bc-10c062daef57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdef26a-7704-47b5-8a60-7c1d3bb7d915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2282b2-357b-42d9-8e38-ddf9e7040811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a78877-9851-41c9-81e4-8bb604659de2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef582943-bdb9-4a6c-ba57-3adf8bba7fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe6a96f-74d9-4700-a643-cff88f3c4527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc98adf-6e2c-4f58-90bc-d6a95c712cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e10dde0c-a765-4f55-b133-7bac3f647819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd6e731-8803-4ab8-8906-e9754950f0bc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5aeee1b-32ae-4c5d-8450-bdd3c729efd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df65ccbf-aaa1-45b7-9a3d-943ad3817bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d92926-e605-4b67-8b40-efd7205e863e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe67ab9-b322-4e5f-bfec-12c33f5b935c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654100ea-f659-432c-8f80-b3885f91d6fe",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51b8606-6ad3-4c7f-ae45-160a57278bfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96c2973f-1a12-4a10-84fa-a43c53701d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e53a83-f488-4c89-a256-c73932345a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ffdb15-dd17-4232-95ee-c124d2b59f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7768227a-627c-43fe-82c8-1e71baecdba0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7308b5-199e-463d-9a13-2011e0db6669",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe245168-255e-4807-850f-47ad59676062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7f622f-3081-4f25-aa94-8934eb40d168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc506183-40d3-483b-bbd9-cd4c16cfb5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3ca973-5967-41f2-9aea-3a7f0a995f55",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f6033b-b3ef-45f9-a524-03699eabca56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eb4945d-ec96-44d1-8d43-1dccfc1bc3f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "532c542e-3a24-4bd5-8c47-eef0a87e5a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d39d33c2-716b-400d-bac7-a711f2540aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef932f9d-e887-48a9-ab00-b81922c64dff",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28498856-4229-4f0c-9a14-992fa6747ada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03594585-8994-4bd0-8873-e02ec143ece9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c9d01f-d1f8-4559-bb09-37afe880df43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd5dbae-8478-493a-9eb9-f4835a676cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b22c74f-dd06-4fca-9cbb-b9f4a4415a69",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6155720-5c7a-4269-b561-7f000b6b9b35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9c3c21c-9505-4e55-8952-40e8f00116b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8453f950-8ebc-44f3-8acb-34a5cfed4526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f49f2c7-f6f4-4c72-96bb-47709e4dfc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea309eb-ebd2-4e98-8cfc-4bee2f496c6f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013a6ee3-dd35-4fac-8fd5-af3516bc68f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae49d58-0768-4e3e-8efd-d166549f24d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6e95f0-133d-48ae-83ca-a06a5d94978a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187ee1bc-e8de-4e24-8c01-fffa4cb470f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b979e1d-7885-4138-ba3f-a23bc88d3200",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af729ab3-91bd-4c0f-814b-69a1ef71d5df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ce36bf-76be-4c22-90be-7e3bb4d1d66a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d331b2-adbe-47ad-8d4a-ac7a8e0592ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd406aab-bbd7-49c5-87ee-49bf31ceeb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7324bbe8-f21c-48d6-abae-35ba28ac084e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc88631-4509-4674-9b29-0fdeed60de8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a98ea45-89c6-4b0f-a6ac-a3932a732b13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdeb396c-87a8-44fa-9df2-f3cfb1e98c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce6c7c6-96dd-4295-ba99-9acbd4f3269e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389a692a-abc8-46b1-a7fe-b57ed93f2d5b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a1f056-68a8-4e8f-9f66-7073cb290daa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3692c1d2-c017-4e3c-a4ca-9fc96d52d6a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf6ff16-e3eb-47b6-a8ef-7ef4e3498ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b143ab9-0b4f-410c-8533-49cb57d9b584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eda8a6-60db-4bca-93d6-f8280b983cf2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d960327f-5d43-4052-b11e-6278ce451908",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "479b3a04-78a8-4e09-8421-038d5092852e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bc0f18-5dad-48a8-936d-49e87b677712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef8c2ec-968d-4464-b8ba-b3485f470c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d4c83e-2224-4e59-b145-b63b97eb570c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13877798-bbf9-4b41-ab8d-3af5a1b50d5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e810d1e5-b5ce-4a3b-bac9-3c50cfeeadaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a312499-b0cb-4e84-968c-9d64d4416858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7497c5be-9e3e-466e-9cd1-92b8aaa9c2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3229ddc-328f-4755-a24d-7ded1ed1f574",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f72a7ec-d0fa-414d-9ddd-17c8d66be320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c54e1a3b-b182-415b-a875-882ef92dd742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3dc43e-4368-4673-acc2-6cf8c1adb865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08d9eb37-a9e8-4fef-aeac-9ab269fd488c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a080d9e1-9995-43f8-adce-3f1adfb4406d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f292d7-835e-4beb-b452-6738ac807c78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb2a9519-2f9a-4b99-88c8-54df22755ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1729f89-e4a9-47e7-80c7-ab2687cf2e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f9117d8-53a2-4415-b4be-d1668c2cba8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585a15e4-26cd-4ae1-b403-f44a7cef97d5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41695b9-6a82-4973-a9b9-afe8479874fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b9165cd-e9fc-4c8a-8491-e7f1e23078a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7c2944-e076-4d88-9bf2-a6fd4d0b9b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e78162-8713-4327-8779-c41d00eaa234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea97d140-8192-4ea0-9aa7-52cdac4a9e1b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e52cc1-7f81-43d8-b61a-20fd2c1a0876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9011c94-ca03-4a8d-adf9-a40ef52de7b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2dec8a-12c4-4bcb-b865-ee552c6d261e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b913ca5d-11a5-436a-b99e-25294848a51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e7fe1b-a0be-4fdb-a654-0fc968f32db3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d68462-7d01-406b-af54-f9791909f6d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cde1b48-0a3a-4449-83c8-de8d374c049c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afec5fea-a1ee-444e-ad6c-60b219be3c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c9e26a8-5591-4947-9791-ca04b4e5aadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05e5eca-45d2-4f29-b0f9-2115326f4ee5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6824efcc-3716-481e-a9a3-f4ba5f2568e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08e2c25c-f357-4566-bb82-62a2dfb2530e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "245c410d-f78a-42a3-a2cf-3c9091b1ed8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04529f1-86ad-4297-a99b-eaa22b2c2d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8809ebec-4e0c-46d3-8744-28340045e327",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f35fcf-9859-4b2e-86ef-737147688976",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdfeba72-ea28-4db0-8c04-8b41cf4470f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "953e326f-fb29-4eed-9a3f-74689f675b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a677c8-e5f0-4577-9371-09d5fa699087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d366a1-c5b8-4c69-afd9-70baf00c7d97",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1914a9-558d-4a83-8397-d5ebfaf84fcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fdba0a1-57b4-42e7-8251-3758e0c07321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9194f69c-675b-4e5c-a1ac-a97a4d12f879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e8747a-a979-41a6-aabb-37222a04113e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d53d5a5-7c3a-45a9-9c02-4551ec76aa63",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01770f6-5c40-416d-b040-e8233db70310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6626be53-71b5-4447-a7c8-44e802f451da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cd8ff8-db37-445f-9c00-ace75db916ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e55c67-3403-450b-9ed5-2e838bbb98be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc855d21-92c1-4c85-8f54-2a2cd9c8fd55",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc74552-c98b-414a-916f-7345883b18d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26f720cd-063c-4c93-b7c5-eac714231053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98321dd-1260-46a5-b82f-ede82afca1ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea072e5-4655-476a-afb2-17c9efa616c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c78ffd6-ce59-4901-bfaa-7ddca4388f00",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de80398-5b93-49ef-a6ee-f3e1046247a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e95a2c1-6f93-4365-b80b-99f58a85e6c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9207bbe2-5ac1-406e-af49-62c21faca920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017740d6-4095-4dfa-92b8-33c404deb0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70dc8418-a2f2-449c-a763-d92ceea0f8db",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f3b22f-6e94-43b1-815f-c0b5f76a588a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50e16195-d8c8-4bde-a960-9a8a1ff29edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "090dc30e-05fa-4eb4-84d9-3c9abf8a71f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febbdf87-944e-404b-bf2f-1f3d5d4b3278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed1f004-f817-4c75-9b07-cb0484bd210c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5ad143-38c4-4ab2-8649-f7ec2d256010",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e005d80e-2dca-4531-a43a-e6582529be58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d0fc27-6dad-4454-9623-aca661db2842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8983787-ed21-4c47-87e4-64afa9ea6b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61906338-0cf8-40ed-b7eb-48a808a340a7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f37eeb-dfe4-4686-8555-1260ab6aee6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6dc8885-c782-48bc-8244-79382adf46cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0795de-5138-4b4c-8e1c-e72fedb00038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef98e2e7-c485-4e7b-91d4-9713cbe3aeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dee23a9-5f4a-4510-8e86-4cad7065d6ca",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50d68eb-54c3-4439-8868-46d5b44a0a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ebfc13a-271a-46c6-985d-439487a22824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda538c8-89c9-4e05-9c02-6dc91bd48373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5423cf-ad99-48ab-bfce-21ec3f216f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e397043-624d-443e-bee5-d96f5b3f39d8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e7e6f2-71cb-472f-8b59-04365c57cbf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d08fa0f-c581-46ea-94c3-039997e77570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02663ea4-7345-4b4b-b422-522e1bad129c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f901fd54-48de-468e-ae95-d44827c158c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e9a6b1-6c65-4347-84a9-b39b10089b07",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e925677-020a-4c6d-83ef-52180f37b978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34034600-3d01-493e-873c-4a591c051890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a850d2-4733-4ba5-8dda-bd00ea4a557a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd23f3aa-dc85-4dd1-8be4-763c691fc111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d6b02d-62de-457c-b5d8-20c345b90d0a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14972dc-9370-4e08-bc1c-c5049a9f3414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82049caf-22dd-447e-af50-e4daa78ac150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed35830a-ac78-4fa7-990a-5a1ae16ebcbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adb01955-6cf8-4c78-bd8d-d0400acdb904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ae0b87-2823-47b0-9884-8faaaa6846f5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935f2912-5c65-41a4-96eb-923e944a4e65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4460ab3f-db3d-490f-a16c-8fd588fd8609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a6d149-1ede-4545-97e2-a76e5fb744ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a92bd83d-5027-4d43-8f35-1093d6e6baf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e027cdf5-37d7-4ee4-94ae-6a1a2e650448",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42270cd6-742e-4b7a-ba41-ef555ae267eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50d1b39b-52f1-423c-a0f3-f0287d9d44a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ca1b79-edee-43a0-aa44-99232009e604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c82034a-a9e0-4fa3-8646-155f56860e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805e99bf-8ec8-4193-b280-5162949bcd02",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc7ef29-e133-482e-a50b-cb28e0b7a861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b36fc1d9-b08b-4bf2-aec0-e694e238b180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a9c7af-6ae6-4298-b7e5-1c0f9bace856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49728309-2715-4ab4-84be-1b962f860125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34122b4a-371f-4a40-a46c-c94ae5a457c8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b888274-26c5-45f1-b36a-a768bb0138cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3d6812d-c51f-412e-a79a-8093a4140260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67233f3e-b0b0-410e-9517-14dc83e8c95f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df5dde8-1aa5-41a3-adc0-94016e1d63ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0700c774-a208-470b-a1da-48e558812e63",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a787d55c-e18a-4609-b006-cc84bec3320b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a21d4aeb-48b2-4e34-9c4b-8d50911345a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b5704a-0b67-41a8-a3f0-787829850df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1fea7df-af11-41c3-be84-acf19c1225b4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcd8a153-9f13-4c55-b228-c799f0a2535d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "075b4b8d-fc9d-4aa7-bce1-f253e8cd3b9a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "618e85db-bf9c-4cd9-ab02-095686d7a6d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a16ed409-7288-48e7-be18-6558c3843961"
                    }
                  }
                ]
              },
              {
                "id": "6ba2746d-91fb-48b4-8b6f-4ada1ac15ddc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad14b73c-c696-409a-aaf5-bba07f487574",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafdf6f2-53cb-4e7f-94db-e76e0add71f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2617df77-2301-4a28-8a2d-4978b917063b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c6b391-6968-4be6-93c1-b9c0be0bf595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bb86001-df7c-4176-b1ca-1f6e092f9553"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a52dea3-35f2-4a62-84a1-8867eaa6dfb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b58a169-2a53-4da1-8a86-5f170fe98f14"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9d806bc-9721-4d5a-936f-c1f3670c41ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fe8bec9-4d4f-48b7-aab7-32294c2dd628"
                    }
                  }
                ]
              },
              {
                "id": "82d702d0-9d7b-4575-9c74-89b550b13ca8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9c5f0126-793d-47be-b83d-ba7284a7fda4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29652fe-f83a-4c49-9d59-e5bff03da710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d6018851-3f5c-4d40-a91c-b2199bedd48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6d7a4b-5b15-4a87-acb1-dafe09f84e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15dad1f1-a435-4f16-8768-8d0a389a3376"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e09aa945-336f-451d-a294-6d82d807e40f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aedce5c0-f04a-4d12-8faf-5f3bf696bc69",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4142036f-501c-462b-8cc3-822d49eb1b02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ad458004-e3f1-4d74-88a4-c5382dbe1d1d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f425388-2eab-410d-bfa7-18597e209731",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8803ca9-4caa-45f3-bc60-d3ee71551120"
                    }
                  }
                ]
              },
              {
                "id": "ac96c393-14fc-4366-931e-464f553a553c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6eaa67dc-f407-4193-a7ce-069a6d595835",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f4d28b8f-7398-4aba-baa4-92e32073396b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c4eca78-0c94-4380-b05a-4ffbb4a824b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "871b560f-dbaf-470f-9c58-156d94be2d29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8fac9dd4-bf1e-49de-a903-952c4ba869d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7be2bfcd-417f-4124-a2fc-a321d57dee6d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3dcc2d9c-2a6b-4151-9492-d2bc6d8de698",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61dd42dd-8ce6-4e3e-8c57-61018e7c69d4"
            }
          }
        ]
      },
      {
        "id": "50d4cad6-e2e8-44c3-aa27-d98bcaa9686a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7c6c65c1-d380-46c1-8188-cf6b6dc08e5a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "114b3f56-d20d-4ed7-920a-2793994adbaf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9147af3-f772-4510-9c7d-82fb79013763",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ce8bfc-c71b-4034-8532-8a1284f1334d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "39d29706-899d-434d-9f06-ade10140db43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a5f087-45bd-457b-b48e-2c1aba0e492a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cad9ab5-198b-46b2-aac2-034ced0ec030"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a848aaf5-dda4-40f7-ad45-b7c62dc35dc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a179fbe-6b8f-4fb4-8d9a-b325476087f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd1d1cff-fb98-450e-bb27-d5fcc68359b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c56e5737-846c-4c3a-b6ad-febe35df0b9e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4341255c-17bf-4db6-9401-ee18d00d7887",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "160dbd70-f373-4258-a603-d96317c77845"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3fe4f82a-6507-4204-b61c-7558f6273669",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "575f126b-bee6-42fd-b3ca-174adcffb34b"
            }
          }
        ]
      },
      {
        "id": "a2de9e7a-d584-4374-a2bb-481e57c5bfbd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "61306f18-2088-44ff-9d49-971bc4b48009",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ed6e3b1-087e-45d4-9d3a-b1729f2e5c45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d5c6f18-b85e-4c75-b441-f17dccce20bb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b696b0c9-fa3a-48bf-8ada-449f91ab4055",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0a386fe-a507-4242-80da-0dec229c479e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6f25bb-479a-466c-b670-f0dcc534b68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c33bcafc-3b33-4a52-8ea3-ffc30defd954"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9dfceb84-e654-476a-a41a-4ae522e73c50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0bec068-4b73-4ccf-82f5-a094352d142b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7269e00-9ad2-4e97-90a1-49999ffe09f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abf85af9-3d87-4451-b5aa-eccbc76da7d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad035f65-cb3e-448a-b4f6-0c93e111851e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ef609d42-673c-4c8e-a13b-258b78ff00e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3fdc145-88db-48ee-9da4-7be6ed4b9630",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cdc2fe29-7918-4d56-92f6-15c8e4d8567d"
            }
          }
        ]
      },
      {
        "id": "7374e713-76be-45d9-8bb8-8e867ea5067a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ec6f61c1-e9ca-4087-b60b-ee65cff2455c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe47c8af-59c1-4188-8231-55e1b607c09f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b46a822-2a23-4f45-901a-5fb7e066fe2f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231201a2-b780-4d83-914f-d7c2ab49bd02",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0288e08-18dc-4f31-947a-6f640a21b0e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b0b6fe-547c-4375-b67e-50f58d947153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7d638fc-cf36-4b85-bfde-008f574ed51f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a18a630-c3ed-4cfa-ab06-a6ae5e4621dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b007aac-63d5-41a2-842a-8c570dfd8c39"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fce18d65-0051-4441-896f-45d96b622e99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea8e2269-83b0-4714-854e-9145343aa5f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e68d5d11-312e-479c-8e11-3a152690841d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "05b9dea5-c365-4f4f-9b0a-cc7f2883e62e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd580957-e422-4bf7-adcf-75129a19ea51",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ed9d746-32e5-4f1a-aa0f-dcae52178fa7"
            }
          }
        ]
      },
      {
        "id": "70b62b92-ff96-4ff5-91d8-59ade89ae285",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a92a943b-1f3b-4f9b-867c-30b2be9e3044",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9fcb23a8-18e0-4ecf-812c-71f770f9a29f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8608439f-db75-4c0b-8d23-576ca74c4d82",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12ea3449-a3e1-4bda-b68a-d1d0f30dcb63",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8662797d-229e-49a1-b8f3-837357290429",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 12.928571428571427,
      "responseMin": 8,
      "responseMax": 276,
      "responseSd": 26.76697757378252,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713918913303,
      "completed": 1713918924863
    },
    "executions": [
      {
        "id": "7b6cddec-c063-41e6-9cd1-781aced29558",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "55388978-1109-478d-8b0a-15b36ba92ff3",
          "httpRequestId": "7f2e9413-bb40-47f7-92b5-ed28bbd3d276"
        },
        "item": {
          "id": "7b6cddec-c063-41e6-9cd1-781aced29558",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bce33cc8-a7b8-40b3-b073-c226f482055e",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "bb9cc752-8649-46f9-948b-a2d97868287c",
        "cursor": {
          "ref": "f16a1a1b-f3b3-43b9-a7e4-338da7f2f49a",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1c9b6c9f-35ae-46a7-aa61-a63d984e6472"
        },
        "item": {
          "id": "bb9cc752-8649-46f9-948b-a2d97868287c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a2948c7e-1992-43aa-bb90-521dc968904b",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "4885387d-8f77-4073-a35e-69afe6ec790a",
        "cursor": {
          "ref": "a7d9eee0-a7f1-443f-b868-57b9cd99030a",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a578fc21-489e-4e1e-99b4-933ea14857bb"
        },
        "item": {
          "id": "4885387d-8f77-4073-a35e-69afe6ec790a",
          "name": "did_json"
        },
        "response": {
          "id": "b61047b7-a791-41c5-8efa-adac5986203c",
          "status": "OK",
          "code": 200,
          "responseTime": 208,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b3b32a-4987-4e93-8bf2-5a3b1d42215f",
        "cursor": {
          "ref": "fd43c95d-5e6a-48d9-b22c-6bb9f3d44743",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "12afc4ac-92b0-4333-82cb-10d34500836c"
        },
        "item": {
          "id": "f0b3b32a-4987-4e93-8bf2-5a3b1d42215f",
          "name": "did:invalid"
        },
        "response": {
          "id": "1474ab71-bead-4472-9fd8-4b0df60d8376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b3b32a-4987-4e93-8bf2-5a3b1d42215f",
        "cursor": {
          "ref": "fd43c95d-5e6a-48d9-b22c-6bb9f3d44743",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "12afc4ac-92b0-4333-82cb-10d34500836c"
        },
        "item": {
          "id": "f0b3b32a-4987-4e93-8bf2-5a3b1d42215f",
          "name": "did:invalid"
        },
        "response": {
          "id": "1474ab71-bead-4472-9fd8-4b0df60d8376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39191461-23aa-4e96-bb68-475f42b8af57",
        "cursor": {
          "ref": "65fce8b4-3977-4c6c-9b36-a1ddd48ba1c5",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "222d3086-2d1f-46ef-8fbe-7fd91fec7459"
        },
        "item": {
          "id": "39191461-23aa-4e96-bb68-475f42b8af57",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b3221d36-424a-4331-b5ec-9b63b479c286",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 140,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e813bf9e-0556-4ee2-aa14-18a56a7ef992",
        "cursor": {
          "ref": "1b00ad9e-fe3d-433b-983d-2d2cd001b767",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "da45f48a-523a-4a9b-bbd8-cfb7cc0c2fa5"
        },
        "item": {
          "id": "e813bf9e-0556-4ee2-aa14-18a56a7ef992",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f39dfd76-adba-4784-9163-29a01d4aed32",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a60d2b-dd70-4921-b112-8fdc3d3f3718",
        "cursor": {
          "ref": "b880a932-77ad-4c0a-bdd6-4038bdc59f50",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cb28644f-32ed-42e2-ab68-6d520c77ba23"
        },
        "item": {
          "id": "60a60d2b-dd70-4921-b112-8fdc3d3f3718",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8b8b1780-c290-437d-918b-73f8f414cf58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16caa4dd-bee8-4b55-92a5-3ef215a84705",
        "cursor": {
          "ref": "db1ee132-eda1-44c0-a281-833b4c7a22c5",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "58742e00-5066-4df7-bf2c-8105cc0cb3cb"
        },
        "item": {
          "id": "16caa4dd-bee8-4b55-92a5-3ef215a84705",
          "name": "identifiers"
        },
        "response": {
          "id": "851384e4-24ce-42b5-945a-cddc8f1e922b",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c522770-cd6a-4d37-b82e-26bf90bb44ad",
        "cursor": {
          "ref": "cdff1b8d-e101-42b6-8b15-4b6fe563a486",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ee5238a1-3bd3-4511-980f-03882d01361c"
        },
        "item": {
          "id": "6c522770-cd6a-4d37-b82e-26bf90bb44ad",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f745f65f-6cd4-4d7a-bbb8-75d5cac9d571",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d808a054-81b5-4f24-a092-ee5a95b95520",
        "cursor": {
          "ref": "d457c503-b95b-4a38-8f60-54b8a4866d9c",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0c3e573d-7448-4ad7-a5bd-29017a9cdd56"
        },
        "item": {
          "id": "d808a054-81b5-4f24-a092-ee5a95b95520",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c25bab3f-8d84-445d-905a-0310e38ecfa0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e122b2c7-d781-4609-91db-5796f889ea1f",
        "cursor": {
          "ref": "190e6d05-f3c5-4423-a0b6-aadbcbc34004",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "699a54a7-0f95-4867-837e-3a921e0c9b83"
        },
        "item": {
          "id": "e122b2c7-d781-4609-91db-5796f889ea1f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4582fc75-c4d0-4b9b-9c8c-1e607cab5356",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139f7588-65b5-4926-b16e-4ca9d7f974e6",
        "cursor": {
          "ref": "f65770d0-0203-4786-b8b4-70c62570eb23",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5849bbad-db9c-4c96-bfcf-122a3bfb71d8"
        },
        "item": {
          "id": "139f7588-65b5-4926-b16e-4ca9d7f974e6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "39f13ba8-6eb5-49ac-aece-eb6a67b080cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a10368-4fa9-475c-b644-df1b7e14c7ad",
        "cursor": {
          "ref": "30ab788c-537e-4300-8bb8-1b17a6a9a4f7",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1ebb76da-08cb-470c-b36b-41bea12deed9"
        },
        "item": {
          "id": "a6a10368-4fa9-475c-b644-df1b7e14c7ad",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f35f206f-79f1-4af2-b39b-ad8fbdbde754",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd661f1d-20c8-4eba-9313-51cf1e2d2c8b",
        "cursor": {
          "ref": "56833959-f46a-4549-a504-e973e975f7f3",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "97ba8157-b6d6-450d-87a6-1caaac1dd9ab"
        },
        "item": {
          "id": "cd661f1d-20c8-4eba-9313-51cf1e2d2c8b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "43245989-bb7a-466d-9cd2-e327964c6613",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a63468c-309b-4ab3-a693-079097616a17",
        "cursor": {
          "ref": "ed05998b-9f7a-4377-a773-b2d2966b2b72",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f4ebca83-2ff3-45de-9d0b-5d38767ee01e"
        },
        "item": {
          "id": "0a63468c-309b-4ab3-a693-079097616a17",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "454f4502-7970-4fc4-8ff9-d8e4c86ce328",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5370ee5f-3551-488a-9878-3a71db2e822f",
        "cursor": {
          "ref": "2765e866-741c-4563-adda-28c21a58e9a0",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f3ef13db-fafa-46ec-81be-e7638b66c0e2"
        },
        "item": {
          "id": "5370ee5f-3551-488a-9878-3a71db2e822f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9a5a06e8-544a-49f0-ac33-8c28b511b9ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a791542-42a1-4dcd-94c6-a0b2c700ee86",
        "cursor": {
          "ref": "3431517d-7540-450c-b71e-1b0cd4796d5a",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "411c2b7c-8c11-4ae8-9f8e-df9a8d8dd705"
        },
        "item": {
          "id": "4a791542-42a1-4dcd-94c6-a0b2c700ee86",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "09bb0333-2c25-4683-b174-7aefde4702ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793877a6-e8a2-414b-9a17-2bb628f8340a",
        "cursor": {
          "ref": "1b5d86b9-a385-4082-83a5-e08aaadef8be",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "79414129-3e99-4fbf-8117-f4be00923f79"
        },
        "item": {
          "id": "793877a6-e8a2-414b-9a17-2bb628f8340a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d3ebc915-c1b1-4eae-bc4c-14184c493d04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2aa7fb-03dc-431a-aa82-b85327bfbe81",
        "cursor": {
          "ref": "d7fff643-15e3-4813-b515-a1c115b4ca30",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2c6a5948-bb6d-4331-8b15-4c032f62750e"
        },
        "item": {
          "id": "2d2aa7fb-03dc-431a-aa82-b85327bfbe81",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c676d510-44b4-4221-aefb-7caed3ee76f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b8bf63-f6b5-47c5-8e45-b122e3e9f329",
        "cursor": {
          "ref": "27f148fb-0f37-4de3-8519-e963602eb0fd",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f30840c2-4d0e-48d1-8543-1725e16265d2"
        },
        "item": {
          "id": "47b8bf63-f6b5-47c5-8e45-b122e3e9f329",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c6b4513f-d762-4cca-809e-911e8ceb6942",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65855517-0a27-4ffb-9ff9-74cddd27566b",
        "cursor": {
          "ref": "78b8d6ab-de58-422d-b093-3c14e097485b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4010b979-ad08-4d21-943f-0e4081555513"
        },
        "item": {
          "id": "65855517-0a27-4ffb-9ff9-74cddd27566b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e5fe6958-4630-4bab-a68e-569387ba8b63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e9e771-46ff-4605-8427-ebe048e8c82e",
        "cursor": {
          "ref": "96c54c2c-984e-41a7-b436-da53615c1673",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f5140565-594c-4e63-ab16-d8013eb45d48"
        },
        "item": {
          "id": "39e9e771-46ff-4605-8427-ebe048e8c82e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a9801dca-367b-40a0-8c3a-be788a50dd2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a07061-5dfc-4fbb-a29d-e44ab698457f",
        "cursor": {
          "ref": "eb74f38c-1265-4bb4-9915-4a73b9b7871d",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ed34225d-4da3-45f8-b269-9df403b900ca"
        },
        "item": {
          "id": "b4a07061-5dfc-4fbb-a29d-e44ab698457f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ba9ea034-27de-40cf-9323-e5ebfad971dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d006d89b-4d83-428f-ac90-ae78446c855c",
        "cursor": {
          "ref": "ff100f44-c34c-4e78-8ff8-7c697b8fe79f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2bc2769a-4fbe-4a6e-9ab9-2bf8678da53f"
        },
        "item": {
          "id": "d006d89b-4d83-428f-ac90-ae78446c855c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2215ae70-5691-4c12-9b65-929e1ee070de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d96e4af-1c8c-4400-858e-f325e0443426",
        "cursor": {
          "ref": "c00869ba-abdd-4145-9b82-ee9890755c19",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9e42138c-c065-4fd0-863f-65c2ee99c125"
        },
        "item": {
          "id": "8d96e4af-1c8c-4400-858e-f325e0443426",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a3375b80-c9b0-4093-97a2-6eb987be2a56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5952346a-c3f1-41bc-9cfc-77a43b369d1c",
        "cursor": {
          "ref": "cbb23deb-0350-49b1-844d-3f0c80fdd5ac",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6fd47ecd-ea4b-46b5-843c-12dbde25707c"
        },
        "item": {
          "id": "5952346a-c3f1-41bc-9cfc-77a43b369d1c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c7778051-b379-4b55-a560-3ed464bc1250",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c3596d-a087-4562-a55c-71908ffef3a5",
        "cursor": {
          "ref": "73439177-fac0-4de4-b17a-fcb2807b20ed",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3f24c04c-c3c4-4a1f-9259-2f119d222867"
        },
        "item": {
          "id": "d8c3596d-a087-4562-a55c-71908ffef3a5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0600ed6e-f635-4ede-9828-f4d80c84d16e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df08020e-e58d-474a-8b78-5f3842109f9d",
        "cursor": {
          "ref": "52a8e133-5457-4fd6-95a7-c995f9ca1cfe",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "006b4f99-cf4f-4c17-8fcd-39a2ca961fd7"
        },
        "item": {
          "id": "df08020e-e58d-474a-8b78-5f3842109f9d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "01dac03a-7623-4ca4-b184-4a5619032218",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066b5907-71e5-41c6-b8d5-cdfe34af15c2",
        "cursor": {
          "ref": "18bcc7e1-536b-4451-983c-77e73a742837",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "111012a2-2592-4494-93f5-4fb6b936f632"
        },
        "item": {
          "id": "066b5907-71e5-41c6-b8d5-cdfe34af15c2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "acee7c86-e852-4852-8c12-5375b95955ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d934802-8229-4291-b8cb-eff613b6d830",
        "cursor": {
          "ref": "160531c9-dd31-45e2-8a0e-11f9288fca29",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "09171155-cd80-4d3e-ab9f-f02b95ce1a23"
        },
        "item": {
          "id": "5d934802-8229-4291-b8cb-eff613b6d830",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ec2ed4cf-f973-4df2-9e10-26d3c5e0ea63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a424857-7657-4510-a347-ee304841efbd",
        "cursor": {
          "ref": "ae4cec0e-f951-4ce5-a939-28be29e81ae1",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "de3bda4e-a801-4be6-9d63-36e832a0eb96"
        },
        "item": {
          "id": "6a424857-7657-4510-a347-ee304841efbd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9b38c181-bffa-4f37-ae2d-5502147877f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da1f106-5e3c-4cbe-ad04-d15fe236f504",
        "cursor": {
          "ref": "5eb08fa1-d4ce-4f13-9563-6326d65d3d26",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c9b1d82a-648d-42da-9e74-6fc677e299c6"
        },
        "item": {
          "id": "2da1f106-5e3c-4cbe-ad04-d15fe236f504",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a9ae51f5-70aa-4ab8-9aef-9f41d2498b8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce20bca-8d80-4b48-b36d-cbb2d5f6a650",
        "cursor": {
          "ref": "51e73cba-b0d5-493f-b479-0129f876afc5",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "eea82401-ad0c-4908-8b55-fabef0bdd1d6"
        },
        "item": {
          "id": "bce20bca-8d80-4b48-b36d-cbb2d5f6a650",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "01601e00-fd1b-4204-88ac-038e6a4e078c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54109f77-86e9-465f-babd-11b412a2fc9e",
        "cursor": {
          "ref": "3b6d9ae1-556c-4a1a-aa04-81b7e620f15b",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "802c94df-4687-4c34-b104-548b5dd3364b"
        },
        "item": {
          "id": "54109f77-86e9-465f-babd-11b412a2fc9e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a2200291-6574-4278-b2d5-54da3b93f263",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac5b2dd-ffa0-4c83-b849-fffbd270ca89",
        "cursor": {
          "ref": "e71c76db-509c-4cf5-a418-0f3495a75069",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "79d5cb07-c270-4224-834e-a54f9fde8f9f"
        },
        "item": {
          "id": "7ac5b2dd-ffa0-4c83-b849-fffbd270ca89",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "58d8e7b5-2170-4755-b2c5-57ef484de1da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cc29e1-57fa-4c8e-b628-70738465c32a",
        "cursor": {
          "ref": "520180f4-93d0-4c8c-9baf-47d7351a7ecb",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f8a53208-3f22-485d-a58e-aac95f80d92f"
        },
        "item": {
          "id": "b9cc29e1-57fa-4c8e-b628-70738465c32a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "99fd653d-233d-4a09-8f9e-e504c90b3191",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e68094-88c5-4143-8397-22dfc8945709",
        "cursor": {
          "ref": "804f6aad-d8ca-419e-986a-995beff3b442",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "652357b8-b732-4300-90ce-eecc562027dd"
        },
        "item": {
          "id": "53e68094-88c5-4143-8397-22dfc8945709",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2f4b437c-0c06-4ab0-b5c2-0c1353bbc888",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068fbf2a-bc25-44e4-9792-98a4c452bc5f",
        "cursor": {
          "ref": "9720dd9b-83b1-4fac-bec0-0f8c905f5edc",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6ebc868e-3add-4e68-a22d-a24e66d10b8b"
        },
        "item": {
          "id": "068fbf2a-bc25-44e4-9792-98a4c452bc5f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e4b0aef2-cb72-40fd-9b33-5b1be7010b11",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35cd9dd-3389-44d5-a0b8-e20fd417b54e",
        "cursor": {
          "ref": "6cecc1c4-37b3-4c30-84a5-6dcff6d88384",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "39fc4da8-c7e8-408e-8d5d-4c2fe0206b16"
        },
        "item": {
          "id": "b35cd9dd-3389-44d5-a0b8-e20fd417b54e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b39db939-2bfe-49e1-b6bd-b0fb536f1e3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e0dd94-772e-4e7f-9edd-d61dfcafd6b3",
        "cursor": {
          "ref": "293b1e8a-9c26-485f-82ea-1b5514d467e8",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b1cf1df0-55b2-4009-8979-d5020d65ef90"
        },
        "item": {
          "id": "c6e0dd94-772e-4e7f-9edd-d61dfcafd6b3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2630b23a-e451-4e2c-98a4-1d1a521d51e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179ecd08-7d6f-480c-94d1-697fa93b0c4c",
        "cursor": {
          "ref": "2b892f97-e327-4bd8-ab1e-e92e8826314e",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "41a0582e-e69c-40a0-afd4-c548ed95b5c4"
        },
        "item": {
          "id": "179ecd08-7d6f-480c-94d1-697fa93b0c4c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c179726c-d0cc-4201-873d-da7c5b1445f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f78c646-a368-4ac6-a475-2d6abfd0bb1f",
        "cursor": {
          "ref": "e3090835-6ca2-4c1f-97fa-2c1d5e727290",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bb24c870-5851-4eeb-91ae-0c5ada3e8675"
        },
        "item": {
          "id": "3f78c646-a368-4ac6-a475-2d6abfd0bb1f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c9594b56-6ccb-4157-9084-b636c4420d28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4098ade0-8ff4-4d5e-b6ec-1a9dc69c9975",
        "cursor": {
          "ref": "a74a4f89-a5d1-44a4-9e4f-7193bdfb59f2",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2729011e-73e6-42af-bebe-55239db2e674"
        },
        "item": {
          "id": "4098ade0-8ff4-4d5e-b6ec-1a9dc69c9975",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7090681d-e055-4ab6-a4b0-a7d67df7786f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9f9f30-cd08-4150-943f-6c5b7c75cfd4",
        "cursor": {
          "ref": "88cce77b-c84f-452e-b958-a68e7ca34d1e",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2fb10e11-3558-4a52-9405-333434385756"
        },
        "item": {
          "id": "9d9f9f30-cd08-4150-943f-6c5b7c75cfd4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "06dc655a-f02e-4640-b0b5-5701d84e00f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f0fcd2-4222-4040-869d-f21a18eaa0e3",
        "cursor": {
          "ref": "96767c99-4f96-4fc2-a97b-e830c766ec51",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4876adb0-43bb-4ea8-b17d-41399318bd61"
        },
        "item": {
          "id": "31f0fcd2-4222-4040-869d-f21a18eaa0e3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c492f9b7-2e1c-49b3-a1f5-9bc29a217aab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e529293a-9349-490c-b9e0-b33a743d98ed",
        "cursor": {
          "ref": "91a92ed5-220f-4ee5-bbd9-7352765c515e",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7c4e8761-3504-41ba-9188-a7c8d5332f5b"
        },
        "item": {
          "id": "e529293a-9349-490c-b9e0-b33a743d98ed",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b5c349af-a17f-4451-8bed-da7b337621f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360fb77e-6258-4c44-9972-f6379feb7157",
        "cursor": {
          "ref": "f002e1a3-f644-4600-9116-be0a8afac78a",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "32ee0d79-e61e-4c29-8cf6-63720a6b2f31"
        },
        "item": {
          "id": "360fb77e-6258-4c44-9972-f6379feb7157",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8ccbc831-b5f7-4d5c-8727-21bf3934f824",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb07476-1a8f-4f96-b6cf-a0705998d4ac",
        "cursor": {
          "ref": "792fb2bf-1ff0-4cf3-ae27-681023c2c376",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c9240391-c794-4811-b994-c55ebb59389c"
        },
        "item": {
          "id": "adb07476-1a8f-4f96-b6cf-a0705998d4ac",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8056d423-adb0-4f82-87ce-f8f4be8aef6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cce3687-50ca-4392-9cac-c2ada15319ee",
        "cursor": {
          "ref": "672dba2f-1f68-41ee-829a-8ef7d2bda938",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "551e6560-3f3c-4bee-b323-b23408a17d50"
        },
        "item": {
          "id": "6cce3687-50ca-4392-9cac-c2ada15319ee",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "28e0f281-c3de-4d93-b07e-6befa9aa0fdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32ce112-ccc7-40bc-8b70-48c66b60ad7a",
        "cursor": {
          "ref": "7a357d87-4678-4879-871c-9369d4ed6d1a",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "940e34b4-a862-469d-8851-e5ff5c2d12a8"
        },
        "item": {
          "id": "a32ce112-ccc7-40bc-8b70-48c66b60ad7a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c20e74e8-7d65-4119-9a32-abc486b2d12d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac5ac2e-fed3-48fb-8f31-63c75f965f29",
        "cursor": {
          "ref": "e19e7cbb-1b53-4027-bee4-152bb55e99ac",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "86ead63f-ad76-4f44-a531-6f2247721e23"
        },
        "item": {
          "id": "eac5ac2e-fed3-48fb-8f31-63c75f965f29",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a37409de-1232-4bfa-aa57-67d3aab97ef3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70943f64-bd19-41a9-9df7-8afe059fcfc5",
        "cursor": {
          "ref": "60a6e013-3cfb-46d0-9e71-42d04330a5de",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "eb7cad9b-8682-4266-9ec0-8cda3cad39b5"
        },
        "item": {
          "id": "70943f64-bd19-41a9-9df7-8afe059fcfc5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "23523a25-b2c1-4cf5-8809-fc1a88f289ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dbb0c0d-da85-453f-9fa4-9278474db3bc",
        "cursor": {
          "ref": "b510c1c0-699c-40dc-bf06-64746a86e4d2",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "75a90c77-ec97-4155-8d68-2797296c1a36"
        },
        "item": {
          "id": "2dbb0c0d-da85-453f-9fa4-9278474db3bc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fe52e704-1789-473a-b614-b1127af3f83a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a374fd-356c-48e6-8061-f1dee6da63e6",
        "cursor": {
          "ref": "fc59ff32-887f-4ea9-a41c-56ff25b5f63d",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "32217b1e-6e7a-4921-a071-a003f23cd84e"
        },
        "item": {
          "id": "d9a374fd-356c-48e6-8061-f1dee6da63e6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "caf57b70-5854-4d47-858a-a85f9dccb0eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e75753-8847-4953-acd5-71b1948a7cf5",
        "cursor": {
          "ref": "be13520b-336d-4695-bfb7-e2af0273d6db",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "06740c48-1a32-4e64-9d38-fef8176d53ef"
        },
        "item": {
          "id": "54e75753-8847-4953-acd5-71b1948a7cf5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "db83b6ce-a2cc-40a4-b30e-18c8ba9b10d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1ceea9-cae5-42a6-ae76-19b9359ec755",
        "cursor": {
          "ref": "8ccb9398-6688-465a-aa74-0d2455f475af",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4192cb53-6e44-4cbc-b011-38a6e0dc0057"
        },
        "item": {
          "id": "7f1ceea9-cae5-42a6-ae76-19b9359ec755",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "def7b336-1d42-4104-affb-8af7a4e2190d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2712e6-db37-42fb-ad61-16ea62eea9be",
        "cursor": {
          "ref": "76130cb6-0f90-4d30-942e-f52af60ab51c",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2432eabe-074b-47b4-8102-9cf97dfd1a7c"
        },
        "item": {
          "id": "ea2712e6-db37-42fb-ad61-16ea62eea9be",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "faf18549-20bb-4edc-a232-3fb722a094b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c771955d-c9ac-439a-b9e9-5e3200298102",
        "cursor": {
          "ref": "b6b8d8bc-22c5-44d8-900d-94c673eb65fa",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d4046ccc-f400-448e-b64b-216b2d81772b"
        },
        "item": {
          "id": "c771955d-c9ac-439a-b9e9-5e3200298102",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e6f7e8ad-aa7a-41b6-9e6b-746f8e2f67c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba97a0a-8ca9-4537-8ee8-84c651d16390",
        "cursor": {
          "ref": "210f2003-cfa1-4eb2-8284-38a5128bb617",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "49a8ac30-a2dc-4394-84e6-73d86a1a8cc4"
        },
        "item": {
          "id": "bba97a0a-8ca9-4537-8ee8-84c651d16390",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5e4dfd62-7f4c-418a-93b5-0d4260bf76e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7d886e-9c7a-40d3-b4da-1322802cdd33",
        "cursor": {
          "ref": "50947d81-b01a-459f-b386-6ba77c317525",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "af7d2bc0-20eb-4f96-8563-25da93b4d463"
        },
        "item": {
          "id": "8f7d886e-9c7a-40d3-b4da-1322802cdd33",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f342bb33-a69d-497a-92e6-6e2237f1e602",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e980e48-ce90-4d9c-b4e6-2fd69c2880ba",
        "cursor": {
          "ref": "abfa0f64-344b-42b6-b967-647dd20a59a1",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "16b9f96e-606a-4348-8b2c-ff2e9f4e2614"
        },
        "item": {
          "id": "1e980e48-ce90-4d9c-b4e6-2fd69c2880ba",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "151042c7-718f-4618-a650-a88e3ba4c1f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7489e1a8-8fda-47b3-a32b-e07b1280aca0",
        "cursor": {
          "ref": "1da7bf86-d342-44ba-8da5-71af5beb75d7",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5d4c908f-cdc9-4515-98e0-b5c057550864"
        },
        "item": {
          "id": "7489e1a8-8fda-47b3-a32b-e07b1280aca0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0dcd247e-b48d-4836-b393-f7e645d6bee0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d46a12-0267-44f0-8aff-6acc7645a047",
        "cursor": {
          "ref": "33da6ecb-9f65-4fa2-ac5d-a125c314761e",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "10a78a94-ccc7-4ca6-b067-cd493ffdba65"
        },
        "item": {
          "id": "a6d46a12-0267-44f0-8aff-6acc7645a047",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "94bbeefd-8dae-4d0f-94f5-58ff96688db4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a3eb60-6b01-466b-a48f-c1676b9459b6",
        "cursor": {
          "ref": "772db640-9550-4c74-a811-2f6c0aa7216d",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "797e8678-96b5-4af4-8705-48847585be76"
        },
        "item": {
          "id": "d0a3eb60-6b01-466b-a48f-c1676b9459b6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0632f686-21a7-40e7-aab8-7a1d625bb1ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4398e4c-01d7-49b9-a776-25ee9db277a1",
        "cursor": {
          "ref": "38c5bff6-f960-4a0e-b497-47c566810e71",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ba821a10-3aac-4557-8ec4-eff5e921ef39"
        },
        "item": {
          "id": "c4398e4c-01d7-49b9-a776-25ee9db277a1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "84480ef6-6687-4c73-9fc9-0d5d9d33b5b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57525ff4-b628-432b-ac0e-bfb920b79048",
        "cursor": {
          "ref": "b3c853cc-380f-4850-9c98-862a5913eb3a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b60a2fe8-c7f7-46ac-9836-077056df9e7f"
        },
        "item": {
          "id": "57525ff4-b628-432b-ac0e-bfb920b79048",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "eb02bb48-4a94-4839-b0de-a200646b78c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78545392-486f-4362-b7e4-486347c6c9e5",
        "cursor": {
          "ref": "d23c1884-7593-4728-909d-de4ef1c9d3cd",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "791cad3f-29a6-4ed3-848b-bbfde1262a61"
        },
        "item": {
          "id": "78545392-486f-4362-b7e4-486347c6c9e5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ba70e522-cb1e-4b07-bc34-4275a76f62ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6398b2aa-ef03-45f9-8924-b79494d55a4a",
        "cursor": {
          "ref": "062bf84b-49ab-44a2-b983-e1fcd8b6c458",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3524d538-a5e6-4434-b306-d9e14ea1b853"
        },
        "item": {
          "id": "6398b2aa-ef03-45f9-8924-b79494d55a4a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a7f5f5ea-24b5-4422-a3ed-3c717753e3d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe1ed56-2cb8-4d6f-9057-d197ab8728fd",
        "cursor": {
          "ref": "1de31ab4-7067-45d9-9fe5-3287b458b178",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "251f9000-21d9-4df1-851d-bd1eaac132ff"
        },
        "item": {
          "id": "dfe1ed56-2cb8-4d6f-9057-d197ab8728fd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c8209e32-2686-4b7b-ae21-714fc726d54a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7821646b-0029-41a4-90be-b7ecf0ffc73e",
        "cursor": {
          "ref": "4c358b03-3723-4d3c-ac9b-e4bacecd3125",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "63c640e6-ab37-4a5e-bae8-d7ea58e7dd77"
        },
        "item": {
          "id": "7821646b-0029-41a4-90be-b7ecf0ffc73e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c863ced5-e529-4c30-a9f3-ad2ea15a7aba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01dd6c21-cd67-4643-b751-93dde668fe29",
        "cursor": {
          "ref": "e5e98ffc-3558-4baa-984c-1757f322d6da",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "633279f0-5915-4986-bb57-18911a9fde75"
        },
        "item": {
          "id": "01dd6c21-cd67-4643-b751-93dde668fe29",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f49f38f7-7fb4-4c69-82be-ac9edd264503",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 18,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d621d27-9c55-41a2-a92c-51bb81d1a753",
        "cursor": {
          "ref": "c930f275-abe8-4502-8b4d-9a6c053c9d94",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d41b3a9d-e15b-4454-9515-d9dbba0c3a89"
        },
        "item": {
          "id": "4d621d27-9c55-41a2-a92c-51bb81d1a753",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c16adffc-8a95-414f-860c-7973e8e89a1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec8bc90-8067-4346-aa27-c56bbb82162e",
        "cursor": {
          "ref": "a5ef3774-d8af-42b0-98ae-b70dbb3b6ff1",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "38898b5b-c044-415c-aa1f-cce2c61d3b33"
        },
        "item": {
          "id": "fec8bc90-8067-4346-aa27-c56bbb82162e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5ec4a29a-46a3-43e5-8115-8949978c1c31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec41ec47-2a8d-4c61-9a00-75582ccb8588",
        "cursor": {
          "ref": "33b32e18-ba83-4f0a-bcb8-c942e4501470",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fbb1cbde-2438-46a7-bb31-d3859924d7ad"
        },
        "item": {
          "id": "ec41ec47-2a8d-4c61-9a00-75582ccb8588",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "83e51002-02be-465c-ad6c-6086c50fd7be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede5f296-afe9-493c-9ec3-d48fb5c743ff",
        "cursor": {
          "ref": "6a10a6bb-6563-4108-832e-b95f9a4a5979",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dfe0ba1f-c3fc-425e-a82c-12ac250afaf3"
        },
        "item": {
          "id": "ede5f296-afe9-493c-9ec3-d48fb5c743ff",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a08b09f1-6717-4292-8ed9-d1a23151ff23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a9b5f1-7edb-46ea-9165-e578157618e6",
        "cursor": {
          "ref": "193e24df-3a3c-43cc-927c-a1d4a3557656",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3ac01ccb-f836-48f0-b01d-069b81c72272"
        },
        "item": {
          "id": "32a9b5f1-7edb-46ea-9165-e578157618e6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8d0d3115-4c87-40cb-98c8-a198ddefd931",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d19bb2-22b5-442a-a89a-224a10f6536b",
        "cursor": {
          "ref": "e24677cd-c1b3-47fe-b272-16f31ae5e4b4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "488db439-8931-404e-9659-a6f8f977188e"
        },
        "item": {
          "id": "26d19bb2-22b5-442a-a89a-224a10f6536b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "40ce25da-6105-4fa9-9647-ea170068ad3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a7bfad-b3a7-4696-a614-7c82f4d87e09",
        "cursor": {
          "ref": "21c160c2-ba7c-4905-9534-33f5b3d508ce",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e1ce4b6b-8a01-475f-8229-559f5d0de89a"
        },
        "item": {
          "id": "84a7bfad-b3a7-4696-a614-7c82f4d87e09",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c33ac8bb-2f6d-478f-8b69-43da8c58c67f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24c60ec-6594-4e42-8c41-deef35fc45ce",
        "cursor": {
          "ref": "5e920ed7-a100-40fa-abd3-a5e2aeb1a283",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4a979b3d-9bd2-4793-86c3-b694f93a44f4"
        },
        "item": {
          "id": "b24c60ec-6594-4e42-8c41-deef35fc45ce",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6d934388-dc46-4eb4-8ca2-7a21af693a40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f9db48-a37f-4e60-86ff-fec9594686cd",
        "cursor": {
          "ref": "069aab14-435f-41b8-ac3b-461a168ef805",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9fe2988a-6209-42c2-af00-bafd55fa4e1e"
        },
        "item": {
          "id": "71f9db48-a37f-4e60-86ff-fec9594686cd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "427850ab-dfb6-4d22-b803-472bb7f003c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122435a1-bd06-43b4-9ce9-939ef37cfdc4",
        "cursor": {
          "ref": "9e3cbb63-cfb3-462d-99a3-2089b4a24176",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5f22dbb7-e19d-4d1d-88ae-4fce7cfd9eb8"
        },
        "item": {
          "id": "122435a1-bd06-43b4-9ce9-939ef37cfdc4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1039e909-5999-4d36-9715-0556ca1542d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e141c7-8273-45fc-a7a2-848df97b3e6c",
        "cursor": {
          "ref": "839f0251-e3de-467e-a57b-fdb26bf8c070",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "197f4144-3bbd-424c-b555-ecd5f533c609"
        },
        "item": {
          "id": "a3e141c7-8273-45fc-a7a2-848df97b3e6c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "66f785df-c9e7-4d20-95d9-f3c5767db313",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbb5627-eb86-4ad9-9de1-d7dea8466138",
        "cursor": {
          "ref": "92f0c0cf-034f-4012-9548-70f0f8d4a201",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c5b6cb31-7730-403a-87c6-ddc1d2f1f9cb"
        },
        "item": {
          "id": "6fbb5627-eb86-4ad9-9de1-d7dea8466138",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b87b950f-a247-43d5-8865-8968ec1ff4cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a544225-20d7-4d4d-b8ac-3de475db4aa6",
        "cursor": {
          "ref": "07c455c6-07bd-453f-836f-a1718a95200b",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c300aae0-9ac1-4fbc-b635-80f814f8def2"
        },
        "item": {
          "id": "7a544225-20d7-4d4d-b8ac-3de475db4aa6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1784ed0a-3ed7-469d-9ba1-121cf8931ca7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ce6581-902c-4ce4-922e-29a4d4b63b03",
        "cursor": {
          "ref": "b0dd5832-6054-4b8d-8c2e-91a81a3b5b83",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ed18325f-c427-40d2-abed-f6dedb63097d"
        },
        "item": {
          "id": "f6ce6581-902c-4ce4-922e-29a4d4b63b03",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f578f7c0-b2e5-4a98-9dcd-6c6ad73e63ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42c7d12-2b4c-46a3-a745-85d0d1235aa9",
        "cursor": {
          "ref": "01f55ed9-7452-402f-b973-937d81df8a9e",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "de4b54cc-ccb6-4eb6-8fc7-b79bb466a038"
        },
        "item": {
          "id": "b42c7d12-2b4c-46a3-a745-85d0d1235aa9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4c3a32a6-806d-4955-8a63-3993c73529b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a24aec-47a2-4789-bf2e-239ee8aa54a1",
        "cursor": {
          "ref": "832deca3-d203-435c-bc16-0d1c5bb933b7",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8105c013-cf65-407e-9a33-9e94b628aab8"
        },
        "item": {
          "id": "39a24aec-47a2-4789-bf2e-239ee8aa54a1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a3952638-5b38-476c-abe0-34e16a95bf85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc807ea-9715-4aba-b4b8-5c8ae6e8876e",
        "cursor": {
          "ref": "7dfe591b-e0db-455e-b7cb-599000254d22",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "bb0ec9e6-00a9-4bb9-a63d-70802e856426"
        },
        "item": {
          "id": "9fc807ea-9715-4aba-b4b8-5c8ae6e8876e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "dd13b7c7-53df-4d87-9e3c-4fb790e2fe63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9203ed01-afd3-43e4-9ea5-47201a95211e",
        "cursor": {
          "ref": "92871cd0-0867-43c7-9a78-2e4001bd1d52",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "694707eb-b95d-4767-a37c-e493b026e8d4"
        },
        "item": {
          "id": "9203ed01-afd3-43e4-9ea5-47201a95211e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d966d50e-44ac-4899-8d96-9872fee72fe6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad78387-b67a-4f19-a26c-1c2613c5b77e",
        "cursor": {
          "ref": "030f5395-f28d-4557-b490-c5e5f48f3d7b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1078705e-7071-4136-bc0a-8a318d3a7824"
        },
        "item": {
          "id": "dad78387-b67a-4f19-a26c-1c2613c5b77e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "db0477f3-f003-4b17-a18a-51e7f2bb82c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30c2c2d-1db1-4de4-92a1-3668729d2ddb",
        "cursor": {
          "ref": "4b94df98-b778-4bc7-b5f4-bd7263c9625b",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3c0aac44-0ec1-4d8f-a72d-c0eca450c072"
        },
        "item": {
          "id": "c30c2c2d-1db1-4de4-92a1-3668729d2ddb",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c6588df7-114e-4dcf-9b6a-01713a18be49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f2fedc-143b-4b31-b9e4-88ed70834335",
        "cursor": {
          "ref": "0b3c5d01-e406-4c02-868d-2dbfd3e05124",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e1c14280-50a8-4c72-8e1e-12e2af0de7f1"
        },
        "item": {
          "id": "75f2fedc-143b-4b31-b9e4-88ed70834335",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "29a86562-5e18-4194-b771-ec72be141f87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9545d465-f6ad-462a-9b1e-f686205d9707",
        "cursor": {
          "ref": "d105248a-3245-446c-9349-87d558cb9008",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cc2b7acb-de2a-4b33-a472-96e28159ea03"
        },
        "item": {
          "id": "9545d465-f6ad-462a-9b1e-f686205d9707",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6a78f673-7ff2-4091-b883-0545e83f3043",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caeea90a-884d-4058-b417-d80bd9d37c78",
        "cursor": {
          "ref": "9261f2aa-c64e-41f9-82d5-70ced05a6480",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "27d1ea14-5bda-479c-b848-1def4d0dff64"
        },
        "item": {
          "id": "caeea90a-884d-4058-b417-d80bd9d37c78",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4c5dee10-8c58-4b70-8f6a-c714d421e337",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3af0232-acd4-4a01-ad86-4e17a5ba6007",
        "cursor": {
          "ref": "bab92c95-24c6-43e1-89fb-98b4e673cf63",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "78bdb6d9-53ce-45aa-a942-036f29f2d2cb"
        },
        "item": {
          "id": "b3af0232-acd4-4a01-ad86-4e17a5ba6007",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fc86d934-827b-470d-b924-e8c8346ecce1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8529411-1df6-4f7c-8894-6ca42473ec90",
        "cursor": {
          "ref": "acb27895-3814-41c9-8b15-3c9bf3147b78",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5fd37f83-2ef2-4f66-b8ff-e308274c8528"
        },
        "item": {
          "id": "c8529411-1df6-4f7c-8894-6ca42473ec90",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "235dc6de-4ebf-470c-8247-4f7db47f6da4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b47ff75-a7e9-4d49-8ea8-7f4ae435d91a",
        "cursor": {
          "ref": "ec52f4e3-c11c-42ad-b841-178511d310a5",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4e750e98-e9b8-4225-aea8-b55ad72b0297"
        },
        "item": {
          "id": "1b47ff75-a7e9-4d49-8ea8-7f4ae435d91a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "acdce005-a247-415a-ac39-8b355ba8adfd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b39050-a50c-4e2c-a3f8-18d4f07d0e4b",
        "cursor": {
          "ref": "ca260b2d-6190-49e0-8e93-32bed23c0c1d",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7df72408-338b-49f2-bd47-e941d776878a"
        },
        "item": {
          "id": "d3b39050-a50c-4e2c-a3f8-18d4f07d0e4b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "69ec34e9-c865-4465-a646-8f6530e5d8ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881c1d85-4da7-4f6c-9adf-f2db46348a2f",
        "cursor": {
          "ref": "43da94c8-16c7-41c0-8556-9302c8de54ea",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2f91c7a1-64a1-417d-b032-d153ee6a7190"
        },
        "item": {
          "id": "881c1d85-4da7-4f6c-9adf-f2db46348a2f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a1dd6aa3-9496-4efd-8905-7726113fb3a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2253315-189c-4d78-a7ae-cbac7e41a765",
        "cursor": {
          "ref": "c502610a-484e-4f66-9097-d5a9cbe61a19",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "431c40f5-15f0-449f-a1bf-2788fc0b5130"
        },
        "item": {
          "id": "b2253315-189c-4d78-a7ae-cbac7e41a765",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "27b200c3-48f9-4961-9bd5-5e3010b654ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0f4624-e7a7-4b5d-a5be-3cf5f41469b4",
        "cursor": {
          "ref": "8093b51d-932f-45a8-8e43-caa8c42b260e",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "91646da2-c900-48e0-9b44-6f47a2504c9c"
        },
        "item": {
          "id": "9e0f4624-e7a7-4b5d-a5be-3cf5f41469b4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e29e5316-8eb0-4612-b4e4-784748a232c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77c7694-9724-45c6-8071-a3cc705dd100",
        "cursor": {
          "ref": "2f320b22-685c-4fcd-aba4-34e4c3b63753",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e4b1f887-dbf5-4b11-9b44-831d9cbf3ea3"
        },
        "item": {
          "id": "e77c7694-9724-45c6-8071-a3cc705dd100",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "3db958a4-9752-4d1b-be17-bd746638749f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "30203675-8849-4f50-ae83-37d894316f61",
        "cursor": {
          "ref": "0bdacd8a-379a-4523-ad09-07b6beea64f8",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9cad4308-1400-4a3a-828b-b3779a79b108"
        },
        "item": {
          "id": "30203675-8849-4f50-ae83-37d894316f61",
          "name": "credentials_issue"
        },
        "response": {
          "id": "63eec1f1-2559-440e-b69a-dd1118d92f14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 167,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "9cfe7a4d-5e4b-4370-87a5-c645bbb8d1f0",
        "cursor": {
          "ref": "462d75b5-ee9f-4440-baa4-a20df261849d",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a3c5ebd1-7d9a-4a5c-a120-73336a07d9ca"
        },
        "item": {
          "id": "9cfe7a4d-5e4b-4370-87a5-c645bbb8d1f0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5c8bff8e-f07b-4f2e-87f5-095e2041d31e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 13,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "39844d6b-3cd7-427e-b5ce-395ac64e87ca",
        "cursor": {
          "ref": "a057b9db-a4ca-422e-bbc7-38c6f3158e96",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f2b92b09-79ee-4e6d-b182-3c89941f53c8"
        },
        "item": {
          "id": "39844d6b-3cd7-427e-b5ce-395ac64e87ca",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9525a6a1-f0b1-44fc-8d8e-8eb40845ccf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "afe60e40-b26f-460f-809d-af8830505fd6",
        "cursor": {
          "ref": "900f0828-c411-4a6b-914c-cbc20de41db2",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "03251300-6ee9-4dc5-9cff-a997278c7acb"
        },
        "item": {
          "id": "afe60e40-b26f-460f-809d-af8830505fd6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e80f17b8-5401-491d-8d87-ab4f370ddec0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "6b907381-f1b2-4f23-afbe-4be8e52e6d20",
        "cursor": {
          "ref": "81600139-c8b9-4bc2-9340-3ce16aa65f6f",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "99a88b42-54da-49fe-a731-f6075c3615f9"
        },
        "item": {
          "id": "6b907381-f1b2-4f23-afbe-4be8e52e6d20",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c648a8a1-1677-413a-be4b-8c2655ca705d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "25f3ba5b-1ee0-4bee-be0f-2c52a9486c71",
        "cursor": {
          "ref": "3c4e3995-daa5-44e7-8c00-f5bc521503f8",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "32960ceb-0f72-4f8d-a81a-359bbcc6f0cc"
        },
        "item": {
          "id": "25f3ba5b-1ee0-4bee-be0f-2c52a9486c71",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cfa1b07a-9ac4-4848-adcb-637edf951472",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "e9282c1d-f017-4845-a587-7cd475b99fb0",
        "cursor": {
          "ref": "8614386e-f93c-486f-8e82-1b2bdf850bbc",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ae4b56bf-cef3-400c-bea0-8f1e89aacf8a"
        },
        "item": {
          "id": "e9282c1d-f017-4845-a587-7cd475b99fb0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3d98b6e3-e2ed-445e-ae07-b3ff96474693",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e378e3-7109-4b02-b3d5-5f50860429a4",
        "cursor": {
          "ref": "14c00774-751a-4c51-9f7b-8964977ab2aa",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "92c74bc8-69a9-46c0-8d1c-f37459e4ae19"
        },
        "item": {
          "id": "05e378e3-7109-4b02-b3d5-5f50860429a4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "89885f4b-7ce3-49fb-a4e2-50ee2ff1b3ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc7a278-0c0b-43da-a82e-25f380c1de18",
        "cursor": {
          "ref": "d6e15d88-68be-40ec-a331-e4c641a43905",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1a659f6c-97de-482b-ba3c-fc6921312201"
        },
        "item": {
          "id": "7cc7a278-0c0b-43da-a82e-25f380c1de18",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b5fa8c76-567c-462b-a763-0206163de789",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec45ca63-50aa-40ad-ba2b-19fe96ff365f",
        "cursor": {
          "ref": "7b084c89-111d-44bd-8654-d7e01773bd4b",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c9ce883b-336c-4679-90c2-81e7b0dc002b"
        },
        "item": {
          "id": "ec45ca63-50aa-40ad-ba2b-19fe96ff365f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d9760a44-15ee-4edd-932e-d73335973f89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10387f05-70ae-4c0b-9a0b-b7e23a4c55bc",
        "cursor": {
          "ref": "d609fe17-0557-4f0c-8597-1248b10e17f0",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e55fa813-6468-46e7-98cd-1a6455899eab"
        },
        "item": {
          "id": "10387f05-70ae-4c0b-9a0b-b7e23a4c55bc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c40f19c7-2c36-431e-b04e-49447876ca63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd839a3-7d7d-40be-8def-3f3971e24d8b",
        "cursor": {
          "ref": "c52ae7d3-5e1b-430c-8cca-314fe888b52b",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e5341a42-57a3-435e-ba08-66d91cf54f05"
        },
        "item": {
          "id": "cdd839a3-7d7d-40be-8def-3f3971e24d8b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "66a339f2-dcdc-436e-8811-b194c16599fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b960ae4-df2f-4d31-a088-032918648b25",
        "cursor": {
          "ref": "620abbf7-dcec-432e-aede-f797bc5c0a4a",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "335a772d-49a2-4ddf-91c0-863e1d863988"
        },
        "item": {
          "id": "5b960ae4-df2f-4d31-a088-032918648b25",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7d03ae0a-78eb-46c5-a3de-51b012dbbe45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c8723c-636a-4ac0-b909-458f57b8a86d",
        "cursor": {
          "ref": "12ae68a9-540f-464f-9986-ee29fdab48f2",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fe86b49b-0f14-49f2-b8f2-ae749aa8eb60"
        },
        "item": {
          "id": "57c8723c-636a-4ac0-b909-458f57b8a86d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c8005cf5-694b-4d14-bad6-03973005cd3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae71d3b-c61a-42e9-a6c7-fafaef6d5ab7",
        "cursor": {
          "ref": "c59368d1-2271-42c0-90a3-c030c02355ed",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f9196ddc-7a76-4c83-9a65-512409cce766"
        },
        "item": {
          "id": "cae71d3b-c61a-42e9-a6c7-fafaef6d5ab7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cade435b-993e-4016-999d-6169472e22c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08033444-3620-4942-aaaf-6d4117901320",
        "cursor": {
          "ref": "85ff4d59-b200-416c-b8c4-0f2ce1d73cca",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e68eab31-5eae-4300-b2ae-830c88fe3805"
        },
        "item": {
          "id": "08033444-3620-4942-aaaf-6d4117901320",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "670fa5d8-a709-496e-a84c-044e9ab4efdc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b95d7d-f8de-4c9f-9fad-76f613741ced",
        "cursor": {
          "ref": "57098419-5043-43bb-b0e4-cc2a0c9a4b5f",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dfd70527-44c1-490f-b71f-df1dc4fc4499"
        },
        "item": {
          "id": "41b95d7d-f8de-4c9f-9fad-76f613741ced",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e362a0a7-0a98-4622-a65f-48b0d9930a8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedd4ab9-41a4-4202-baa5-10a1eef28de9",
        "cursor": {
          "ref": "25054c7c-f93d-43ba-8330-97ef4e3c312b",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "da6264ef-b1ab-45f3-ab4e-eeb563e9e969"
        },
        "item": {
          "id": "fedd4ab9-41a4-4202-baa5-10a1eef28de9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3563c800-010f-4634-93c2-70b16b70c4fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31136d7e-bccb-40b4-b936-0f0a647aefb8",
        "cursor": {
          "ref": "020eae5e-9258-43e0-b84f-4982a0ec3d6d",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "337dffd3-a18b-400c-b40f-b79b1ec813ad"
        },
        "item": {
          "id": "31136d7e-bccb-40b4-b936-0f0a647aefb8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "82bcfcb3-4568-479e-91c9-45abd523e36a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1205d56b-d973-4f76-aa02-029b7c83955a",
        "cursor": {
          "ref": "ae60c82a-78e3-4779-9a92-97e0cf84c401",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bee10b4a-880d-49e8-aa23-24c3d3eabe68"
        },
        "item": {
          "id": "1205d56b-d973-4f76-aa02-029b7c83955a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "28595a15-8fc0-4332-9c85-7a9e745a19a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc807cf-8533-4eea-b7e9-f6f191b3f58c",
        "cursor": {
          "ref": "b4c6ed8e-9201-4266-a896-c1ea20f8f690",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b60fcae3-f015-4b91-9d13-892a0a0a8b1e"
        },
        "item": {
          "id": "6cc807cf-8533-4eea-b7e9-f6f191b3f58c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1b493aa8-b465-422c-9d2f-0b80ceb650ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671a456f-924b-4ffc-851d-f4ec4610c12d",
        "cursor": {
          "ref": "f1b1afe7-985b-472c-8f19-d88b55b7edc7",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2fb35247-dd9a-4bbf-97d2-eabb2c0a34c6"
        },
        "item": {
          "id": "671a456f-924b-4ffc-851d-f4ec4610c12d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "602c7cab-36f3-400b-8793-a1b190382798",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1978e5-cb6c-423e-869b-c1894ea2d2cf",
        "cursor": {
          "ref": "ba95398a-d62c-47de-adaa-d230ffa37a48",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "514c237b-d1ca-4fca-933c-f9b76d75cd23"
        },
        "item": {
          "id": "dc1978e5-cb6c-423e-869b-c1894ea2d2cf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4cd2b9d4-8bcf-4dac-9813-9a51e6ccf010",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218200d5-dbbe-4c7a-ad5b-2da04414539a",
        "cursor": {
          "ref": "fe055e0a-0154-4a62-a0d1-5a793137366a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6d2fd109-fed4-4531-9bac-614f630041d3"
        },
        "item": {
          "id": "218200d5-dbbe-4c7a-ad5b-2da04414539a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4e1534a0-43d8-459e-8ce1-c08b7b5a2d50",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196667e2-709e-42d6-8d80-d3b152a076d7",
        "cursor": {
          "ref": "ce396db4-cc2e-441e-b3dc-5dfc222e5180",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "26d0487f-af4f-4da2-a51e-213c1c6c8cd1"
        },
        "item": {
          "id": "196667e2-709e-42d6-8d80-d3b152a076d7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "33f58126-15f0-4398-b729-8860e4ff76be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4d9703-075a-4313-9881-50bf1f00bedf",
        "cursor": {
          "ref": "977c8414-56da-4bbd-a443-5d0a00a1b429",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "497d3bc0-6228-4a25-83e7-88d46737e195"
        },
        "item": {
          "id": "bc4d9703-075a-4313-9881-50bf1f00bedf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f32ca95c-85e7-4a2e-b717-a8cb737d6c4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372edfab-201b-4f40-8eef-fa3833c2cba5",
        "cursor": {
          "ref": "bdd34fae-bb08-42a0-82ce-89d5d726f5d7",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ea9dafd4-e114-4fdb-82d0-68acc9f1f700"
        },
        "item": {
          "id": "372edfab-201b-4f40-8eef-fa3833c2cba5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "43018e85-a736-4062-a65c-00b7feaca223",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6395aba3-ae0c-45a2-9556-334582649fac",
        "cursor": {
          "ref": "62f0761a-5c73-4db8-b615-6c8e56968d0f",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c4f37fd1-d1bf-4a38-988f-b31242dc11be"
        },
        "item": {
          "id": "6395aba3-ae0c-45a2-9556-334582649fac",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d1401545-84a0-4a51-bbdc-a4adcadd410c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5150f335-30e0-4b1c-bf0d-42915b499261",
        "cursor": {
          "ref": "43ad2d5e-02d2-42ee-b170-570fe3c5f50c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3764642c-2ac4-4114-9b4f-c22f8bce6218"
        },
        "item": {
          "id": "5150f335-30e0-4b1c-bf0d-42915b499261",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "217084ed-d2df-4406-847c-bd15f26a660b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498a686d-ac88-4acf-85cf-e5724bf658f1",
        "cursor": {
          "ref": "d79aca76-a11a-4411-9c27-bddcc0a37f2f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ec7346e1-4a38-4532-ae9e-ccc4f14060a2"
        },
        "item": {
          "id": "498a686d-ac88-4acf-85cf-e5724bf658f1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a53bd278-e60c-4117-b147-b1a39171b7a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6142ec-ae36-49c7-87e4-196c8f1c8c4c",
        "cursor": {
          "ref": "024113bf-e929-4bce-bc49-dacfdd012a42",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "682b7954-fca8-477f-8dba-34e153f72248"
        },
        "item": {
          "id": "ed6142ec-ae36-49c7-87e4-196c8f1c8c4c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "93136b75-bd23-4bd5-aff2-f812988edfcb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170e509f-2c0a-475f-8a2c-c6064c0fcf2a",
        "cursor": {
          "ref": "321806f8-c30e-4368-8342-0c197f870b78",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f62c755b-5f93-4094-92bf-7b2d03de9010"
        },
        "item": {
          "id": "170e509f-2c0a-475f-8a2c-c6064c0fcf2a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dae82862-0be2-4ae5-8ec4-7898230d7210",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90844556-89dc-46c8-9e2a-68394be31446",
        "cursor": {
          "ref": "4c51493a-5297-4899-b315-fa3581331d6a",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f5a070c9-0f1d-4d1a-bd6c-b7a24a6fe3c2"
        },
        "item": {
          "id": "90844556-89dc-46c8-9e2a-68394be31446",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "af97cf52-d019-47e6-b79e-ba03dfaf34d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711584bb-711c-4b00-8f41-7de4877c90f1",
        "cursor": {
          "ref": "c4076b82-62b6-4c9f-ab45-b59bda0b2285",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5e9e65e6-171a-4d13-ad1b-d98677337594"
        },
        "item": {
          "id": "711584bb-711c-4b00-8f41-7de4877c90f1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e15d9fbe-b0f1-4868-b789-2caf3e206d46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c95fcd-0c50-412d-ad0b-da27bd475d95",
        "cursor": {
          "ref": "ad7ab0f1-c9b4-4c74-b491-7f970ba1e3d1",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0e675532-0879-4773-81f3-63bf5f7943a9"
        },
        "item": {
          "id": "12c95fcd-0c50-412d-ad0b-da27bd475d95",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8c9eb5d9-53a0-43f9-b5d5-98f95eb6538a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5829f6-a76d-4c28-81b3-108d34362e2b",
        "cursor": {
          "ref": "d74c84ec-a465-45d5-afad-deb00b98832c",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "242c0e34-1f4e-4c77-bce6-7841e3d4e959"
        },
        "item": {
          "id": "3f5829f6-a76d-4c28-81b3-108d34362e2b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fa04272d-7f28-4e4e-b830-3edd3d561d19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6863867-a0a9-4a14-ad02-06d7f5d37cb5",
        "cursor": {
          "ref": "1e8f02c5-59bd-4acb-bd97-5fb799dfa2bb",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "737b923b-c9ae-4c07-abf7-2e9204f91c94"
        },
        "item": {
          "id": "d6863867-a0a9-4a14-ad02-06d7f5d37cb5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "23a73000-c121-4e02-8a67-9917a4ca9f05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42c7523-7f6e-436e-aa68-9ecbd1eeb257",
        "cursor": {
          "ref": "84cfc2d1-002e-4145-954b-a0aba08938ed",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8dcce67c-3bcd-449c-98ba-2048fea8ffc6"
        },
        "item": {
          "id": "a42c7523-7f6e-436e-aa68-9ecbd1eeb257",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9f792daa-eb75-4e42-a95f-8ab089ea4da6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de9786a-750e-4145-987f-908125f622b4",
        "cursor": {
          "ref": "284fae47-e6e0-4e39-bef3-b7b2f673c373",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "43642cb6-aedb-4782-99e8-5addde976c48"
        },
        "item": {
          "id": "4de9786a-750e-4145-987f-908125f622b4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "617d9234-73f7-41c7-999f-692839f13123",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30208217-cf2b-48ea-86fc-b6d75531252b",
        "cursor": {
          "ref": "f840da03-53ed-4a77-abce-ab44528f865c",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f86ec346-e325-4691-bbc7-80da2754a24d"
        },
        "item": {
          "id": "30208217-cf2b-48ea-86fc-b6d75531252b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "72541262-8e3d-4872-bc74-aad46bb25442",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5708d0-14d7-43b7-adde-b326670b9a66",
        "cursor": {
          "ref": "7ec235f5-c16e-4116-9c68-38e2254f26a9",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "87e42569-23ce-43fa-9689-8ec5d198db93"
        },
        "item": {
          "id": "3b5708d0-14d7-43b7-adde-b326670b9a66",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5d5fd917-d27a-4747-94b3-5c7ee93b952d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0999da52-facb-4b89-97e2-d5c984476e70",
        "cursor": {
          "ref": "05575751-97cc-4333-95d6-177a86d666c0",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4f474491-7862-45de-8678-0f70c73509d9"
        },
        "item": {
          "id": "0999da52-facb-4b89-97e2-d5c984476e70",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "80ca5b75-fe45-40cd-8e20-bcd16d56c397",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10103875-4583-4d8a-96b4-8e89ca70c9bd",
        "cursor": {
          "ref": "93a5d5ec-2ac7-4bc6-adc6-72ba2ef236f7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "34e1cfd2-fa98-4fcc-a51c-648c7edd75d5"
        },
        "item": {
          "id": "10103875-4583-4d8a-96b4-8e89ca70c9bd",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5ba34795-fa21-428e-9c5d-2d9037964397",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9c5593-d887-4d1c-a095-6905cb69ff63",
        "cursor": {
          "ref": "9edc88bd-b34e-4048-9556-3148f33d3ea1",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7fa058ac-a383-4f8c-8a18-ed7a9503d73e"
        },
        "item": {
          "id": "2c9c5593-d887-4d1c-a095-6905cb69ff63",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8b434ac1-214f-4bf9-87dd-402402e90b09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3857c21-d443-41cf-a105-1c21087a2daa",
        "cursor": {
          "ref": "15033a0a-fc49-4558-9a3c-47cd53f933cb",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cacd1b9f-1814-4d97-b300-36619ad12337"
        },
        "item": {
          "id": "f3857c21-d443-41cf-a105-1c21087a2daa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "93240071-3c05-4049-a507-b92655f3b248",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5177d86-4c1b-406b-b2fc-5a3b522efe8c",
        "cursor": {
          "ref": "95acbc27-027b-4a46-b3b4-ae00df9b2229",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "01b8cf4c-3641-4839-8616-15dbfcc60192"
        },
        "item": {
          "id": "d5177d86-4c1b-406b-b2fc-5a3b522efe8c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "87675837-cfd2-49c4-b281-ccb6126d6835",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d922f873-1123-468d-a5c4-0746cb1e38a4",
        "cursor": {
          "ref": "78585b95-abef-45f8-b82d-10a89f3d962c",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "73a3b98a-300c-483c-820f-eac4748d192b"
        },
        "item": {
          "id": "d922f873-1123-468d-a5c4-0746cb1e38a4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "720a9aa0-d460-4a0e-8fd7-af77fa472a69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457e0561-d630-4798-98e3-a5a52b0491ea",
        "cursor": {
          "ref": "c7dd2071-0472-41a2-9314-e829eb7e7486",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "34725ab2-db88-49d6-b783-31232a9a7511"
        },
        "item": {
          "id": "457e0561-d630-4798-98e3-a5a52b0491ea",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c1bd2721-5cca-4fca-a5b1-6c87e5166c51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa43d8b8-0776-430e-95c6-7ec34ba68d9f",
        "cursor": {
          "ref": "c58ed6fa-0d77-469a-a497-9e3d974a7850",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2d9f60ce-18f4-40e7-a45a-bc7efb60c092"
        },
        "item": {
          "id": "aa43d8b8-0776-430e-95c6-7ec34ba68d9f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9e9f8a36-dbcc-4c63-ab6c-b643e074e69d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f827ce-1916-4f9d-b199-6c0ab9db31f5",
        "cursor": {
          "ref": "a0135f00-96dd-44e4-9fd8-1d99d645a915",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ed675d30-9e69-46ba-a4b4-04ad570c82ba"
        },
        "item": {
          "id": "24f827ce-1916-4f9d-b199-6c0ab9db31f5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "900175af-0cf4-4d62-86fe-8dceeebfbdae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99414b0b-48b8-4195-826a-77853c4635fe",
        "cursor": {
          "ref": "93166290-c7e9-4e6e-8872-429b6346e666",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "df1f314c-cbe9-49fb-ac4b-675fd28a9230"
        },
        "item": {
          "id": "99414b0b-48b8-4195-826a-77853c4635fe",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f1c48280-64bf-4087-8f90-21de8c3b2c4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fa70e8-58d6-4243-a44e-35af0c782bde",
        "cursor": {
          "ref": "699f0e6d-b0c1-45ab-ae1f-2040a5a4ff4c",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1aa38937-0332-4e83-9654-4f3ef2a5c29e"
        },
        "item": {
          "id": "88fa70e8-58d6-4243-a44e-35af0c782bde",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "eb2fce71-a889-49b3-9df3-40df1d40adba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c3d42b-23d2-4bad-a5fd-a14119dc5a3e",
        "cursor": {
          "ref": "276990be-748d-46c4-8118-d09cfe223a4f",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ce232995-ab91-401a-93ad-3530e42fe98b"
        },
        "item": {
          "id": "c4c3d42b-23d2-4bad-a5fd-a14119dc5a3e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2e3a0aea-aa85-4d85-828a-bfeed2d02e58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802925e1-8d24-4a47-81d4-b615c6921d7c",
        "cursor": {
          "ref": "4e9460e9-917b-457a-8f22-084bae395f62",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0491f179-0899-4e06-b8bc-f7d1041f1618"
        },
        "item": {
          "id": "802925e1-8d24-4a47-81d4-b615c6921d7c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "457e2c0e-2015-4346-8850-a56afec94ee3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693f9bb9-284f-439c-bb8b-a890b82296bf",
        "cursor": {
          "ref": "da0b3afe-f1a1-4e0d-bb82-94c13311dd6b",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c1705916-f968-4b1c-8dc0-60cab491d20e"
        },
        "item": {
          "id": "693f9bb9-284f-439c-bb8b-a890b82296bf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "277127c8-934a-426b-9856-98f04fb8d014",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bacd869-9177-424f-8537-07344a210700",
        "cursor": {
          "ref": "517eb583-3551-4590-ab13-636bb2f74a3f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ed753446-c24a-46a0-9ef8-0f315097b607"
        },
        "item": {
          "id": "7bacd869-9177-424f-8537-07344a210700",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6907def4-9583-49e6-9382-82e95972ef25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284cfb4a-e572-492e-9012-f48b99381826",
        "cursor": {
          "ref": "97ec4513-6495-45e6-acef-099e98ad7e0c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b051789d-b790-46f9-8f0b-31b5091e9f94"
        },
        "item": {
          "id": "284cfb4a-e572-492e-9012-f48b99381826",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ad6d97f3-5ebf-426f-8dfb-43d81ae9044b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1ebe7c-a5fd-4f17-8726-a52e0a01a32e",
        "cursor": {
          "ref": "a6a1b405-dc92-4acf-9d2d-b47a06bf6bd5",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d1707604-d38f-4025-abd0-18674e81586f"
        },
        "item": {
          "id": "cf1ebe7c-a5fd-4f17-8726-a52e0a01a32e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4fe1196e-3c16-44cf-87bf-8fd6f7d6b4e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4ef505-9c5c-4051-bdf8-03d4d45d2334",
        "cursor": {
          "ref": "96416dc6-d444-4da4-85e2-227d89312e98",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1c870a1e-b378-46d0-bb19-9f19bbc68316"
        },
        "item": {
          "id": "cf4ef505-9c5c-4051-bdf8-03d4d45d2334",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c9c46b18-fb9b-4231-a649-1294756f1a6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f44c827-aa99-41f5-abc9-6f50a86e853a",
        "cursor": {
          "ref": "d6d778b8-b331-4650-a5ef-4a2e2172d926",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c1e7fe60-0837-49f2-8b1b-e82e4f5bc2ed"
        },
        "item": {
          "id": "3f44c827-aa99-41f5-abc9-6f50a86e853a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "74e57b2a-674d-4de1-96a8-2f97ff424e0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0e6c3f-c23f-4767-9402-cf3322d9283e",
        "cursor": {
          "ref": "1c9e922e-9393-4752-84c4-ee9de5c684de",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0fea32f3-5821-4ecc-84d9-b70922ebbd3e"
        },
        "item": {
          "id": "cf0e6c3f-c23f-4767-9402-cf3322d9283e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6401a73b-d148-4e73-b095-689750a3ffad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff5a349-1f5a-4529-b319-e4c443c8a42b",
        "cursor": {
          "ref": "325f58a9-6c5d-456a-a830-6aa3fada8cc0",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cab97aeb-5bfd-43ae-b52a-f36955ab6ba5"
        },
        "item": {
          "id": "5ff5a349-1f5a-4529-b319-e4c443c8a42b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0099a4c1-b1b7-4a34-9750-4d7be0909fd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50230636-6cc5-4a2b-bf85-4b3608b5f9de",
        "cursor": {
          "ref": "fcd6c028-2211-4234-9dcb-fdc8434c2cb6",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ab7ce60b-8364-4fdd-9033-7f94f5dbcaf7"
        },
        "item": {
          "id": "50230636-6cc5-4a2b-bf85-4b3608b5f9de",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2ac5f051-996d-449c-8baa-8faaea71a789",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70411c99-9cf7-4f61-afa4-3ebf0bea598a",
        "cursor": {
          "ref": "86128d7a-33ac-4bd0-9db7-bb5891cf1b3c",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cad58aa4-0d14-44c3-9389-118e7f9033fd"
        },
        "item": {
          "id": "70411c99-9cf7-4f61-afa4-3ebf0bea598a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fe2a2d06-6831-4e1b-9fed-1f365f218072",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0f5841-340b-411b-a047-a8a26516a2b2",
        "cursor": {
          "ref": "62755caa-e5f8-4c2c-8fc9-cebaf679fd21",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cf43e01f-709d-40c7-93d2-1f3abd9f682f"
        },
        "item": {
          "id": "bc0f5841-340b-411b-a047-a8a26516a2b2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6abeed77-f492-43b1-a06f-95387f28be43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1427f48-6f98-4dc4-8ecf-28e75eace8cb",
        "cursor": {
          "ref": "e6c81328-4dab-466c-90b0-628c0a181f00",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7e89356b-c27a-4d14-8524-1836ce808bcb"
        },
        "item": {
          "id": "d1427f48-6f98-4dc4-8ecf-28e75eace8cb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c7777650-8908-4b48-ab5b-b92ad988e31a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537e1e34-ee68-4763-a923-d69463e07bcc",
        "cursor": {
          "ref": "1b2ff957-24b6-4fa8-b503-24f8cb244a19",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "66cbaee5-c05b-4eb7-9a1f-ce332b9f58b1"
        },
        "item": {
          "id": "537e1e34-ee68-4763-a923-d69463e07bcc",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a8c10610-547b-4492-a077-eae003697226",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e0196d-fc3d-42ee-9f2b-0a8365a8a5c9",
        "cursor": {
          "ref": "20c951df-1f99-4ace-a057-e41036bf2938",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "46c80452-4c0d-44e1-9412-3edc7fef0298"
        },
        "item": {
          "id": "39e0196d-fc3d-42ee-9f2b-0a8365a8a5c9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7a262d73-e5f5-487d-a997-775ddb6d0fbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8b21cf-a68e-4004-8d61-d87cf21514d4",
        "cursor": {
          "ref": "7be6d3c4-2632-48f0-86fd-b62ab4c8131e",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ff82b881-0d0b-4b19-a1e0-cfcee97724d7"
        },
        "item": {
          "id": "7b8b21cf-a68e-4004-8d61-d87cf21514d4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b858c156-f0b9-48e4-baff-6fe2d095d8d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f54108a-04be-44b9-a860-136fed758b47",
        "cursor": {
          "ref": "d135d6cc-27eb-484c-87f0-6f7fc64bca5d",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4bd5ded7-35ea-4269-8c07-437495e03b1f"
        },
        "item": {
          "id": "9f54108a-04be-44b9-a860-136fed758b47",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e4c5a041-d026-42a0-8674-b7e95e62b810",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c7c38e-46b0-4d3b-8ee4-a6ba592c7dc1",
        "cursor": {
          "ref": "4546ad70-62fc-4598-9b5e-211e2e36c036",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "61ffb159-f5cd-4aa5-869b-afa98eb5ab66"
        },
        "item": {
          "id": "62c7c38e-46b0-4d3b-8ee4-a6ba592c7dc1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "01c2462d-fba2-4e3e-acf1-65d07c8a4d01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a303d7d9-2ecb-4c80-9757-85366a3956e1",
        "cursor": {
          "ref": "fb4ca079-5886-464e-905c-beba0149c696",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3179fafd-603f-4a00-b767-912a165eafc7"
        },
        "item": {
          "id": "a303d7d9-2ecb-4c80-9757-85366a3956e1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "96677d19-4c1f-4bfa-848c-e4ea94848545",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48de4d3-4f10-4fba-8e56-799c1a2cd226",
        "cursor": {
          "ref": "f9cc3cbd-47b4-4282-b472-dad5e1b7799b",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8de0188d-1513-408d-8b30-56756a7233e2"
        },
        "item": {
          "id": "b48de4d3-4f10-4fba-8e56-799c1a2cd226",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "773b1120-d541-4205-a972-09f20dde7e91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68dffc4-dcbc-49da-89d3-646f2622bdba",
        "cursor": {
          "ref": "660f0af9-fe19-4365-b3c1-c6e8ddec7c8f",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8fcd7a4b-2850-4ba5-9121-9992e6e49f33"
        },
        "item": {
          "id": "f68dffc4-dcbc-49da-89d3-646f2622bdba",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "50e33ab2-273c-46c5-b8a9-fc9094b91a0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587a4ec7-0ce8-4fd9-80ae-733a68e2faa0",
        "cursor": {
          "ref": "db669033-a3d7-449d-b4cc-1ffaa93abcbc",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ec36af60-236b-4818-b70f-4e72efe22791"
        },
        "item": {
          "id": "587a4ec7-0ce8-4fd9-80ae-733a68e2faa0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6aa6a00a-f73b-4602-9b21-50e666e27d0b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79df9de0-e9c4-4ba9-adad-2f6bdf67a2d3",
        "cursor": {
          "ref": "896b3aa4-cd4a-44fe-98f7-8a94f1de2bd7",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "352f87e1-044f-4aba-b949-40f73e016d9f"
        },
        "item": {
          "id": "79df9de0-e9c4-4ba9-adad-2f6bdf67a2d3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c361c652-0592-46aa-8cbb-4d40c4382ba2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc8f918-c269-49b8-880c-87e1d8fe9a21",
        "cursor": {
          "ref": "12a2193a-f252-4de3-95b3-6183bc85a3ae",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2ce862d1-b773-43f6-833f-f5bdf133f5b7"
        },
        "item": {
          "id": "0dc8f918-c269-49b8-880c-87e1d8fe9a21",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "94ef1c5b-b51e-40e6-9ea2-a3991a9f8df4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172ee20a-20a1-478e-b136-38c7e366a9e8",
        "cursor": {
          "ref": "4464ab15-dbac-4142-aaac-a9431a9f28af",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "89e92f20-374c-4b93-b825-5a36ec6223a9"
        },
        "item": {
          "id": "172ee20a-20a1-478e-b136-38c7e366a9e8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d3943423-f335-46f3-a4a6-f9406fc96454",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb140925-21c9-4247-bf94-5f7d92d0a486",
        "cursor": {
          "ref": "15cbfabe-bb39-4ec4-8f43-c0e0be51557a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e91fe6c6-9a46-421d-9a6c-d8fd6cd2d18a"
        },
        "item": {
          "id": "eb140925-21c9-4247-bf94-5f7d92d0a486",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1840814c-44ba-4dfc-b0da-ea955d85c21e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff8f6de-b456-48f3-afd2-f14e7bc5c2b3",
        "cursor": {
          "ref": "e13d0095-b01f-4950-b8dc-8b821b0dd9a4",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8b5d5031-53f3-4b58-9d40-83d3e9099667"
        },
        "item": {
          "id": "6ff8f6de-b456-48f3-afd2-f14e7bc5c2b3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2cc77f86-5f72-46b6-97eb-8bad9df8cd43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5b7c2b-1321-4df5-b5f3-2aa57a894a04",
        "cursor": {
          "ref": "bcb889a4-dba0-404e-b7f6-db5a64b33de0",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "866cd182-a027-41dd-9b97-a7360946e40c"
        },
        "item": {
          "id": "7d5b7c2b-1321-4df5-b5f3-2aa57a894a04",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bcbf3057-d6fa-4d27-aaa6-b151ee581365",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c7b4ef-5dfa-46ca-ae39-3b3f99cc8434",
        "cursor": {
          "ref": "2bb45ec8-80bb-4f2c-af30-909356b0bd3e",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "52d35ff8-5395-4ff6-b42e-12c6901f63a2"
        },
        "item": {
          "id": "04c7b4ef-5dfa-46ca-ae39-3b3f99cc8434",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3a1aaae9-fb66-455a-987e-846bc183b850",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057de60d-eeea-4c90-8447-891bcd723984",
        "cursor": {
          "ref": "1126027d-ecb5-4b16-80cc-407d720230cf",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2ae76dab-69e3-4e9e-ac57-a28d17ea6860"
        },
        "item": {
          "id": "057de60d-eeea-4c90-8447-891bcd723984",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4adaf3f7-917c-4694-88c8-23f3274409b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b9d7c9-cd82-4dc8-b828-bea1918d54db",
        "cursor": {
          "ref": "1abfb77b-7d3f-4b8c-8a8a-462bed40851d",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d6795463-20f1-4bd4-ab28-e02f676673dd"
        },
        "item": {
          "id": "b1b9d7c9-cd82-4dc8-b828-bea1918d54db",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "033b14e7-5a8e-4ce4-ab8b-be88ba4ddbc9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bdb6bd1-4497-4ee1-acb7-01b8c2f73557",
        "cursor": {
          "ref": "a74110b9-f430-4e1a-a2d7-7bfb766af951",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2aeed1d0-94da-4348-8a5b-6eec98db2d1f"
        },
        "item": {
          "id": "8bdb6bd1-4497-4ee1-acb7-01b8c2f73557",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e62d3ac5-9ec6-428b-acc3-d23d5f4b5ce1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b31fbcf-1937-403c-abae-42d0a9cd9fcf",
        "cursor": {
          "ref": "474e3ab2-9650-4068-96cf-ee9970d12cc4",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4fe4f794-5750-40ae-9ea1-b6c5b9a13288"
        },
        "item": {
          "id": "3b31fbcf-1937-403c-abae-42d0a9cd9fcf",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3236263f-9c07-4176-aaa4-0420c82ed008",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7b911c-8837-4cc5-b06b-ae5d3fa9bd33",
        "cursor": {
          "ref": "951b077a-5e7a-4068-85b1-5dee2fd6e6f2",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "369b2799-c48a-431e-8929-0099e3e9e27d"
        },
        "item": {
          "id": "fd7b911c-8837-4cc5-b06b-ae5d3fa9bd33",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "475cda66-195c-4c8a-a53a-c818710426e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77882ce0-2792-491f-9cc4-df4ff5712847",
        "cursor": {
          "ref": "1812c514-9fb0-49fb-b0d9-511216e5e20b",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6872faeb-fae3-464e-81ec-c5d4e0852dfd"
        },
        "item": {
          "id": "77882ce0-2792-491f-9cc4-df4ff5712847",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5798517c-fbb4-4de2-bd5d-f5ebdb4e7791",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a66b789-7084-456b-b254-10aff9cee949",
        "cursor": {
          "ref": "008989c8-4af3-4a31-9ab3-787d58e45a10",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "97619606-0aeb-44d0-a57a-684b9e906337"
        },
        "item": {
          "id": "0a66b789-7084-456b-b254-10aff9cee949",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ed9f30b6-7d9e-446a-89c2-afe3e18fc936",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5a6c3f-6031-4523-b8c0-bd2f4ab79f1b",
        "cursor": {
          "ref": "53627f4b-c979-460e-a0de-3156fbd94e52",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "15bf9902-e399-4848-8d03-3ebcb721a7c1"
        },
        "item": {
          "id": "dd5a6c3f-6031-4523-b8c0-bd2f4ab79f1b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1a08c3d2-ab99-496a-8fcb-c1f070310ed3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111351f6-cd86-4a94-8e67-6a614c33cdc8",
        "cursor": {
          "ref": "a05edc16-cc26-4bc8-b70c-da85b8a7f625",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f4704a1e-9ae1-42d2-a373-e67205657638"
        },
        "item": {
          "id": "111351f6-cd86-4a94-8e67-6a614c33cdc8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d741fec3-987d-418b-a6a6-0b8381ce697a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb65ecd0-4b17-41f8-bd51-82f4ee4961ab",
        "cursor": {
          "ref": "0d8f527b-917d-4c95-a979-8a157c8bfbd7",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0db33864-1071-4e80-b8a7-71b2dbec4860"
        },
        "item": {
          "id": "eb65ecd0-4b17-41f8-bd51-82f4ee4961ab",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "beaee3b5-54cf-4465-8e60-133043f0c03d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee42f85-b8f4-4afc-9b16-97e426efed53",
        "cursor": {
          "ref": "6fbbb716-6b81-4805-a326-4569132f644f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9ddb7073-c140-4b4f-9c02-a7b01fdffa42"
        },
        "item": {
          "id": "2ee42f85-b8f4-4afc-9b16-97e426efed53",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "12735f61-e77f-4d49-b6e9-53de0f917de0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70addac9-1e02-4f83-972c-62e8f80b5951",
        "cursor": {
          "ref": "8864c269-aa67-4818-8111-540d4cbbe88b",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8e6622c2-f948-44b8-8bb3-2861f0ca1418"
        },
        "item": {
          "id": "70addac9-1e02-4f83-972c-62e8f80b5951",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "66045620-27ab-4ed0-a2b3-04b68f117d42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40505c8-80ed-4d86-a603-47f8f95fda42",
        "cursor": {
          "ref": "7f866c7c-2dbf-4285-8a93-81803d8ff99e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "12d7843f-af50-43b7-8a8c-6907e2405f9b"
        },
        "item": {
          "id": "d40505c8-80ed-4d86-a603-47f8f95fda42",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2f1333d1-2bab-4aca-b051-7cb42d75e6b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e520647-fd0f-4e3d-a365-3cab7e4d8a14",
        "cursor": {
          "ref": "011ea2fe-e07f-44f9-9c1c-fc5c4e67b60b",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7a911cb6-2fae-42db-85ca-72bc8c037338"
        },
        "item": {
          "id": "9e520647-fd0f-4e3d-a365-3cab7e4d8a14",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "eccfbb77-bc5d-41bf-a52e-2f002c83e6bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d820f4-2935-46a0-b38c-6cddea3f8e10",
        "cursor": {
          "ref": "b03e85fa-872d-49af-868c-3a2938cd6e66",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "39706f4b-1579-4750-b0aa-d88f15883ded"
        },
        "item": {
          "id": "23d820f4-2935-46a0-b38c-6cddea3f8e10",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3f584252-84f2-4e89-834b-cbe0b5d5f990",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f75756a-a61c-44ae-a4fa-7a30f95af8f6",
        "cursor": {
          "ref": "0bec6e17-cbc0-4f9d-8d74-c0f9a2d3f629",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0e40971d-abc9-4ee5-a5ec-ddc096cf670e"
        },
        "item": {
          "id": "6f75756a-a61c-44ae-a4fa-7a30f95af8f6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "83f4587b-9c4d-46fb-92c9-c5b3ecca3113",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c24edba-1d5b-4268-a13e-f5062f0ac8bd",
        "cursor": {
          "ref": "c6c50587-e337-40f8-ac0c-68c3bfc1cc58",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d268ed13-52cf-4505-ac97-fb78a079b13e"
        },
        "item": {
          "id": "4c24edba-1d5b-4268-a13e-f5062f0ac8bd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a8661864-0736-4320-8880-24599f27d056",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a08a39f-02a3-4c4f-82f4-dd33f9973078",
        "cursor": {
          "ref": "c514c508-d1a2-4720-9caa-888135dd481d",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "97514d0a-0d83-469e-99e7-c0e7490a73ac"
        },
        "item": {
          "id": "5a08a39f-02a3-4c4f-82f4-dd33f9973078",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3713a67b-20bc-4074-906d-404e84babfdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792cf03f-a534-419f-b24a-c7d6e8fee9b1",
        "cursor": {
          "ref": "a86fdb4f-211b-4415-8150-37ed551aebcb",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d67fa877-0be7-47fd-a694-38eac4eea37e"
        },
        "item": {
          "id": "792cf03f-a534-419f-b24a-c7d6e8fee9b1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1b37365e-72fa-4d38-a81d-7807c18c769a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 161,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3443ae4f-660c-4163-8c0d-7caf31993e3b",
        "cursor": {
          "ref": "d999fe50-28ff-4097-bbe7-667842c91b97",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "976b438a-3170-4a00-8c99-991b425cdb21"
        },
        "item": {
          "id": "3443ae4f-660c-4163-8c0d-7caf31993e3b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "76f4e68a-5534-4847-af31-4c5203b4894d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 20,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6589a33e-6e30-491d-84c9-6782476cc50f",
        "cursor": {
          "ref": "45d23044-1739-483b-a8fc-de3a176502c8",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ecefc1df-6ed1-46e4-ad32-1cf813baf00b"
        },
        "item": {
          "id": "6589a33e-6e30-491d-84c9-6782476cc50f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f43887c3-f2b6-4f19-90dd-60ff5408ba42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a46267-4e04-4df8-b51d-9b03e1ef57cf",
        "cursor": {
          "ref": "67f7c658-0b89-42c9-9789-062df972747a",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5f2ad179-2058-44a6-ad5a-a57923b51ba1"
        },
        "item": {
          "id": "87a46267-4e04-4df8-b51d-9b03e1ef57cf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0776931a-7325-4e2c-a03a-ab33d6ee0054",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de922b8-2383-4503-97f6-e88d2a9fb68c",
        "cursor": {
          "ref": "ff464026-4b92-479d-9732-21a347bb1805",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5531dca0-6d48-41f7-9aa6-e47981657d97"
        },
        "item": {
          "id": "8de922b8-2383-4503-97f6-e88d2a9fb68c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e00087f1-048b-4ad9-a65b-958fc98170e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a78877-9851-41c9-81e4-8bb604659de2",
        "cursor": {
          "ref": "b70f2234-2410-4756-b9c8-d27bb33d0ff4",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b622fc0b-a460-42c9-b3ba-95eeb80ee081"
        },
        "item": {
          "id": "87a78877-9851-41c9-81e4-8bb604659de2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1a2fd335-dee2-4375-864c-44342540a7eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd6e731-8803-4ab8-8906-e9754950f0bc",
        "cursor": {
          "ref": "2773e206-abf3-4973-afa7-a3a9c269ba58",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e999e477-3dfa-44e6-84c0-b5d3ddd5c927"
        },
        "item": {
          "id": "9dd6e731-8803-4ab8-8906-e9754950f0bc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f096bdb8-242c-4a36-b596-a71ddb2b246d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654100ea-f659-432c-8f80-b3885f91d6fe",
        "cursor": {
          "ref": "95212bfd-a5c4-4d29-84ab-61ed6ebb0d20",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5146f467-70a2-47c0-b565-5d1c7577583a"
        },
        "item": {
          "id": "654100ea-f659-432c-8f80-b3885f91d6fe",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d6cb158a-3da9-44de-bb05-68f10dfde7f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7768227a-627c-43fe-82c8-1e71baecdba0",
        "cursor": {
          "ref": "1afe0788-f8de-4f2f-9d3d-638afb949691",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f411614d-07f5-4e7f-a722-44e5249d2fd8"
        },
        "item": {
          "id": "7768227a-627c-43fe-82c8-1e71baecdba0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "346706f8-b140-4231-adc8-439b45ede068",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3ca973-5967-41f2-9aea-3a7f0a995f55",
        "cursor": {
          "ref": "f29dd132-3b1a-44a9-928a-53e22bfad76b",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "44f19f5e-f86f-4ff1-9068-d5d5d91b097f"
        },
        "item": {
          "id": "bb3ca973-5967-41f2-9aea-3a7f0a995f55",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "eb61f6b0-46e2-4867-8bce-dadc7b9fa7e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef932f9d-e887-48a9-ab00-b81922c64dff",
        "cursor": {
          "ref": "f11ae54b-206e-48e4-82d6-a36e62d352f3",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "07b42de2-4666-4a75-8577-2609ee747f64"
        },
        "item": {
          "id": "ef932f9d-e887-48a9-ab00-b81922c64dff",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5772c4c7-d128-459c-9310-02a9bc4f4b2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b22c74f-dd06-4fca-9cbb-b9f4a4415a69",
        "cursor": {
          "ref": "8cab7d88-309a-4602-a7b7-8e76913e31c0",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2c1c41ef-9b24-4b37-b114-5c3ec553bb66"
        },
        "item": {
          "id": "4b22c74f-dd06-4fca-9cbb-b9f4a4415a69",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0c80cbf9-cabe-4ba2-857e-9a2646fec7e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea309eb-ebd2-4e98-8cfc-4bee2f496c6f",
        "cursor": {
          "ref": "1d4e7802-e7bc-46a3-a778-bb77511749f3",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0b1391be-c7e5-44d8-9fd5-dac104434bde"
        },
        "item": {
          "id": "8ea309eb-ebd2-4e98-8cfc-4bee2f496c6f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cccad721-a5aa-47c4-aeea-b466833d1124",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b979e1d-7885-4138-ba3f-a23bc88d3200",
        "cursor": {
          "ref": "99084832-e5f6-4a1a-8020-cb6a49045faf",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ccd11c80-483a-46f5-aa1b-ce866a0b15bd"
        },
        "item": {
          "id": "6b979e1d-7885-4138-ba3f-a23bc88d3200",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "262c6656-4998-4a0c-ad38-cc94b82daa2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7324bbe8-f21c-48d6-abae-35ba28ac084e",
        "cursor": {
          "ref": "a7547344-bf7e-4ce1-b2b7-7c0c5d5e6b35",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3770a714-a205-4c97-95ca-4f928d7cfdbb"
        },
        "item": {
          "id": "7324bbe8-f21c-48d6-abae-35ba28ac084e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b575097c-d518-4dae-904e-0f4a095a6ab1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389a692a-abc8-46b1-a7fe-b57ed93f2d5b",
        "cursor": {
          "ref": "1d6e6d5a-5006-4707-8ae9-f87cd0fd915a",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "46a8be3c-4e23-45ad-bec9-ece3879694cc"
        },
        "item": {
          "id": "389a692a-abc8-46b1-a7fe-b57ed93f2d5b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "28d08dcb-c054-4fca-963a-0feb11b46157",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eda8a6-60db-4bca-93d6-f8280b983cf2",
        "cursor": {
          "ref": "8dd8c89a-a808-473d-b34f-32134257fd21",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2c56ffcf-b9c2-4f24-a8d4-e50a74f2436f"
        },
        "item": {
          "id": "f1eda8a6-60db-4bca-93d6-f8280b983cf2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1576b801-2c7e-4d88-a518-d8f5845bff12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d4c83e-2224-4e59-b145-b63b97eb570c",
        "cursor": {
          "ref": "a5949272-b5de-46c7-bfc7-2a352c5e8a71",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "19bdfb5f-70df-4fef-88d7-91220cdc6d00"
        },
        "item": {
          "id": "f7d4c83e-2224-4e59-b145-b63b97eb570c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d28f4d67-348b-4263-91bc-94efa6d1552e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3229ddc-328f-4755-a24d-7ded1ed1f574",
        "cursor": {
          "ref": "f54d0d64-4ce3-4b68-a6ca-76999e076950",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ebd9470e-1820-476b-8db4-2715f6a1e312"
        },
        "item": {
          "id": "f3229ddc-328f-4755-a24d-7ded1ed1f574",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "081f0b42-34c3-456e-8f4e-970409fae83b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a080d9e1-9995-43f8-adce-3f1adfb4406d",
        "cursor": {
          "ref": "e32e04cd-cd96-45fc-a0ef-7df9b9482166",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3d04030f-dc0f-4509-9f94-eb187b8eb3a5"
        },
        "item": {
          "id": "a080d9e1-9995-43f8-adce-3f1adfb4406d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "58d3e1d5-4abf-442e-9663-c55f881db447",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585a15e4-26cd-4ae1-b403-f44a7cef97d5",
        "cursor": {
          "ref": "636bf9d2-3f6d-4a46-9ac8-0730f5f00044",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "213d3bf9-b4d3-49da-97b9-9d4bb96d7b1d"
        },
        "item": {
          "id": "585a15e4-26cd-4ae1-b403-f44a7cef97d5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "efb819f8-b90d-4741-b3ba-1f892d09e2c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea97d140-8192-4ea0-9aa7-52cdac4a9e1b",
        "cursor": {
          "ref": "1dc3c13d-b3cf-4630-b935-094aa5cc7e29",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f19334a1-02a8-4341-9862-f5b42a67e1e8"
        },
        "item": {
          "id": "ea97d140-8192-4ea0-9aa7-52cdac4a9e1b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d2711530-3eae-4132-b661-385a0ffe0491",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e7fe1b-a0be-4fdb-a654-0fc968f32db3",
        "cursor": {
          "ref": "d8bbaa3f-54d3-4d06-ad3b-923818a207ce",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "113a5531-41ff-4d37-bf22-2932e65f751b"
        },
        "item": {
          "id": "28e7fe1b-a0be-4fdb-a654-0fc968f32db3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6989280f-800a-4f85-8011-42411bd70d4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05e5eca-45d2-4f29-b0f9-2115326f4ee5",
        "cursor": {
          "ref": "7ffabf40-725f-4d76-b041-34af1ec4bcf1",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4b1d74b6-f19e-4fd7-8830-30adea9b9a83"
        },
        "item": {
          "id": "c05e5eca-45d2-4f29-b0f9-2115326f4ee5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0872a682-5631-4284-bab9-d53809ce2c19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8809ebec-4e0c-46d3-8744-28340045e327",
        "cursor": {
          "ref": "5977be20-97c3-4bc3-adc6-06216acd13d7",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "76bf0953-b3c9-4ec3-9be5-b555e8f381da"
        },
        "item": {
          "id": "8809ebec-4e0c-46d3-8744-28340045e327",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9ac01440-4c0b-495f-a963-6f6dc80ea924",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d366a1-c5b8-4c69-afd9-70baf00c7d97",
        "cursor": {
          "ref": "da28da10-6e92-4331-bd87-19831ae193d1",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7d421592-c8ee-4d56-b62c-859a2eebb179"
        },
        "item": {
          "id": "57d366a1-c5b8-4c69-afd9-70baf00c7d97",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "304478a4-12ec-4e4e-bb25-9b3179a87a1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d53d5a5-7c3a-45a9-9c02-4551ec76aa63",
        "cursor": {
          "ref": "a4095441-501f-439b-b5cc-60c272b6046c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c094941d-7bfc-4e58-aa84-d42be1f9010a"
        },
        "item": {
          "id": "5d53d5a5-7c3a-45a9-9c02-4551ec76aa63",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5ff55c32-1dc3-4533-b8b3-9261e4e5912e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc855d21-92c1-4c85-8f54-2a2cd9c8fd55",
        "cursor": {
          "ref": "57423124-5266-4f42-9197-e244fa7f9b93",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1cabf156-56f0-4e2d-901a-a8df2c9d2a0a"
        },
        "item": {
          "id": "cc855d21-92c1-4c85-8f54-2a2cd9c8fd55",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "976f35ff-fb81-4011-8b77-0ed45be79c36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c78ffd6-ce59-4901-bfaa-7ddca4388f00",
        "cursor": {
          "ref": "500a29bb-2df9-4687-a514-b845d24c36fe",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ea92d17f-300e-4133-ad95-831616c27da5"
        },
        "item": {
          "id": "8c78ffd6-ce59-4901-bfaa-7ddca4388f00",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5a5de00a-6b90-4470-88fa-16218c93cfe9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70dc8418-a2f2-449c-a763-d92ceea0f8db",
        "cursor": {
          "ref": "2ffe3ab3-3971-4719-bbe9-2bdfd3cd36c4",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8619bc4f-4f15-4607-a39a-728772777e87"
        },
        "item": {
          "id": "70dc8418-a2f2-449c-a763-d92ceea0f8db",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8ab8e5d8-6e5f-46de-b57e-fbd24e74a9b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed1f004-f817-4c75-9b07-cb0484bd210c",
        "cursor": {
          "ref": "4e973660-34a2-4c1b-8596-f5a16abbfc4b",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9d5ac986-9407-48d5-834a-8c3cd28cec71"
        },
        "item": {
          "id": "5ed1f004-f817-4c75-9b07-cb0484bd210c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c8d9b16f-b904-41af-8688-6abb3a6d2661",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61906338-0cf8-40ed-b7eb-48a808a340a7",
        "cursor": {
          "ref": "46d51c6b-5690-402b-acf8-bac9414c2ff0",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9b8bd206-3701-4fe9-86ac-8794c947061b"
        },
        "item": {
          "id": "61906338-0cf8-40ed-b7eb-48a808a340a7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cff84cb7-1f33-4632-8c84-f97c288b6c4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dee23a9-5f4a-4510-8e86-4cad7065d6ca",
        "cursor": {
          "ref": "a96864b8-be35-414a-b873-4af9ab89e99c",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b9b3deaf-92c2-4fc6-a107-cc24d9710d46"
        },
        "item": {
          "id": "0dee23a9-5f4a-4510-8e86-4cad7065d6ca",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b925794d-d030-4672-b518-b5914ffc849a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e397043-624d-443e-bee5-d96f5b3f39d8",
        "cursor": {
          "ref": "7f6e49c7-b65e-4b53-8fc5-c1f23e09a363",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "67abf6b8-2adb-40d8-bf67-36e86e306551"
        },
        "item": {
          "id": "8e397043-624d-443e-bee5-d96f5b3f39d8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cd15d66c-dcde-4623-bbc1-a7f68b4569ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e9a6b1-6c65-4347-84a9-b39b10089b07",
        "cursor": {
          "ref": "6c3f5dd5-2eaa-4e2c-ae6e-17f933ad9102",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0f727078-b7d6-484b-a55e-ee6590895730"
        },
        "item": {
          "id": "31e9a6b1-6c65-4347-84a9-b39b10089b07",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0e349ec8-a3b9-4bdc-9cd8-1443d7c8ab23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d6b02d-62de-457c-b5d8-20c345b90d0a",
        "cursor": {
          "ref": "cbf81d03-efed-4748-90b5-aa3a324a64e3",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "629c947e-bedd-4950-9d1e-aae5edd9ac9c"
        },
        "item": {
          "id": "50d6b02d-62de-457c-b5d8-20c345b90d0a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ff014fae-8c13-4cb8-98c5-65878e640ff3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ae0b87-2823-47b0-9884-8faaaa6846f5",
        "cursor": {
          "ref": "977367f2-42b2-4061-9a46-0533415bf591",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "933723b6-d668-4c93-951c-06d0e1a8857d"
        },
        "item": {
          "id": "f0ae0b87-2823-47b0-9884-8faaaa6846f5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7a0c843b-6e2a-4126-a7aa-b6f3716d39cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e027cdf5-37d7-4ee4-94ae-6a1a2e650448",
        "cursor": {
          "ref": "04a04568-71bc-47e6-a911-17bd01ae8b86",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "bcec1a00-b024-4234-b7c3-cd9ae762616a"
        },
        "item": {
          "id": "e027cdf5-37d7-4ee4-94ae-6a1a2e650448",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "528ed8cf-08fd-4955-ac5c-6f43295613a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805e99bf-8ec8-4193-b280-5162949bcd02",
        "cursor": {
          "ref": "332d507a-0e19-4d46-8074-0baf76f32992",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b21e4621-648d-4d2f-a999-f5dafc5d2416"
        },
        "item": {
          "id": "805e99bf-8ec8-4193-b280-5162949bcd02",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "650aa1c1-166c-413e-b9f1-c0d371251f5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34122b4a-371f-4a40-a46c-c94ae5a457c8",
        "cursor": {
          "ref": "3cc939c6-cf88-46fe-a7a7-92fe454da944",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "268e37b3-3c33-4d58-822c-72858ba12509"
        },
        "item": {
          "id": "34122b4a-371f-4a40-a46c-c94ae5a457c8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7006f43f-bc15-4f63-b5df-1f192d1c2aa9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0700c774-a208-470b-a1da-48e558812e63",
        "cursor": {
          "ref": "693b7371-e561-48f6-9f9c-5e02d3e19df7",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e1a1dffe-db6f-407f-9d07-3f1759848e81"
        },
        "item": {
          "id": "0700c774-a208-470b-a1da-48e558812e63",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9d898e73-a540-4c1e-862f-9003eb77519e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad14b73c-c696-409a-aaf5-bba07f487574",
        "cursor": {
          "ref": "b1e869c2-7ed4-4ad9-b15c-6256f1ce54cc",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3fa079bf-0997-4263-b124-6699ea5c4332"
        },
        "item": {
          "id": "ad14b73c-c696-409a-aaf5-bba07f487574",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "237755b0-1c1e-4a3c-abe9-a421a9537e8e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5f0126-793d-47be-b83d-ba7284a7fda4",
        "cursor": {
          "ref": "fd966a6e-05c8-45f8-88e7-4bcaaea9c9b0",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "171c7da4-7939-4026-8d36-b4066f3b9060"
        },
        "item": {
          "id": "9c5f0126-793d-47be-b83d-ba7284a7fda4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cba70983-1126-4d59-894b-b42cd4c76691",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "aedce5c0-f04a-4d12-8faf-5f3bf696bc69",
        "cursor": {
          "ref": "a66abfae-c63c-4ba1-b3bb-f08fb74c3db1",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1599ea2c-fc50-4fb1-8e37-be93725ad7c5"
        },
        "item": {
          "id": "aedce5c0-f04a-4d12-8faf-5f3bf696bc69",
          "name": "credentials_verify"
        },
        "response": {
          "id": "057485de-62ce-486b-a2a2-0e8a34e91f90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "ac96c393-14fc-4366-931e-464f553a553c",
        "cursor": {
          "ref": "fa39cebb-796e-4890-a2f4-44b2296d0f20",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "22659bb0-2792-404e-8865-26659703e8b3"
        },
        "item": {
          "id": "ac96c393-14fc-4366-931e-464f553a553c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "228cbc46-6ad5-4cc0-a5e4-d1ef4223609f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 8,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "d9147af3-f772-4510-9c7d-82fb79013763",
        "cursor": {
          "ref": "f910e32e-499e-4949-bdfb-484e8a18f010",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c01594b1-eb9c-42f6-9732-122ee2bcb072"
        },
        "item": {
          "id": "d9147af3-f772-4510-9c7d-82fb79013763",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "faf89d81-fea4-4bba-8917-5379b7c719bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9147af3-f772-4510-9c7d-82fb79013763",
        "cursor": {
          "ref": "f910e32e-499e-4949-bdfb-484e8a18f010",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c01594b1-eb9c-42f6-9732-122ee2bcb072"
        },
        "item": {
          "id": "d9147af3-f772-4510-9c7d-82fb79013763",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "faf89d81-fea4-4bba-8917-5379b7c719bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5c6f18-b85e-4c75-b441-f17dccce20bb",
        "cursor": {
          "ref": "39ec75a0-f422-4921-a7fe-e60d203855c1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "91828ce2-6a3e-453f-9199-b15088f71f78"
        },
        "item": {
          "id": "8d5c6f18-b85e-4c75-b441-f17dccce20bb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3190f60a-7ab9-410e-ac26-b18322b77300",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b46a822-2a23-4f45-901a-5fb7e066fe2f",
        "cursor": {
          "ref": "e7b1b103-b0e7-42aa-a48e-bd1ef5da3f17",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b5a70f95-121a-4841-a231-3d0da99997b3"
        },
        "item": {
          "id": "1b46a822-2a23-4f45-901a-5fb7e066fe2f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "629df7fe-65a8-4dd9-8011-0d571a08b61b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 9,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}