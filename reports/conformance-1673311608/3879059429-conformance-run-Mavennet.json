{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "19e5ea83-e203-4158-934d-71378e14fdeb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3e6fd9d8-d821-431c-a5a6-1b9b55cebd2c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff4df3e7-38fb-4320-b205-9007de2a9f5b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8c4c3638-8b36-4eaf-adde-05b295372d19"
                }
              }
            ]
          },
          {
            "id": "35818556-bfdc-45a8-a200-b9c55b2e9104",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab1b6b40-131e-4a12-8741-1d6cdb97eae3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cbc49555-6c2b-47d2-ba98-492d1b8a89ed"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f352fb5d-2de1-46cc-889b-efd0edb835aa",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b8368585-5520-4269-9dc9-f0f87d30e9b8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14cecb04-ab8c-44ae-923d-509adf251b2a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "197fc86a-0e58-4712-9749-e5332c116bdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3a6fe43a-31a7-405e-9308-0f862569afc4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c1d1c871-3c92-4eea-87a6-ab8008358244",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d6e7e22c-b228-4be1-bdcd-659828ca8923"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0e6b3788-b99b-4453-a3e9-114b30a96943",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1dc65b7a-285d-41d6-996b-bc9b1d275bde"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe2496c1-0424-4545-9bbc-687b598e1f46",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "955705a8-024f-4a5d-9b89-bbdb51714d79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c11c5070-a7b5-4198-98e6-2c57e321489e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1aeaf4f-52e0-4c92-b094-64d05bc1085b"
            }
          }
        ]
      },
      {
        "id": "ab6348c7-91f1-4eff-b7bc-3a5330f40434",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "05657b09-d3d5-408b-befd-c0baa2ce5950",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f48ebed6-1d49-4560-a153-78385be2ba8c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4c5a328e-fa82-416f-a6bf-2668b61d6a47",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c5f1fa-1c39-4551-a1eb-387a1b6c11f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d7d62ff-2ba9-4731-a6ef-fd5bc163c03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3953ef93-fa63-43ea-965e-7003a6cdd8b1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b548432f-bfc2-48cc-bdbc-62b208d2cba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "309fa1f1-4f5f-4dca-8230-ee4c278c0f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbb28ce-7980-4678-9af7-8c490c67823a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc9a124-71b4-4ad2-b36c-3da464513331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c818046-be1b-441d-83ff-aba24189527c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "67d299f4-31c9-4432-9ccd-6cd15d25d0e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7386f8e-d511-473f-a7b6-5564b65859d3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca77a39-a1ba-459f-b617-0f3eae8eb8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7a3e354-124a-4d2b-8a5a-00c1df028899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac2c27b-5237-4e03-9901-6924bda6ad6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a639ca90-b512-4d39-9ac2-e234b7e2ece4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4b6a8a-f2e4-4453-abcd-9cf2769e781d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be96f5e-74b0-4a74-bc04-aee088a45809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94f02a37-80c9-425e-a59c-9cb9837cc73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08fca77-2215-4664-9835-82fbf8bd3fe9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9403497c-9030-4d5d-aa47-0504209bbca4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "25b3674d-7bf1-43be-911b-9463460b930c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0dd99536-d076-4427-bfb9-f08b0893acfc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6920cc1c-fb1e-4cbb-95c5-1906f4591fdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "668a372e-b699-4fc7-8922-f3c97f48d8c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85def86e-bea1-4041-b059-497aa448f004",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "0808df61-7f40-494a-94e2-392418a60bfd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec286bb5-e331-4bd3-87be-e5f5fd25f90d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7de5fba8-d9e9-426a-81a5-6500958d63ab"
            }
          }
        ]
      },
      {
        "id": "d899f5f5-562a-449b-8ee2-66a0ba3602ec",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "69ba5f9d-eb78-4f57-8b13-3ffa377b1118",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c02e2e7e-f6be-4487-b68b-5b9a0a6f1e84",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4e378a0e-a006-4a91-a9d1-36ec3f8a722b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ff459b-5247-4a9f-a339-cbb496666502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03bcf0a6-bbfe-493d-93a1-48986eefff3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7233094-89ba-410f-88f2-cee74cfec4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2746bd6-bc86-4462-b828-d8675d069f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efef958b-ed1f-4df5-93ad-a18f37312750",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f96c1f7-01c9-4c4c-88cd-31b69ab84489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cd3883-c934-4e1d-ac17-187dc088b809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38851073-beec-4b95-b1b2-076df1476b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6df12c9f-2e8e-470a-b903-8f3ea8abab8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf972b7-ffec-4d80-8e85-0898186a4caf",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd829681-b1f1-458e-bcb3-a28ff993cfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9512fd74-f99d-4b79-9f46-eb1e8a55b70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c3dea9-4a6e-4cbb-aa81-5b694eb4cb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c7b7dd3-1755-4590-89ca-efb922fe3d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859e6ac3-4c04-4a76-8d9d-e1cbb0708f01",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802b2b50-f912-4765-9c7d-a6809e9153e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c565cbf-8f10-4d6f-9628-fb6ada665d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644b3f15-a2a6-4949-8327-4734fd7ae71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33972255-5ef1-4363-87b6-f6318f5ae92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4fb5be-7824-4029-8ede-82ab78892995",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddff245b-027d-4cdb-9b54-aa48e6e0dd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e1f92b-82d2-48c3-a9b0-f18af69c6f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107a6ff7-5582-4fdc-bd84-7f9fbfd74862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a654ae71-94a2-4f5a-9957-69a58339489c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3456d6-5e0d-48b1-84a9-e1184ce2edf4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "870e6045-3668-493b-93b1-e8e0531ddf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c321bd-cda3-4e11-b86c-d615535daacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6942d2-8684-4e12-9bd6-b0e4a243ee5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ef38a1a-506a-4045-91b8-ab2d638e01a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0744d6-4fdc-4edf-8483-ee7b223e6b68",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8469f87-47cb-4261-b63b-babff48f45c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b279977b-b3db-4e9a-a118-a35b7c0730b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1cc735-a7f3-450a-b0e4-b3f879b1396b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9579c7d4-8576-47ea-a04b-f04256a385f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd488eb5-5119-4e86-b66b-20645c95a854",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68bfc71-8bb7-49b3-9716-99bf61744122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9121502-c02b-42d1-90e5-50521b707196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c766c6f2-99f6-4dc6-87ea-83d349bd348e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5691ef7c-750f-4284-8097-da4b5cae2b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746dac69-bf43-4d13-8d86-3362d5205df5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21dda743-c96d-400a-a96f-87eba491e1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b8632a-f7a9-49dc-8ce5-68be408c02f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d0f9a8-2fc7-4463-9d1e-9729f5e312eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d232888-29ca-47a1-9a13-05bd291d2684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b04494-4d1c-4e75-ab0d-3235fe21c058",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4237c49-2f7f-4d0a-9928-81fa0c831dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2f77dd-cda3-445b-a96a-35917867dcb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52c01d9-2c06-44f9-9be8-abd4c8d96682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78cb2da4-c815-407b-b814-8756ab8a1103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9de06d-e920-411a-903d-eaa97283128d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844c65ab-bdcf-48a2-bc26-59598c2754e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be09b43c-c8f4-4010-9508-e4d3712126c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c116a998-22cd-433b-92ed-36b711e20ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff6a776b-58e9-41ed-90be-986d3508a221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b57cd14-1800-487d-b585-1b1e7d4259a6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb68db6-5d84-41e3-bbea-00aad48b620a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598d43f8-d8ba-4914-b4b3-ad730b7a0504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cbf6d5-c3fb-44fb-a024-afe67aff336e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9133c0ba-8fa0-4134-80a1-583a366a36bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e102acf-bbe7-4d0e-a90f-8bb77967bc5e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a391fcbd-382b-43d2-b6d2-20acb047ec26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936c34e1-c926-4d26-aa3b-ddf8863ba810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb0d909-ab82-43f2-90ae-6998cb3548a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0980644-f26c-440c-bdeb-8e4dc4f1cfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977332b0-b9ae-4f9f-b8ea-185e4a9e70df",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9979754-149e-4c05-ae20-60dc461704a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57485ebd-283f-4045-b9bb-9db24361a3f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b687de-8924-47b5-b77c-839913f5dc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "dabcb7c7-7fbb-433f-93ef-704190ab13f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43d9515-bc20-48a4-ab68-7db367cc734c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b448a115-5df9-4d4e-8ce8-b914b8117460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6cfa267-c1e3-45e0-bed2-756748639f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0562e1-a1a9-44b5-8aee-b4fcfeef4a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e13e22f7-2d60-4331-9cb2-3e12c4c96635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af3eda9-b59a-487b-97b8-2552a5b361bb",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd314093-78ed-45fd-b20a-82788ce2863b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2624e8a0-cd6f-4f3a-96b4-09f2c49d44a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b718fa55-599f-4946-a908-ca0c0f0898cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "351bab99-0d2f-4b4a-be9e-cd5bdf37a12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235642bb-187d-49ac-9eab-b738e0fef523",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1422e40-aaed-4091-8228-c5477b993311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c35203b3-48c8-4a0a-9535-93d5cb7c5a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d41c380-0ccd-4caa-aa8e-d73961fde452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebcdaa9a-83ae-4454-b4e1-adb1c17d6ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f6cd45-a6b2-4df5-bb88-5301412e76ab",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e651e655-6eee-414a-9c1d-e223b1260167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d225421f-01cf-46f4-a74c-627faf8f2fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909f261b-20b9-4fbe-b8c5-fd3962285077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1ede7cc-b6b3-43d4-a7bf-b4626d1c15eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4eab9e-2902-4f3d-8dbd-68bac5048a80",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70d5299-4e99-47db-86f2-c1a599d5c8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b7971a-ab1e-4e42-be1e-f9e4a61e6707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be0dd7d-7872-4ed6-a2f4-5664a3da2954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc010e04-4911-49c4-adaa-aaa9cee6296b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476b1447-c363-476c-a702-a1f0c11670ce",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63eb68f-2135-4beb-a326-eacb14091d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2debf63e-c506-4058-940b-0cb2825cd043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c941a9e6-4f6b-432c-87e9-a9022397fd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9eb5726-49b0-4308-bc5a-a3a59f7472f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0933a1ad-04b4-4a1b-b7d6-b911e45d1c89",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d362382-e749-4ac6-b54e-3e2e977a2490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11dd6b39-fde9-4d23-8b41-a05d19bb9a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ca6062-af67-4bbc-9a5d-b49a87d5aa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf3cb11-c462-49f0-aaf4-14ca69ea46f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c031701-8616-44b3-b18a-47497ae20ea4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6b7d49-d578-4750-ae8b-56758ac2e09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8722133-4056-4fff-82a9-5fb15c004148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a09913-22e0-4de0-bee3-b9438be63e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20fd96d5-342b-4a8f-8d76-13d233e73b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ab7931-22c3-4f6f-946d-e37508191416",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab5321f-e840-4690-b3c1-8427f49dce98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cca7d05-4a75-4f8b-924b-1c331a430d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526b2e8e-e385-4b82-94c0-3c5b22ec2609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45580c15-f21e-412f-9733-28bd9ebd9028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84aeda7-bff7-4981-907f-578f6b1d979d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bc6495-a8fe-47ef-aeb6-46973d7f5651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84ce12c-522f-427b-84e3-0b61219862a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab04f1a-4b46-4071-a1d2-d346c13c94d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7aff1ec1-a01d-43e1-ad27-9c89b3d2824f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f4ece7-679c-49ce-a0a9-be6ac1de3b11",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa64e573-695c-404d-9bf3-9e18fe92724b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf50620b-1d26-4f7f-8d86-d9405487bc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb29cc2a-40f5-4ee3-a190-492e18261ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0437f244-f710-4b86-95dd-a539629de7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f982af6-2993-4185-b52f-58ed1e6736c6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ff1015-0ace-4d9e-81cb-ecbfdc688272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb89cf4-a8e7-403c-bf25-5b6222db2bb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76894e1d-de8a-4486-89af-c07ed49960a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef007a01-ec2b-4feb-bc09-40ac378ba8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8692a8-c3d2-479c-826d-15023956ee0e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d209b3-2fab-4d16-9f0e-ed04cc1f17ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba3bbd2-4fe1-4176-990b-9bfa8f7e03e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d93a325-66f3-4986-ad86-047f4e96f531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0355d03-9c78-4f9d-85a6-38468b32fbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f255f420-f593-4c06-b00b-70facd74ae0a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94afd96-8189-4661-9a5b-6d53e7773d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef933bf-bff9-4fb6-a762-c74e0efed7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9673490-7c42-422b-9d16-c2906e6a99fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ef33c2-fc32-4220-af5a-7320dc1c1fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c83e59-0a0c-4503-b949-d8686df8a540",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e910384-fceb-46e9-9e8a-513aa985f481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853f8e09-8aab-4758-bd20-0b3531a17f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f474f81-2bd6-44cb-87fa-d5ff23ebc292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f76bb31-9ad5-4ca7-a2c2-d70f8e4c8e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a06ea4-69cb-4750-84a8-d1b00eefab82",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e13c59-cd43-40e9-8eb8-7b7545643b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c88b37f-f698-43ac-a391-de448e1ee358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577f2bff-5c31-400b-b464-28f720250047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "981064a5-7c8e-4c38-8af2-785b919dd715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b184c39-53bb-4af5-b1f9-1dd3121eb4f0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "166fa943-ed26-4a42-beb1-bddb47ad8689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d46dfe0-4ee2-4e63-ae27-363449dc65d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f153f5-49c7-4145-90cc-36a2c7a67dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "951780db-e1a1-4971-8781-ca2ee9aaa571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e179f82c-b496-4fa9-8a66-71f873c89432",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f9232f-6740-42be-8b01-07c57b1ba384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f955bfaa-1a16-4b1d-b07c-1a180faa342f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389f4dbc-8003-418b-b327-bce52f39231b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0031c95-4e29-4bd9-8080-a08b7871dd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ad1163-f292-49af-9cca-02fc779d70cf",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3517882e-8cc9-4a31-b661-8b9102ac4ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fee7320-da23-4580-b1b3-e9cc6c75fcd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb06f45-4479-4446-85be-6b86689859c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3237a796-829a-41c5-99d8-f6fc629573cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32575ad6-d452-4df0-8b62-b9c8d172cfb9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ca846a-f660-417d-a7b4-cd80abf73efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b41a64-6018-4cd9-a0ee-360f5ed84949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be8badf-b160-41db-8f78-af243a0b44e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "070db4aa-c4c2-4021-acb7-feb9c36083de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8517f73c-7031-4c4d-9606-40d853c656d6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a499a890-44ff-42eb-9488-af10cabd076f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccbfcf20-ccbd-4e15-9a58-ddfbc7ea1def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a9fbba-1655-45d7-9a8c-a74fff190be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dedd5315-82d7-4cc3-855b-4d528a230e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546fe4c3-6b70-4a38-af11-cf2138c2692a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151e7baf-0562-4c0e-8fca-9c882f929617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af72639b-62c7-491c-a3fa-3ff8ca0a65fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9717bfc8-16a6-4fea-88b1-4ac9e58a0e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a011268c-6245-42e0-9061-4d8e8c3f4966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a5bc5a-6948-4b1b-9bcd-d3f7fd974ff8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077a4e87-c5d2-4197-b313-fc2c8fa39f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c94bd2-37ca-455d-bd06-0779c13e3b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ee25a7-28a5-4a32-a2fe-d937319b8f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9991e1-cdb1-4a12-af47-de9efe54006f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec29ae01-6015-494d-8a65-cc92de024dc1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef03edcf-19ba-4c34-ab3f-9600d628b2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60cf7909-7600-4c52-9a45-efe639ae6d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f1ff6a-b274-455a-ae52-e1350b2b72a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47ba9227-fc96-4987-b879-202e2644a747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e7074d-da5a-4de2-9f2d-3e90dd67fc87",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c00506a-0081-4a6b-b268-1aeb09b44cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a652b43-5686-4789-84cf-f4c573e9796f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a603873c-ab73-45e9-bb5b-b47e7454e41e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e82d01c1-fafa-4744-8dae-4f535f466093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed54355-a10e-47b1-bba6-188762bdc727",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82fc559-1263-4f57-ad28-2f2938870543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189d8983-a870-472d-9bcc-c8f36e658160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f32d30-8e20-4b01-aa69-feac2d6429d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "88e9f1fc-414c-43a1-8a08-8c9715c1d6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0d2e3c-9f03-45d1-9ba3-e9a1e6f6b98c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878e0a4d-0bed-4b94-8e16-d2fcf17cbed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2668832-8591-4daa-9a3f-73d1bac03820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f91d25-b503-4268-a312-20623338ca4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3277d06-0a95-4b27-8ae2-c2f37e56b6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27208cf-ffc9-414b-9f48-1cdc8cb03f27",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17ec3f9-71ac-48d1-9a98-6aa850053f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08909e8e-d0c2-47d8-919d-4df682aa112e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbaeac2-d37d-4d38-bece-e0bf6ab6a784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1aeffa-54cc-4e06-8b8b-c5a0d7deff49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7dd2b7-0343-492e-a0c2-2f7e5e2aa7bf",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5b6fe3-806a-43bc-a9b5-294971f79a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37e274b-8052-480f-b19c-52c1157aeb89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4953f7a-09b8-460f-a220-5f97e1e56bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "916a0973-77e4-4847-9be2-c2a0f19e12c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b4b30c-61dd-4c34-9b76-10dd96095589",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b54169-18c6-4b6f-ad34-d1d7d9adb569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd375be4-a5ab-4b67-80a0-a09096a12a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae12f21-59bd-474e-bc4f-c8dbdffb902a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fa966434-5aa3-42f3-8e18-840f2c1c30d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981a9a5a-85db-4748-abe3-c88160dc7671",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dae5be-4a28-4dc5-901d-90f0963265d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0020793c-f5d3-4e1a-8538-2cfba843f19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd173e5b-713c-48d8-ac5c-8038991ced89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef96e593-c11f-478e-8c9c-ec53678216ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c8da1b-a269-4278-966e-a61385653644",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45afa478-7274-406a-884b-8a85d0931773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a89a30a-4f15-43e6-8b06-4cf7bb314ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389c1206-e9a3-4653-9527-9d3fd5f10b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "abcc9d93-9562-476b-ba50-1741b1dd46cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7ef7bc-61db-4643-a367-da929d9a6d08",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d848a3-6a98-467b-8341-df483c97dca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd84530-8101-4bae-a2be-7e762fdda380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbe7f2e-e162-41d9-8dc3-9e3b2f55fe3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af10dfa9-1fe0-41f4-bf38-6ded33b2612d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e10e517-5ea6-4967-b84e-e860562bcbbe",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "791d0383-b0b8-4b3d-9741-990070d14678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a34580-6d8f-4402-ac04-95158b109f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6594eb4-bcab-4124-9dfb-91a6ae7dcac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a97d75c-b8a5-4a9d-b06b-62d5aa4c314a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5cd3d1-8b84-4dee-8768-955fcc9061bc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6946e9e-547c-48b4-9fe5-c4b3984470d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2352b35-ef3b-4f00-a240-3c8307877bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c75b0c0-9e1c-4a0e-8b0a-fc2784a8696d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5876780d-a390-4c76-ae32-1b0c71a440f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1ca21c-23fd-4c54-a74e-5435d0897975",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547cc2c2-324c-4205-983c-623ecf8f10a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3967c12-b5dc-495d-b1c7-9408fa91852d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b692b6-d932-4519-9e5a-53ab4130f54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "251e912c-8f10-415b-b50a-09d9083975f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b40d42-5d62-4c92-9efa-71e29a6a5246",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed00e82-ec12-4c07-977e-686d03cfba09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ab0f60-af2a-444c-b683-1b2c723df89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3098bcfa-7474-4772-a25a-7400e19f3f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6bc51ce-66d4-47e7-9730-3de786039c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6639fa0-5d51-432a-a309-9fe14615cd4b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fa27b4-cf49-45f0-ad43-1c7031b90a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0912c1-43d4-43db-aa13-ba00f3bdadfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9630a20f-d1b6-4a3b-9a15-c18fa0d02f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e5c1f03-7f59-4005-bec4-1963be000201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44446de-50a3-4c49-b4f1-6d70f8e31ec7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d03475d-4a85-4fe8-b586-6efccb7970dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcab933c-5fa9-46ce-bd35-063d0cabf7e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2814f2b0-6cb5-4436-ab09-251f5cd84a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6469532d-349b-4a72-b173-67e619c347e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413c4a86-616e-4ffd-8bc3-141b4c21fd43",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76abc1e7-d878-464f-ba33-ea0e7f062912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601f3976-9ccf-4e11-9bfd-856a9c02027f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277c746d-5b04-46e0-925c-ec2d14709af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "49264a07-caab-4d08-82aa-d1d4accf3021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e52f46-c9c8-4127-848a-d0014cb30b07",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1405cf7b-0750-445c-bc09-9e197999403c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c76cbe1-5d24-4e27-aa1e-f7d88bf03af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f57f309-ff3e-49fc-8228-18b2da45440b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26d972c6-3a35-449a-a5ee-e8793ce697ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b258aa3-9251-4a15-adda-ff684038aeb0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14477d9-81cd-468d-83e3-44c66a04672d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02dad567-b0ac-42e8-826d-b72e2d77f32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9310a320-fe97-45d9-a8d0-870acac4f15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffe71ed-5e51-41c9-8366-b7ffa021fc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c483465-5daa-4b7e-8744-b5cac72809f7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6eb78b6-1810-401f-88ca-06804d90d1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d518b47b-253b-448d-9e4a-b5edc78c5c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21224087-c53f-4973-bea8-d0848f978d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc65d9d-9c88-48b4-bbc2-93d1e655de14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b8a30c-5b5c-4a51-9d9c-3438e3949fe2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a740e935-deda-4e7f-8287-7b7371a3a513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac95f13-a096-4f33-ad6c-f61ffc082a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d277beae-a7a6-4f54-8a78-560980e91938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c743b1-101b-4dbd-af10-cfc8cc1dbe93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3c6942-c79c-4bf4-a1de-242ff0844e4a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a54378-d859-438d-856c-29798b10a424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64ea0f3-d4e2-4fe5-9683-75263fcdcfac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2b242c-a5fb-49fa-af75-007a0f109e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45d77724-8056-4c9f-a63c-3a987b8bdd81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08cfe534-321e-4ed9-91a1-db06f06f996f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d065ff5-da61-4193-951a-6e95919be7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81bae55-0f36-44cd-91b6-7c8e0ad1239a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d69614-c1d2-4003-926d-c55378776143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "703713a0-e1cf-4ccc-9af3-c5e16dd04a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147192cd-7853-4eda-a9a5-80079f99e3ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2120b0b-c389-4eb1-8914-9b25d2b28f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6f434e-6cf2-430c-bc5a-b3e543792623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9592cae1-bd7e-4f81-bae7-bce5584f1e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e6d4247-7ce4-4e42-8c41-6aecedeec66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f539d8-dd4b-4f7a-a325-409ac9f3bd77",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b008ea2-e1fc-4719-a72b-68a02c9ad530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f04bea8-515d-4985-947b-73501d19049b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8553de75-7f4c-4234-9e37-c14d0e612752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cbe195a-ae90-450d-ad34-9567caadcd0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46d6cf4-cfa8-45c6-9750-4f7223e5748e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece0a3dc-6d07-4415-8333-5d4b733b946c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07dd7115-4018-487a-8185-d692d6d9dd03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191d24a9-763d-459f-bd12-97db253e9a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b50b568f-28c9-44ae-97e5-adac5f110505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af97c58f-e115-4cdb-8442-4a3890c3a1a1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af1498c-a77c-403a-afb4-f22262085425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11cf672-64ba-48d9-a769-0c5c60ab325c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b294e098-5cc1-4327-a705-f4efa6b404db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a02646a-f3f8-4e55-88f3-afb4f06604f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2760857-a085-4882-b5e9-a097907dc95d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4a0342-afa5-4eb4-af97-e8c372a09c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d604f0-72d1-43a6-9e0c-2e226e17fc5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb77b82d-3bad-41c7-93ec-996e76245abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f820f1a-ece9-4d80-b132-7ac618f2f773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa80d510-03ca-40e6-8446-f6aecc63386b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc96554-5685-41d5-b7fd-8c58bbe87f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44f2336-480f-4475-a8dc-76a03ecf0bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b39150-4e16-478a-99b5-be5fd2df783e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b57344-eb3c-4dc1-8490-1aeac06ee75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfa8ac3-4fb2-4efc-84e8-f711ac8e35b7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82dd1ce0-ee78-4466-80a0-b9c6555188bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af8b302-53fd-45a3-93cc-2555c469bbb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8d32eb-917e-4494-93c6-89024a6af849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65be6907-bf7a-4895-ad83-20ba87f2171a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe62838c-fdd5-46c2-8261-d60b12a25a5e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0257bb-2b4b-418b-9a05-8fc35cecaf38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9a5e891-f8eb-4071-9741-51b7980b6e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713fa549-4b75-46fc-8712-2050f7efb397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17594c76-56ea-4b61-8409-4fbd86c3fb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de08ee8-2279-4b7a-8590-4f3ec159c537",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34898dc1-c9bf-4e82-ad45-3674a36d0014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f337cb-316d-4f01-85d3-af12cb598264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a00a3a-dacb-4022-b1b4-eb84f24fdfaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "834b7e7f-1229-4754-855f-47eb74b4c1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ee284b-24f6-43e5-8699-ce35e5535d73",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b594f43-ecfe-45d6-ac4d-d627237cb7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be0215e-919c-478c-a9b3-3f485c5ea7c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12888e33-be78-4218-90a7-256e5a6f9849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "95ea223b-5928-400f-b34c-b10177aa5c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b909fd8-52f2-41a3-964c-159c2a6f3998",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c71368-6d32-4c35-9f01-e6fbe9ca4705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35f694c-3f99-4fdc-bff2-386830a4dba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7edcee-b70d-4efd-a801-9b6136340566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8db16491-ad02-4e38-9507-52209c092be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28222597-8f3a-4d59-ae02-90487afb330c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21135550-5f43-47a1-90b0-78ac06a4022b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9b90a4-651d-47b5-9d5c-fd0be63b8ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0d7fb0-d354-49da-8198-d3f72812ccf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13ba2338-c264-427c-89ad-c942ad8f7031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe09860-c53e-4e76-9899-c1786a41434e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048eb7b8-a9fb-4465-b8d9-a211920e7a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c556d3c6-31ff-4c33-9068-435367b9aaa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ec6e1a-667c-4db2-8304-5fa505bd77a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7ecf07-db46-40ce-955a-26503a6ab8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5ff52a-e0f5-4bd8-8233-382e2da0fe5f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bfe71b-5fa9-4f5b-9afb-8b64c44a9a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e237526-2800-42fe-b1f8-36e4ee8b6ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0030c4d4-7397-4c47-93f1-b749f81579cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75db8581-bc08-4767-b830-6657d77cad82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8916ef7b-9bc2-4a6d-8657-2d69a8a27859",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91436de-d190-41c6-a0b7-f8793c0be32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d93d4fc-f6b5-430d-81c9-a7bdaa1482ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361ff197-4cea-4a3b-8d13-c1281c34cd66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f3b46b-9878-4cc0-b2c9-7913c4b600b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b794db8-2b5d-4788-a67b-178002bfa899",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfbc389-abf8-4db8-94f7-0f3cf95568e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e77bd9-057b-4305-bbd3-feb8192b8dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56df43d-0aaf-4303-93c3-df85033ce34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5263638-1d4b-4acd-835a-6c590cafb777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ab47a2-12c9-481d-a6c3-f9c6a253c65a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bea65c-db1f-4484-8ba7-be18b785d1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad453e36-0aa1-46b2-bf71-4d3217ac9f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b28a72-bb62-4dc8-924b-669cde31070c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0ed9a0-41f2-4538-b14b-07f5f6d3d7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77583bc-87cd-4e41-a2d9-4d8d05d8b2d5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd12e556-ecb0-4360-ba7a-7dc757543e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22955690-a30b-4826-bd16-6b9c64d57431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986a0f68-2b20-4299-8345-c165dbde1e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8d7241-06dc-4450-b06e-ec4f529537fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b96717d-c0d5-4711-8339-e0637e4bfa3e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b473713e-eae2-4b13-bda7-168f8149f6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed47fe3-fb2d-4c16-8633-28b4895894a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71340fd9-0d47-4cff-9ed6-6184befeedb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09bea6ba-4c76-4bda-b670-73ff0347285d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8759c0-f56a-4c71-8f38-68003b05eead",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455b125e-4dcc-49a3-ad56-e1c01889e530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1643b0b4-287b-4f5f-9082-c77f8f2f5f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23112985-928c-4850-bd63-cfbe4c04d045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46267a3b-ecae-48fb-97e6-3aa218bfbb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27736424-618f-4f0c-b4df-a49c50b6fda9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8685f5da-563a-471f-b923-e340a081b115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe07aef-8a6c-4af6-be84-6b397f9f212b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d69e03-8a44-4bc0-a97c-02442a240edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d355f764-a36d-437c-b96b-3612dc0df8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9564c033-2005-455a-9349-742e058092bb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa14e212-e646-4207-8792-b3aac4547f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddbcd3d2-f80b-463a-a907-bb110d400f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86b812e-6022-4146-82c3-72e63c46c306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd8e301-faab-427e-9784-8d372d911643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97731f8-8ac8-4a7c-a2f1-0b6548890609",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "758636e4-953a-4e51-b6f7-ea9cf58e3467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6663429-1c52-474c-a85d-e63210c959ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc8103a-4e88-49eb-80f9-05063737f7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f01ca0ac-fa71-4a1a-9b0c-25a292ad5bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619357c1-4e7e-46a9-9353-d9c3fee42e4f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91ea2ce-8c0b-4f5d-825c-24026fad9c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43347f37-cd3d-4ce1-99e9-fcc3bafd8482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f228545-f2a8-4dd7-81ec-786df2068f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27f73a66-b135-458d-b9f2-340e0a2206b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca4515e-524f-455b-9c8e-118d58b72bf9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94def9cf-5416-40c8-874e-b3314d0cbc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b26fe95f-2397-4528-a62f-f28a144c95d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bf7b94-d523-4135-bbcd-6a558cfa324f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b6e4b9e-272e-4b4b-aacf-8cac1386ba77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5803c55e-715f-4415-9200-759bf399f634",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0513dd-e464-4fd5-9e61-05dbbfe115f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58896a18-07b1-4ca3-97eb-17670c25e3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f29b80-2ccc-4be6-a64b-e2b43fe74605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25e9a437-b1ce-4700-88ff-48e15347fd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f966b2-e268-417a-a945-a3cf50ec88c1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f3a776-c070-451c-b36c-be90bb3a4326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35034a3e-e208-4b63-b473-0fd06a9ea571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd8ae0e-3f52-425a-955a-f003de59bd21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae4f370a-fc25-4aa8-923b-9146cc6ffbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671a36b8-e885-4e9e-a7d7-60abf3d84d4e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b730fc69-4f17-4b37-ac42-c162ee971024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d04a5a-fd30-41d9-8b75-fc750105f1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d16364a-228b-475f-95e0-fb0108aa520d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d3d7cf5-c7ff-4128-96ca-c9f110df85d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58697dd-cc47-45a7-97b5-108f34dd4035",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5130f2d9-312a-44cc-82d3-9c4d703b08dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7368fe79-6f47-49a5-b65f-a61d245ec515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c006bdc7-ab59-433c-a7e2-497e58270987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "18592208-3597-4507-b1c0-1e9bf515a94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b5eee9-456d-450b-ae65-4e5e0f3b1fe9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f510cd-e312-4992-8404-83a5da5a83c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb14c7e-f083-44bd-9556-5f09248abe7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1734286-d3bc-482c-a6d4-b8ad93749489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6db64fca-7e13-4de7-b774-335f611b0001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dce58d-336a-4a6d-ad0a-875dad3e5c30",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f10267-917f-4575-9757-cbf8c1a7345c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11eb5efc-3504-48b1-8d16-849e6973324e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fda49c-3bcf-4c88-9238-fbbbdbbf3ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0511ae00-40c4-43ce-b042-2e97b823e04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3c69e1-4a21-4cdd-8d24-fdd2cddb3a10",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423a837e-208c-47b3-bb6c-1d61d53d32c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163c7fd0-53e7-476f-bc5c-f12eece2470b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f483ce8d-7ba0-4514-926c-8164e098529a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "be4b25fa-7ed1-416c-8dc9-57069b70a65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df92ec7-c4ce-437d-b5c8-80f8c7501e66",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f93ffae-521e-496b-9e2d-5995af0e5b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ae359d-2816-4c35-8acd-87be74f75f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5911f8-387d-4673-b510-e35e9963fddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ebf7ac-00aa-48e1-b605-a2f137253151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8089c1a7-1263-4317-81ab-ebd49f98dad1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3361ba4a-07a9-4a80-922b-582a1f818cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "543991ad-2f83-4549-9311-7fa04b503128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aacb27a-6063-4523-914a-eedc63514ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0173c253-0acd-4228-969e-b32810cbac64"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f3ed531a-62b9-450d-b7a0-04cb7bf3ad94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "317c0e7e-64a0-448f-95d9-7eae99c98404",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62a2279-0e4b-4874-adc5-9463dfbdcc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9eeebd04-2b19-4362-b308-139588bcee5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f51074-2ddd-4136-8749-6fa7252a6a87",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "75b3a340-8e13-47d9-9ece-7eb83a14ba9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a51f4a-5e15-4381-a677-167188d8e9c1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f301bf-bc89-45b7-b46c-008492f7c284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b841cd1-487e-4830-a9f4-35bc1f74050e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86dd292b-6111-4b7a-a762-94875e261327",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0bcf61c4-0991-4ea9-af0f-fb14e13810f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6dfcf71a-0878-4c56-a8d6-710ae88c2843",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5930673b-014c-4716-a40e-aaa7867ba108"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bdf2e71-1b78-4fce-80c0-e767c9361f95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca42eadd-eae6-4263-a1bb-a5aec52fb887"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c1b60456-afc9-45e7-a5d4-2e05cce3f634",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "101b1248-68a9-45c2-8b8d-b9e4dabd49ef"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5256bc86-7476-411e-900b-cdb765821796",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19a22429-a3df-4ec2-a210-101a87995e69"
                }
              }
            ]
          },
          {
            "id": "19968ff3-87fd-4210-a1fe-6852f55b8a17",
            "name": "Positive Testing",
            "item": [
              {
                "id": "099b3eda-99c1-4c1a-aafa-37dd4e35f753",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c40d6f1d-d919-462c-ac40-ccb8fd92b982",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ce989b6-f495-4074-91b0-ac8d632d9968"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71e9a232-d8dd-4354-a70d-af8287e074f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "70b26868-e0f5-4625-b322-0448d74e4009"
                    }
                  }
                ]
              },
              {
                "id": "04bd9fcb-e5c7-405a-83e6-2b10deb35922",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1743f12-7725-42ab-93b6-7207c53f614f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f56ce059-fc41-4ea7-baf0-1553d971182c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c0dec78-679a-4c7e-b977-ac17ef0081b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "806b4593-f7a0-41c8-9895-0c2ff215c726"
                    }
                  }
                ]
              },
              {
                "id": "95008640-02c0-4f69-9443-336475423956",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97e058dd-4480-4980-a7a2-b720de8117ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13549ad8-ed83-4d40-a97d-fcd102b133af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ce9c295-25b3-4c90-94ef-9e17b004a8dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "42cf9422-1a3e-4051-9bff-cce6bd0e700b"
                    }
                  }
                ]
              },
              {
                "id": "79620ee1-8c30-4a1f-98f6-c6ce9a3ac4b9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e06f578-29e5-4949-bcfd-d9bac9a6c997",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6288558f-b94b-4a78-8195-16213b27b1ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9e7fa84-b88a-48e0-90b0-7f1de250a134",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a5ae9331-dbf4-436a-85b9-d64f02206fd5"
                    }
                  }
                ]
              },
              {
                "id": "2f4cfc98-d49c-40d2-88be-0ad7fdc9b4fb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a7fc6d2-5ec8-414d-bbbb-9f3998c418f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93b2fe6d-1b3f-47ed-856e-d1acbfa991fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f6b4d5a-87fc-4c56-b421-d9afe727b2e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1cb0378b-3a56-42b1-ba1a-96850b01c0f3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c64784b5-ba3d-4ad6-ad7d-18665c6dbf16",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e5ebad51-9548-43fe-958c-26a890d6bb8f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "23cc1f4e-f70d-43d1-b9d7-cc7a2443159a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ebeb5daa-67b2-475f-954e-7a65c2da4463"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1bc4a137-4d11-45c6-84b6-6510ef328fac",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "746938fd-d530-4d3f-8b32-a3ef8aa623c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d101c242-2428-4953-b62b-5e8f5ceff495",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48b262ee-ced4-4411-818c-09315dfb04fb"
            }
          }
        ]
      },
      {
        "id": "be724b2b-f417-4907-92d5-e78ad296a0d4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5c012465-d773-4ebb-803b-e75779e6af2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f34e1089-329c-43e0-b8c1-7dbcf2b97712",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8847d5d3-d4f3-4a8b-b2b1-50528371952c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "066a32cd-9539-4d02-93a4-165eaca898c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed42251-f92b-4cf2-86c7-507c983710e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0110b140-cfe5-4b00-98e8-d56722bb77cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8821605f-d8a5-4445-9273-923175637da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be0e848-3fcc-441c-b737-d4fe26fde26b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129b9137-fb5d-48da-82ff-e29ee8b0b410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10f7c9a-bff7-434d-a754-348311e48261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc23fac-ddf3-47d8-a23c-f0ef20d1db92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d65792de-dba9-4372-9141-2065d9568d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f45967-4e86-40d3-add8-faa686c0c17f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9eb6e60-836a-4c28-9a96-d3e34c0bf5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70f6a58-44ec-4bb1-ae80-48c5eb911853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da564e35-ee98-47e4-8446-2b7747ed9339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdaaba52-a438-410b-864a-65009fe9d53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4fe3ea-9b44-4218-ac27-6b0ddbf5860f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe594b4-122c-4d1d-9798-fd573cc40109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e29a6d3-018d-403d-8e5c-64a968f4c394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd2ffac-07c9-4f2a-98f4-3f4788ef7ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "933b3c74-4ad5-4f3b-bb02-6d8fae4a0a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d48791-8fb7-4367-87af-1c7968f3b495",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4ddbe1-3592-4bb7-a24c-ce61757d1406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b5bbd3-e840-4ce0-ae57-6deb10f83f2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c69711-2374-422d-b4cc-5556b6a88365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d353555-657a-4f25-b04f-2233f421c587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6001033a-ef64-4ef8-b674-4a5412855262",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7fc29e-9110-47ba-af34-1f899cb751ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e9133b-1494-4d10-bb68-aec3699874f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c45ec6-0c2c-41d2-b98e-e763dc804aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f1a8c37-d534-40c7-8b37-1e92592d9f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34055dae-3d99-4dde-8634-fc54a195e419",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17e4e4f-0ba2-4f05-9d6b-17e8c1d82839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adde7959-d3fe-4bdd-893b-fbfec421da9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbcc376-ffcc-478a-be2d-2bb86d09563f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c62b42ff-4a1f-4b61-a787-2822f8d58a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeadc9e3-31bd-4937-8e11-9eb8ab34f606",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b454305-8a9e-4bb6-996b-da74f4be5c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2acefe-9efb-4643-ad24-0dff1116314d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e315b0b-4f7f-4b59-91e1-5c06517492a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "99fa7c33-bbde-4e73-a062-cbc24f80e395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8096fb7d-046f-4186-98dc-f72e94b0d87b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9602a16e-a046-45af-95ee-8da14601cfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51171221-fc6f-4a86-be25-4b85cd7297de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54076d17-a23f-4a49-b761-7e27dd0bd217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93808a0e-c974-41fd-a6fd-61e27c0b8b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4822650-29f3-4b69-a7c8-c4785474c0f2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead1a4a5-5877-4bdc-abef-eed5b653c7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f701ee97-d83a-4137-89a7-fa3b6c89ed66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9f5102-5bf0-4145-b769-3a946088f88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01964fe8-5453-44b9-bf7a-3779a8ac980c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c43d34-ebe7-4bb5-b6a4-44e3c177b28b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b07769c-5b68-4327-bf92-b4c0fd8a95f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c5bb9e0-c86c-44f7-b221-3de2643ed4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7a37da-ad7a-4918-9376-0ef9298a2847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a132227d-53e7-49c2-ba1f-540a55af8579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e798fa5-b1ac-4462-94ce-8a42a02180aa",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301d7d94-7732-4d74-b275-50cafb8d833e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66694204-2e4f-4c84-971f-3492a972a042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6ccdf0-0ad7-4f55-8555-d84637c0041b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23a8bd83-7e29-4142-89f7-abbad04c9dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364aae59-6823-419e-a31d-4620c47b9d25",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3cb20e-b489-412f-a535-bbf67d70812b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f5875e-9b79-497b-8434-ccc397c87f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5640c113-ddef-4dfc-aa51-d890e8d63903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b98ca67b-e665-49cf-81e3-0082de072070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41152386-60ab-4c1e-844e-f24b44f9dbd8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c549420-b766-48b9-be4a-4214fee05e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4c4981-c5ef-4048-96e5-119108788054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921c4d9c-8250-4d42-b8cb-60aba4d79a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea644f02-2327-4cfa-ba11-00b573b78007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa2e072-fdc9-44d6-8821-ee2707a46e86",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011ed180-91d3-49bf-beaf-24b4c114ea18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed790b7-437f-4617-85c8-e01f0a6bbec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5319749-be3c-464b-a22b-d3bb1b14884a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9436253f-d4f9-44a0-83b8-fdffa1b74c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c33a4fa-b6e5-45cf-a47f-03fae386ecc1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1345a6-89b7-42d7-88a4-fb620569a896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52cd637-cb86-420c-ba73-def4a54742f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38fed25d-0605-47af-bfc3-f00c66404319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad97eb4-4c20-44e1-aff1-da550334f24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd38553-8939-4ec9-b910-e5e5fdba5303",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d426cc6a-6fa3-434f-8e12-d5cbcdf1fc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece74c25-dbe9-4fb6-b258-84419049d348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f223c87-f19c-4a20-af82-0ce33d92db8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2efe25-49af-4cf7-bcfe-78500207e201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816ea7a5-79c8-41d4-8713-4309dab21e30",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027542f5-5e3f-4946-8895-08c5e940e5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a0b145-b6a8-4792-a16e-cf1523677cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca05efb-3c16-47f4-a11f-b516b896c2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "75f52a1d-5152-4eb0-aa8d-f8ab0e782272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05198b22-4e80-4b26-8fa9-2f425630614a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a2b0f1-da29-41d7-a6fd-26a2f1a8d33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05584db8-a827-432c-b221-6d394e0194b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb15b2dc-7876-4640-ad09-037ba1ae24c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28990086-3b29-40d3-a13e-f55c9bbb237b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c91de47-d571-4322-b35d-4ed711ba2618",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20375fb-898e-4c7c-9278-b3c81d21ac8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84af2d99-7383-4fdf-a65c-f787b2233996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e895190d-fb41-4672-a503-9c14922b06a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94b72078-4322-4147-a046-dc050261fe41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02d5b99-80df-483c-8247-bda5e6f6face",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c29e51-b507-4310-a0df-c12440494504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8413eb20-0e78-46b7-95cd-e8bb9e9b64d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee16e22a-5e09-42f8-8f0a-0b5441a03965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c6e286b-9f6b-413d-979d-fd1964230f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f33a06-6291-4b9a-b7b8-15c735259f53",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edea811-93f1-4e34-b216-41ab0a8f2441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21e78ed-8f30-4be5-a61c-7848203350b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7860816a-a75e-46cf-a390-25725cd21d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d34051d-4d62-4741-b644-eb3327f44a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfa75dc-1a6e-4a39-bc89-a24ba954de87",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe89f97-35d5-4506-b13a-b9061921574a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f2dc0b-08a1-4296-942c-c5f03879b0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed16aa1-d1db-4d18-87e8-decd37464097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0157f3-ef2c-49ea-ba34-78eb43094d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80fd0a6-fa1f-40c7-8aff-acf7f61908dd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7411234-0c7c-47e9-aeef-fd94b9e08dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881fa970-b5d0-4ca6-9611-962ea1a74205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55357b96-69e6-4c58-99c9-720df0db8508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df893040-3271-4f5f-a4c4-36e5326a5097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7041a3f-67c9-4457-8e43-e01ff22b1e2e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef14e0c-f2e6-4234-b633-696aa3ba983a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116cb73c-50e1-4c3a-bf55-ecb8a9b101bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f4284e-8c8f-49bb-957c-0bb55ccd37b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a33e3f32-561c-42aa-b103-a6ea504aa43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6269d4-c385-4e68-ae8b-788881a7839a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d607fb-ffd1-43e6-95b5-e716ab15c599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88e634c-57b3-4f9a-9f92-eb97c118533a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc18825e-9893-41a4-aa5a-71b47c27bb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f066fb02-39cb-40f5-8ce2-b6e5eb77f477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f988a296-ab7b-4965-8be0-c6d1d279d17f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f878ad4a-05a9-400c-b141-3aa726291e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e398900-8244-4028-8b2d-bb411edd8dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8034b6a-4816-4fe0-a425-6c5971cc554c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20f2755b-fd7a-4772-9d9f-47712efbc19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e27e6a-daaa-4d3c-aa8f-040df6e731d2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "568a657d-3fe4-4187-9f5b-ca7c6b4e4dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e3efa0-996e-4133-acff-f6862d6fb237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd65e87-26af-41c7-bc3e-ab201f57f759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b120f6ff-dba7-4412-ad64-07d1170f185f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421c9bc7-18c9-4dfc-a41c-b36e3d922622",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82cee1e-67fd-42a8-bfe3-e2c664ba649b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be9b648-48f4-40df-83ce-846742b4d1bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f109b6d4-ef22-4664-baa1-6a128ea76edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c117d1-579c-4f95-98f7-5e2b45789e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacf78d1-1e2a-4f53-815e-b6f704d4492e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6b1607-3b4c-4f14-b466-faaf897df287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0c8576-f45d-41eb-a077-c58043182a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8e4f7c-5408-4e30-9af4-80dc2fb4dfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18b9c316-972d-443a-8982-afdac2bb94db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e12af2-d297-4ec3-8a5b-a17a56a07082",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91c52b7-0420-481c-80c7-2e8e43d5bf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c28afe-7204-4616-818c-09f73308a535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78c592c-91ac-4ab4-aaff-28fbcdf116df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b48fe9ee-4c0e-497d-b9dc-e48c03d01ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a241269b-f00b-41b9-8352-5b0e1d6559cf",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9882cf-60e3-42ec-973e-a9d990d4c0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8481ae69-4988-4406-a1ec-287047ac7080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77dcfb3a-185b-4ca7-a681-410327e24831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ec885b-f160-4f7e-919f-803ea0d7fbb9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2bfcb711-5a1a-4e1e-bd04-ae4c2dc56775",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b8223f2-ff25-4741-b458-20ab5f148e5d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddad8622-227e-4265-9bbc-082982458e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372d654f-2d30-4c84-9a48-d37c60be6f13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a541427f-4354-4194-9a84-c35a5d79aeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6ac98bb-86ac-45de-991b-e44ceb3990bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065a3652-2ffb-4fa6-bbed-683bcb20847b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11eff7e7-c817-40e5-9a40-4f72ab2466d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "84a0782e-3080-434c-88bf-31ab96d42f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929f6f9d-8ff1-4aff-8491-10678c6ceafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fea34dd-4dea-431b-ab66-9d42c307de54"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad8da06b-a491-482d-a1fa-b7bac0253438",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee6c3829-f962-46e3-bd84-cf767bf52fc3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6129409-d72d-449e-9191-821184e808d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7742c708-00d7-4125-ac46-ba9e1a10866c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7fea3cfd-db19-48fd-84d3-b8629f8de0bf",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7cf5209c-e28d-4ee9-b515-8edc6ded79e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0814a32b-ee02-43fc-90cc-288df6de757f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85a9f988-7284-4e43-9ea7-cdfc28d7a0ec"
            }
          }
        ]
      },
      {
        "id": "a26f33bf-69db-442d-83e8-232941b2b0c2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "98bfa6e1-8c8d-468b-8a5c-62e06ba807b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a50e525-daf6-4bf3-a1d8-ee4b3cbb3913",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "476c5845-28ba-4cee-8b12-bdf5ce371fd3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af32329-b212-4f03-83ae-27e9ad45b342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1abfe9-f5d4-4f58-8f1c-841e5fd066ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ff7ecc-f873-47ee-a41e-84aa18e2162e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad42b45-d4c5-4275-89f4-e38b38682d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a96a00-a13d-4384-9788-28bafa3d7b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c3309c-dd80-4ba1-9313-208d65783be1",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb24304-f6f9-466b-a10a-c9973a5d0daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829ae3fe-7e83-49c6-9447-ed8c4d598584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4272bef-7d1c-4660-8e44-c153fffa2ea9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd51d87-acd8-42d2-b876-ac38b912fc50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe97338d-f764-4fba-81a0-7e09ebab17e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ced861-2e78-4d45-ac4a-2059a746a7cf",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83ca0ce-a9ca-4947-8f5f-ad9bf43d7fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d05ca74d-07a0-4760-b1cc-bb5b49640ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de5d609-af86-4601-9768-964303d484ea",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db099f51-736b-4bd8-b6f1-a1cf33532bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6732570-2a72-41a6-8de4-319c7f3b2eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8e8ca0-51dd-4c5d-ab54-f57ad7d00ca0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae24526-c022-4cea-b799-5935b42fc7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "829d48e0-1a89-4571-8f37-344dfd906c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c4774e-dab4-464a-9069-862f9285dc3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bead606-702c-4655-9a85-60235adf9abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7aadce1-328f-45b9-9890-23cfcbdb06be",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b80e1b8-0be0-40c3-a6da-f786db626f48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2d215f-8559-4c99-9904-8157643a2faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedfb0da-fbd8-4d8d-aa50-9ed80f9cd752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500696e1-27d8-4ea4-8aa7-491c0b970205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54f18eb-d263-4044-a978-61a93feb065f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf383fec-a341-4265-b18e-7b37e0527056",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9ca0a5b-7eb6-4d6d-8629-7cdcaadd5e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe152bc-9756-410b-b6be-5db72531cfc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397c847b-fab5-4043-b7fc-4fb9803a478d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf9df49-da6c-4715-8de1-60a7277388dd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f697d9a-4722-4df0-b3e5-7531b9e4e24d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5436816-c656-4f32-8acb-7753089e331d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b8e0e7-ec6c-4872-b579-ea63b00798af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "937e0a0b-fe09-478e-8a60-f0f6e16ee1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770bfe84-b7a0-4930-af7f-c56653ba2aab",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da64f39-f680-4d46-88ad-b826a37c2c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cd76d9-341e-4daa-b221-5958b5c1c483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd27830-d9f7-4b19-aeb7-97043e8f13bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "663c05c1-23ff-4796-91af-17912a2aee8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b95e58e-4cc5-4254-bf7e-131e3da6035d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff74b85-3358-4c79-a82b-b49a611339f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11f6f9a-56aa-4d23-a5ca-b2872a9b5bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d4943d-2247-4463-8992-ddba7f52ad46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7118fc98-8ae9-4688-ab3e-a39526de8ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c4fb8d-b045-41e7-9041-dcbbeb0250f3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942a97fd-bdea-47e2-9d53-f7632098b28e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e70ebf99-8cc9-4232-9e31-fde14072bf2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bbb53b-d0ee-4fa9-9ee5-4f1111535134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2181991c-3e73-45ce-befe-29abbab93a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5ab72c-da56-47c9-9990-39582fb9ee10",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f62402-e434-4469-8baa-326ec76256c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "799a2f1e-0aea-427b-b2f0-6e252f0c2ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04273427-b394-4f88-a1ab-63dd62f53a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6997de23-33db-4a6d-ab19-54bc89e805f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f135cc-6533-42d6-b1ef-0d2ed204ff6a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7a0c16-3dd5-4d3b-be1e-964350f6ab15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac6f09bd-c4d5-49a7-ba3b-7a220476be41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "684edf0a-5444-4fba-8f7d-e2be668f9cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9c2822-19b1-4fbc-b4a4-661314bdda41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9113b7-ca02-431e-a4ad-7ae5f1a046f2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ea51b9-9ac4-4a43-b23a-3726526c9aa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0ef4437-2976-4c1f-b9a1-9e30ed44eb66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8022da1d-a34b-41c6-88b6-42e03676a836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a04b7e-b938-4294-829a-c1b6d69c6832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c238758-e969-4e51-a7ac-bf5bc490ea43",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703d343a-bb8c-4aac-b84e-7f7b13721e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1044e1fc-90cb-457e-aca4-614b61224a5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d52d1b-a4cd-4132-b2c7-5cd7c5d8b15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd0d569-d888-42b1-823e-12474ba4122c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b06c20c-e2c3-49e2-bf80-5e1912f3b6d4",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4629fdd8-47f4-45d9-9de8-c41a55e55737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46a8b80-2c46-4e3b-884f-bac535b617d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59016ba8-4efb-40c5-b5ba-896d18118340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989e24c1-0352-446b-8349-86a9fdf5be4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca11a95b-23ab-4fa8-b6ce-475425d9092d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a588316-2ee6-4e1a-89ab-c76842d8c965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ff6289-6e65-4c3d-aee0-4b9cdca24a58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34cfbcf3-b7a3-45cd-89ca-e537aa4e0b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9422a085-4ff1-429a-a7ec-cdfeb50dcce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a612d62-283e-48c4-9b10-b16142fa2376",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce6cb22-288b-486f-a23b-84b874febba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0904ed4f-c02d-4114-a06a-a5ada9d072e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ad2a57-fdb9-46a9-b923-6bc855570fc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f9b2f7-13d1-4b03-a275-314b6f9f8fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07cad514-4ffc-4017-8c03-d6731fbee004",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817f2756-1dab-4ba4-bdf1-013fc0def81a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ecfe70e-b217-4080-9c43-178dddebf944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2b5640-e46c-48ec-8703-f92744685c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908772e6-dbb6-4333-bc0f-cf6845c9a84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139ff761-0fbe-4e6c-bdc2-8c65ef606644",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6462a5-8f4b-43df-8ba3-75b5905b0c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbfd0817-3c8f-4dbe-9553-9912eb22c564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01719859-3272-4aae-9dc9-bc61755e27d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c96980-b205-47b5-afa1-5fff13a0fb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1744e256-fc6b-4d84-bb48-c2a1bf0f2669",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3645dd-350b-4c41-a280-5277476d9a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2194a8e0-0726-4208-b2d8-dd5a40714046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f21714f-a49d-4ed5-ba3a-f1ccfc5a64bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2cdb85-d77d-4003-a0f2-6fbbb5e2876d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe6f62e-8951-4e0d-a79e-36424284471b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccbe182-f4ce-4588-af62-0f5ee36bc642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca34a69e-0627-4a87-880f-efdfd97da745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5c19b2-c75b-470f-8db4-4adecf8858c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93219eb9-9757-4fad-b245-c51aa02ce808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9408621d-c304-42cb-a861-7c63b2fb6c60",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb7dc56-64ef-442a-a9ca-9f96c49df4ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d009feda-9f2e-47dc-b51d-6802c58cce5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9097331-c4e8-4a08-9e27-e2cc2171c232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cca0082-0809-494d-81db-a10822c5b42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87f35f8-1f23-4999-85f7-20c980914fce",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020d22b3-b325-4991-81d5-2ba474f5719f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec05a65-3d8c-4158-a679-d872466c88c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adc5be7-fc17-47e5-b18a-4da44a72e2f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3c2671-f8fb-43a5-ba94-f9c195db9528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c298c11-8538-4973-bf99-dd6c9c240b8f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76efcb6c-c202-4f3e-8f49-39157e2567b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e086b53e-23ce-4f79-bf1a-05c0b094f30c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "055b43c5-4108-4d28-bdd4-1c4c99c50e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82b75c5e-5e1f-4bac-8f9b-e8a17154bcc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d108b3fb-37a4-4e68-9021-2c871e95e783",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09599bc7-d1ca-4597-970b-38cc7e193ce7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cca37b0-d1e7-48f1-a9c4-4a3f76dd96e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e57602-ea3c-4b75-a2c3-820c2556c574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81551a15-f2bb-496f-abfa-c763b72adfb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8527bb-b32f-4f57-b7e0-e31f661bde42",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7079d6c-870f-455e-b6d8-c6026bf8ee29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0db3d62-9391-48c1-9707-d69cf0d28b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "420edea1-80dd-4d49-9024-9ed3c08fbe02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b209c664-87d5-41ff-979c-8846941f3012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5cd6c78-a58e-45f3-bc84-a7c18d1c931d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad54b56-5a2e-4351-8279-30f0ad9ed884",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19be85c9-b8ba-4696-af96-0760875181ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2377f539-2691-4785-b952-4b1deedd51f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ada12b3-6ecd-41f9-bfbd-46cbd46b2eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d11409-e3f7-42ab-81db-aaadd3743d48",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ec9256-7ac8-4b62-ac20-215ec3579b52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28cc4872-3427-44bf-b86b-c65f64c633e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7182b98-f1e3-4c07-83d3-2f5f7cac841b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb68fed-b89d-4ec3-9f9f-9a78c23e33f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff6efe9-f200-4184-8a8d-80ee8e82f68b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adce325a-5a4f-4cbd-a7df-676b0100161e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bc47f38-66b8-4165-9707-fbcae6aa1b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72dfc272-212e-4f76-975d-f622379e5383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47cb8d9e-ae0a-488f-9832-43761ba50c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c054a3-b518-4194-b8aa-182757a708e9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e31c1e-9cbe-4109-a4a8-c8db8c58ad58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dda34380-741c-43ae-8f04-838ade7d123d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a413c8-39fe-4720-b6fe-9cefa635ab22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cad6464-352d-4414-b334-6f24cf764f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb38189-9712-47c7-9e20-b5ef569a8d7d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3187d4b6-69e0-4549-ac57-2b1f6cb68a26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f37abba5-de4e-4ecc-971d-7134892f93d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b2dbfc-4a68-4bed-ab48-d63544211f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5796218c-9dae-41d8-b79d-eb2e7af47046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5b4ec9-3dec-4896-82fb-e0a2dc31243c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a14da68-f271-4f8b-a35b-26daab991e11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5995db5f-4902-40c4-9251-e157ab2eb427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6564402-5b36-4d6a-afba-3f099791cb8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8e9af2-fd23-4b9a-aa34-c41b3e25ea3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95eb751-1258-4e10-873f-c8c2e91ff8f7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17360e2c-68fa-446f-b9a4-6236f1d58fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8149cb2c-7fc0-45b1-845d-417a1e07fe53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0cc66a-1d61-4869-84b2-5cd7f0fe5beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550a4e7d-450c-4619-b1c4-416d83d19b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ad738b-48f4-4e73-a69f-4d8e4e06df08",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b545854-6f43-429a-bcff-7c40351f156e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b073ea-f6b7-417d-bc49-970db12b62f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d67e4ab-777b-4877-ab3c-c90eae94368f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84296b3b-55b7-440b-88aa-6c621c7b5d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd258941-484a-4041-b5b6-3654d9e1dff1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671db938-a9a1-4243-a94f-3ec3b1ae47be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1269c277-58d7-46e4-8eb7-e92c84fec890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf63db90-16f6-4221-8174-c5a786a04977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e731fde6-1b86-4141-a60e-9eb374e52198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f3c671-502b-46c3-bb02-ff3ea4da145d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3dd576-a9b3-4b7c-bb83-dac6054dd31c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764067cc-42dc-473b-a996-5e88fda3fe13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "611b48be-7d73-4413-a40c-67f02cba92aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c37a5325-e66d-4239-94dd-dc510f067325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0512a10-7ba3-4921-9bd8-50110b38777b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9899d92e-1693-4feb-b302-2d14cdaf957d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd56144a-6402-445b-84a6-28b7733fc87e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff97b769-59bc-47aa-b758-4e2cb57a13ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7f70b3-cecb-470c-827d-166e28c9713e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6fc9a0-e169-49c7-a936-3b965095ea1e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668a45fd-76b1-4759-b26f-689cbdf05348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b5a0141-2bc7-4dfd-b44a-eec2725c9d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2360baa9-3b50-4494-8b4b-fa5874a38615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc23e2c-7493-4d0b-8a82-cb12878668b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de8fcc3-e827-4b30-81be-d2a8280d7281",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45a9e2a-2cee-48cd-a6b6-bc96751bf730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12740d56-93c1-40ea-9e59-0061dd3d95c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d576f871-b8cd-48fa-9e5e-f1034b54449b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df37323e-ec6a-479e-b526-8482b2182ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f0d20a-4097-46a1-b5b9-1ebc35ea659f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c666519-ef07-4b9a-a660-73267690df10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e39213a-c6e6-45b8-a6ce-e1e89b8d46f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3f42e3-ae53-47e8-90a2-dfefe283e36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca57fe2-131f-4fe0-8144-f93ec3673d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec5eaa7-62e0-4c2e-b243-f5e75eaaafe7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e29be4a-0335-4330-9b48-27bf0e4ec091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb4210e-057f-4f2e-b0a4-c76b5c853f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1b70f3-a238-4d93-98df-b93f3307be29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a860d37-27bf-45db-89fa-7909d1f1238f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91628858-9cc2-40a1-85df-165706cdf549",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990e5f6d-293b-4c7d-ae40-7c7539cc9135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff8f735-e529-4ab5-bbfb-e22b316fcd10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d917bfbc-c42c-46df-a607-df8ac8b0ffc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3767b9f-6d67-4c92-831c-000f6f4c32cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1daa9c18-059d-44ca-9b0b-5b5ff56a4b1b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cbc2d3-7a36-4cc1-b5c0-89fd199969e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "741ba847-243e-422b-9e92-469ce354d6a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "401ee990-a1c7-47d9-8d8f-19cbba7d0f7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c096df-d17f-4d9b-af89-032ab4367fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9365dbe7-052e-498c-8a7d-8ec942b096b8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af87298-4b98-4f60-8b4d-bee3644ecde9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db039f8c-dfb0-4677-8ead-d52639d014ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41822fee-6eb2-4e00-85dc-05796f032c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b779129c-1d36-4ce9-9ad3-25ad66327156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d2a3e5-f3a5-43f7-b1a7-8c72f90f506e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9feb28f8-c312-4ac1-9687-1976b0fb147f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ee2e20-7aff-4eac-a85e-492c609da368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bf8603-74b1-4de3-ac27-78968580dfa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae64d439-fe47-4d3f-b608-f0e94c815ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c56aa1-3573-4448-8e13-84af950e298b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294a4501-43b0-42b0-816a-31fc9fad36bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f41437-8096-471a-883d-f19dfbe9c7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa6ad29-7687-4f0d-9f76-bc8b746ec1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b0fb39f-58a7-4979-b530-3879b39d89b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ec8dd9-5df9-4a33-8f94-bfea073b56c1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b432a992-e0dc-4a81-9063-31ebd6dc69d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0787c09-c52f-42b3-b3f7-1275c6f4887e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca8a610-a84b-4138-a887-8cacb9d7af8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f8dcf7-2fe0-4c74-bb20-cf4422454937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942894d4-5f2f-4157-a6c6-09a39e544d12",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8cd466-e1a9-4cb3-bd96-2447fa6cfa0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b17f8a-3cc8-4bd4-b6a1-9aeb1a9bafda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056c01f6-4b10-4845-8581-8386e7f0626a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e6917ad-619a-4469-9969-0f9a070135b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e63d91-8a9d-4160-890d-64ab799521f8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3a7785-87fb-453e-ae04-05725c42c1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2826883-31a9-479c-9dd8-c879fd8c69f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abecfa38-a27a-4a62-9cad-9e6d0ea3aa37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523306e9-1f1f-42a4-b799-859a337d2976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e785d92c-5b15-4494-8207-ff1de0fae53d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95e866d-a50a-4d49-a795-d5ef52995104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc75c977-ff4d-403e-9454-0487ce54466b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa9f20a-4d91-4200-88c8-d3a5ed9a0895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3edd70-620c-4138-adfa-61c68ee5762a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae12680e-e9ff-4ca7-ad01-eb4ee21d8157",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dc97fc-7890-41f6-a242-e64fc6a01a62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e18a79-30dc-447f-9100-caae14636266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f7f6e0-8f09-43b8-ae34-f243e3c016e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196f80f9-484c-42e1-abbb-101a8930cd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a8419e-cde1-430d-bcd6-818dd5463901",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a353fa-7efc-4281-a806-c62416d1c4bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3bcb964-8ec8-4633-ba41-16835b57f12c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76db70c-0d17-40a0-b68e-7e0ec3c6441e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb706564-399c-4ee5-bbea-76212c16d515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db37aa3-ec47-45be-85b4-38ddb329ae6c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae2f5c2-647e-40d2-bdf5-9bc91a2e2c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589a6521-4104-4a30-b6dd-8d6a4016a4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dde8c60-3fa0-4156-aa41-519f13c1c54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4afe29-9f1c-4bd9-845b-2923e18a087e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d48a5e-cd58-461d-9e2e-79260f9277cf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd154c2-0024-4e89-8145-fb8cf703ab58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5573c115-faae-4690-8a0b-9173a1800c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b474a0e-1325-4955-ac97-93432bf6ae8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdee9419-da7a-405c-86b9-8c16cf8479de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee857883-da69-48ae-9468-b0c740d3e15b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddee608-9dc7-48d7-ae43-6b7dc1d0d5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e8469b-4112-4c92-b680-399e153f22da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0909ad-36bc-4acb-ab7c-d4bd85c07ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7fefdb3-624d-400b-85b3-3bab9902c916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae1df3c-e52c-4ca6-952b-959b191a1a8d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e485ef02-4477-4a48-840c-7e202f4c69b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5159fac8-91f5-4b4a-8fa5-553de4696ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348c9045-a322-48cd-a173-33a600d9128b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb6000f-9993-4bee-bcea-efd70b4710d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693e8ee7-d5d0-45cd-8d4f-657398190eef",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08037a47-babd-49cf-9c9a-10f44c4778f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07cd5e59-5f42-48cb-93dd-813ab93dd74b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d0319e-37f6-48b4-bd22-c8df5dce346a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ecb191-74e4-499d-9cab-5f3414fa0f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0285a48-d397-45d1-aabd-fd78558903e2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d0a263-fb70-47ac-8bfd-eb8d56507559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17e8a77-cdcb-49f1-bb1b-c104ed502042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5422ee86-ce7a-4055-ba3d-53a9b64a327a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f08fc3-92d7-4e39-b799-d6998fc4afc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372265aa-0ea9-43c6-b9e2-e629f3cbed41",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b4e71d-066f-4c1f-9e23-e38c5d63999d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490f99cb-647e-4937-a1b5-673be2201601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1dafc3-f468-468d-a260-dcc39e790b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d191ca4e-8ee7-4351-98e3-b197c8202a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6cc944-73d0-4736-b654-c9fcde6e7d39",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da567a74-4c4b-4d2f-8ec5-45d408242ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d4dcea-ff4a-4a00-9138-b1af4c61e33e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "766156ed-8c58-451c-aef7-049b6f85dbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c85de0-c0c4-4eeb-bb62-f1c6f1d63ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ecf940-29bb-43c7-9bce-52ed3d587581",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a796e328-10f3-443c-8ca2-0bdebd515652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319d6f6a-31d9-42fa-ab8f-a3d0ed1fbc16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cb276a-8f4d-4790-9c2a-8486736ac1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff4f7835-e811-4945-9453-3910a51bad01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165c9d94-ca58-4a63-b080-368e0ddf456c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989d7a4b-bfbb-4718-815e-b8c2f72be156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe0b921-233a-4d60-ba51-f43ec7f97e3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18b40c3-431f-485d-b70b-55b2fbded191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79dad3ad-c370-46df-a112-e0bbb14d8428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15911fd-4bff-4bfe-94f5-6e00281d1dc6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1ebb05-703f-4fac-a3ba-fd95d4620b9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f693315-f2e7-4eb0-8b71-7b955084f94a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "609c6f7d-8bb2-4d5b-8238-72da80d1ee6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac722a04-15b9-4553-9c64-6a0d125de690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb457e6-1d0a-43ec-af95-b08fc0ea2c58",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7d9a9e-96af-49ce-be53-4fdce74fbd7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad2a13cd-9c08-4027-9aac-67491421a2ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63060f18-b593-473c-847e-3733e03808d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197153ca-7482-4e17-932a-8872a540c0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72372150-6f1e-4092-a83a-71f3ee5eba9b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ede064-0fea-4e6d-ab48-5fc6f90c55b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd95e31b-2c5b-42a5-9e1b-22239c7ee708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1311fda-eafe-4d74-8039-8ed2f6086a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae8c5d0-9b11-44bc-aabc-0e8f00409aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f711d94-88f6-414d-8654-81de791e4057",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e65c00-780b-44bc-a05f-609361c25195",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc41a4fe-ec8e-4e57-a795-d3317c22423b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ccec5d-f110-4ce6-b3a3-2b2fdba68019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34837deb-4238-4c50-addc-84ac162714a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60619fdf-ced8-44af-9af3-74607c6f3d80",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee1de40-b57c-4c45-8def-ad57ceabaea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "449254fc-0949-49d8-97a9-e8ab8b7279fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ac5745-bfec-41c2-8c7f-c3a27fddab5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b6ca65-0e61-4b4f-ae65-e9f9cd14062e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f1d171-760f-4f21-931c-13d24756a9b1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87f6654-75f8-4bcb-b39a-bbeb2e7c2a07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b03d10ad-5f49-417d-8eb0-01c4c732d0ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bdbce1-a406-4de3-bf39-9e4ca39d141e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "277c2914-9715-43bd-be5b-3202d256f370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6b907a-6805-45d9-b6e5-10395c4f5a0d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e4ddca-f950-4c62-81f8-9aac6a3fe0f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92ac2e33-e00e-4325-a475-6bf4176985d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3afc8f3-faff-4de4-a453-4dbc33c3929d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98cf6c2e-b8bb-4f71-a84e-e079be3088bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276bb870-2209-4101-b308-a8379536f3f3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18092ddc-980e-4628-8ad2-fa7599a8302e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abec47ac-a2f3-4747-a515-183bdb6e4d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb9a4df-9f7c-4f29-bb22-d791ec6fc777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c5ba5a0-1feb-49d7-879f-a9cccec7f6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066eae66-6231-4633-971d-5c71ede1ec7e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5568b3f1-1ebb-43c1-8a3a-78a03a9e3635",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b4ee1e1-9407-499e-b265-cebb898b0bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cca938-6634-430a-aaf4-8af690626583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa3709d-c3dc-4b4a-9ad7-a502d32c9a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681b6ff8-eb96-4f76-8b7a-3ba279586262",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e39896d-be7b-445c-9b79-35cab4c628d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "272c1819-ac79-4307-9bf7-f26d54e15afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a516091f-ef95-4495-ada5-c11beb9794ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d07366-e0c9-4fd8-9538-e6984e2ccb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f939ed-1559-4b47-933d-024c9b8c1ee6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a055991-7e41-47b6-87b5-4810025c9f6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13b153cf-053e-47b5-932b-8a7ddd066436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83160c32-729b-47e9-93b7-733cbfa61925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d76580-177e-479b-ab1f-88653416b36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dde0250-50e1-457e-bbcd-5050a6fab77a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2340357d-d016-4c35-bf37-ad364f56543b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "322d3163-73b7-4de0-8bba-277f1e9726ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb91773-cd3a-4818-ae12-58bf555ba39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf746ae6-6a78-458c-b5f5-89d0a3c3bc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794e6a17-e9a0-49f9-9d8e-c7835f2c2722",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ef11ed-8075-4a07-9cd3-ba164104022c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea9dcea8-8d4e-4360-8f23-7f7a4cb925a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b6e4aa-2b0a-4093-a698-9fce899c1b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da8fe1d-7bb1-41be-a632-814189718e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6424676b-165b-429b-b505-2de6e64a9ed8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f296401e-4862-4bee-9ec2-cdf568281796",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb194801-285d-428f-9fd5-338330c10539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6709c1e-4f4c-4f2c-b8b1-7a13e3713bad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a00c50d-c8ef-4834-a5e5-e0af08d46560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc61a71a-89fd-4747-8686-24cafd20531b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94fa56e-c9c3-46f0-a156-51c2a6d28d20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "373c0a27-c3d1-4d8b-8895-e1fad5e1d9a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e260936-a35e-4b29-ad22-5ef46289580a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ef709b-c739-4b7c-a1ff-d4a96a37fb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d6750e-c090-46e8-91ca-b08003342cbd",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c116735-6ccc-42f7-a583-7e0abb9ddff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0b95724-9290-4656-bb36-f8a472561ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280c9f47-1cc6-402e-a3c2-91e20c98a17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5462f4f1-1590-4c81-82aa-581c98ca6076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3ce249-9fd9-4288-b5bd-2fb85c93cd86",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7482af-0c67-4f6c-9b5f-812f36e95c02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "082da624-d89b-49bb-8c00-e776c41ff0e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14155ff-0053-4a56-a640-58b8eb65248c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555944b1-24b2-4b71-b5ee-bcb8daf38eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fda053-74ff-411f-9ca2-f80ebccaeb9c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8def5f6-53c7-412d-bb91-fdcc2ea5d7ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ada050-3c23-477a-ae24-d9550215be88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b01e47f-6549-4480-80c0-af8bec6b04c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c315ba16-d4e0-4d6d-a5b9-7f7d42d34650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083ce297-5289-467f-91a9-8eeb6ee6b302",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e258c31-c6db-4e8d-8d1c-7ee287a83420",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72994017-cfe0-40ef-b57e-93b37b66378f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af07a4af-79e1-4590-bfb3-a73c5a158cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "344feafc-f191-453e-9d9b-95df4da212ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9701c636-4c5b-4491-9c99-76fbe47f7ddc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee0ea7c-0423-4388-b24b-75947a230bc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93997ef8-3c9d-4ba5-81eb-5f3fce503473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67c76c5-c0f8-49f7-bcdb-98b93d97336f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3342672e-64cf-4229-8071-86c38d04f6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6262c9d-5f1c-4d93-ba91-9da707797e3b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2914a83a-207c-49db-8d24-0bda00779c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "741115ce-761b-45bc-8729-f0178af95391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e8df95-6d26-45fb-8a0e-8e79dba2dfb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b713f6-ae66-433b-8400-1c5a9ec1cecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a97246-7d3a-46d1-9fbc-62f1a3f7e253",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a1addf-7538-42f7-abe7-1b5d5971d079",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d211847-e65f-42ca-b817-51a4519fc080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2999b346-8abe-4b70-a609-e5722c6cbe31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08b9327-1b56-446f-8018-f8c1e018413d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c9ab63-4505-45b1-ac85-747e164fd9c0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095037e0-47e4-46f9-8574-a865e972de10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58ce0bd5-b95c-45d5-a693-810e90065d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1c2fce-3551-40d6-9b03-e07137bbe3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e0559f-7a13-4129-9b7a-d1c9a35ec974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44d059d-bb61-4835-8863-bd8f498a01b1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67bd915b-03b6-4147-b3d3-1e8589ae8db1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc4d2625-c605-44a1-8580-7a64664ea1ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c60290e-72cb-465c-966e-3dc2299749c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4a710e-6a62-480d-9c85-5499d73f4f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3496ca8c-4c57-4559-8497-3c9fb5205437",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f58934-28a8-4d10-8d49-d89cea9ea29b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eab695b3-8828-4e81-9671-aabbbdc690a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b4b717-4f48-44bb-b892-7d36d333618c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394b8ce9-fa4e-4c3b-8cf0-61d6851205a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc88c17b-6e85-4161-ada3-46abae06001f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab63590-903b-439f-a6a2-1bbce1fa4d84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d20fd6c-bcb1-45f0-aa28-54aec4ac4043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd78e5f0-897f-417c-b61a-42c857031342",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a053335-6ad2-4f12-92bb-720c9df875ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e34df8f-7a16-47b6-ac37-69e91fe5d8e0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74096e0-f8f9-4196-96c2-ace5f13439b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87532303-25ad-48ae-ad2c-eb47b4e43345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4b4286-2f5f-4422-813f-63a50e38a3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdbd02e6-2884-46a8-bdcb-00174e30b1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4997f4-4258-4c6e-adcf-0c4ca2924a37",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36f46f4-74e7-4615-83ff-c0c1f76bec77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f82d3d23-749a-4d67-a328-686ee9200454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16d59e6-ea41-4169-a1a6-78ae46739ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a687818-5fb1-4fdb-9f6b-ebccc04516ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1f5a09-f59b-474f-b0fd-3b7d4394170a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d53dda-5eed-49b8-8760-7358009e1c1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41103750-daa0-4075-9a39-9bf1886f70d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79dfb5eb-f022-481c-a692-f1f84f833e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46648ea-12f1-49ff-ba27-60ea899f39e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b8a27a-4e62-4a5c-9217-2c1cfe901722",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5098f138-7d3e-4bb0-9542-9ff50f0ae35f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9c2b98e-401f-4922-bfac-80e38b1b96bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d50220-e68e-4ab1-a804-8f8b39b93c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a145d9-9c5f-4110-b281-5529fc60b823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20178bb9-1bf3-4c68-8730-1b9b4fb54e43",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ad5c40-0895-4714-9755-47b88e1e5648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3cc8741-f09c-4534-9f84-8bb9a4c41d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3825ce-2031-4629-a25a-68339acfebcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd69f16-7cdf-4fd7-92f0-d9de29023491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2926e6fe-4703-4837-a6e5-78b306aef19e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5d8356-8b6e-4ee8-b1b8-e4f3aecb4e75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59a1f76c-92c3-4114-9209-49532c4077e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d974bbb7-decb-48d2-984f-856c37cfb1b0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd41d504-58e2-4e32-b89e-ea2daed79e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9199f22b-3d0f-4d39-97d9-e9b8efd96f09",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5217365-0293-4e61-986d-1785878f2539",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51b6b0f0-a374-4a5a-b05c-913502acbb52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2f944c-bb97-4e1b-b26e-0b7ceb8443eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fc2f67-f876-42d3-ad1d-b39ece8d944d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "083bdfb8-48a3-4c8e-ad12-edea1df05617",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e85d49e5-21d1-462a-afec-b795d1643e06"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37dc38ad-6677-43df-99e0-ee73a857693e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4cf19a5-9834-469d-88a0-f5e5d0797c39"
                    }
                  }
                ]
              },
              {
                "id": "e805b777-2907-45dc-9d06-7991c5e4e6fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d90bf347-bb42-42e7-96fc-97fa727fafcb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5c35b8-1ade-4544-bad2-b86c1d830196",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c71dce8a-78d8-4bfe-8f0f-ef8e91d40a14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4df7bd-a7c2-4d75-8e03-34da4fd169b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0f4d2c9-d8db-414b-8701-b10e5fde09fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d55b4cb-560a-44ab-b3cd-5d16e7e63af8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b9dd66-bdc5-4946-9640-f3d25f8ace2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3fb5f358-06fa-45cb-b03a-88dd5481e51b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f06b2fe-60fb-4603-879f-2484094c09c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0346ce77-7a58-4b0e-af1d-9983af4da95e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1222089-bc54-4fb6-a025-56f5ceb42f9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0531db1-f394-4435-89aa-e30b40a7cd91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff788b45-f279-4189-abb5-a383b72b5ee3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd5b0fdb-56cf-44bc-bf33-9762a69a6a08"
                    }
                  }
                ]
              },
              {
                "id": "431a2bf4-6094-43e2-8693-13655370da6b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ffb3d64c-4aa6-4ba4-b81e-bf987df67b70",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3a406c-c6a7-4995-9fae-0ee669e5be9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "09c545d8-e9f0-40d7-a06a-0d1721ad5f43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b882f8-bc72-4b0b-8073-314de360ec04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f24320-ca44-4cca-b897-b15f3bae08ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b52355ff-450d-46bd-9aab-f43e3eaa4e98",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2051a321-1c1a-47df-b582-c1f65a7052ae",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "818c20f4-c56a-4167-920d-3c415c0e25d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9c5bb3d9-0f3e-40d9-adfe-329245b6ad49"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c0065f1-8f82-416e-b973-f972e339aaff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4107f3f-5889-436e-acc1-2c808b911a8c"
                    }
                  }
                ]
              },
              {
                "id": "a08bf4cb-4141-4852-99cb-bac6a0491656",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12395c5f-d01c-4d40-be86-382ad35a776b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4682db2f-eb0e-471a-ace4-b4de0c2b1981"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6892074-13eb-484d-b85c-88eaaa9a8faf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a13ec41-8252-476e-b1e8-d55df856fc53"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74a8af4d-affa-4ef2-a07a-531841904c81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8efe4296-6896-477b-8975-b364d837104c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c0cf070-f9ab-4ba2-b56d-e4a1b273f090",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5737c437-ffc4-43cb-9d7f-46ddc6fb4c5f"
            }
          }
        ]
      },
      {
        "id": "1aaf97b1-70bd-45e5-a9ee-b9580a87e54c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2ca1d2d2-5cc6-4b84-9e36-9d9ee8fed848",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c95da355-4c43-464a-a866-ced31763edca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "423ccfa4-3f70-4d55-bd41-5bc43b8025e8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51681d0-404d-4bea-bc7c-cdb02ba42712",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b3a93969-e480-4756-a2d0-3dbe56ad7f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f490501-8a7f-42e2-9e41-89aa320b1771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5993ecc6-3a0d-4835-9a03-ef2178b2d50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ee09b9-bafb-4998-a03d-edff85bd6191",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02184137-6cbb-4148-a738-f4a8b1ea3091",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3e8ee927-e3e3-4c9c-8a1f-2da1679a6ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7242adf-09b5-44bc-a4c9-f46167f57e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0c7019d-0ad3-472c-ac80-141b7650580c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9944bdf0-51b3-4284-8984-9443bac0d7fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34e47de6-fbfd-471d-9824-eb88d3ecd053"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f1b1232-0df3-40f5-817b-73444019dcf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5185510-d5c3-4d55-b611-9b2041813b85"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec3ba5b8-992f-48b3-98cf-f926fc5d114a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "832710b1-b96e-4da4-93e5-3fadf982fa14"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08169578-8896-434d-9f13-d70b855f7d84",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "123aa7f1-4732-4773-a1d0-26d9deaa0746"
            }
          }
        ]
      },
      {
        "id": "3250d44d-0cbc-4afe-a878-182323d05f68",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "24cbacf5-7726-4793-91b5-be975f450a91",
            "name": "Negative Testing",
            "item": [
              {
                "id": "152e9225-f4fb-4e85-b86d-8d3c44ef43e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9233555-bd32-403b-a14d-cafbc30f8340",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc1fc6e-034c-479a-a162-47b0db4f5b6a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "687e89f1-8f01-4cf3-a990-346aff58c2d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a35db57-a581-44b5-b822-a7ecb69597ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee3e4f50-3ee4-49ad-989e-4dbdf075a86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f54889-9dcb-4bc7-8efc-8463e099013d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82e5e5b-0b58-4fa7-aa33-9684d529d9ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb5a8c93-f1f1-4564-af9f-6578e8ab5599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf3dc3e-5958-4ea7-a463-53a34623d9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38b3d221-c624-4265-b36b-7cb74d4bb29f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ffc4a3a3-8de0-44dd-bcf6-349afd1b0875",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0727e3f6-4637-4f12-a291-908e63c1b964"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ef0b5c1-6605-4bdb-a483-4587f55019b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3d0ce84-6da6-4897-b315-a707abe98b6e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec015f5a-9326-4c54-8997-e79737d33a22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a292c52e-739a-48e7-9583-6408784680c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "846d0a7b-2594-47df-8455-73b77369cfb9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f66b8c51-a19a-40b6-b1a8-8e7403f284b1"
            }
          }
        ]
      },
      {
        "id": "65b98cfb-3304-4398-8062-3f209aaea256",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "640021d3-51fc-41cb-a148-436a69ae67ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a7d8015-e3b0-4003-b47d-9e09f11eb557",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00b2f2f9-00cd-45ef-a446-12501cfbd2cb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60b943f-4d67-46be-a773-1011c0111685",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a5ced43d-1786-4cd0-9fe8-2f7c1a864f53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5dae36b-37c8-4d07-8c30-83583b9a6d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96ff4d63-732c-460a-aa38-8ed021225497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30dc99e-0f03-44e4-903c-3fe8cee6a002",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde5eaf1-0119-466d-850d-fed5b6b4a45f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b5e8fd60-2a58-4cda-87de-58e734838f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "226e4047-ef3c-4035-9d41-548467eaf194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d28acafa-97b5-4205-94d2-ffb4d8643145"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cf875f1-03ff-42d0-afbc-f7c9730b631c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2af8fa1c-a8d0-4aeb-88c7-c083222aa2e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ff13d0f-e5df-425c-9c95-3987c648fc10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebdd8220-7211-462c-a036-02d69b0b3955"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8b66811-88ca-4aa9-8b76-791370f4b160",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2dbd796f-4db3-4d71-9182-182444361b0b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a9c42c8-c518-4ae3-bbc4-8f1379f0c063",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "096dd61b-9c41-4bf4-8ee3-abf48ab5b48a"
            }
          }
        ]
      },
      {
        "id": "68acec54-f51f-403b-bb2c-38e81a6b7f50",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d18fbf7b-fb3d-43ab-b6ec-5f3a10588df6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a9d3aaf-28eb-4e17-bbff-72abe18f2742",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d5f89998-2fe0-4f90-80ac-cb84fff2bcbb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b0ef6fd-5349-44c4-add1-f41978ef598a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "209436d8-370d-4b4a-bc49-6a5067ef995d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 473
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 218.60117757048315,
      "responseMin": 15,
      "responseMax": 5267,
      "responseSd": 823.864404999575,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673311265247,
      "completed": 1673311362856
    },
    "executions": [
      {
        "id": "3e6fd9d8-d821-431c-a5a6-1b9b55cebd2c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e04da81c-875b-4344-b109-f8098e5dad5e",
          "httpRequestId": "a9c6b97d-63e4-46f6-a588-916db937eba6"
        },
        "item": {
          "id": "3e6fd9d8-d821-431c-a5a6-1b9b55cebd2c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "73770cb8-5f7f-4a09-a3d7-6287dcfcbd3c",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 0
        }
      },
      {
        "id": "35818556-bfdc-45a8-a200-b9c55b2e9104",
        "cursor": {
          "ref": "7ecdc80e-a152-408a-8848-1c5d242cab1c",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "06614f56-3f45-4ff2-9ab5-fc2068fbb47f"
        },
        "item": {
          "id": "35818556-bfdc-45a8-a200-b9c55b2e9104",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "98bb034f-e93d-4c2f-a6f2-4aa4aad6f469",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "14cecb04-ab8c-44ae-923d-509adf251b2a",
        "cursor": {
          "ref": "b4d1cd08-9acd-41f0-9f58-def51904af04",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "614c1dd6-c23b-48ca-85f3-f7d0f646aa4b"
        },
        "item": {
          "id": "14cecb04-ab8c-44ae-923d-509adf251b2a",
          "name": "did_json"
        },
        "response": {
          "id": "a82d139f-af4c-46f9-b52b-6c62ee297656",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5a328e-fa82-416f-a6bf-2668b61d6a47",
        "cursor": {
          "ref": "3e6874fc-3c55-4551-8152-94453cbd60de",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "424686ea-91c7-43df-8d52-f4dd6c7bc6d7"
        },
        "item": {
          "id": "4c5a328e-fa82-416f-a6bf-2668b61d6a47",
          "name": "did:invalid"
        },
        "response": {
          "id": "fe5bf16d-e425-41f9-85e8-7a44e7630384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5a328e-fa82-416f-a6bf-2668b61d6a47",
        "cursor": {
          "ref": "3e6874fc-3c55-4551-8152-94453cbd60de",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "424686ea-91c7-43df-8d52-f4dd6c7bc6d7"
        },
        "item": {
          "id": "4c5a328e-fa82-416f-a6bf-2668b61d6a47",
          "name": "did:invalid"
        },
        "response": {
          "id": "fe5bf16d-e425-41f9-85e8-7a44e7630384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3953ef93-fa63-43ea-965e-7003a6cdd8b1",
        "cursor": {
          "ref": "20b53ecc-1481-4f1d-9a44-873de7d45a53",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "19ee2802-0641-4aa5-8aa3-9bcbd6491b30"
        },
        "item": {
          "id": "3953ef93-fa63-43ea-965e-7003a6cdd8b1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "cfbf9e11-07bd-4b51-add6-6043b4207b29",
          "status": "Not Found",
          "code": 404,
          "responseTime": 335,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbb28ce-7980-4678-9af7-8c490c67823a",
        "cursor": {
          "ref": "75c04b6a-9f9a-407d-9e6d-f6df1ac594a3",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "835c05f9-ffa5-4875-8ffc-a8378000f32f"
        },
        "item": {
          "id": "3bbb28ce-7980-4678-9af7-8c490c67823a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7fbfbc69-e607-408b-b951-e319e87069ce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7386f8e-d511-473f-a7b6-5564b65859d3",
        "cursor": {
          "ref": "3b142a87-a610-447d-bed5-47eb54c94644",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "098b881b-630a-4f77-836e-015c7b9b0b75"
        },
        "item": {
          "id": "c7386f8e-d511-473f-a7b6-5564b65859d3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "62ac62a9-bbdd-4081-8927-6cdd2602c14a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4b6a8a-f2e4-4453-abcd-9cf2769e781d",
        "cursor": {
          "ref": "dc45bc1a-7300-4ccb-9bae-d3de809f81b7",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5cb005a1-b03e-4fd5-93b0-6e9f80d38060"
        },
        "item": {
          "id": "bc4b6a8a-f2e4-4453-abcd-9cf2769e781d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "295de511-e1d8-429f-91cb-c4c78e94832c",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "bc4b6a8a-f2e4-4453-abcd-9cf2769e781d",
        "cursor": {
          "ref": "dc45bc1a-7300-4ccb-9bae-d3de809f81b7",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5cb005a1-b03e-4fd5-93b0-6e9f80d38060"
        },
        "item": {
          "id": "bc4b6a8a-f2e4-4453-abcd-9cf2769e781d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "295de511-e1d8-429f-91cb-c4c78e94832c",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0dd99536-d076-4427-bfb9-f08b0893acfc",
        "cursor": {
          "ref": "b5122250-b9ab-4074-856c-7c2ae5a1b04e",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bf6f59eb-1e51-4852-975c-28c9f54ab94a"
        },
        "item": {
          "id": "0dd99536-d076-4427-bfb9-f08b0893acfc",
          "name": "identifiers"
        },
        "response": {
          "id": "c4eeb94a-711b-42da-ae59-aa85a7eda603",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e378a0e-a006-4a91-a9d1-36ec3f8a722b",
        "cursor": {
          "ref": "57271908-6a7b-4965-8fb0-c4a2f862b588",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6b9a7aff-e24b-4ecf-88db-ef2b0cacd306"
        },
        "item": {
          "id": "4e378a0e-a006-4a91-a9d1-36ec3f8a722b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5bbce88b-01fe-4d40-9737-6476faf31dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "4e378a0e-a006-4a91-a9d1-36ec3f8a722b",
        "cursor": {
          "ref": "57271908-6a7b-4965-8fb0-c4a2f862b588",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6b9a7aff-e24b-4ecf-88db-ef2b0cacd306"
        },
        "item": {
          "id": "4e378a0e-a006-4a91-a9d1-36ec3f8a722b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5bbce88b-01fe-4d40-9737-6476faf31dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "efef958b-ed1f-4df5-93ad-a18f37312750",
        "cursor": {
          "ref": "417c9157-e25a-4d0f-a134-5b9e32625412",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "639ebe93-40ff-4a64-9367-d81777551584"
        },
        "item": {
          "id": "efef958b-ed1f-4df5-93ad-a18f37312750",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2b846eeb-91c7-4865-9f85-0d6ebc82d348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "7bf972b7-ffec-4d80-8e85-0898186a4caf",
        "cursor": {
          "ref": "c1e292cc-19f5-4838-8dd8-1f669ba05dac",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9818fc4c-7b3a-482a-95c7-994480df4a6b"
        },
        "item": {
          "id": "7bf972b7-ffec-4d80-8e85-0898186a4caf",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "aa79e770-36e8-49fe-a995-c231b145a055",
          "status": "Created",
          "code": 201,
          "responseTime": 116,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "859e6ac3-4c04-4a76-8d9d-e1cbb0708f01",
        "cursor": {
          "ref": "9188ae0d-5ea2-4f4f-b08d-712ec9a04b38",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "52869ce0-5abb-4f1b-ba2e-2a270a0835d7"
        },
        "item": {
          "id": "859e6ac3-4c04-4a76-8d9d-e1cbb0708f01",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "476d1c5b-21ef-449d-8a63-645702bec036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "2f4fb5be-7824-4029-8ede-82ab78892995",
        "cursor": {
          "ref": "5b890624-ccd3-4027-b11a-e30913d10c9b",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "93abdcaa-7dd0-4f38-8b02-f9eaf44155ed"
        },
        "item": {
          "id": "2f4fb5be-7824-4029-8ede-82ab78892995",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4326968d-98b7-48d5-91ed-daf38e5f8bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "7d3456d6-5e0d-48b1-84a9-e1184ce2edf4",
        "cursor": {
          "ref": "e1beab93-d6d6-42c7-9f79-a4fa1bfb5c63",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2cd8b0a8-00ce-422f-afc7-1edbbaedfe93"
        },
        "item": {
          "id": "7d3456d6-5e0d-48b1-84a9-e1184ce2edf4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d13b42ac-4bad-40e0-8062-6cdfba267920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "4c0744d6-4fdc-4edf-8483-ee7b223e6b68",
        "cursor": {
          "ref": "f12fc79c-bb94-4870-b64e-c06ee81ea9a9",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "095d2f3e-1086-47c5-b1e4-0bef691caddc"
        },
        "item": {
          "id": "4c0744d6-4fdc-4edf-8483-ee7b223e6b68",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c43cc69c-ca56-4e15-a4fe-c21d7e6e20ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "cd488eb5-5119-4e86-b66b-20645c95a854",
        "cursor": {
          "ref": "cd3738bd-9ce4-4f5c-a120-df974ce0ddad",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "20bcbe5f-9b49-4e57-8f2e-9b8812c6015b"
        },
        "item": {
          "id": "cd488eb5-5119-4e86-b66b-20645c95a854",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c801d28a-6b12-4060-8f44-31fcd04a6a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "746dac69-bf43-4d13-8d86-3362d5205df5",
        "cursor": {
          "ref": "cd6f91a4-27ad-444b-bde0-5daff6072182",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4d489ecf-258c-477f-ad01-7a01a8667030"
        },
        "item": {
          "id": "746dac69-bf43-4d13-8d86-3362d5205df5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "162ac2fe-c4f2-41ab-b089-0a38d2bf1798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "64b04494-4d1c-4e75-ab0d-3235fe21c058",
        "cursor": {
          "ref": "0d487039-f552-434e-bfe3-a70cd7265527",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "76d6f622-9b49-4281-98a6-98ab96dd3e7e"
        },
        "item": {
          "id": "64b04494-4d1c-4e75-ab0d-3235fe21c058",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f85f2209-65dc-4549-8380-bdba383834f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "dd9de06d-e920-411a-903d-eaa97283128d",
        "cursor": {
          "ref": "913a5f47-a179-42e4-9d54-f69ca139d75c",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c1e93bfb-ef70-41f6-b673-461aacc525b8"
        },
        "item": {
          "id": "dd9de06d-e920-411a-903d-eaa97283128d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e358c2e7-de11-42fd-9c63-3b422da2dbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "9b57cd14-1800-487d-b585-1b1e7d4259a6",
        "cursor": {
          "ref": "112245ee-1e48-4860-b217-f548485e255d",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "27bd2db2-be69-4e56-9edf-f0bc55c9732b"
        },
        "item": {
          "id": "9b57cd14-1800-487d-b585-1b1e7d4259a6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9752c910-1824-440a-98a8-4b5c611c07d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "6e102acf-bbe7-4d0e-a90f-8bb77967bc5e",
        "cursor": {
          "ref": "8b8c2c40-74c3-4933-b128-21f81dfe5c15",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8576bcb0-283b-4ff3-b921-410a397a24ed"
        },
        "item": {
          "id": "6e102acf-bbe7-4d0e-a90f-8bb77967bc5e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "71a741d0-3d23-4d7c-adfc-69e9eb336839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "977332b0-b9ae-4f9f-b8ea-185e4a9e70df",
        "cursor": {
          "ref": "92d4db24-1efa-43ef-89c3-e2f01c65aa72",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4637bb82-afad-425f-96ee-92d53b91c485"
        },
        "item": {
          "id": "977332b0-b9ae-4f9f-b8ea-185e4a9e70df",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "7768167b-315f-49f1-b7f3-2af4b2003171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a43d9515-bc20-48a4-ab68-7db367cc734c",
        "cursor": {
          "ref": "81f0960e-b754-43bd-b793-e3e68a3a651f",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1af14b11-a650-4af8-8eff-cfd0091e88f1"
        },
        "item": {
          "id": "a43d9515-bc20-48a4-ab68-7db367cc734c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "db21bfb5-a5a2-4aac-9a70-defbde145077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2af3eda9-b59a-487b-97b8-2552a5b361bb",
        "cursor": {
          "ref": "cdab4a4d-15c0-4f2c-999b-b69fba35d849",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c414db4b-5f3e-4804-8444-e7444d98e48e"
        },
        "item": {
          "id": "2af3eda9-b59a-487b-97b8-2552a5b361bb",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bd37eef6-18a4-4f93-80b0-0ba3e190986d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "235642bb-187d-49ac-9eab-b738e0fef523",
        "cursor": {
          "ref": "e6287440-e60a-4d91-82e7-44d0409ffc3d",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "678beea1-474b-49d0-b8f4-a0557203d53c"
        },
        "item": {
          "id": "235642bb-187d-49ac-9eab-b738e0fef523",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "08c1461b-b1c6-4b84-9e3d-66f8c68f79cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f2f6cd45-a6b2-4df5-bb88-5301412e76ab",
        "cursor": {
          "ref": "0768ca7d-c802-4500-a924-672d9651eb80",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e38c0394-b5d1-4339-acde-318f5f91de63"
        },
        "item": {
          "id": "f2f6cd45-a6b2-4df5-bb88-5301412e76ab",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8f60b149-bc92-4a6f-b4ee-706e0040d837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "ba4eab9e-2902-4f3d-8dbd-68bac5048a80",
        "cursor": {
          "ref": "2641bdef-1a38-425c-bcec-37c89f85bce1",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f4b33153-4c46-4af9-9326-cda6d2c13f94"
        },
        "item": {
          "id": "ba4eab9e-2902-4f3d-8dbd-68bac5048a80",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b11a3e26-85d8-40bf-88fc-a103b2360601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "476b1447-c363-476c-a702-a1f0c11670ce",
        "cursor": {
          "ref": "6543181e-0695-49f7-a6dc-6f3dccbdef4f",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ff4f372a-e9bb-4fc6-b448-c849aa87a094"
        },
        "item": {
          "id": "476b1447-c363-476c-a702-a1f0c11670ce",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c67cd689-b574-42da-884b-85a0aec38480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "0933a1ad-04b4-4a1b-b7d6-b911e45d1c89",
        "cursor": {
          "ref": "cd785feb-9f3a-4b13-a5f5-1695b254e50e",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6e5e3f0b-04e3-44bd-9562-b12a76970324"
        },
        "item": {
          "id": "0933a1ad-04b4-4a1b-b7d6-b911e45d1c89",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3efe332b-f973-4048-873a-8cdb7232888f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "3c031701-8616-44b3-b18a-47497ae20ea4",
        "cursor": {
          "ref": "92325b92-b9e0-4d32-a3cb-8ab6f03e151a",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "303bbc52-2a00-4ff9-a08c-6c11f0a6d897"
        },
        "item": {
          "id": "3c031701-8616-44b3-b18a-47497ae20ea4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f09ade0e-f942-49ec-9dd7-dc93a9cf0a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "f3ab7931-22c3-4f6f-946d-e37508191416",
        "cursor": {
          "ref": "b5e1c1aa-d273-4808-be54-e1b86f1cc965",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b89f17bc-d0b9-4155-8f7c-534ff38c87a3"
        },
        "item": {
          "id": "f3ab7931-22c3-4f6f-946d-e37508191416",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3106b2f3-7797-4da6-b9a8-588c778a1fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "b84aeda7-bff7-4981-907f-578f6b1d979d",
        "cursor": {
          "ref": "f144aa57-8d0f-4e17-938b-2180868a0bed",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "28405884-c943-45cc-a68b-77d6d2458732"
        },
        "item": {
          "id": "b84aeda7-bff7-4981-907f-578f6b1d979d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f71b046d-57ac-489d-a30d-108f77a420c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "56f4ece7-679c-49ce-a0a9-be6ac1de3b11",
        "cursor": {
          "ref": "228101bb-e604-40b8-9c9f-f9a30c5c85e0",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2fab6dee-e886-428d-bf66-7e89d8cc2016"
        },
        "item": {
          "id": "56f4ece7-679c-49ce-a0a9-be6ac1de3b11",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "542240d8-8cbd-413a-93bc-2bfa5873009c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "0f982af6-2993-4185-b52f-58ed1e6736c6",
        "cursor": {
          "ref": "d1c6c77f-5da2-49ad-99a4-2f9935f2b791",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "69e0819d-9d34-4b0d-8144-9fa021d69595"
        },
        "item": {
          "id": "0f982af6-2993-4185-b52f-58ed1e6736c6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c2e19e6b-ec82-4f79-abdc-daa0caecef4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "eb8692a8-c3d2-479c-826d-15023956ee0e",
        "cursor": {
          "ref": "24bf76a9-e183-48fd-bd11-c0507a1ebb86",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b6c990d6-9f80-4e56-bbee-8f06435ba2f9"
        },
        "item": {
          "id": "eb8692a8-c3d2-479c-826d-15023956ee0e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b9bf6d1f-9d53-4ccb-ba7c-479388186138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5259,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f255f420-f593-4c06-b00b-70facd74ae0a",
        "cursor": {
          "ref": "1c855b8b-af18-4c76-a34b-2faf54365ac3",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9783fe4a-f46f-4d77-9ee3-317fbb6eb750"
        },
        "item": {
          "id": "f255f420-f593-4c06-b00b-70facd74ae0a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e86946f6-3e76-4db9-8dbf-cc2935f3ba50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5267,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "73c83e59-0a0c-4503-b949-d8686df8a540",
        "cursor": {
          "ref": "5850a1f6-9df5-43d4-a847-9ccba0b79f97",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f194045b-e9d1-4da9-8f6b-c8397e0361fc"
        },
        "item": {
          "id": "73c83e59-0a0c-4503-b949-d8686df8a540",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8ad66e33-fda3-4395-a332-4958972989d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3838,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "76a06ea4-69cb-4750-84a8-d1b00eefab82",
        "cursor": {
          "ref": "14f2e433-3cb5-403d-b59c-ffbc2aaf63ab",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d119e436-8989-4098-a5bf-54c2b4cf86b4"
        },
        "item": {
          "id": "76a06ea4-69cb-4750-84a8-d1b00eefab82",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4f15a01d-ca41-499b-b9c9-d37356b6a8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3655,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "0b184c39-53bb-4af5-b1f9-1dd3121eb4f0",
        "cursor": {
          "ref": "81ccfc5c-072d-4f45-98e3-49072b1b3d8a",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2ca730e9-db4b-4625-85b6-d5ea474018f6"
        },
        "item": {
          "id": "0b184c39-53bb-4af5-b1f9-1dd3121eb4f0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6b64922a-bc3c-422a-a5a1-c4725bf07a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3546,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e179f82c-b496-4fa9-8a66-71f873c89432",
        "cursor": {
          "ref": "5a246814-d915-4c6d-9773-4f88862871c8",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "159085b1-21d4-45fd-8cbb-75e8142e4f1f"
        },
        "item": {
          "id": "e179f82c-b496-4fa9-8a66-71f873c89432",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6f35e994-dc6b-4551-a1db-5a1e0be7312f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e6ad1163-f292-49af-9cca-02fc779d70cf",
        "cursor": {
          "ref": "b17efb2c-9247-4097-adef-846e05eade86",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "db1fe810-f3ae-4dbc-9ac7-79b72d9e2707"
        },
        "item": {
          "id": "e6ad1163-f292-49af-9cca-02fc779d70cf",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "546ba483-7525-434a-8628-75ffcb7aeee1",
          "status": "Created",
          "code": 201,
          "responseTime": 3890,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "32575ad6-d452-4df0-8b62-b9c8d172cfb9",
        "cursor": {
          "ref": "60e1e99e-65b3-409e-980b-09c5caa53073",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1ceed3ea-4789-44e1-9837-08c213c06022"
        },
        "item": {
          "id": "32575ad6-d452-4df0-8b62-b9c8d172cfb9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4318c0f2-3531-4cdb-b38c-95bb7dc49bcf",
          "status": "Created",
          "code": 201,
          "responseTime": 4320,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8517f73c-7031-4c4d-9606-40d853c656d6",
        "cursor": {
          "ref": "41796b99-e01a-4aa6-8fe3-917be329ce7d",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "35f4efe1-3399-455d-95e2-c3e68caf8349"
        },
        "item": {
          "id": "8517f73c-7031-4c4d-9606-40d853c656d6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b605bba5-c07c-4edd-95fd-734acabbf1c5",
          "status": "Created",
          "code": 201,
          "responseTime": 4758,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "546fe4c3-6b70-4a38-af11-cf2138c2692a",
        "cursor": {
          "ref": "334cc37f-5b93-4a6c-a457-c16721315a90",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "913d4275-f71c-4e9e-865b-d50abfcfc09a"
        },
        "item": {
          "id": "546fe4c3-6b70-4a38-af11-cf2138c2692a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "192cb053-8a1d-4ac2-b406-c2a68348f08d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "47a5bc5a-6948-4b1b-9bcd-d3f7fd974ff8",
        "cursor": {
          "ref": "72a8cd5c-ca62-45e2-a264-8ca7755a1115",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b080e3a4-d04f-4b39-bb2e-56b165203914"
        },
        "item": {
          "id": "47a5bc5a-6948-4b1b-9bcd-d3f7fd974ff8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5035d771-6330-498b-8550-18da5b4ffcad",
          "status": "Created",
          "code": 201,
          "responseTime": 3638,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ec29ae01-6015-494d-8a65-cc92de024dc1",
        "cursor": {
          "ref": "01bf5d19-23d8-44e6-bb0c-efdf6c31dfd2",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "06a2a83e-bc32-4e07-a321-f15b58d52adb"
        },
        "item": {
          "id": "ec29ae01-6015-494d-8a65-cc92de024dc1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "46f58c71-5775-44a7-8ac9-e16c02d85833",
          "status": "Created",
          "code": 201,
          "responseTime": 3622,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "17e7074d-da5a-4de2-9f2d-3e90dd67fc87",
        "cursor": {
          "ref": "a379b79b-a065-4f46-b5e3-e73602fd2742",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c1a54d66-a9b8-45d1-a963-92eeb870f7d8"
        },
        "item": {
          "id": "17e7074d-da5a-4de2-9f2d-3e90dd67fc87",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "877b4a2d-3bc5-4420-98b1-c147b947d3a3",
          "status": "Created",
          "code": 201,
          "responseTime": 3777,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0ed54355-a10e-47b1-bba6-188762bdc727",
        "cursor": {
          "ref": "b43def06-dcdf-41c8-9eb7-18ba7fa97125",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b270287a-16f0-400f-bf07-4fa41287543d"
        },
        "item": {
          "id": "0ed54355-a10e-47b1-bba6-188762bdc727",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b0fafde2-a749-4c8c-bd15-7482224caf7b",
          "status": "Created",
          "code": 201,
          "responseTime": 4731,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2f0d2e3c-9f03-45d1-9ba3-e9a1e6f6b98c",
        "cursor": {
          "ref": "c4a4f026-5cff-4ed1-8fc9-1432647c93b1",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "341767d8-cc3d-4f5e-a6f7-2393b99e78b8"
        },
        "item": {
          "id": "2f0d2e3c-9f03-45d1-9ba3-e9a1e6f6b98c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c79530b8-1b3f-496f-af18-aada9c5918d7",
          "status": "Created",
          "code": 201,
          "responseTime": 4948,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e27208cf-ffc9-414b-9f48-1cdc8cb03f27",
        "cursor": {
          "ref": "d04939ca-cb58-47cf-8f71-9526123beddb",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a5c8d9e5-1a20-4c09-9788-3964396f1f3b"
        },
        "item": {
          "id": "e27208cf-ffc9-414b-9f48-1cdc8cb03f27",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7273aa7a-4e13-45ad-aadd-99aa7a9df162",
          "status": "Created",
          "code": 201,
          "responseTime": 3635,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0e7dd2b7-0343-492e-a0c2-2f7e5e2aa7bf",
        "cursor": {
          "ref": "c1e4ad05-2f9f-4a93-b74d-f541d670e4da",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f74fa660-25c3-4b1d-8f2d-fe8371b1159a"
        },
        "item": {
          "id": "0e7dd2b7-0343-492e-a0c2-2f7e5e2aa7bf",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "005bcb1e-79b0-460b-9702-4f3bcc915e8d",
          "status": "Created",
          "code": 201,
          "responseTime": 3845,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f1b4b30c-61dd-4c34-9b76-10dd96095589",
        "cursor": {
          "ref": "f4dd2e51-4741-47ce-ac2d-3032e02f9d0b",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dacf428c-c81b-4ce4-9d73-61fc79e4d84b"
        },
        "item": {
          "id": "f1b4b30c-61dd-4c34-9b76-10dd96095589",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0f147688-dee2-48c8-88ba-dde8eb0b05ba",
          "status": "Created",
          "code": 201,
          "responseTime": 3774,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "981a9a5a-85db-4748-abe3-c88160dc7671",
        "cursor": {
          "ref": "7e0d9d54-740e-4e93-b180-fa5c202d3f50",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d2999e57-3c3c-43b5-bd03-7de021babb12"
        },
        "item": {
          "id": "981a9a5a-85db-4748-abe3-c88160dc7671",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "66552caa-d321-4eb8-80a2-a83621275b04",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 2547,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 502",
              "stack": "AssertionError: expected response to have status code 422 but got 502\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "f8c8da1b-a269-4278-966e-a61385653644",
        "cursor": {
          "ref": "13ac2756-12a9-408f-9347-846eaa99edec",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b2d0fe1d-ca44-4bf3-a953-36720cedaf11"
        },
        "item": {
          "id": "f8c8da1b-a269-4278-966e-a61385653644",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cef1b660-ff42-4df5-ab5b-db96af53e7f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "cc7ef7bc-61db-4643-a367-da929d9a6d08",
        "cursor": {
          "ref": "9cd80b3c-bb1d-45da-9e86-fbfc2eebc208",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c3332f3b-f308-4f13-97d5-d181329004e8"
        },
        "item": {
          "id": "cc7ef7bc-61db-4643-a367-da929d9a6d08",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c464aeea-ad13-4b6b-a4da-c15f8815b18c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "5e10e517-5ea6-4967-b84e-e860562bcbbe",
        "cursor": {
          "ref": "1840f352-1b97-41be-8563-55fa7871a852",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "13afbd0d-93ad-4341-9cce-3238551300c2"
        },
        "item": {
          "id": "5e10e517-5ea6-4967-b84e-e860562bcbbe",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bbc983f0-00d5-46d6-8fe0-2b6d10d7a991",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "0e5cd3d1-8b84-4dee-8768-955fcc9061bc",
        "cursor": {
          "ref": "21660fc5-14ce-4349-ad89-5af5034bba9d",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e9a4ad8c-4f0a-406b-bd8d-b73a9913b8a3"
        },
        "item": {
          "id": "0e5cd3d1-8b84-4dee-8768-955fcc9061bc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "82c760ac-e128-4cb2-a6a4-d0a36f9ad1ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "bc1ca21c-23fd-4c54-a74e-5435d0897975",
        "cursor": {
          "ref": "1de5729b-4e7c-4b25-a075-310afcc37858",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8529be8c-d4f5-4899-b3c9-b8c0bd7e0afe"
        },
        "item": {
          "id": "bc1ca21c-23fd-4c54-a74e-5435d0897975",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8d07a114-a913-456b-8337-db3414df5499",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "e6b40d42-5d62-4c92-9efa-71e29a6a5246",
        "cursor": {
          "ref": "2590be43-7aac-4964-9f6f-759234c95e6b",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9ef4b051-bc88-4d7b-9ae5-48076946ed95"
        },
        "item": {
          "id": "e6b40d42-5d62-4c92-9efa-71e29a6a5246",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ccb6fcfc-ff77-462d-ab40-120e6cae5727",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "d6639fa0-5d51-432a-a309-9fe14615cd4b",
        "cursor": {
          "ref": "a16b1394-abe3-490d-ad60-017d35af35ea",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "85e09c3b-c432-4373-81c2-94fcbe359948"
        },
        "item": {
          "id": "d6639fa0-5d51-432a-a309-9fe14615cd4b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c27ad141-b333-4a8d-9375-03b6e803f257",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "d44446de-50a3-4c49-b4f1-6d70f8e31ec7",
        "cursor": {
          "ref": "fa0adf52-19cd-42d4-a611-6e7ee2bbae03",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "91aef2bd-33cd-445e-880b-14691a55ef11"
        },
        "item": {
          "id": "d44446de-50a3-4c49-b4f1-6d70f8e31ec7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3a9f390e-092a-44a6-bfa5-68b6d5d987a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "413c4a86-616e-4ffd-8bc3-141b4c21fd43",
        "cursor": {
          "ref": "6643d4fa-d09f-4e87-9c08-2c201bf8743b",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "520fa3ba-fc1d-46a0-8dff-3cc8b90b8fc6"
        },
        "item": {
          "id": "413c4a86-616e-4ffd-8bc3-141b4c21fd43",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2d215106-9b47-47e5-b1f5-d8596727bfe9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "c0e52f46-c9c8-4127-848a-d0014cb30b07",
        "cursor": {
          "ref": "d4a92172-d7a9-440e-b88d-2d30c0b9d3f8",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "186b0bca-4623-4f71-b187-c5612f8c99b1"
        },
        "item": {
          "id": "c0e52f46-c9c8-4127-848a-d0014cb30b07",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b74f1447-5d29-4421-a04f-ee75e08e2653",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "3b258aa3-9251-4a15-adda-ff684038aeb0",
        "cursor": {
          "ref": "111f5248-e8b0-42e0-a94a-9f32f72a093a",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f759b3f5-29d0-4d17-ac13-13e902ffbf55"
        },
        "item": {
          "id": "3b258aa3-9251-4a15-adda-ff684038aeb0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1e9a977d-2be2-47bf-b3c7-8dece27ac69c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2c483465-5daa-4b7e-8744-b5cac72809f7",
        "cursor": {
          "ref": "88ef09e8-8463-4393-9874-1422eff246e0",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0b8ba97a-ced9-411b-9469-825000d2e8de"
        },
        "item": {
          "id": "2c483465-5daa-4b7e-8744-b5cac72809f7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "21977060-c29a-4752-b013-9417a0f339cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "21b8a30c-5b5c-4a51-9d9c-3438e3949fe2",
        "cursor": {
          "ref": "d89da503-c5fc-4032-b34e-d6ef06098084",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f513323b-76b1-4f0b-a40d-a6904e7c70c2"
        },
        "item": {
          "id": "21b8a30c-5b5c-4a51-9d9c-3438e3949fe2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "03298a76-8664-4ccf-8063-9595490cbb85",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "fb3c6942-c79c-4bf4-a1de-242ff0844e4a",
        "cursor": {
          "ref": "fdad3bbb-f278-44fa-ad8a-0f1668936a2a",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fab1c8ac-2b54-4bdd-a7aa-4e8505fb0420"
        },
        "item": {
          "id": "fb3c6942-c79c-4bf4-a1de-242ff0844e4a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d83a568b-3dc5-4ba4-8d0b-bf8e1e2a9f21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "08cfe534-321e-4ed9-91a1-db06f06f996f",
        "cursor": {
          "ref": "9c0bf219-49b0-4bd9-a76c-652720bbd3b0",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2b99394e-0046-4d37-b882-af1e59535ec5"
        },
        "item": {
          "id": "08cfe534-321e-4ed9-91a1-db06f06f996f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "eaa04d14-54f5-4a3e-b06c-809ea318ec75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "147192cd-7853-4eda-a9a5-80079f99e3ad",
        "cursor": {
          "ref": "66ea458b-9875-4c34-867e-d175d248a288",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "02a692fb-d4aa-453d-86a8-2e6da4cb0100"
        },
        "item": {
          "id": "147192cd-7853-4eda-a9a5-80079f99e3ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "28cfb756-2ba8-457c-9971-b7360cd274b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "62f539d8-dd4b-4f7a-a325-409ac9f3bd77",
        "cursor": {
          "ref": "248cf845-a8ec-405d-85b8-803a7507a187",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f98bb84d-cbf8-4f7e-9c8f-3c243fa574a9"
        },
        "item": {
          "id": "62f539d8-dd4b-4f7a-a325-409ac9f3bd77",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c381b9f7-4243-414f-9fc8-0ff6dc3c05cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "d46d6cf4-cfa8-45c6-9750-4f7223e5748e",
        "cursor": {
          "ref": "a63cc49d-d22e-4f55-b943-4a643c93e1f5",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1dd42e3a-549a-435c-985c-eb24c8aaabac"
        },
        "item": {
          "id": "d46d6cf4-cfa8-45c6-9750-4f7223e5748e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "cb5d27a6-1bcb-4f46-b1ec-d4b3f6c8f0a4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "af97c58f-e115-4cdb-8442-4a3890c3a1a1",
        "cursor": {
          "ref": "0268da16-482c-4018-a50a-8be7fa69e87a",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b7040037-7dcc-4859-986e-43251e70fafa"
        },
        "item": {
          "id": "af97c58f-e115-4cdb-8442-4a3890c3a1a1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ab1e8b92-1ead-4ef8-a88d-e0bc2bd2884b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "c2760857-a085-4882-b5e9-a097907dc95d",
        "cursor": {
          "ref": "906c3080-84e2-4440-a286-ef34a39b58a1",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fb794e1c-a859-4347-956b-65e2e5128f5b"
        },
        "item": {
          "id": "c2760857-a085-4882-b5e9-a097907dc95d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e66917ee-cdcf-4271-aa03-3c76fb79f912",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "fa80d510-03ca-40e6-8446-f6aecc63386b",
        "cursor": {
          "ref": "da472701-69d2-4981-afeb-9994ff684c44",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8ccfcc9c-52dd-49cd-9ef1-b7077fc8f78a"
        },
        "item": {
          "id": "fa80d510-03ca-40e6-8446-f6aecc63386b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6f53d2c3-c052-49e8-9c99-65cc4fe3b830",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "4dfa8ac3-4fb2-4efc-84e8-f711ac8e35b7",
        "cursor": {
          "ref": "5ae7c737-eb14-4a19-be66-1afafd8c5e79",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4eee18a9-539d-42c6-889a-7fd8c7998dee"
        },
        "item": {
          "id": "4dfa8ac3-4fb2-4efc-84e8-f711ac8e35b7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c7ebaf93-3617-492a-a422-f4287cdec90b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "fe62838c-fdd5-46c2-8261-d60b12a25a5e",
        "cursor": {
          "ref": "c94d3c1f-e4cc-4742-afde-19f538095254",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eb04bf59-2462-4fc2-b50e-e3645af90996"
        },
        "item": {
          "id": "fe62838c-fdd5-46c2-8261-d60b12a25a5e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9f1a0013-4fb2-4129-9c2a-79c7af5a94cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "4de08ee8-2279-4b7a-8590-4f3ec159c537",
        "cursor": {
          "ref": "6ad8b81c-b82b-40fa-9447-6c8089704d17",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "69f6e79e-ae4c-4cdd-bb8a-5a02e048c1b6"
        },
        "item": {
          "id": "4de08ee8-2279-4b7a-8590-4f3ec159c537",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e65b5db5-a359-4e0f-8952-b184f7b15abb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "74ee284b-24f6-43e5-8699-ce35e5535d73",
        "cursor": {
          "ref": "c03e62dd-2cec-4a67-8419-e2b3db561952",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2483ece2-bb83-4610-b5e0-726062fe1481"
        },
        "item": {
          "id": "74ee284b-24f6-43e5-8699-ce35e5535d73",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "653103c4-06f2-42e3-9301-635004c0ad1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "0b909fd8-52f2-41a3-964c-159c2a6f3998",
        "cursor": {
          "ref": "f235af7a-7308-4b46-8a3b-02422b2f4eeb",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7f238cfe-6848-4237-a497-8b30e667abc1"
        },
        "item": {
          "id": "0b909fd8-52f2-41a3-964c-159c2a6f3998",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "54e4c317-82ec-49a9-93fb-0cf0a80d5e20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "28222597-8f3a-4d59-ae02-90487afb330c",
        "cursor": {
          "ref": "dbf7240b-35a4-4568-9cb6-a7d2f49df3a8",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8ad1548a-0c2a-4bfc-b5a5-51c3cc05f7d7"
        },
        "item": {
          "id": "28222597-8f3a-4d59-ae02-90487afb330c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b53e96cf-7c5a-44f1-bda9-5b21b563aaee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "1fe09860-c53e-4e76-9899-c1786a41434e",
        "cursor": {
          "ref": "36696efb-69af-4ebd-bec1-ea5d3c196f31",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fd6d4134-c27e-4950-bf2a-897e2f2c24d1"
        },
        "item": {
          "id": "1fe09860-c53e-4e76-9899-c1786a41434e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7b0e2a6b-c75e-40d8-91b6-c3f406882e5c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "ae5ff52a-e0f5-4bd8-8233-382e2da0fe5f",
        "cursor": {
          "ref": "26fa33e0-a5f5-49b1-93a1-37336b5f6a9f",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bfb32f8a-d450-4177-ae5e-c00c7943bce5"
        },
        "item": {
          "id": "ae5ff52a-e0f5-4bd8-8233-382e2da0fe5f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "078c031f-024d-4f99-8edc-edc942de47ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "8916ef7b-9bc2-4a6d-8657-2d69a8a27859",
        "cursor": {
          "ref": "3aa79995-ba84-4f33-982f-ec78342be9e7",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6f9623bc-b146-46fc-8c9f-e3dd3f22bf28"
        },
        "item": {
          "id": "8916ef7b-9bc2-4a6d-8657-2d69a8a27859",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f51bb847-bc62-41b0-8c03-f318c9a1634e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "1b794db8-2b5d-4788-a67b-178002bfa899",
        "cursor": {
          "ref": "46262a7d-b9c4-4599-862e-501158da91af",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c754cf8b-4b08-40cd-acd7-407da23cfe36"
        },
        "item": {
          "id": "1b794db8-2b5d-4788-a67b-178002bfa899",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "bbac0a05-59df-433b-9854-d7573dc08cc8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "d6ab47a2-12c9-481d-a6c3-f9c6a253c65a",
        "cursor": {
          "ref": "c1340f44-e71f-4506-bd93-b1e9ba3aa5da",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4e6b9d50-202c-4018-b801-326578addc9b"
        },
        "item": {
          "id": "d6ab47a2-12c9-481d-a6c3-f9c6a253c65a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "61049abd-84dd-46af-9157-47509d5a4e44",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "f77583bc-87cd-4e41-a2d9-4d8d05d8b2d5",
        "cursor": {
          "ref": "9ce760e4-1fe0-4cf0-8d59-bbea827b79af",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bbb13cb2-cd7e-419d-85c4-2b940cd689d8"
        },
        "item": {
          "id": "f77583bc-87cd-4e41-a2d9-4d8d05d8b2d5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d4558477-9a3d-4235-a506-292c4bcd7c7f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "4b96717d-c0d5-4711-8339-e0637e4bfa3e",
        "cursor": {
          "ref": "872d876f-9748-4df0-a0f3-d54a9ab8d424",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9c3889a4-cd8a-4200-8376-b8ffbd3017e9"
        },
        "item": {
          "id": "4b96717d-c0d5-4711-8339-e0637e4bfa3e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "43454a8a-6d60-49fc-9cb2-078499e6339a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "0f8759c0-f56a-4c71-8f38-68003b05eead",
        "cursor": {
          "ref": "5107d0ae-9120-42b8-bc64-18d74559904e",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4ec50605-2cb3-4711-8caa-968117023098"
        },
        "item": {
          "id": "0f8759c0-f56a-4c71-8f38-68003b05eead",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ac3af88b-82ec-4dde-b9e6-b5a7b2c2640f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "27736424-618f-4f0c-b4df-a49c50b6fda9",
        "cursor": {
          "ref": "24a72847-aebb-4133-8479-e89b0792fef8",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e0e8bb80-dc53-484b-ace4-7a668711c83b"
        },
        "item": {
          "id": "27736424-618f-4f0c-b4df-a49c50b6fda9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "bd6a1aa6-4621-4908-9f4d-5e4ed4b63f9a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "9564c033-2005-455a-9349-742e058092bb",
        "cursor": {
          "ref": "eb487f64-6b9c-4ffe-81f8-729b46b1432b",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "450bf4fe-574d-4c58-9eb5-c3eec8eb04bd"
        },
        "item": {
          "id": "9564c033-2005-455a-9349-742e058092bb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "82a34961-b374-44e4-b397-e69b49070de4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "e97731f8-8ac8-4a7c-a2f1-0b6548890609",
        "cursor": {
          "ref": "867f18fb-b471-4ede-91a6-7099d7673810",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "41d83a1d-c7a1-4cec-91f0-f030edf360de"
        },
        "item": {
          "id": "e97731f8-8ac8-4a7c-a2f1-0b6548890609",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "614344de-6753-4dbf-8710-9d0335574a91",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "619357c1-4e7e-46a9-9353-d9c3fee42e4f",
        "cursor": {
          "ref": "fd4a1e70-00b8-4431-8a65-0089b132c803",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "35b53df0-35af-417c-926e-b9cb1ec22f0f"
        },
        "item": {
          "id": "619357c1-4e7e-46a9-9353-d9c3fee42e4f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b4d58f11-6f01-46df-bd26-3ce79dcc0e3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "6ca4515e-524f-455b-9c8e-118d58b72bf9",
        "cursor": {
          "ref": "515ee930-3f6a-42da-96bd-bcee975e4697",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "463c33c8-7d2a-4b4f-8460-31a45dbf6b1c"
        },
        "item": {
          "id": "6ca4515e-524f-455b-9c8e-118d58b72bf9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d3bffa96-c3f1-48b6-b3ac-51b18ed86483",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "5803c55e-715f-4415-9200-759bf399f634",
        "cursor": {
          "ref": "04db1984-c55a-4885-b539-90eadc03262d",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d432eef1-4637-4631-b8e2-b3b0592bb0a5"
        },
        "item": {
          "id": "5803c55e-715f-4415-9200-759bf399f634",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2b9de24d-b1b5-451a-aba8-3b40f0128166",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "59f966b2-e268-417a-a945-a3cf50ec88c1",
        "cursor": {
          "ref": "3048c5cb-8b8b-4392-a770-1f42c5a15292",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d0148b76-49dc-4d91-8528-acedb51bb89b"
        },
        "item": {
          "id": "59f966b2-e268-417a-a945-a3cf50ec88c1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bf34410f-b6d0-4b69-87dd-340fddf52920",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "671a36b8-e885-4e9e-a7d7-60abf3d84d4e",
        "cursor": {
          "ref": "473c3f2e-91ac-414d-a6bf-93ad81d8d34d",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9ca43315-a634-448e-9742-118de678d7c0"
        },
        "item": {
          "id": "671a36b8-e885-4e9e-a7d7-60abf3d84d4e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7b8a0144-76b4-4783-b7c3-63179659dd83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "d58697dd-cc47-45a7-97b5-108f34dd4035",
        "cursor": {
          "ref": "22b26042-868b-44f8-8adc-9cf5bd8bfb60",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8a1db67e-181c-46eb-9ec6-24fa6b1c029d"
        },
        "item": {
          "id": "d58697dd-cc47-45a7-97b5-108f34dd4035",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "57654e58-6324-4c5d-ac8e-d4d97697dc02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "07b5eee9-456d-450b-ae65-4e5e0f3b1fe9",
        "cursor": {
          "ref": "d08873e4-2365-4f0c-a34a-cbe1ea9f57da",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b79dad1a-fd02-44ff-bcd2-237464f0a506"
        },
        "item": {
          "id": "07b5eee9-456d-450b-ae65-4e5e0f3b1fe9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8f73ecbb-04e3-461c-b849-7f6edd764441",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "84dce58d-336a-4a6d-ad0a-875dad3e5c30",
        "cursor": {
          "ref": "cdf9d965-0278-4742-a90e-48db4eed6018",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a4579546-a482-4c78-bea7-5fbc3e471d8f"
        },
        "item": {
          "id": "84dce58d-336a-4a6d-ad0a-875dad3e5c30",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2d12ab30-9a35-472c-912c-13f3f84b85a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "6c3c69e1-4a21-4cdd-8d24-fdd2cddb3a10",
        "cursor": {
          "ref": "44df4e80-5269-47f3-a35c-2bd8d1aac27e",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6ef5576c-7a61-4069-a14a-604ef1d2fcb0"
        },
        "item": {
          "id": "6c3c69e1-4a21-4cdd-8d24-fdd2cddb3a10",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ee5e0cb3-1da2-49c8-a811-ab7097c5dab0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "8df92ec7-c4ce-437d-b5c8-80f8c7501e66",
        "cursor": {
          "ref": "4d74c30a-6d06-4cec-a2ec-98c03fcc3408",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e16a53b7-7703-40e0-85e8-9f916bda2ed8"
        },
        "item": {
          "id": "8df92ec7-c4ce-437d-b5c8-80f8c7501e66",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5a9cfed0-7676-43e0-9a4f-cfac04b426c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "8089c1a7-1263-4317-81ab-ebd49f98dad1",
        "cursor": {
          "ref": "339b3678-c09a-4745-b3d4-e0ef46ed194d",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1b07744c-15a9-4a81-87c1-039f18fab4e1"
        },
        "item": {
          "id": "8089c1a7-1263-4317-81ab-ebd49f98dad1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "79aa30cf-0d7d-4cd5-93c1-e2e08bee6c84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "317c0e7e-64a0-448f-95d9-7eae99c98404",
        "cursor": {
          "ref": "2022a3da-c953-404f-9687-c84bf131ca47",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1c4fb3c2-1469-47d9-ab39-27e8a9e53f33"
        },
        "item": {
          "id": "317c0e7e-64a0-448f-95d9-7eae99c98404",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "533a2a9c-5e10-4fe9-8124-2abeb29716ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "72a51f4a-5e15-4381-a677-167188d8e9c1",
        "cursor": {
          "ref": "10e54741-7e38-4922-ad3c-ff5cb0edb21e",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f4868892-a24d-42cf-8abb-034e77d8e82f"
        },
        "item": {
          "id": "72a51f4a-5e15-4381-a677-167188d8e9c1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "597ac302-fb60-4bbb-afa5-391ea403ac29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "099b3eda-99c1-4c1a-aafa-37dd4e35f753",
        "cursor": {
          "ref": "d5962e34-f37d-434f-a4b1-7a27b9f4c07d",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8414706e-bc16-44b5-bf6f-bb7773e45fad"
        },
        "item": {
          "id": "099b3eda-99c1-4c1a-aafa-37dd4e35f753",
          "name": "credentials_issue"
        },
        "response": {
          "id": "188331af-2b48-4eaf-9eb3-bcba513ce3a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "04bd9fcb-e5c7-405a-83e6-2b10deb35922",
        "cursor": {
          "ref": "00eb3a47-cc95-4515-a216-1aee4083a447",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6b937d95-41ab-40a6-883e-103e2fb328dd"
        },
        "item": {
          "id": "04bd9fcb-e5c7-405a-83e6-2b10deb35922",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9421c92c-a727-491e-b256-76a4e081322d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "95008640-02c0-4f69-9443-336475423956",
        "cursor": {
          "ref": "8932c9a1-ee1c-473f-b600-4e88a2198b04",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c79eea3c-0b92-4aa7-b9bf-834c5572e5bb"
        },
        "item": {
          "id": "95008640-02c0-4f69-9443-336475423956",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fc6dd87d-5a16-4d4a-9010-2c06d234aedc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "79620ee1-8c30-4a1f-98f6-c6ce9a3ac4b9",
        "cursor": {
          "ref": "d92c83a7-7df9-4391-b9c9-224f6a422097",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b40d203f-8299-45dd-b0fa-e2c432715266"
        },
        "item": {
          "id": "79620ee1-8c30-4a1f-98f6-c6ce9a3ac4b9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8f74e728-9802-4ab2-bada-3acd6c78452b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "2f4cfc98-d49c-40d2-88be-0ad7fdc9b4fb",
        "cursor": {
          "ref": "d4ef6277-c0c5-4e3a-96dc-5d9792abdced",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3c0e3994-55e8-4dd6-9c7f-0740066998ea"
        },
        "item": {
          "id": "2f4cfc98-d49c-40d2-88be-0ad7fdc9b4fb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "363c4284-0619-410b-adfb-c1d278d6ab23",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 45,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "8847d5d3-d4f3-4a8b-b2b1-50528371952c",
        "cursor": {
          "ref": "01d30d76-be08-444e-8428-8e2fa6e17d62",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "797f5b99-326e-4783-a16c-551c95b75a3d"
        },
        "item": {
          "id": "8847d5d3-d4f3-4a8b-b2b1-50528371952c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "80df2782-2223-415e-8961-37c1ef4cc04f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "8847d5d3-d4f3-4a8b-b2b1-50528371952c",
        "cursor": {
          "ref": "01d30d76-be08-444e-8428-8e2fa6e17d62",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "797f5b99-326e-4783-a16c-551c95b75a3d"
        },
        "item": {
          "id": "8847d5d3-d4f3-4a8b-b2b1-50528371952c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "80df2782-2223-415e-8961-37c1ef4cc04f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0be0e848-3fcc-441c-b737-d4fe26fde26b",
        "cursor": {
          "ref": "b5bdfb2a-c4fe-454b-8583-2759fd90bbf3",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a545a319-248c-4432-829a-6aeb5199f007"
        },
        "item": {
          "id": "0be0e848-3fcc-441c-b737-d4fe26fde26b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "55bdd009-6d70-4ffb-9541-786fe1089eb0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "0be0e848-3fcc-441c-b737-d4fe26fde26b",
        "cursor": {
          "ref": "b5bdfb2a-c4fe-454b-8583-2759fd90bbf3",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a545a319-248c-4432-829a-6aeb5199f007"
        },
        "item": {
          "id": "0be0e848-3fcc-441c-b737-d4fe26fde26b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "55bdd009-6d70-4ffb-9541-786fe1089eb0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "66f45967-4e86-40d3-add8-faa686c0c17f",
        "cursor": {
          "ref": "ac70f955-a4d0-4010-a45d-2e3ecaa91c22",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "52ac26eb-7227-42df-8341-c6b34913fa9f"
        },
        "item": {
          "id": "66f45967-4e86-40d3-add8-faa686c0c17f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9e04c9e9-7a44-413a-8aa4-fdc96e265c81",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "66f45967-4e86-40d3-add8-faa686c0c17f",
        "cursor": {
          "ref": "ac70f955-a4d0-4010-a45d-2e3ecaa91c22",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "52ac26eb-7227-42df-8341-c6b34913fa9f"
        },
        "item": {
          "id": "66f45967-4e86-40d3-add8-faa686c0c17f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9e04c9e9-7a44-413a-8aa4-fdc96e265c81",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "4a4fe3ea-9b44-4218-ac27-6b0ddbf5860f",
        "cursor": {
          "ref": "dae586fb-ec63-497e-b364-44c723b62f51",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8f168783-137b-44f8-8371-e3460bdd51bb"
        },
        "item": {
          "id": "4a4fe3ea-9b44-4218-ac27-6b0ddbf5860f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1829d6ec-2986-4df1-bc02-baa6984ea571",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "4a4fe3ea-9b44-4218-ac27-6b0ddbf5860f",
        "cursor": {
          "ref": "dae586fb-ec63-497e-b364-44c723b62f51",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8f168783-137b-44f8-8371-e3460bdd51bb"
        },
        "item": {
          "id": "4a4fe3ea-9b44-4218-ac27-6b0ddbf5860f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1829d6ec-2986-4df1-bc02-baa6984ea571",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "86d48791-8fb7-4367-87af-1c7968f3b495",
        "cursor": {
          "ref": "1acef58a-a912-467a-9188-3f45af013f34",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "be9f1c34-da7b-4030-8a7b-a99e5c483725"
        },
        "item": {
          "id": "86d48791-8fb7-4367-87af-1c7968f3b495",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5bda58cb-0b95-42c2-b09e-f66f5b43f931",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "86d48791-8fb7-4367-87af-1c7968f3b495",
        "cursor": {
          "ref": "1acef58a-a912-467a-9188-3f45af013f34",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "be9f1c34-da7b-4030-8a7b-a99e5c483725"
        },
        "item": {
          "id": "86d48791-8fb7-4367-87af-1c7968f3b495",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5bda58cb-0b95-42c2-b09e-f66f5b43f931",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "6001033a-ef64-4ef8-b674-4a5412855262",
        "cursor": {
          "ref": "5d811203-f474-465f-b4a3-983d42aa8f84",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "87fbdba9-7da0-4f20-bd1c-360a8613e171"
        },
        "item": {
          "id": "6001033a-ef64-4ef8-b674-4a5412855262",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "64704973-35f6-479e-bf5c-26595531bbf0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "6001033a-ef64-4ef8-b674-4a5412855262",
        "cursor": {
          "ref": "5d811203-f474-465f-b4a3-983d42aa8f84",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "87fbdba9-7da0-4f20-bd1c-360a8613e171"
        },
        "item": {
          "id": "6001033a-ef64-4ef8-b674-4a5412855262",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "64704973-35f6-479e-bf5c-26595531bbf0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "34055dae-3d99-4dde-8634-fc54a195e419",
        "cursor": {
          "ref": "5d08c1d5-7ffa-4cf0-a81b-87785cbccdc4",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ca6eb899-1443-4980-a572-af99cf206a1e"
        },
        "item": {
          "id": "34055dae-3d99-4dde-8634-fc54a195e419",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1d784a97-8401-449e-9159-dbdbc8e72078",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "34055dae-3d99-4dde-8634-fc54a195e419",
        "cursor": {
          "ref": "5d08c1d5-7ffa-4cf0-a81b-87785cbccdc4",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ca6eb899-1443-4980-a572-af99cf206a1e"
        },
        "item": {
          "id": "34055dae-3d99-4dde-8634-fc54a195e419",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1d784a97-8401-449e-9159-dbdbc8e72078",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "eeadc9e3-31bd-4937-8e11-9eb8ab34f606",
        "cursor": {
          "ref": "4217d483-d9a0-4c3d-89d6-427baec65c2b",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9bb276a1-7065-4f11-b427-7f937acca0d8"
        },
        "item": {
          "id": "eeadc9e3-31bd-4937-8e11-9eb8ab34f606",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2145929d-87ca-480b-8d34-6052ca1febc0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "eeadc9e3-31bd-4937-8e11-9eb8ab34f606",
        "cursor": {
          "ref": "4217d483-d9a0-4c3d-89d6-427baec65c2b",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9bb276a1-7065-4f11-b427-7f937acca0d8"
        },
        "item": {
          "id": "eeadc9e3-31bd-4937-8e11-9eb8ab34f606",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2145929d-87ca-480b-8d34-6052ca1febc0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "8096fb7d-046f-4186-98dc-f72e94b0d87b",
        "cursor": {
          "ref": "427c217e-d571-465f-93d4-ab859107ff3a",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e79f28a2-a3a7-483d-966c-944b605cacbd"
        },
        "item": {
          "id": "8096fb7d-046f-4186-98dc-f72e94b0d87b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "418171a2-5554-42fe-8a6d-d233762e4bc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "8096fb7d-046f-4186-98dc-f72e94b0d87b",
        "cursor": {
          "ref": "427c217e-d571-465f-93d4-ab859107ff3a",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e79f28a2-a3a7-483d-966c-944b605cacbd"
        },
        "item": {
          "id": "8096fb7d-046f-4186-98dc-f72e94b0d87b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "418171a2-5554-42fe-8a6d-d233762e4bc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "f4822650-29f3-4b69-a7c8-c4785474c0f2",
        "cursor": {
          "ref": "2150d381-a5d3-4c0b-9361-b4812ececa8e",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "733d4cda-7b5b-4621-84b4-1f92641d73dc"
        },
        "item": {
          "id": "f4822650-29f3-4b69-a7c8-c4785474c0f2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "304fd251-53fe-4265-90bd-44a6c0bfc04f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "f4822650-29f3-4b69-a7c8-c4785474c0f2",
        "cursor": {
          "ref": "2150d381-a5d3-4c0b-9361-b4812ececa8e",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "733d4cda-7b5b-4621-84b4-1f92641d73dc"
        },
        "item": {
          "id": "f4822650-29f3-4b69-a7c8-c4785474c0f2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "304fd251-53fe-4265-90bd-44a6c0bfc04f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "77c43d34-ebe7-4bb5-b6a4-44e3c177b28b",
        "cursor": {
          "ref": "069ec1f7-1d1a-4d3c-9716-814eda131318",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bce10142-3eab-43f4-9ac1-fa191994a799"
        },
        "item": {
          "id": "77c43d34-ebe7-4bb5-b6a4-44e3c177b28b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ecfda3af-2b4f-4fb3-ae92-62d98e0e9865",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "77c43d34-ebe7-4bb5-b6a4-44e3c177b28b",
        "cursor": {
          "ref": "069ec1f7-1d1a-4d3c-9716-814eda131318",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bce10142-3eab-43f4-9ac1-fa191994a799"
        },
        "item": {
          "id": "77c43d34-ebe7-4bb5-b6a4-44e3c177b28b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ecfda3af-2b4f-4fb3-ae92-62d98e0e9865",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "0e798fa5-b1ac-4462-94ce-8a42a02180aa",
        "cursor": {
          "ref": "6f6a1088-be7c-41e6-8a02-fdc2cf72f51f",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e5674c65-68f3-4ac2-bfd1-cb84c6258e98"
        },
        "item": {
          "id": "0e798fa5-b1ac-4462-94ce-8a42a02180aa",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "226286ed-bf2f-4fcc-b046-6d151abb8233",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0e798fa5-b1ac-4462-94ce-8a42a02180aa",
        "cursor": {
          "ref": "6f6a1088-be7c-41e6-8a02-fdc2cf72f51f",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e5674c65-68f3-4ac2-bfd1-cb84c6258e98"
        },
        "item": {
          "id": "0e798fa5-b1ac-4462-94ce-8a42a02180aa",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "226286ed-bf2f-4fcc-b046-6d151abb8233",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "364aae59-6823-419e-a31d-4620c47b9d25",
        "cursor": {
          "ref": "5cae013a-70b6-4121-b8bd-c5e07bbe7497",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9fd1da94-4629-4cf8-ba2f-254680fc284d"
        },
        "item": {
          "id": "364aae59-6823-419e-a31d-4620c47b9d25",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d2cba0a9-ed16-48fc-8f03-48ff5a7ce3ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "364aae59-6823-419e-a31d-4620c47b9d25",
        "cursor": {
          "ref": "5cae013a-70b6-4121-b8bd-c5e07bbe7497",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9fd1da94-4629-4cf8-ba2f-254680fc284d"
        },
        "item": {
          "id": "364aae59-6823-419e-a31d-4620c47b9d25",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d2cba0a9-ed16-48fc-8f03-48ff5a7ce3ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "41152386-60ab-4c1e-844e-f24b44f9dbd8",
        "cursor": {
          "ref": "44ed7844-1ae1-46df-8f89-63e0bb1c5928",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4f8fcbb4-2866-4ef8-9d57-655d42f5800b"
        },
        "item": {
          "id": "41152386-60ab-4c1e-844e-f24b44f9dbd8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "38c1498a-47d1-4155-a9c0-3bb6f07b886d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "41152386-60ab-4c1e-844e-f24b44f9dbd8",
        "cursor": {
          "ref": "44ed7844-1ae1-46df-8f89-63e0bb1c5928",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4f8fcbb4-2866-4ef8-9d57-655d42f5800b"
        },
        "item": {
          "id": "41152386-60ab-4c1e-844e-f24b44f9dbd8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "38c1498a-47d1-4155-a9c0-3bb6f07b886d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "1fa2e072-fdc9-44d6-8821-ee2707a46e86",
        "cursor": {
          "ref": "f826d947-32ff-43a0-8292-ff8c978a4188",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d5d2bfce-9dbc-4603-968b-1f0ce34ddfd8"
        },
        "item": {
          "id": "1fa2e072-fdc9-44d6-8821-ee2707a46e86",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "039a5206-dc59-4df8-b6b0-fa80e77a1264",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "1fa2e072-fdc9-44d6-8821-ee2707a46e86",
        "cursor": {
          "ref": "f826d947-32ff-43a0-8292-ff8c978a4188",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d5d2bfce-9dbc-4603-968b-1f0ce34ddfd8"
        },
        "item": {
          "id": "1fa2e072-fdc9-44d6-8821-ee2707a46e86",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "039a5206-dc59-4df8-b6b0-fa80e77a1264",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "9c33a4fa-b6e5-45cf-a47f-03fae386ecc1",
        "cursor": {
          "ref": "2ddd641d-4d29-45ed-94c4-70ad19e9990e",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "974cf7b9-9a43-44ba-9d8b-4f5220c5fe77"
        },
        "item": {
          "id": "9c33a4fa-b6e5-45cf-a47f-03fae386ecc1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c917a983-a4a1-4a76-8f7d-46435fe3c93a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "9c33a4fa-b6e5-45cf-a47f-03fae386ecc1",
        "cursor": {
          "ref": "2ddd641d-4d29-45ed-94c4-70ad19e9990e",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "974cf7b9-9a43-44ba-9d8b-4f5220c5fe77"
        },
        "item": {
          "id": "9c33a4fa-b6e5-45cf-a47f-03fae386ecc1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c917a983-a4a1-4a76-8f7d-46435fe3c93a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "dcd38553-8939-4ec9-b910-e5e5fdba5303",
        "cursor": {
          "ref": "9828ae1d-4c0d-43a5-8e46-dbb84ae07f6e",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "91d0c227-a5e0-45ca-bd32-eb5c85f2b772"
        },
        "item": {
          "id": "dcd38553-8939-4ec9-b910-e5e5fdba5303",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c4799b91-2741-4a4b-97be-1fff7212a5f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "dcd38553-8939-4ec9-b910-e5e5fdba5303",
        "cursor": {
          "ref": "9828ae1d-4c0d-43a5-8e46-dbb84ae07f6e",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "91d0c227-a5e0-45ca-bd32-eb5c85f2b772"
        },
        "item": {
          "id": "dcd38553-8939-4ec9-b910-e5e5fdba5303",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c4799b91-2741-4a4b-97be-1fff7212a5f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "816ea7a5-79c8-41d4-8713-4309dab21e30",
        "cursor": {
          "ref": "3e8e011f-6cb3-4a9c-85ac-4621e584d396",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cafee3e2-3fc3-401d-b817-b708694e6e0f"
        },
        "item": {
          "id": "816ea7a5-79c8-41d4-8713-4309dab21e30",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "70e17452-a675-4742-925c-c0abbfd9f5f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "816ea7a5-79c8-41d4-8713-4309dab21e30",
        "cursor": {
          "ref": "3e8e011f-6cb3-4a9c-85ac-4621e584d396",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cafee3e2-3fc3-401d-b817-b708694e6e0f"
        },
        "item": {
          "id": "816ea7a5-79c8-41d4-8713-4309dab21e30",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "70e17452-a675-4742-925c-c0abbfd9f5f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "05198b22-4e80-4b26-8fa9-2f425630614a",
        "cursor": {
          "ref": "c215a078-f494-4064-a10f-6022b42a2146",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "66e20043-4505-402a-85b5-b93944b985ea"
        },
        "item": {
          "id": "05198b22-4e80-4b26-8fa9-2f425630614a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6a7ac166-66cb-464e-9f8c-fbc027438cb2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "05198b22-4e80-4b26-8fa9-2f425630614a",
        "cursor": {
          "ref": "c215a078-f494-4064-a10f-6022b42a2146",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "66e20043-4505-402a-85b5-b93944b985ea"
        },
        "item": {
          "id": "05198b22-4e80-4b26-8fa9-2f425630614a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6a7ac166-66cb-464e-9f8c-fbc027438cb2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "2c91de47-d571-4322-b35d-4ed711ba2618",
        "cursor": {
          "ref": "deed2025-c3a4-400e-9872-6d61905fdfd9",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "224dd4ad-0153-40fa-a1f9-8e0da762696c"
        },
        "item": {
          "id": "2c91de47-d571-4322-b35d-4ed711ba2618",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0d71b3dc-055f-4631-9d72-63764e718258",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "2c91de47-d571-4322-b35d-4ed711ba2618",
        "cursor": {
          "ref": "deed2025-c3a4-400e-9872-6d61905fdfd9",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "224dd4ad-0153-40fa-a1f9-8e0da762696c"
        },
        "item": {
          "id": "2c91de47-d571-4322-b35d-4ed711ba2618",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0d71b3dc-055f-4631-9d72-63764e718258",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c02d5b99-80df-483c-8247-bda5e6f6face",
        "cursor": {
          "ref": "b9084444-9c2f-43ef-9500-63f8eaac708a",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "022af250-885f-4fba-a3cb-65f6783d03fb"
        },
        "item": {
          "id": "c02d5b99-80df-483c-8247-bda5e6f6face",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8b1700a5-086a-410a-9338-db62203e8669",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c02d5b99-80df-483c-8247-bda5e6f6face",
        "cursor": {
          "ref": "b9084444-9c2f-43ef-9500-63f8eaac708a",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "022af250-885f-4fba-a3cb-65f6783d03fb"
        },
        "item": {
          "id": "c02d5b99-80df-483c-8247-bda5e6f6face",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8b1700a5-086a-410a-9338-db62203e8669",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b3f33a06-6291-4b9a-b7b8-15c735259f53",
        "cursor": {
          "ref": "50422886-9fdb-432d-90a2-90ce4c5bcd9b",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f72fec9b-2e0f-45e2-bf04-7ea74b813033"
        },
        "item": {
          "id": "b3f33a06-6291-4b9a-b7b8-15c735259f53",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ac10bd17-c638-45a3-8b60-f90fa7cec701",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "b3f33a06-6291-4b9a-b7b8-15c735259f53",
        "cursor": {
          "ref": "50422886-9fdb-432d-90a2-90ce4c5bcd9b",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f72fec9b-2e0f-45e2-bf04-7ea74b813033"
        },
        "item": {
          "id": "b3f33a06-6291-4b9a-b7b8-15c735259f53",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ac10bd17-c638-45a3-8b60-f90fa7cec701",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "dcfa75dc-1a6e-4a39-bc89-a24ba954de87",
        "cursor": {
          "ref": "6d3c7567-b3bc-4e67-8ba1-5e64fa52790a",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1888d05e-7218-40d1-ba4e-3f3339ed8a85"
        },
        "item": {
          "id": "dcfa75dc-1a6e-4a39-bc89-a24ba954de87",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "db63f8b7-2937-4402-a5cd-bb98ed7bb613",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "dcfa75dc-1a6e-4a39-bc89-a24ba954de87",
        "cursor": {
          "ref": "6d3c7567-b3bc-4e67-8ba1-5e64fa52790a",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1888d05e-7218-40d1-ba4e-3f3339ed8a85"
        },
        "item": {
          "id": "dcfa75dc-1a6e-4a39-bc89-a24ba954de87",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "db63f8b7-2937-4402-a5cd-bb98ed7bb613",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "e80fd0a6-fa1f-40c7-8aff-acf7f61908dd",
        "cursor": {
          "ref": "57944948-3936-4d0c-9d16-ff30bd991a62",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5318cec4-36c6-4a1a-a027-5dfe4c55b475"
        },
        "item": {
          "id": "e80fd0a6-fa1f-40c7-8aff-acf7f61908dd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "114e8c96-3ab6-4881-b8d2-2a49fa8750a4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "e80fd0a6-fa1f-40c7-8aff-acf7f61908dd",
        "cursor": {
          "ref": "57944948-3936-4d0c-9d16-ff30bd991a62",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5318cec4-36c6-4a1a-a027-5dfe4c55b475"
        },
        "item": {
          "id": "e80fd0a6-fa1f-40c7-8aff-acf7f61908dd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "114e8c96-3ab6-4881-b8d2-2a49fa8750a4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "a7041a3f-67c9-4457-8e43-e01ff22b1e2e",
        "cursor": {
          "ref": "7d2da349-78d4-421a-b36a-85cb037e0bab",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "10208042-5f07-43d6-bb3d-a7ab71a0e86f"
        },
        "item": {
          "id": "a7041a3f-67c9-4457-8e43-e01ff22b1e2e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "597cf43f-c204-43d6-a234-72c4c58c2c7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a7041a3f-67c9-4457-8e43-e01ff22b1e2e",
        "cursor": {
          "ref": "7d2da349-78d4-421a-b36a-85cb037e0bab",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "10208042-5f07-43d6-bb3d-a7ab71a0e86f"
        },
        "item": {
          "id": "a7041a3f-67c9-4457-8e43-e01ff22b1e2e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "597cf43f-c204-43d6-a234-72c4c58c2c7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "7b6269d4-c385-4e68-ae8b-788881a7839a",
        "cursor": {
          "ref": "cc8ff54b-3594-492a-9fc1-d79c29974fab",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d8db33b2-b57f-4afd-88e3-5740d71d59a1"
        },
        "item": {
          "id": "7b6269d4-c385-4e68-ae8b-788881a7839a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c7b9fc96-fcb8-48a3-8a68-ec64d56410ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7b6269d4-c385-4e68-ae8b-788881a7839a",
        "cursor": {
          "ref": "cc8ff54b-3594-492a-9fc1-d79c29974fab",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d8db33b2-b57f-4afd-88e3-5740d71d59a1"
        },
        "item": {
          "id": "7b6269d4-c385-4e68-ae8b-788881a7839a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c7b9fc96-fcb8-48a3-8a68-ec64d56410ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "f988a296-ab7b-4965-8be0-c6d1d279d17f",
        "cursor": {
          "ref": "6a182900-f5db-4d3c-8624-8210c61d0ab8",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f7f749d2-7552-41bc-a889-1b8ef9defe52"
        },
        "item": {
          "id": "f988a296-ab7b-4965-8be0-c6d1d279d17f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "96a6af41-2132-42f2-9ecc-0dd0f6f86f8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "f988a296-ab7b-4965-8be0-c6d1d279d17f",
        "cursor": {
          "ref": "6a182900-f5db-4d3c-8624-8210c61d0ab8",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f7f749d2-7552-41bc-a889-1b8ef9defe52"
        },
        "item": {
          "id": "f988a296-ab7b-4965-8be0-c6d1d279d17f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "96a6af41-2132-42f2-9ecc-0dd0f6f86f8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "c1e27e6a-daaa-4d3c-aa8f-040df6e731d2",
        "cursor": {
          "ref": "ec02caf4-9057-4b46-95f3-0a87ade90811",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "63daf875-b661-4a2c-b4a6-c199cddef085"
        },
        "item": {
          "id": "c1e27e6a-daaa-4d3c-aa8f-040df6e731d2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4b788b6e-e192-4091-95d0-9007be229e33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c1e27e6a-daaa-4d3c-aa8f-040df6e731d2",
        "cursor": {
          "ref": "ec02caf4-9057-4b46-95f3-0a87ade90811",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "63daf875-b661-4a2c-b4a6-c199cddef085"
        },
        "item": {
          "id": "c1e27e6a-daaa-4d3c-aa8f-040df6e731d2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4b788b6e-e192-4091-95d0-9007be229e33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "421c9bc7-18c9-4dfc-a41c-b36e3d922622",
        "cursor": {
          "ref": "d55138a1-499a-4385-b6e0-81134f001602",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "03a786d3-4953-4c1d-aad4-80ba41fc0e47"
        },
        "item": {
          "id": "421c9bc7-18c9-4dfc-a41c-b36e3d922622",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dcbeeb6a-f10a-42ab-a6d2-687cfda0efd7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "421c9bc7-18c9-4dfc-a41c-b36e3d922622",
        "cursor": {
          "ref": "d55138a1-499a-4385-b6e0-81134f001602",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "03a786d3-4953-4c1d-aad4-80ba41fc0e47"
        },
        "item": {
          "id": "421c9bc7-18c9-4dfc-a41c-b36e3d922622",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dcbeeb6a-f10a-42ab-a6d2-687cfda0efd7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "aacf78d1-1e2a-4f53-815e-b6f704d4492e",
        "cursor": {
          "ref": "5a553ed1-658a-4413-96e3-3b859a1f24c1",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f43ff04b-3db5-4eb1-901b-41be7ba519b4"
        },
        "item": {
          "id": "aacf78d1-1e2a-4f53-815e-b6f704d4492e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8a578490-ed7b-4e39-b482-b64e45052472",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "aacf78d1-1e2a-4f53-815e-b6f704d4492e",
        "cursor": {
          "ref": "5a553ed1-658a-4413-96e3-3b859a1f24c1",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f43ff04b-3db5-4eb1-901b-41be7ba519b4"
        },
        "item": {
          "id": "aacf78d1-1e2a-4f53-815e-b6f704d4492e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8a578490-ed7b-4e39-b482-b64e45052472",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "97e12af2-d297-4ec3-8a5b-a17a56a07082",
        "cursor": {
          "ref": "745726cc-3e2d-408d-99be-0b6d18f0d594",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f1d7e2b5-f83d-4e7b-869f-2e5de71280d5"
        },
        "item": {
          "id": "97e12af2-d297-4ec3-8a5b-a17a56a07082",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2c473710-0e1c-40e0-9ed9-2d5294ab0070",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "97e12af2-d297-4ec3-8a5b-a17a56a07082",
        "cursor": {
          "ref": "745726cc-3e2d-408d-99be-0b6d18f0d594",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f1d7e2b5-f83d-4e7b-869f-2e5de71280d5"
        },
        "item": {
          "id": "97e12af2-d297-4ec3-8a5b-a17a56a07082",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2c473710-0e1c-40e0-9ed9-2d5294ab0070",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "a241269b-f00b-41b9-8352-5b0e1d6559cf",
        "cursor": {
          "ref": "b17827ed-e11e-4d5f-8979-f6ec84d19931",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0a1ad05d-f55d-4671-8c4e-c6eaea225340"
        },
        "item": {
          "id": "a241269b-f00b-41b9-8352-5b0e1d6559cf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4791602a-9cae-43b4-8b5b-9e990c34dc45",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "a241269b-f00b-41b9-8352-5b0e1d6559cf",
        "cursor": {
          "ref": "b17827ed-e11e-4d5f-8979-f6ec84d19931",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0a1ad05d-f55d-4671-8c4e-c6eaea225340"
        },
        "item": {
          "id": "a241269b-f00b-41b9-8352-5b0e1d6559cf",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4791602a-9cae-43b4-8b5b-9e990c34dc45",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1b8223f2-ff25-4741-b458-20ab5f148e5d",
        "cursor": {
          "ref": "0748f3c7-a04c-4b2e-980c-bff612a2c3e3",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "210992ac-ef05-4ec3-aa67-4e5d1f89ff54"
        },
        "item": {
          "id": "1b8223f2-ff25-4741-b458-20ab5f148e5d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "49a158a1-eedf-4d20-83ec-9ad533052a66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "1b8223f2-ff25-4741-b458-20ab5f148e5d",
        "cursor": {
          "ref": "0748f3c7-a04c-4b2e-980c-bff612a2c3e3",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "210992ac-ef05-4ec3-aa67-4e5d1f89ff54"
        },
        "item": {
          "id": "1b8223f2-ff25-4741-b458-20ab5f148e5d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "49a158a1-eedf-4d20-83ec-9ad533052a66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "065a3652-2ffb-4fa6-bbed-683bcb20847b",
        "cursor": {
          "ref": "ee35d573-2f1d-4c22-a451-b1b523ffbf6e",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "72c828d0-14a7-4668-a680-31e06b9fdd22"
        },
        "item": {
          "id": "065a3652-2ffb-4fa6-bbed-683bcb20847b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6c297b0c-743b-4c81-b5c0-a9fdf99b0510",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "065a3652-2ffb-4fa6-bbed-683bcb20847b",
        "cursor": {
          "ref": "ee35d573-2f1d-4c22-a451-b1b523ffbf6e",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "72c828d0-14a7-4668-a680-31e06b9fdd22"
        },
        "item": {
          "id": "065a3652-2ffb-4fa6-bbed-683bcb20847b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "6c297b0c-743b-4c81-b5c0-a9fdf99b0510",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "476c5845-28ba-4cee-8b12-bdf5ce371fd3",
        "cursor": {
          "ref": "4ce09de4-263e-4786-a136-b939236056dc",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8f1e2d0e-caf2-478d-852d-f2be6e4235d3"
        },
        "item": {
          "id": "476c5845-28ba-4cee-8b12-bdf5ce371fd3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5a45e9e4-d25f-4ed6-ab64-235564fd802b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "476c5845-28ba-4cee-8b12-bdf5ce371fd3",
        "cursor": {
          "ref": "4ce09de4-263e-4786-a136-b939236056dc",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8f1e2d0e-caf2-478d-852d-f2be6e4235d3"
        },
        "item": {
          "id": "476c5845-28ba-4cee-8b12-bdf5ce371fd3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5a45e9e4-d25f-4ed6-ab64-235564fd802b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "85ff7ecc-f873-47ee-a41e-84aa18e2162e",
        "cursor": {
          "ref": "30ad3625-361f-4a11-b9ac-94f8022fb3fe",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "396a4714-7dc5-4ee5-9891-e0b1a95f74a0"
        },
        "item": {
          "id": "85ff7ecc-f873-47ee-a41e-84aa18e2162e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e1a0b1d3-ae40-41f8-894a-f27e71080ecf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "85ff7ecc-f873-47ee-a41e-84aa18e2162e",
        "cursor": {
          "ref": "30ad3625-361f-4a11-b9ac-94f8022fb3fe",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "396a4714-7dc5-4ee5-9891-e0b1a95f74a0"
        },
        "item": {
          "id": "85ff7ecc-f873-47ee-a41e-84aa18e2162e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e1a0b1d3-ae40-41f8-894a-f27e71080ecf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "e2c3309c-dd80-4ba1-9313-208d65783be1",
        "cursor": {
          "ref": "e35515a0-4714-462b-bc43-d1c6648f621b",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0c2a2606-acd5-4028-9a7a-fef0feef5ccb"
        },
        "item": {
          "id": "e2c3309c-dd80-4ba1-9313-208d65783be1",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "47b0abb6-8655-4a1d-9098-b63e6dc2f35b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "e2c3309c-dd80-4ba1-9313-208d65783be1",
        "cursor": {
          "ref": "e35515a0-4714-462b-bc43-d1c6648f621b",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0c2a2606-acd5-4028-9a7a-fef0feef5ccb"
        },
        "item": {
          "id": "e2c3309c-dd80-4ba1-9313-208d65783be1",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "47b0abb6-8655-4a1d-9098-b63e6dc2f35b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "e4272bef-7d1c-4660-8e44-c153fffa2ea9",
        "cursor": {
          "ref": "4b1adc56-82ee-4b63-a352-86d78db53603",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b4fefe50-507f-4221-b2e1-9b35c6e56f97"
        },
        "item": {
          "id": "e4272bef-7d1c-4660-8e44-c153fffa2ea9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c89a47c6-8a01-4c6e-bb13-f6445c4c16b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "e4272bef-7d1c-4660-8e44-c153fffa2ea9",
        "cursor": {
          "ref": "4b1adc56-82ee-4b63-a352-86d78db53603",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b4fefe50-507f-4221-b2e1-9b35c6e56f97"
        },
        "item": {
          "id": "e4272bef-7d1c-4660-8e44-c153fffa2ea9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c89a47c6-8a01-4c6e-bb13-f6445c4c16b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "78ced861-2e78-4d45-ac4a-2059a746a7cf",
        "cursor": {
          "ref": "fed51874-063a-4cda-b46e-22cf47a78b7f",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0b00857e-be8e-41d8-a1b5-0b5ed3951b8f"
        },
        "item": {
          "id": "78ced861-2e78-4d45-ac4a-2059a746a7cf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "95250292-e749-4db7-ad44-b48b51bdc79d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "78ced861-2e78-4d45-ac4a-2059a746a7cf",
        "cursor": {
          "ref": "fed51874-063a-4cda-b46e-22cf47a78b7f",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0b00857e-be8e-41d8-a1b5-0b5ed3951b8f"
        },
        "item": {
          "id": "78ced861-2e78-4d45-ac4a-2059a746a7cf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "95250292-e749-4db7-ad44-b48b51bdc79d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "7de5d609-af86-4601-9768-964303d484ea",
        "cursor": {
          "ref": "aad918ce-5e48-4526-ae55-115197d21e84",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6ce51e33-0d0d-4ff6-afb8-cdab183126f5"
        },
        "item": {
          "id": "7de5d609-af86-4601-9768-964303d484ea",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "061dd921-8a06-44c3-87e1-a62452d60c16",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "7de5d609-af86-4601-9768-964303d484ea",
        "cursor": {
          "ref": "aad918ce-5e48-4526-ae55-115197d21e84",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6ce51e33-0d0d-4ff6-afb8-cdab183126f5"
        },
        "item": {
          "id": "7de5d609-af86-4601-9768-964303d484ea",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "061dd921-8a06-44c3-87e1-a62452d60c16",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "1e8e8ca0-51dd-4c5d-ab54-f57ad7d00ca0",
        "cursor": {
          "ref": "da9421a9-a8aa-41e6-9ab7-87b4d828a4c7",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b98651ef-4fa5-46fc-94f4-6b424e7fb29a"
        },
        "item": {
          "id": "1e8e8ca0-51dd-4c5d-ab54-f57ad7d00ca0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "774984c5-5726-4da2-a4e8-329f8ec4bf61",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "1e8e8ca0-51dd-4c5d-ab54-f57ad7d00ca0",
        "cursor": {
          "ref": "da9421a9-a8aa-41e6-9ab7-87b4d828a4c7",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b98651ef-4fa5-46fc-94f4-6b424e7fb29a"
        },
        "item": {
          "id": "1e8e8ca0-51dd-4c5d-ab54-f57ad7d00ca0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "774984c5-5726-4da2-a4e8-329f8ec4bf61",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "c7aadce1-328f-45b9-9890-23cfcbdb06be",
        "cursor": {
          "ref": "98b00fbb-bdf8-4f9d-8231-dcae3c400f02",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e533e26e-2e77-467b-a8f2-e61c801fee22"
        },
        "item": {
          "id": "c7aadce1-328f-45b9-9890-23cfcbdb06be",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cdab4e0c-6766-4f9c-be9e-8fcbe01e4668",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "c7aadce1-328f-45b9-9890-23cfcbdb06be",
        "cursor": {
          "ref": "98b00fbb-bdf8-4f9d-8231-dcae3c400f02",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e533e26e-2e77-467b-a8f2-e61c801fee22"
        },
        "item": {
          "id": "c7aadce1-328f-45b9-9890-23cfcbdb06be",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cdab4e0c-6766-4f9c-be9e-8fcbe01e4668",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "f54f18eb-d263-4044-a978-61a93feb065f",
        "cursor": {
          "ref": "ca87c185-f07d-474c-ac9d-126761cd090e",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "73bc0792-afb1-4d3c-8b81-2a4bb4462f5d"
        },
        "item": {
          "id": "f54f18eb-d263-4044-a978-61a93feb065f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "937a17c8-f233-43bd-ac17-a73cba6ee36a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "f54f18eb-d263-4044-a978-61a93feb065f",
        "cursor": {
          "ref": "ca87c185-f07d-474c-ac9d-126761cd090e",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "73bc0792-afb1-4d3c-8b81-2a4bb4462f5d"
        },
        "item": {
          "id": "f54f18eb-d263-4044-a978-61a93feb065f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "937a17c8-f233-43bd-ac17-a73cba6ee36a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "abf9df49-da6c-4715-8de1-60a7277388dd",
        "cursor": {
          "ref": "33b864f8-a0fe-4023-ad6d-ce092e16a644",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ede3ef8a-50e2-4951-9c89-881164b17eaa"
        },
        "item": {
          "id": "abf9df49-da6c-4715-8de1-60a7277388dd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9dc3d5df-9ae2-4358-89a9-e3f36add066f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "abf9df49-da6c-4715-8de1-60a7277388dd",
        "cursor": {
          "ref": "33b864f8-a0fe-4023-ad6d-ce092e16a644",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ede3ef8a-50e2-4951-9c89-881164b17eaa"
        },
        "item": {
          "id": "abf9df49-da6c-4715-8de1-60a7277388dd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9dc3d5df-9ae2-4358-89a9-e3f36add066f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "770bfe84-b7a0-4930-af7f-c56653ba2aab",
        "cursor": {
          "ref": "bc7f1359-fbb0-4b29-b3ae-e163b64211c4",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3b47b671-0e10-45d3-ad11-82d761fe4ab2"
        },
        "item": {
          "id": "770bfe84-b7a0-4930-af7f-c56653ba2aab",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "271523c7-d164-4f51-8abf-68856f1d0705",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "770bfe84-b7a0-4930-af7f-c56653ba2aab",
        "cursor": {
          "ref": "bc7f1359-fbb0-4b29-b3ae-e163b64211c4",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3b47b671-0e10-45d3-ad11-82d761fe4ab2"
        },
        "item": {
          "id": "770bfe84-b7a0-4930-af7f-c56653ba2aab",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "271523c7-d164-4f51-8abf-68856f1d0705",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "1b95e58e-4cc5-4254-bf7e-131e3da6035d",
        "cursor": {
          "ref": "4f212c4c-4817-41eb-85d8-caeef04f0d27",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f24a65b4-a11d-43d2-ae05-76a1ed089f6d"
        },
        "item": {
          "id": "1b95e58e-4cc5-4254-bf7e-131e3da6035d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "50740dbe-8c6f-4571-9247-4f36bab08840",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1b95e58e-4cc5-4254-bf7e-131e3da6035d",
        "cursor": {
          "ref": "4f212c4c-4817-41eb-85d8-caeef04f0d27",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f24a65b4-a11d-43d2-ae05-76a1ed089f6d"
        },
        "item": {
          "id": "1b95e58e-4cc5-4254-bf7e-131e3da6035d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "50740dbe-8c6f-4571-9247-4f36bab08840",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "a3c4fb8d-b045-41e7-9041-dcbbeb0250f3",
        "cursor": {
          "ref": "49f39683-a809-49e2-b01c-09a0558c48f9",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cceca8bd-9a91-451e-837f-9c79cdfd38b9"
        },
        "item": {
          "id": "a3c4fb8d-b045-41e7-9041-dcbbeb0250f3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5cc89a5d-bbca-47ab-910f-d32d780ce409",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "a3c4fb8d-b045-41e7-9041-dcbbeb0250f3",
        "cursor": {
          "ref": "49f39683-a809-49e2-b01c-09a0558c48f9",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cceca8bd-9a91-451e-837f-9c79cdfd38b9"
        },
        "item": {
          "id": "a3c4fb8d-b045-41e7-9041-dcbbeb0250f3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5cc89a5d-bbca-47ab-910f-d32d780ce409",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "ae5ab72c-da56-47c9-9990-39582fb9ee10",
        "cursor": {
          "ref": "d9254f4d-56ff-44aa-b10b-907c50d3452c",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "76a7b900-2c97-4368-a43e-bc9021f1b946"
        },
        "item": {
          "id": "ae5ab72c-da56-47c9-9990-39582fb9ee10",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "54836615-d0d9-454f-8b99-487bb5856327",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "ae5ab72c-da56-47c9-9990-39582fb9ee10",
        "cursor": {
          "ref": "d9254f4d-56ff-44aa-b10b-907c50d3452c",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "76a7b900-2c97-4368-a43e-bc9021f1b946"
        },
        "item": {
          "id": "ae5ab72c-da56-47c9-9990-39582fb9ee10",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "54836615-d0d9-454f-8b99-487bb5856327",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "27f135cc-6533-42d6-b1ef-0d2ed204ff6a",
        "cursor": {
          "ref": "ab4ec8fd-eab5-44be-a495-e8a4d0267dc2",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ab16811c-b07f-401f-8303-211d18386073"
        },
        "item": {
          "id": "27f135cc-6533-42d6-b1ef-0d2ed204ff6a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7badb65e-9ffd-4b71-9ef5-312f9915c5fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "27f135cc-6533-42d6-b1ef-0d2ed204ff6a",
        "cursor": {
          "ref": "ab4ec8fd-eab5-44be-a495-e8a4d0267dc2",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ab16811c-b07f-401f-8303-211d18386073"
        },
        "item": {
          "id": "27f135cc-6533-42d6-b1ef-0d2ed204ff6a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7badb65e-9ffd-4b71-9ef5-312f9915c5fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "db9113b7-ca02-431e-a4ad-7ae5f1a046f2",
        "cursor": {
          "ref": "26460724-9dce-49e2-9ccd-59c1c8ae149d",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "39866844-b8a5-4c32-9f93-4d906ae109a6"
        },
        "item": {
          "id": "db9113b7-ca02-431e-a4ad-7ae5f1a046f2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "705f913c-20c8-444d-9b26-22b5f826729d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "db9113b7-ca02-431e-a4ad-7ae5f1a046f2",
        "cursor": {
          "ref": "26460724-9dce-49e2-9ccd-59c1c8ae149d",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "39866844-b8a5-4c32-9f93-4d906ae109a6"
        },
        "item": {
          "id": "db9113b7-ca02-431e-a4ad-7ae5f1a046f2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "705f913c-20c8-444d-9b26-22b5f826729d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "8c238758-e969-4e51-a7ac-bf5bc490ea43",
        "cursor": {
          "ref": "d128d551-3db3-4e2a-a032-87c50961aa01",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7488e54a-a6eb-48e3-99e8-e37cb22b36d0"
        },
        "item": {
          "id": "8c238758-e969-4e51-a7ac-bf5bc490ea43",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "35b98966-989a-466e-8ed3-376f2b4b077f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "8c238758-e969-4e51-a7ac-bf5bc490ea43",
        "cursor": {
          "ref": "d128d551-3db3-4e2a-a032-87c50961aa01",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7488e54a-a6eb-48e3-99e8-e37cb22b36d0"
        },
        "item": {
          "id": "8c238758-e969-4e51-a7ac-bf5bc490ea43",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "35b98966-989a-466e-8ed3-376f2b4b077f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "7b06c20c-e2c3-49e2-bf80-5e1912f3b6d4",
        "cursor": {
          "ref": "87d5c1aa-67f8-45e0-a85d-e72a311f1606",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "40b38f47-5030-4d16-ae5d-22a09966764e"
        },
        "item": {
          "id": "7b06c20c-e2c3-49e2-bf80-5e1912f3b6d4",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "8751eea8-dc2d-46b9-8617-a4ab47e1e479",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "7b06c20c-e2c3-49e2-bf80-5e1912f3b6d4",
        "cursor": {
          "ref": "87d5c1aa-67f8-45e0-a85d-e72a311f1606",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "40b38f47-5030-4d16-ae5d-22a09966764e"
        },
        "item": {
          "id": "7b06c20c-e2c3-49e2-bf80-5e1912f3b6d4",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "8751eea8-dc2d-46b9-8617-a4ab47e1e479",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "ca11a95b-23ab-4fa8-b6ce-475425d9092d",
        "cursor": {
          "ref": "260a22c8-ddc1-4798-86c0-138b3a89d759",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8e7a1bb0-08e8-4333-a9e0-f5d47ed7904b"
        },
        "item": {
          "id": "ca11a95b-23ab-4fa8-b6ce-475425d9092d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4479b4c8-68c2-48bf-bbcb-0334975a05f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "ca11a95b-23ab-4fa8-b6ce-475425d9092d",
        "cursor": {
          "ref": "260a22c8-ddc1-4798-86c0-138b3a89d759",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8e7a1bb0-08e8-4333-a9e0-f5d47ed7904b"
        },
        "item": {
          "id": "ca11a95b-23ab-4fa8-b6ce-475425d9092d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4479b4c8-68c2-48bf-bbcb-0334975a05f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "1a612d62-283e-48c4-9b10-b16142fa2376",
        "cursor": {
          "ref": "7cf05fb5-fd26-41a0-b5e5-629ca0b215b2",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2b9420dd-31d4-448f-a94d-05f2eed6c3d9"
        },
        "item": {
          "id": "1a612d62-283e-48c4-9b10-b16142fa2376",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "03a37eea-5bf4-4d44-a5c1-e0d724df6350",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "1a612d62-283e-48c4-9b10-b16142fa2376",
        "cursor": {
          "ref": "7cf05fb5-fd26-41a0-b5e5-629ca0b215b2",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2b9420dd-31d4-448f-a94d-05f2eed6c3d9"
        },
        "item": {
          "id": "1a612d62-283e-48c4-9b10-b16142fa2376",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "03a37eea-5bf4-4d44-a5c1-e0d724df6350",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "07cad514-4ffc-4017-8c03-d6731fbee004",
        "cursor": {
          "ref": "79cb3350-3a61-4494-b0f5-1dfec814c892",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9bd59d91-d1dc-4bbe-abd6-7b368bdea8d1"
        },
        "item": {
          "id": "07cad514-4ffc-4017-8c03-d6731fbee004",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6154bb9a-92e5-4587-9db2-0968b889c7e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "07cad514-4ffc-4017-8c03-d6731fbee004",
        "cursor": {
          "ref": "79cb3350-3a61-4494-b0f5-1dfec814c892",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9bd59d91-d1dc-4bbe-abd6-7b368bdea8d1"
        },
        "item": {
          "id": "07cad514-4ffc-4017-8c03-d6731fbee004",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6154bb9a-92e5-4587-9db2-0968b889c7e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "139ff761-0fbe-4e6c-bdc2-8c65ef606644",
        "cursor": {
          "ref": "7072c264-4bd2-49dd-ab58-ccdb248995e2",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7142b99c-ec88-4eaf-8354-329b6444881e"
        },
        "item": {
          "id": "139ff761-0fbe-4e6c-bdc2-8c65ef606644",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "035dcaf9-7029-4268-b354-5d535d678bce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "139ff761-0fbe-4e6c-bdc2-8c65ef606644",
        "cursor": {
          "ref": "7072c264-4bd2-49dd-ab58-ccdb248995e2",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7142b99c-ec88-4eaf-8354-329b6444881e"
        },
        "item": {
          "id": "139ff761-0fbe-4e6c-bdc2-8c65ef606644",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "035dcaf9-7029-4268-b354-5d535d678bce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "1744e256-fc6b-4d84-bb48-c2a1bf0f2669",
        "cursor": {
          "ref": "8e2901f4-9619-414c-ad0b-6e19144f7158",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "500c5f68-750a-4009-a0ce-60e8249f9244"
        },
        "item": {
          "id": "1744e256-fc6b-4d84-bb48-c2a1bf0f2669",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "964af8c1-f23b-4a7e-bf57-f2c2fb8ff5a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "1744e256-fc6b-4d84-bb48-c2a1bf0f2669",
        "cursor": {
          "ref": "8e2901f4-9619-414c-ad0b-6e19144f7158",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "500c5f68-750a-4009-a0ce-60e8249f9244"
        },
        "item": {
          "id": "1744e256-fc6b-4d84-bb48-c2a1bf0f2669",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "964af8c1-f23b-4a7e-bf57-f2c2fb8ff5a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "7fe6f62e-8951-4e0d-a79e-36424284471b",
        "cursor": {
          "ref": "d1dc6a24-3136-4d2d-8e27-459e35f6079c",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1a9c6b0a-e0e8-428a-add9-40293d64b06f"
        },
        "item": {
          "id": "7fe6f62e-8951-4e0d-a79e-36424284471b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8e2e8c49-5256-4cdf-b171-9b951d7a6229",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "7fe6f62e-8951-4e0d-a79e-36424284471b",
        "cursor": {
          "ref": "d1dc6a24-3136-4d2d-8e27-459e35f6079c",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1a9c6b0a-e0e8-428a-add9-40293d64b06f"
        },
        "item": {
          "id": "7fe6f62e-8951-4e0d-a79e-36424284471b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8e2e8c49-5256-4cdf-b171-9b951d7a6229",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "9408621d-c304-42cb-a861-7c63b2fb6c60",
        "cursor": {
          "ref": "35e16524-3a19-4455-bbd7-351858337a31",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "02d8a377-456f-4085-811a-c9bf3dce8a32"
        },
        "item": {
          "id": "9408621d-c304-42cb-a861-7c63b2fb6c60",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5c45ba42-df78-4cfd-b07e-2684aab01c83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "9408621d-c304-42cb-a861-7c63b2fb6c60",
        "cursor": {
          "ref": "35e16524-3a19-4455-bbd7-351858337a31",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "02d8a377-456f-4085-811a-c9bf3dce8a32"
        },
        "item": {
          "id": "9408621d-c304-42cb-a861-7c63b2fb6c60",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5c45ba42-df78-4cfd-b07e-2684aab01c83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "a87f35f8-1f23-4999-85f7-20c980914fce",
        "cursor": {
          "ref": "6a0a47ea-2759-4aa0-8519-1a2a1295f5df",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "312a7bb4-bc38-45d3-9873-8a4ad05a58c0"
        },
        "item": {
          "id": "a87f35f8-1f23-4999-85f7-20c980914fce",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "384ee889-3a96-4b40-bd04-23f072327819",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "a87f35f8-1f23-4999-85f7-20c980914fce",
        "cursor": {
          "ref": "6a0a47ea-2759-4aa0-8519-1a2a1295f5df",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "312a7bb4-bc38-45d3-9873-8a4ad05a58c0"
        },
        "item": {
          "id": "a87f35f8-1f23-4999-85f7-20c980914fce",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "384ee889-3a96-4b40-bd04-23f072327819",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "4c298c11-8538-4973-bf99-dd6c9c240b8f",
        "cursor": {
          "ref": "bad9940d-b463-4bd1-b8f7-ac4ef4c92ce4",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9596bd42-5b6a-4fd3-a75a-05a542bcd650"
        },
        "item": {
          "id": "4c298c11-8538-4973-bf99-dd6c9c240b8f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "000af01d-9751-45b9-a1d0-2f9e5882081b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "4c298c11-8538-4973-bf99-dd6c9c240b8f",
        "cursor": {
          "ref": "bad9940d-b463-4bd1-b8f7-ac4ef4c92ce4",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9596bd42-5b6a-4fd3-a75a-05a542bcd650"
        },
        "item": {
          "id": "4c298c11-8538-4973-bf99-dd6c9c240b8f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "000af01d-9751-45b9-a1d0-2f9e5882081b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "d108b3fb-37a4-4e68-9021-2c871e95e783",
        "cursor": {
          "ref": "13914575-fd3e-4768-91f8-241726008eb8",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5672f2df-b0c4-4fb5-abee-f59d9053cef8"
        },
        "item": {
          "id": "d108b3fb-37a4-4e68-9021-2c871e95e783",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c02d42c2-ee5f-4cab-93e1-26ca26b0cef8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "d108b3fb-37a4-4e68-9021-2c871e95e783",
        "cursor": {
          "ref": "13914575-fd3e-4768-91f8-241726008eb8",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5672f2df-b0c4-4fb5-abee-f59d9053cef8"
        },
        "item": {
          "id": "d108b3fb-37a4-4e68-9021-2c871e95e783",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c02d42c2-ee5f-4cab-93e1-26ca26b0cef8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "dc8527bb-b32f-4f57-b7e0-e31f661bde42",
        "cursor": {
          "ref": "25342cd7-c0bc-4bc1-9bdc-a4013acaedca",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1c325faa-727f-4f08-874d-76044d49518c"
        },
        "item": {
          "id": "dc8527bb-b32f-4f57-b7e0-e31f661bde42",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "27c14391-515a-49f6-90aa-e569517d6402",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "dc8527bb-b32f-4f57-b7e0-e31f661bde42",
        "cursor": {
          "ref": "25342cd7-c0bc-4bc1-9bdc-a4013acaedca",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1c325faa-727f-4f08-874d-76044d49518c"
        },
        "item": {
          "id": "dc8527bb-b32f-4f57-b7e0-e31f661bde42",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "27c14391-515a-49f6-90aa-e569517d6402",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "d5cd6c78-a58e-45f3-bc84-a7c18d1c931d",
        "cursor": {
          "ref": "27c5dc97-f9a9-4d6c-9463-22aec6c73cde",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1c09be88-a41e-430f-8672-5b5e817fd19a"
        },
        "item": {
          "id": "d5cd6c78-a58e-45f3-bc84-a7c18d1c931d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e93ff984-80e8-4943-a0bc-4dd78cdb2f0e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "d5cd6c78-a58e-45f3-bc84-a7c18d1c931d",
        "cursor": {
          "ref": "27c5dc97-f9a9-4d6c-9463-22aec6c73cde",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1c09be88-a41e-430f-8672-5b5e817fd19a"
        },
        "item": {
          "id": "d5cd6c78-a58e-45f3-bc84-a7c18d1c931d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e93ff984-80e8-4943-a0bc-4dd78cdb2f0e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "c7d11409-e3f7-42ab-81db-aaadd3743d48",
        "cursor": {
          "ref": "4917af8d-1fd5-463d-83b6-2bd9348d6013",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0b3509a7-cb48-4ccd-ab9e-7e91f1ff1b10"
        },
        "item": {
          "id": "c7d11409-e3f7-42ab-81db-aaadd3743d48",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9eb46f25-ed39-4ede-b3e4-915d52b63b8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "c7d11409-e3f7-42ab-81db-aaadd3743d48",
        "cursor": {
          "ref": "4917af8d-1fd5-463d-83b6-2bd9348d6013",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0b3509a7-cb48-4ccd-ab9e-7e91f1ff1b10"
        },
        "item": {
          "id": "c7d11409-e3f7-42ab-81db-aaadd3743d48",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9eb46f25-ed39-4ede-b3e4-915d52b63b8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "bff6efe9-f200-4184-8a8d-80ee8e82f68b",
        "cursor": {
          "ref": "8b9baf69-6eed-4782-806c-2c0ce586d17d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9141c7dd-d358-4461-bade-d1614fdc272e"
        },
        "item": {
          "id": "bff6efe9-f200-4184-8a8d-80ee8e82f68b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5739bdbd-6e78-4531-8ee2-8c139deea49d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "bff6efe9-f200-4184-8a8d-80ee8e82f68b",
        "cursor": {
          "ref": "8b9baf69-6eed-4782-806c-2c0ce586d17d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9141c7dd-d358-4461-bade-d1614fdc272e"
        },
        "item": {
          "id": "bff6efe9-f200-4184-8a8d-80ee8e82f68b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5739bdbd-6e78-4531-8ee2-8c139deea49d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "17c054a3-b518-4194-b8aa-182757a708e9",
        "cursor": {
          "ref": "baa91eed-7be7-4945-a58f-0b516ddbea9b",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1e6b3130-cc0b-4294-bd5b-d67714c76d69"
        },
        "item": {
          "id": "17c054a3-b518-4194-b8aa-182757a708e9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "04f92a90-6406-40d5-8dba-e49d461613e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "17c054a3-b518-4194-b8aa-182757a708e9",
        "cursor": {
          "ref": "baa91eed-7be7-4945-a58f-0b516ddbea9b",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1e6b3130-cc0b-4294-bd5b-d67714c76d69"
        },
        "item": {
          "id": "17c054a3-b518-4194-b8aa-182757a708e9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "04f92a90-6406-40d5-8dba-e49d461613e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "2eb38189-9712-47c7-9e20-b5ef569a8d7d",
        "cursor": {
          "ref": "852eacd1-ca66-4e97-aaf9-1638f40afd8c",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "775eb6ef-5ebe-465e-8703-68483dd0e2c8"
        },
        "item": {
          "id": "2eb38189-9712-47c7-9e20-b5ef569a8d7d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3014864b-4a3b-478e-b646-b2c71f0e51b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "2eb38189-9712-47c7-9e20-b5ef569a8d7d",
        "cursor": {
          "ref": "852eacd1-ca66-4e97-aaf9-1638f40afd8c",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "775eb6ef-5ebe-465e-8703-68483dd0e2c8"
        },
        "item": {
          "id": "2eb38189-9712-47c7-9e20-b5ef569a8d7d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3014864b-4a3b-478e-b646-b2c71f0e51b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "7f5b4ec9-3dec-4896-82fb-e0a2dc31243c",
        "cursor": {
          "ref": "2a2fe2d1-c9c4-4625-bf9a-9366acd86d7a",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4d642cfb-f84e-4809-89c8-99abce8dd068"
        },
        "item": {
          "id": "7f5b4ec9-3dec-4896-82fb-e0a2dc31243c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4568adca-140c-4a0c-ab72-a716b1c264fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "7f5b4ec9-3dec-4896-82fb-e0a2dc31243c",
        "cursor": {
          "ref": "2a2fe2d1-c9c4-4625-bf9a-9366acd86d7a",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4d642cfb-f84e-4809-89c8-99abce8dd068"
        },
        "item": {
          "id": "7f5b4ec9-3dec-4896-82fb-e0a2dc31243c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4568adca-140c-4a0c-ab72-a716b1c264fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "a95eb751-1258-4e10-873f-c8c2e91ff8f7",
        "cursor": {
          "ref": "43463949-85e2-407f-a6ee-272a4a13a7a5",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5ad0db7c-c44a-46d5-8c6f-fb8100f7045e"
        },
        "item": {
          "id": "a95eb751-1258-4e10-873f-c8c2e91ff8f7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c0511d22-a247-4540-ad61-49d2298ccbd5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "a95eb751-1258-4e10-873f-c8c2e91ff8f7",
        "cursor": {
          "ref": "43463949-85e2-407f-a6ee-272a4a13a7a5",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5ad0db7c-c44a-46d5-8c6f-fb8100f7045e"
        },
        "item": {
          "id": "a95eb751-1258-4e10-873f-c8c2e91ff8f7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c0511d22-a247-4540-ad61-49d2298ccbd5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "44ad738b-48f4-4e73-a69f-4d8e4e06df08",
        "cursor": {
          "ref": "4bcc130e-732c-42fb-9168-0cc4e64c8623",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "79528f61-23fc-4bd6-9da2-6b21e5df1887"
        },
        "item": {
          "id": "44ad738b-48f4-4e73-a69f-4d8e4e06df08",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c588ade8-5402-455e-9d07-f63bde0d80e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "44ad738b-48f4-4e73-a69f-4d8e4e06df08",
        "cursor": {
          "ref": "4bcc130e-732c-42fb-9168-0cc4e64c8623",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "79528f61-23fc-4bd6-9da2-6b21e5df1887"
        },
        "item": {
          "id": "44ad738b-48f4-4e73-a69f-4d8e4e06df08",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c588ade8-5402-455e-9d07-f63bde0d80e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "fd258941-484a-4041-b5b6-3654d9e1dff1",
        "cursor": {
          "ref": "c4682a6e-72e8-4945-a800-e2defdfd1d89",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ba97496a-91ba-4025-b3c5-d19b86008a88"
        },
        "item": {
          "id": "fd258941-484a-4041-b5b6-3654d9e1dff1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "077ef9b8-daee-4489-8475-a7a2656076ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "fd258941-484a-4041-b5b6-3654d9e1dff1",
        "cursor": {
          "ref": "c4682a6e-72e8-4945-a800-e2defdfd1d89",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ba97496a-91ba-4025-b3c5-d19b86008a88"
        },
        "item": {
          "id": "fd258941-484a-4041-b5b6-3654d9e1dff1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "077ef9b8-daee-4489-8475-a7a2656076ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "63f3c671-502b-46c3-bb02-ff3ea4da145d",
        "cursor": {
          "ref": "c006e330-4bb7-4c1d-b5bf-1f6790bf1d4a",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ba5f7533-9737-44c8-9ce7-645c68e7febd"
        },
        "item": {
          "id": "63f3c671-502b-46c3-bb02-ff3ea4da145d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bcd7fa88-af88-42ae-9360-432ff65c941d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "63f3c671-502b-46c3-bb02-ff3ea4da145d",
        "cursor": {
          "ref": "c006e330-4bb7-4c1d-b5bf-1f6790bf1d4a",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ba5f7533-9737-44c8-9ce7-645c68e7febd"
        },
        "item": {
          "id": "63f3c671-502b-46c3-bb02-ff3ea4da145d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bcd7fa88-af88-42ae-9360-432ff65c941d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "e0512a10-7ba3-4921-9bd8-50110b38777b",
        "cursor": {
          "ref": "0e7976b1-8070-4407-a209-24dfc100f1b0",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "138e480a-a3ed-42f3-ad7f-65b6b2459aa8"
        },
        "item": {
          "id": "e0512a10-7ba3-4921-9bd8-50110b38777b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2c33761a-fa8b-4bdf-9bdf-bb411ef4f973",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "e0512a10-7ba3-4921-9bd8-50110b38777b",
        "cursor": {
          "ref": "0e7976b1-8070-4407-a209-24dfc100f1b0",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "138e480a-a3ed-42f3-ad7f-65b6b2459aa8"
        },
        "item": {
          "id": "e0512a10-7ba3-4921-9bd8-50110b38777b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2c33761a-fa8b-4bdf-9bdf-bb411ef4f973",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "af6fc9a0-e169-49c7-a936-3b965095ea1e",
        "cursor": {
          "ref": "4366db5f-245c-4e70-935a-268e15cc6da3",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c8d4a659-fe54-408c-b7ff-97d615d593d5"
        },
        "item": {
          "id": "af6fc9a0-e169-49c7-a936-3b965095ea1e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bcf086a2-c5eb-4bb4-98c6-7da90f857d55",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "af6fc9a0-e169-49c7-a936-3b965095ea1e",
        "cursor": {
          "ref": "4366db5f-245c-4e70-935a-268e15cc6da3",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c8d4a659-fe54-408c-b7ff-97d615d593d5"
        },
        "item": {
          "id": "af6fc9a0-e169-49c7-a936-3b965095ea1e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bcf086a2-c5eb-4bb4-98c6-7da90f857d55",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1de8fcc3-e827-4b30-81be-d2a8280d7281",
        "cursor": {
          "ref": "c5a541ac-0054-414d-aac4-6eedcf38028d",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "48e5b7a1-670a-450d-9898-729e1e160728"
        },
        "item": {
          "id": "1de8fcc3-e827-4b30-81be-d2a8280d7281",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "62731b8c-3053-47ab-b3d2-2d19577e864b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "1de8fcc3-e827-4b30-81be-d2a8280d7281",
        "cursor": {
          "ref": "c5a541ac-0054-414d-aac4-6eedcf38028d",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "48e5b7a1-670a-450d-9898-729e1e160728"
        },
        "item": {
          "id": "1de8fcc3-e827-4b30-81be-d2a8280d7281",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "62731b8c-3053-47ab-b3d2-2d19577e864b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "86f0d20a-4097-46a1-b5b9-1ebc35ea659f",
        "cursor": {
          "ref": "fa93db4b-46d9-4556-ba13-3e8f095ddec6",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fbfee45e-9e89-4755-81cf-0ab93836053c"
        },
        "item": {
          "id": "86f0d20a-4097-46a1-b5b9-1ebc35ea659f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "40a39425-c8c1-42ff-83e8-b7a8d82d82d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "86f0d20a-4097-46a1-b5b9-1ebc35ea659f",
        "cursor": {
          "ref": "fa93db4b-46d9-4556-ba13-3e8f095ddec6",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fbfee45e-9e89-4755-81cf-0ab93836053c"
        },
        "item": {
          "id": "86f0d20a-4097-46a1-b5b9-1ebc35ea659f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "40a39425-c8c1-42ff-83e8-b7a8d82d82d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "8ec5eaa7-62e0-4c2e-b243-f5e75eaaafe7",
        "cursor": {
          "ref": "fe87c10c-1b0b-496e-ba47-2931b191f819",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a08ecc26-d88f-4400-bdf7-b09c20a62815"
        },
        "item": {
          "id": "8ec5eaa7-62e0-4c2e-b243-f5e75eaaafe7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "598c6539-4863-4e32-b348-a4cf77baf3ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "8ec5eaa7-62e0-4c2e-b243-f5e75eaaafe7",
        "cursor": {
          "ref": "fe87c10c-1b0b-496e-ba47-2931b191f819",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a08ecc26-d88f-4400-bdf7-b09c20a62815"
        },
        "item": {
          "id": "8ec5eaa7-62e0-4c2e-b243-f5e75eaaafe7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "598c6539-4863-4e32-b348-a4cf77baf3ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "91628858-9cc2-40a1-85df-165706cdf549",
        "cursor": {
          "ref": "f8a070ec-8ab2-43e3-b118-c23fad82c610",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c7040d6d-ff86-4ba8-9121-cc5bc60c71f6"
        },
        "item": {
          "id": "91628858-9cc2-40a1-85df-165706cdf549",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9f55b33a-23ed-47b7-94ce-84fd625c2048",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "91628858-9cc2-40a1-85df-165706cdf549",
        "cursor": {
          "ref": "f8a070ec-8ab2-43e3-b118-c23fad82c610",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c7040d6d-ff86-4ba8-9121-cc5bc60c71f6"
        },
        "item": {
          "id": "91628858-9cc2-40a1-85df-165706cdf549",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9f55b33a-23ed-47b7-94ce-84fd625c2048",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "1daa9c18-059d-44ca-9b0b-5b5ff56a4b1b",
        "cursor": {
          "ref": "823cd3fb-25b2-4c98-821a-9420af92d7c0",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cb9f7ae1-8db1-4799-b2a8-390dc9186cd4"
        },
        "item": {
          "id": "1daa9c18-059d-44ca-9b0b-5b5ff56a4b1b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d03d4262-415d-4fb5-a471-60d623efca43",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "1daa9c18-059d-44ca-9b0b-5b5ff56a4b1b",
        "cursor": {
          "ref": "823cd3fb-25b2-4c98-821a-9420af92d7c0",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cb9f7ae1-8db1-4799-b2a8-390dc9186cd4"
        },
        "item": {
          "id": "1daa9c18-059d-44ca-9b0b-5b5ff56a4b1b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d03d4262-415d-4fb5-a471-60d623efca43",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "9365dbe7-052e-498c-8a7d-8ec942b096b8",
        "cursor": {
          "ref": "c20117e0-2b5b-497e-850e-8f726fa1209a",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c53c9a9c-7dfb-4456-9c31-0726725bdaa1"
        },
        "item": {
          "id": "9365dbe7-052e-498c-8a7d-8ec942b096b8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "91fcdca1-2e2a-42de-9d22-b0e66b8fc0eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "9365dbe7-052e-498c-8a7d-8ec942b096b8",
        "cursor": {
          "ref": "c20117e0-2b5b-497e-850e-8f726fa1209a",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c53c9a9c-7dfb-4456-9c31-0726725bdaa1"
        },
        "item": {
          "id": "9365dbe7-052e-498c-8a7d-8ec942b096b8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "91fcdca1-2e2a-42de-9d22-b0e66b8fc0eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c6d2a3e5-f3a5-43f7-b1a7-8c72f90f506e",
        "cursor": {
          "ref": "58dcc9c7-dbf9-458e-a43b-bef8d17bb6bd",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cfb52e38-d447-40cc-b28b-b202750405c6"
        },
        "item": {
          "id": "c6d2a3e5-f3a5-43f7-b1a7-8c72f90f506e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f0699e9b-ffab-424c-8a06-c683bc932397",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "c6d2a3e5-f3a5-43f7-b1a7-8c72f90f506e",
        "cursor": {
          "ref": "58dcc9c7-dbf9-458e-a43b-bef8d17bb6bd",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cfb52e38-d447-40cc-b28b-b202750405c6"
        },
        "item": {
          "id": "c6d2a3e5-f3a5-43f7-b1a7-8c72f90f506e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f0699e9b-ffab-424c-8a06-c683bc932397",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "f2c56aa1-3573-4448-8e13-84af950e298b",
        "cursor": {
          "ref": "d735463d-6468-49d4-97aa-62060bc061bc",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0f64834e-6ee5-4415-9e59-4eee26a0f857"
        },
        "item": {
          "id": "f2c56aa1-3573-4448-8e13-84af950e298b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "89eb41de-0e88-411c-8ee9-53096d61988d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "f2c56aa1-3573-4448-8e13-84af950e298b",
        "cursor": {
          "ref": "d735463d-6468-49d4-97aa-62060bc061bc",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0f64834e-6ee5-4415-9e59-4eee26a0f857"
        },
        "item": {
          "id": "f2c56aa1-3573-4448-8e13-84af950e298b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "89eb41de-0e88-411c-8ee9-53096d61988d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "64ec8dd9-5df9-4a33-8f94-bfea073b56c1",
        "cursor": {
          "ref": "a6a5db20-320a-44c9-88dd-c1bf78b6413a",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4fa5635b-32b4-4fd7-98cd-b5484af126e9"
        },
        "item": {
          "id": "64ec8dd9-5df9-4a33-8f94-bfea073b56c1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d8974b3b-6283-4c34-a2fe-d608d4468a86",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "64ec8dd9-5df9-4a33-8f94-bfea073b56c1",
        "cursor": {
          "ref": "a6a5db20-320a-44c9-88dd-c1bf78b6413a",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4fa5635b-32b4-4fd7-98cd-b5484af126e9"
        },
        "item": {
          "id": "64ec8dd9-5df9-4a33-8f94-bfea073b56c1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d8974b3b-6283-4c34-a2fe-d608d4468a86",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "942894d4-5f2f-4157-a6c6-09a39e544d12",
        "cursor": {
          "ref": "d1a7a2e8-b601-42a2-ac48-3d20de3763b1",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c2ade99a-1936-435c-b15e-9f1ba3618faa"
        },
        "item": {
          "id": "942894d4-5f2f-4157-a6c6-09a39e544d12",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f258f089-0c2c-4a78-938c-66684e634be6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "942894d4-5f2f-4157-a6c6-09a39e544d12",
        "cursor": {
          "ref": "d1a7a2e8-b601-42a2-ac48-3d20de3763b1",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c2ade99a-1936-435c-b15e-9f1ba3618faa"
        },
        "item": {
          "id": "942894d4-5f2f-4157-a6c6-09a39e544d12",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f258f089-0c2c-4a78-938c-66684e634be6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "37e63d91-8a9d-4160-890d-64ab799521f8",
        "cursor": {
          "ref": "49819762-b7ae-4c9b-bcaa-9f85b01757d5",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d3868d74-4e02-4e8b-b09d-70e870dd6a0e"
        },
        "item": {
          "id": "37e63d91-8a9d-4160-890d-64ab799521f8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "854ae311-4f48-4bd5-82ca-c89baad8b57b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "37e63d91-8a9d-4160-890d-64ab799521f8",
        "cursor": {
          "ref": "49819762-b7ae-4c9b-bcaa-9f85b01757d5",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d3868d74-4e02-4e8b-b09d-70e870dd6a0e"
        },
        "item": {
          "id": "37e63d91-8a9d-4160-890d-64ab799521f8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "854ae311-4f48-4bd5-82ca-c89baad8b57b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "e785d92c-5b15-4494-8207-ff1de0fae53d",
        "cursor": {
          "ref": "67dfb13a-6baf-4bce-824b-0034aa039482",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "44c3dfdd-3993-424e-afb9-ba65b3347fd5"
        },
        "item": {
          "id": "e785d92c-5b15-4494-8207-ff1de0fae53d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5e5e5128-bbcd-4a88-8d92-ad88bbd59422",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "e785d92c-5b15-4494-8207-ff1de0fae53d",
        "cursor": {
          "ref": "67dfb13a-6baf-4bce-824b-0034aa039482",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "44c3dfdd-3993-424e-afb9-ba65b3347fd5"
        },
        "item": {
          "id": "e785d92c-5b15-4494-8207-ff1de0fae53d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5e5e5128-bbcd-4a88-8d92-ad88bbd59422",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "ae12680e-e9ff-4ca7-ad01-eb4ee21d8157",
        "cursor": {
          "ref": "8f540cec-a15d-43f4-a072-b8c1638d7040",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "61a426ff-35d3-4a88-bd63-35fc37769c7c"
        },
        "item": {
          "id": "ae12680e-e9ff-4ca7-ad01-eb4ee21d8157",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "082431bc-edd8-4252-b043-146cceb0f76e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "ae12680e-e9ff-4ca7-ad01-eb4ee21d8157",
        "cursor": {
          "ref": "8f540cec-a15d-43f4-a072-b8c1638d7040",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "61a426ff-35d3-4a88-bd63-35fc37769c7c"
        },
        "item": {
          "id": "ae12680e-e9ff-4ca7-ad01-eb4ee21d8157",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "082431bc-edd8-4252-b043-146cceb0f76e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "d7a8419e-cde1-430d-bcd6-818dd5463901",
        "cursor": {
          "ref": "a7ca87a3-678e-4290-832f-6a9eb8ac12a9",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "99506841-d5bb-46d8-a600-476376842f90"
        },
        "item": {
          "id": "d7a8419e-cde1-430d-bcd6-818dd5463901",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3a69b434-784f-4f44-860d-2d4d2da756c8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "d7a8419e-cde1-430d-bcd6-818dd5463901",
        "cursor": {
          "ref": "a7ca87a3-678e-4290-832f-6a9eb8ac12a9",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "99506841-d5bb-46d8-a600-476376842f90"
        },
        "item": {
          "id": "d7a8419e-cde1-430d-bcd6-818dd5463901",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3a69b434-784f-4f44-860d-2d4d2da756c8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "3db37aa3-ec47-45be-85b4-38ddb329ae6c",
        "cursor": {
          "ref": "6a2dfdf6-3870-4b39-a39c-955c8245c550",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a3aceb3c-da84-4fcc-bbff-c0a75ac36f72"
        },
        "item": {
          "id": "3db37aa3-ec47-45be-85b4-38ddb329ae6c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dbfc8846-d9b1-4c9a-b9d5-6f8125e8b7e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "3db37aa3-ec47-45be-85b4-38ddb329ae6c",
        "cursor": {
          "ref": "6a2dfdf6-3870-4b39-a39c-955c8245c550",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a3aceb3c-da84-4fcc-bbff-c0a75ac36f72"
        },
        "item": {
          "id": "3db37aa3-ec47-45be-85b4-38ddb329ae6c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dbfc8846-d9b1-4c9a-b9d5-6f8125e8b7e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "10d48a5e-cd58-461d-9e2e-79260f9277cf",
        "cursor": {
          "ref": "5b748d0e-58ea-405a-ba59-bbd4353860ea",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cee42a9c-8bd1-4f8b-9edb-b6f1f461ef21"
        },
        "item": {
          "id": "10d48a5e-cd58-461d-9e2e-79260f9277cf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2b201a82-3952-4a93-a2d4-4534c98ce259",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "10d48a5e-cd58-461d-9e2e-79260f9277cf",
        "cursor": {
          "ref": "5b748d0e-58ea-405a-ba59-bbd4353860ea",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cee42a9c-8bd1-4f8b-9edb-b6f1f461ef21"
        },
        "item": {
          "id": "10d48a5e-cd58-461d-9e2e-79260f9277cf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2b201a82-3952-4a93-a2d4-4534c98ce259",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "ee857883-da69-48ae-9468-b0c740d3e15b",
        "cursor": {
          "ref": "3ee9d937-63f7-4368-9659-52dc32e670bb",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bb1dea66-763d-416e-b66c-8f66c185e10c"
        },
        "item": {
          "id": "ee857883-da69-48ae-9468-b0c740d3e15b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0f235cfc-0cc8-4bc3-a769-7cbb5096dcd8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "ee857883-da69-48ae-9468-b0c740d3e15b",
        "cursor": {
          "ref": "3ee9d937-63f7-4368-9659-52dc32e670bb",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bb1dea66-763d-416e-b66c-8f66c185e10c"
        },
        "item": {
          "id": "ee857883-da69-48ae-9468-b0c740d3e15b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0f235cfc-0cc8-4bc3-a769-7cbb5096dcd8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "4ae1df3c-e52c-4ca6-952b-959b191a1a8d",
        "cursor": {
          "ref": "342b35b2-87ea-40c9-9656-17e123b36949",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "84ead5d2-d8f9-4746-974b-54734482155f"
        },
        "item": {
          "id": "4ae1df3c-e52c-4ca6-952b-959b191a1a8d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "83a755d0-a17b-4061-9a3b-b0487a61b122",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "4ae1df3c-e52c-4ca6-952b-959b191a1a8d",
        "cursor": {
          "ref": "342b35b2-87ea-40c9-9656-17e123b36949",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "84ead5d2-d8f9-4746-974b-54734482155f"
        },
        "item": {
          "id": "4ae1df3c-e52c-4ca6-952b-959b191a1a8d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "83a755d0-a17b-4061-9a3b-b0487a61b122",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "693e8ee7-d5d0-45cd-8d4f-657398190eef",
        "cursor": {
          "ref": "7e71e97d-15e4-4244-ba7c-6c468c5b543c",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "31cc7fc7-ce1e-47f0-9a46-52e10e601d26"
        },
        "item": {
          "id": "693e8ee7-d5d0-45cd-8d4f-657398190eef",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2d8a166a-26b7-45da-a525-1d000d7319cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "693e8ee7-d5d0-45cd-8d4f-657398190eef",
        "cursor": {
          "ref": "7e71e97d-15e4-4244-ba7c-6c468c5b543c",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "31cc7fc7-ce1e-47f0-9a46-52e10e601d26"
        },
        "item": {
          "id": "693e8ee7-d5d0-45cd-8d4f-657398190eef",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2d8a166a-26b7-45da-a525-1d000d7319cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 44,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "f0285a48-d397-45d1-aabd-fd78558903e2",
        "cursor": {
          "ref": "b813bab7-cc63-4d8f-9dd3-ef6f67ff1598",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7efbe3e4-9be9-40ad-83b6-4fb6d9c51919"
        },
        "item": {
          "id": "f0285a48-d397-45d1-aabd-fd78558903e2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "53752f2c-ab3a-44f2-a3ad-9521a01586a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "f0285a48-d397-45d1-aabd-fd78558903e2",
        "cursor": {
          "ref": "b813bab7-cc63-4d8f-9dd3-ef6f67ff1598",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7efbe3e4-9be9-40ad-83b6-4fb6d9c51919"
        },
        "item": {
          "id": "f0285a48-d397-45d1-aabd-fd78558903e2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "53752f2c-ab3a-44f2-a3ad-9521a01586a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "372265aa-0ea9-43c6-b9e2-e629f3cbed41",
        "cursor": {
          "ref": "0d327ef1-fdd0-4919-9c9e-86cdbd93bb8c",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4b9f270d-bfb3-44d7-ae56-9b12eed94ad3"
        },
        "item": {
          "id": "372265aa-0ea9-43c6-b9e2-e629f3cbed41",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7a829667-1b38-4ddc-863d-9d7486867eed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "372265aa-0ea9-43c6-b9e2-e629f3cbed41",
        "cursor": {
          "ref": "0d327ef1-fdd0-4919-9c9e-86cdbd93bb8c",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4b9f270d-bfb3-44d7-ae56-9b12eed94ad3"
        },
        "item": {
          "id": "372265aa-0ea9-43c6-b9e2-e629f3cbed41",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7a829667-1b38-4ddc-863d-9d7486867eed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8d6cc944-73d0-4736-b654-c9fcde6e7d39",
        "cursor": {
          "ref": "f65be041-95e2-4374-8d19-748d92564ca6",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f1e15474-2eac-46f8-b52c-3123c82d0d4c"
        },
        "item": {
          "id": "8d6cc944-73d0-4736-b654-c9fcde6e7d39",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9fe7d127-6624-43a7-98ca-c9618cb5801d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "8d6cc944-73d0-4736-b654-c9fcde6e7d39",
        "cursor": {
          "ref": "f65be041-95e2-4374-8d19-748d92564ca6",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f1e15474-2eac-46f8-b52c-3123c82d0d4c"
        },
        "item": {
          "id": "8d6cc944-73d0-4736-b654-c9fcde6e7d39",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9fe7d127-6624-43a7-98ca-c9618cb5801d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "87ecf940-29bb-43c7-9bce-52ed3d587581",
        "cursor": {
          "ref": "dbc506d7-9d11-4729-9d54-a9d91c09c526",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0e6ab16d-c317-4ebe-9123-23e8bbf5ca24"
        },
        "item": {
          "id": "87ecf940-29bb-43c7-9bce-52ed3d587581",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2c1cd41b-dea9-469c-ba03-de612ef9242e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "87ecf940-29bb-43c7-9bce-52ed3d587581",
        "cursor": {
          "ref": "dbc506d7-9d11-4729-9d54-a9d91c09c526",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0e6ab16d-c317-4ebe-9123-23e8bbf5ca24"
        },
        "item": {
          "id": "87ecf940-29bb-43c7-9bce-52ed3d587581",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2c1cd41b-dea9-469c-ba03-de612ef9242e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "165c9d94-ca58-4a63-b080-368e0ddf456c",
        "cursor": {
          "ref": "5f4648cb-645f-42b0-9446-0e74ec2b97af",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7f8df26d-9143-4383-b5f0-73a96f34a8cb"
        },
        "item": {
          "id": "165c9d94-ca58-4a63-b080-368e0ddf456c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d868fd00-5597-4295-aead-e36b55a35184",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "165c9d94-ca58-4a63-b080-368e0ddf456c",
        "cursor": {
          "ref": "5f4648cb-645f-42b0-9446-0e74ec2b97af",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7f8df26d-9143-4383-b5f0-73a96f34a8cb"
        },
        "item": {
          "id": "165c9d94-ca58-4a63-b080-368e0ddf456c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d868fd00-5597-4295-aead-e36b55a35184",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a15911fd-4bff-4bfe-94f5-6e00281d1dc6",
        "cursor": {
          "ref": "7bcf48bd-4b0b-46bd-9afb-4123cae84a83",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b4a251d6-1045-4052-9a4c-5bd6f76586de"
        },
        "item": {
          "id": "a15911fd-4bff-4bfe-94f5-6e00281d1dc6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fac739e0-de7a-4fa1-b35a-6a4966e6aae2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "a15911fd-4bff-4bfe-94f5-6e00281d1dc6",
        "cursor": {
          "ref": "7bcf48bd-4b0b-46bd-9afb-4123cae84a83",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b4a251d6-1045-4052-9a4c-5bd6f76586de"
        },
        "item": {
          "id": "a15911fd-4bff-4bfe-94f5-6e00281d1dc6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fac739e0-de7a-4fa1-b35a-6a4966e6aae2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "eeb457e6-1d0a-43ec-af95-b08fc0ea2c58",
        "cursor": {
          "ref": "c480b39c-4dc4-4697-92f4-1d5f8b227d79",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6c5df89f-7885-444d-b3e1-7f8ee2b1b329"
        },
        "item": {
          "id": "eeb457e6-1d0a-43ec-af95-b08fc0ea2c58",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7e903522-c299-45c5-8f06-8c982499488f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "eeb457e6-1d0a-43ec-af95-b08fc0ea2c58",
        "cursor": {
          "ref": "c480b39c-4dc4-4697-92f4-1d5f8b227d79",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6c5df89f-7885-444d-b3e1-7f8ee2b1b329"
        },
        "item": {
          "id": "eeb457e6-1d0a-43ec-af95-b08fc0ea2c58",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7e903522-c299-45c5-8f06-8c982499488f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "72372150-6f1e-4092-a83a-71f3ee5eba9b",
        "cursor": {
          "ref": "98f7ec8d-00ba-4e60-8f09-6e84a2d44aea",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4270fa51-203a-4d3a-85f8-b6420d360a0f"
        },
        "item": {
          "id": "72372150-6f1e-4092-a83a-71f3ee5eba9b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9e2ad2c2-16ad-47cb-8ad7-f9aae0d9a75c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "72372150-6f1e-4092-a83a-71f3ee5eba9b",
        "cursor": {
          "ref": "98f7ec8d-00ba-4e60-8f09-6e84a2d44aea",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4270fa51-203a-4d3a-85f8-b6420d360a0f"
        },
        "item": {
          "id": "72372150-6f1e-4092-a83a-71f3ee5eba9b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9e2ad2c2-16ad-47cb-8ad7-f9aae0d9a75c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "9f711d94-88f6-414d-8654-81de791e4057",
        "cursor": {
          "ref": "ff2257f8-3613-42c1-aef3-98104395e83e",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "be2e2eca-b31c-4626-b0b8-b97e0b61e9ba"
        },
        "item": {
          "id": "9f711d94-88f6-414d-8654-81de791e4057",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3b76d011-bb99-4487-808f-24199e350508",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "9f711d94-88f6-414d-8654-81de791e4057",
        "cursor": {
          "ref": "ff2257f8-3613-42c1-aef3-98104395e83e",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "be2e2eca-b31c-4626-b0b8-b97e0b61e9ba"
        },
        "item": {
          "id": "9f711d94-88f6-414d-8654-81de791e4057",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3b76d011-bb99-4487-808f-24199e350508",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "60619fdf-ced8-44af-9af3-74607c6f3d80",
        "cursor": {
          "ref": "3049c521-1917-4cf6-9322-270720597e77",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "712c48a7-48be-403b-9bf1-c24e104f2a00"
        },
        "item": {
          "id": "60619fdf-ced8-44af-9af3-74607c6f3d80",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "169aaa81-9206-44a2-9e0c-54cc825b4f9f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "60619fdf-ced8-44af-9af3-74607c6f3d80",
        "cursor": {
          "ref": "3049c521-1917-4cf6-9322-270720597e77",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "712c48a7-48be-403b-9bf1-c24e104f2a00"
        },
        "item": {
          "id": "60619fdf-ced8-44af-9af3-74607c6f3d80",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "169aaa81-9206-44a2-9e0c-54cc825b4f9f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "73f1d171-760f-4f21-931c-13d24756a9b1",
        "cursor": {
          "ref": "f62b1a58-098c-45b6-ab22-25e8f7eb07e0",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e092dc54-22fc-4c60-82f0-a36236d28a36"
        },
        "item": {
          "id": "73f1d171-760f-4f21-931c-13d24756a9b1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c2d10ada-357c-4301-95b0-4bb22ef3085e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "73f1d171-760f-4f21-931c-13d24756a9b1",
        "cursor": {
          "ref": "f62b1a58-098c-45b6-ab22-25e8f7eb07e0",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e092dc54-22fc-4c60-82f0-a36236d28a36"
        },
        "item": {
          "id": "73f1d171-760f-4f21-931c-13d24756a9b1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c2d10ada-357c-4301-95b0-4bb22ef3085e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6d6b907a-6805-45d9-b6e5-10395c4f5a0d",
        "cursor": {
          "ref": "9e9ea877-cfcb-4862-9b60-75dfff0cfc32",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bcfb5a1c-0150-432d-9e2f-30b44e3b6c2f"
        },
        "item": {
          "id": "6d6b907a-6805-45d9-b6e5-10395c4f5a0d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e383b211-aa75-47a2-b144-d328b382ec4f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6d6b907a-6805-45d9-b6e5-10395c4f5a0d",
        "cursor": {
          "ref": "9e9ea877-cfcb-4862-9b60-75dfff0cfc32",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bcfb5a1c-0150-432d-9e2f-30b44e3b6c2f"
        },
        "item": {
          "id": "6d6b907a-6805-45d9-b6e5-10395c4f5a0d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e383b211-aa75-47a2-b144-d328b382ec4f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "276bb870-2209-4101-b308-a8379536f3f3",
        "cursor": {
          "ref": "1de9c60a-55e6-4cf9-b558-2449bb29b839",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4a50cc90-ae1a-492d-9bf2-2df55648fbe4"
        },
        "item": {
          "id": "276bb870-2209-4101-b308-a8379536f3f3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0aa2f3ed-e6e0-42f3-8952-1cac39f9817b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "276bb870-2209-4101-b308-a8379536f3f3",
        "cursor": {
          "ref": "1de9c60a-55e6-4cf9-b558-2449bb29b839",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4a50cc90-ae1a-492d-9bf2-2df55648fbe4"
        },
        "item": {
          "id": "276bb870-2209-4101-b308-a8379536f3f3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0aa2f3ed-e6e0-42f3-8952-1cac39f9817b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "066eae66-6231-4633-971d-5c71ede1ec7e",
        "cursor": {
          "ref": "efcda3e5-dbe3-4521-b5ff-6ed06931cee5",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cdd4bd66-08ce-4dae-8467-7fa8980d4b2b"
        },
        "item": {
          "id": "066eae66-6231-4633-971d-5c71ede1ec7e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "40dea938-6778-4824-b5cf-5601dff12c7a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "066eae66-6231-4633-971d-5c71ede1ec7e",
        "cursor": {
          "ref": "efcda3e5-dbe3-4521-b5ff-6ed06931cee5",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cdd4bd66-08ce-4dae-8467-7fa8980d4b2b"
        },
        "item": {
          "id": "066eae66-6231-4633-971d-5c71ede1ec7e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "40dea938-6778-4824-b5cf-5601dff12c7a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "681b6ff8-eb96-4f76-8b7a-3ba279586262",
        "cursor": {
          "ref": "ad3f6532-6fb8-45fa-b5f5-3c1a8507cc6d",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5a7b7564-1532-4ce4-923e-c168cfcef7f6"
        },
        "item": {
          "id": "681b6ff8-eb96-4f76-8b7a-3ba279586262",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9212e206-9218-4602-b8f7-924a1c0da520",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "681b6ff8-eb96-4f76-8b7a-3ba279586262",
        "cursor": {
          "ref": "ad3f6532-6fb8-45fa-b5f5-3c1a8507cc6d",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5a7b7564-1532-4ce4-923e-c168cfcef7f6"
        },
        "item": {
          "id": "681b6ff8-eb96-4f76-8b7a-3ba279586262",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9212e206-9218-4602-b8f7-924a1c0da520",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b2f939ed-1559-4b47-933d-024c9b8c1ee6",
        "cursor": {
          "ref": "a5277086-c8db-4ee4-983c-90b553e834e3",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "96874f21-c718-41fd-b2eb-1655e9e3f4d0"
        },
        "item": {
          "id": "b2f939ed-1559-4b47-933d-024c9b8c1ee6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b8f3877b-fd39-460a-8196-8f06c488044a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "b2f939ed-1559-4b47-933d-024c9b8c1ee6",
        "cursor": {
          "ref": "a5277086-c8db-4ee4-983c-90b553e834e3",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "96874f21-c718-41fd-b2eb-1655e9e3f4d0"
        },
        "item": {
          "id": "b2f939ed-1559-4b47-933d-024c9b8c1ee6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b8f3877b-fd39-460a-8196-8f06c488044a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "7dde0250-50e1-457e-bbcd-5050a6fab77a",
        "cursor": {
          "ref": "e4dc3795-539d-437f-84b1-4ddb3894ff26",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1c7f3d7b-d7a8-440d-8ccb-2904cfe48f34"
        },
        "item": {
          "id": "7dde0250-50e1-457e-bbcd-5050a6fab77a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aaebf534-8236-4793-a1f7-0a623620ccb1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "7dde0250-50e1-457e-bbcd-5050a6fab77a",
        "cursor": {
          "ref": "e4dc3795-539d-437f-84b1-4ddb3894ff26",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1c7f3d7b-d7a8-440d-8ccb-2904cfe48f34"
        },
        "item": {
          "id": "7dde0250-50e1-457e-bbcd-5050a6fab77a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aaebf534-8236-4793-a1f7-0a623620ccb1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "794e6a17-e9a0-49f9-9d8e-c7835f2c2722",
        "cursor": {
          "ref": "827f5917-b84e-45c8-9462-e90419ca0e51",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a101d6f7-1c96-41cc-880b-921ed985e77b"
        },
        "item": {
          "id": "794e6a17-e9a0-49f9-9d8e-c7835f2c2722",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "be7823d4-bb1b-4b28-b6f1-54431840ec00",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "794e6a17-e9a0-49f9-9d8e-c7835f2c2722",
        "cursor": {
          "ref": "827f5917-b84e-45c8-9462-e90419ca0e51",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a101d6f7-1c96-41cc-880b-921ed985e77b"
        },
        "item": {
          "id": "794e6a17-e9a0-49f9-9d8e-c7835f2c2722",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "be7823d4-bb1b-4b28-b6f1-54431840ec00",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "6424676b-165b-429b-b505-2de6e64a9ed8",
        "cursor": {
          "ref": "f48afd8d-1c09-4475-b1fc-31442290e1d4",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0b4cd7e0-45ac-497e-9146-61a69a8e0624"
        },
        "item": {
          "id": "6424676b-165b-429b-b505-2de6e64a9ed8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0d04ce9f-1f4b-48df-b5ac-e1c24c777e3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6424676b-165b-429b-b505-2de6e64a9ed8",
        "cursor": {
          "ref": "f48afd8d-1c09-4475-b1fc-31442290e1d4",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0b4cd7e0-45ac-497e-9146-61a69a8e0624"
        },
        "item": {
          "id": "6424676b-165b-429b-b505-2de6e64a9ed8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0d04ce9f-1f4b-48df-b5ac-e1c24c777e3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "bc61a71a-89fd-4747-8686-24cafd20531b",
        "cursor": {
          "ref": "1d2d584c-14d9-4d27-9bfb-f08dc4cd4f03",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "04fdea9c-d258-4bab-817e-4b447392cbd7"
        },
        "item": {
          "id": "bc61a71a-89fd-4747-8686-24cafd20531b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1d5bdc49-5968-4583-87f3-aa549c9f926f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "bc61a71a-89fd-4747-8686-24cafd20531b",
        "cursor": {
          "ref": "1d2d584c-14d9-4d27-9bfb-f08dc4cd4f03",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "04fdea9c-d258-4bab-817e-4b447392cbd7"
        },
        "item": {
          "id": "bc61a71a-89fd-4747-8686-24cafd20531b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1d5bdc49-5968-4583-87f3-aa549c9f926f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e3d6750e-c090-46e8-91ca-b08003342cbd",
        "cursor": {
          "ref": "02273980-ba7a-4379-b081-d389c54e81ef",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7a67877d-07d0-4283-ba88-f76071b74f95"
        },
        "item": {
          "id": "e3d6750e-c090-46e8-91ca-b08003342cbd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "80258909-1a4f-4f34-bc89-a0aeac98999b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "e3d6750e-c090-46e8-91ca-b08003342cbd",
        "cursor": {
          "ref": "02273980-ba7a-4379-b081-d389c54e81ef",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7a67877d-07d0-4283-ba88-f76071b74f95"
        },
        "item": {
          "id": "e3d6750e-c090-46e8-91ca-b08003342cbd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "80258909-1a4f-4f34-bc89-a0aeac98999b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "5b3ce249-9fd9-4288-b5bd-2fb85c93cd86",
        "cursor": {
          "ref": "1f51248e-6c67-4864-a021-dc6c33aa2e23",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "dc3ad41f-4f1f-4baa-836f-09e3a67f1acc"
        },
        "item": {
          "id": "5b3ce249-9fd9-4288-b5bd-2fb85c93cd86",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "dc15b0d8-7cb0-4ce5-a2aa-484d330f9b76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "5b3ce249-9fd9-4288-b5bd-2fb85c93cd86",
        "cursor": {
          "ref": "1f51248e-6c67-4864-a021-dc6c33aa2e23",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "dc3ad41f-4f1f-4baa-836f-09e3a67f1acc"
        },
        "item": {
          "id": "5b3ce249-9fd9-4288-b5bd-2fb85c93cd86",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "dc15b0d8-7cb0-4ce5-a2aa-484d330f9b76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "95fda053-74ff-411f-9ca2-f80ebccaeb9c",
        "cursor": {
          "ref": "b6ae2adf-e0b8-4223-9e62-2fa49346b1bc",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bee75690-9896-48a5-938b-b9f0e1d07c72"
        },
        "item": {
          "id": "95fda053-74ff-411f-9ca2-f80ebccaeb9c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1f23aa79-f5e0-4b3f-b79d-013b2273b00b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "95fda053-74ff-411f-9ca2-f80ebccaeb9c",
        "cursor": {
          "ref": "b6ae2adf-e0b8-4223-9e62-2fa49346b1bc",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bee75690-9896-48a5-938b-b9f0e1d07c72"
        },
        "item": {
          "id": "95fda053-74ff-411f-9ca2-f80ebccaeb9c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1f23aa79-f5e0-4b3f-b79d-013b2273b00b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "083ce297-5289-467f-91a9-8eeb6ee6b302",
        "cursor": {
          "ref": "64730d28-6077-4f92-a7b4-d4c0589fa3a6",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e909f52a-b5d9-4be3-b32f-06417b45965b"
        },
        "item": {
          "id": "083ce297-5289-467f-91a9-8eeb6ee6b302",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9bd63a70-8a70-4d33-b737-f83c0392a7ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "083ce297-5289-467f-91a9-8eeb6ee6b302",
        "cursor": {
          "ref": "64730d28-6077-4f92-a7b4-d4c0589fa3a6",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e909f52a-b5d9-4be3-b32f-06417b45965b"
        },
        "item": {
          "id": "083ce297-5289-467f-91a9-8eeb6ee6b302",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9bd63a70-8a70-4d33-b737-f83c0392a7ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "9701c636-4c5b-4491-9c99-76fbe47f7ddc",
        "cursor": {
          "ref": "be05b253-fdd7-4b39-b34f-017c86359cc9",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c5d1ee58-899b-4470-9ca5-d9475978ed6b"
        },
        "item": {
          "id": "9701c636-4c5b-4491-9c99-76fbe47f7ddc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2c4e39f7-5953-492f-afd7-6689cb9dd61c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "9701c636-4c5b-4491-9c99-76fbe47f7ddc",
        "cursor": {
          "ref": "be05b253-fdd7-4b39-b34f-017c86359cc9",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c5d1ee58-899b-4470-9ca5-d9475978ed6b"
        },
        "item": {
          "id": "9701c636-4c5b-4491-9c99-76fbe47f7ddc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2c4e39f7-5953-492f-afd7-6689cb9dd61c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "b6262c9d-5f1c-4d93-ba91-9da707797e3b",
        "cursor": {
          "ref": "bbd74d5d-dfc3-43a1-b475-d7ba980f5681",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "759b4a2d-b917-4b36-86f0-81365dc36a6a"
        },
        "item": {
          "id": "b6262c9d-5f1c-4d93-ba91-9da707797e3b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bc370ec3-4561-4ea9-b3c1-4e1301940e16",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "b6262c9d-5f1c-4d93-ba91-9da707797e3b",
        "cursor": {
          "ref": "bbd74d5d-dfc3-43a1-b475-d7ba980f5681",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "759b4a2d-b917-4b36-86f0-81365dc36a6a"
        },
        "item": {
          "id": "b6262c9d-5f1c-4d93-ba91-9da707797e3b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bc370ec3-4561-4ea9-b3c1-4e1301940e16",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "f5a97246-7d3a-46d1-9fbc-62f1a3f7e253",
        "cursor": {
          "ref": "aa567fa1-484a-4ae8-88c6-6b9879c0f7be",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "909a9402-52d6-43e4-bb10-ba35bac41446"
        },
        "item": {
          "id": "f5a97246-7d3a-46d1-9fbc-62f1a3f7e253",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "14bce586-1786-4e71-9a7a-d616eb94a588",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "f5a97246-7d3a-46d1-9fbc-62f1a3f7e253",
        "cursor": {
          "ref": "aa567fa1-484a-4ae8-88c6-6b9879c0f7be",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "909a9402-52d6-43e4-bb10-ba35bac41446"
        },
        "item": {
          "id": "f5a97246-7d3a-46d1-9fbc-62f1a3f7e253",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "14bce586-1786-4e71-9a7a-d616eb94a588",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "99c9ab63-4505-45b1-ac85-747e164fd9c0",
        "cursor": {
          "ref": "729fd5a0-c5a6-4344-9e21-3fc2671f0756",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4c9bcf1f-1fed-4358-9ded-206284bb694e"
        },
        "item": {
          "id": "99c9ab63-4505-45b1-ac85-747e164fd9c0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a49c0662-4f51-43ce-b4f2-b93badcfa5f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "99c9ab63-4505-45b1-ac85-747e164fd9c0",
        "cursor": {
          "ref": "729fd5a0-c5a6-4344-9e21-3fc2671f0756",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4c9bcf1f-1fed-4358-9ded-206284bb694e"
        },
        "item": {
          "id": "99c9ab63-4505-45b1-ac85-747e164fd9c0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a49c0662-4f51-43ce-b4f2-b93badcfa5f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "a44d059d-bb61-4835-8863-bd8f498a01b1",
        "cursor": {
          "ref": "5194df02-0a65-4b48-a83a-b0578ad7236a",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "895f7515-4565-4367-abdb-a913f5ccaecd"
        },
        "item": {
          "id": "a44d059d-bb61-4835-8863-bd8f498a01b1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "35f54454-dd69-4f73-a833-fcc16df1fe87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "a44d059d-bb61-4835-8863-bd8f498a01b1",
        "cursor": {
          "ref": "5194df02-0a65-4b48-a83a-b0578ad7236a",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "895f7515-4565-4367-abdb-a913f5ccaecd"
        },
        "item": {
          "id": "a44d059d-bb61-4835-8863-bd8f498a01b1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "35f54454-dd69-4f73-a833-fcc16df1fe87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "3496ca8c-4c57-4559-8497-3c9fb5205437",
        "cursor": {
          "ref": "dc8d077e-89a2-4d1c-a242-de5ee3e45eb0",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8e648544-8986-49ed-9998-46e8636051b2"
        },
        "item": {
          "id": "3496ca8c-4c57-4559-8497-3c9fb5205437",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c3492964-9ff2-43f4-8657-f40615eb5a87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "3496ca8c-4c57-4559-8497-3c9fb5205437",
        "cursor": {
          "ref": "dc8d077e-89a2-4d1c-a242-de5ee3e45eb0",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8e648544-8986-49ed-9998-46e8636051b2"
        },
        "item": {
          "id": "3496ca8c-4c57-4559-8497-3c9fb5205437",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c3492964-9ff2-43f4-8657-f40615eb5a87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "fc88c17b-6e85-4161-ada3-46abae06001f",
        "cursor": {
          "ref": "020b67b3-18d6-4932-9386-c8d105894038",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6380a265-abdf-4eb3-897a-5a215c326463"
        },
        "item": {
          "id": "fc88c17b-6e85-4161-ada3-46abae06001f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "137e9c40-5c7f-45ae-8dfb-e0f7a9496aba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "fc88c17b-6e85-4161-ada3-46abae06001f",
        "cursor": {
          "ref": "020b67b3-18d6-4932-9386-c8d105894038",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6380a265-abdf-4eb3-897a-5a215c326463"
        },
        "item": {
          "id": "fc88c17b-6e85-4161-ada3-46abae06001f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "137e9c40-5c7f-45ae-8dfb-e0f7a9496aba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "1e34df8f-7a16-47b6-ac37-69e91fe5d8e0",
        "cursor": {
          "ref": "8b044a57-b4b4-48b5-9fab-8c6921703559",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e64fe9da-ef74-4a6c-a326-e88e60b33651"
        },
        "item": {
          "id": "1e34df8f-7a16-47b6-ac37-69e91fe5d8e0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "82af4045-0add-4e17-a5fd-1156f99adf6e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "1e34df8f-7a16-47b6-ac37-69e91fe5d8e0",
        "cursor": {
          "ref": "8b044a57-b4b4-48b5-9fab-8c6921703559",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e64fe9da-ef74-4a6c-a326-e88e60b33651"
        },
        "item": {
          "id": "1e34df8f-7a16-47b6-ac37-69e91fe5d8e0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "82af4045-0add-4e17-a5fd-1156f99adf6e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "cb4997f4-4258-4c6e-adcf-0c4ca2924a37",
        "cursor": {
          "ref": "9da4e604-2e8e-4179-a971-62f4a67ec767",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a6b3e5e8-e24c-4600-9d40-4f0c447c6d56"
        },
        "item": {
          "id": "cb4997f4-4258-4c6e-adcf-0c4ca2924a37",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0672f240-4f35-404a-b7d5-8503d3ff6ac3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "cb4997f4-4258-4c6e-adcf-0c4ca2924a37",
        "cursor": {
          "ref": "9da4e604-2e8e-4179-a971-62f4a67ec767",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a6b3e5e8-e24c-4600-9d40-4f0c447c6d56"
        },
        "item": {
          "id": "cb4997f4-4258-4c6e-adcf-0c4ca2924a37",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0672f240-4f35-404a-b7d5-8503d3ff6ac3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "af1f5a09-f59b-474f-b0fd-3b7d4394170a",
        "cursor": {
          "ref": "ffeec945-b0e3-4eb4-a731-64ef115e98d1",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bbca6bb4-c5a9-436c-99f5-cb3d8f07602d"
        },
        "item": {
          "id": "af1f5a09-f59b-474f-b0fd-3b7d4394170a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a715d2b8-4b63-4bd1-a1b6-a1027decc991",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "af1f5a09-f59b-474f-b0fd-3b7d4394170a",
        "cursor": {
          "ref": "ffeec945-b0e3-4eb4-a731-64ef115e98d1",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bbca6bb4-c5a9-436c-99f5-cb3d8f07602d"
        },
        "item": {
          "id": "af1f5a09-f59b-474f-b0fd-3b7d4394170a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a715d2b8-4b63-4bd1-a1b6-a1027decc991",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c6b8a27a-4e62-4a5c-9217-2c1cfe901722",
        "cursor": {
          "ref": "78839609-9b4a-4ce0-8e33-15e4f72a9aaf",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9bfe7d0d-4f22-47b9-ac60-7e34128f6b60"
        },
        "item": {
          "id": "c6b8a27a-4e62-4a5c-9217-2c1cfe901722",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6d7bea34-6b77-4d82-bc57-546e2b5fd130",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c6b8a27a-4e62-4a5c-9217-2c1cfe901722",
        "cursor": {
          "ref": "78839609-9b4a-4ce0-8e33-15e4f72a9aaf",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9bfe7d0d-4f22-47b9-ac60-7e34128f6b60"
        },
        "item": {
          "id": "c6b8a27a-4e62-4a5c-9217-2c1cfe901722",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6d7bea34-6b77-4d82-bc57-546e2b5fd130",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "20178bb9-1bf3-4c68-8730-1b9b4fb54e43",
        "cursor": {
          "ref": "b6a23f1e-e26f-43c4-b5ed-3b579ea75730",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "080593da-74ba-4fa7-8b3e-b1bbec0b9a7f"
        },
        "item": {
          "id": "20178bb9-1bf3-4c68-8730-1b9b4fb54e43",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "04d76f36-7c22-452a-ad6b-87bd7d9a580f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "20178bb9-1bf3-4c68-8730-1b9b4fb54e43",
        "cursor": {
          "ref": "b6a23f1e-e26f-43c4-b5ed-3b579ea75730",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "080593da-74ba-4fa7-8b3e-b1bbec0b9a7f"
        },
        "item": {
          "id": "20178bb9-1bf3-4c68-8730-1b9b4fb54e43",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "04d76f36-7c22-452a-ad6b-87bd7d9a580f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2926e6fe-4703-4837-a6e5-78b306aef19e",
        "cursor": {
          "ref": "e206af5f-1a45-4500-815e-5de4321a312d",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0b96ef02-7e42-4852-9e69-4d34ef71dce4"
        },
        "item": {
          "id": "2926e6fe-4703-4837-a6e5-78b306aef19e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "db392bb2-c411-45ac-b013-7318770d1f84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "2926e6fe-4703-4837-a6e5-78b306aef19e",
        "cursor": {
          "ref": "e206af5f-1a45-4500-815e-5de4321a312d",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0b96ef02-7e42-4852-9e69-4d34ef71dce4"
        },
        "item": {
          "id": "2926e6fe-4703-4837-a6e5-78b306aef19e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "db392bb2-c411-45ac-b013-7318770d1f84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9199f22b-3d0f-4d39-97d9-e9b8efd96f09",
        "cursor": {
          "ref": "95a40f6e-9c0c-48d2-ac9b-371a0263cfcf",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1d349eaa-8eb9-4299-9489-1557dfc84d8f"
        },
        "item": {
          "id": "9199f22b-3d0f-4d39-97d9-e9b8efd96f09",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "60f2c3b5-f2c2-4407-9ce1-7d0a5fa756f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9199f22b-3d0f-4d39-97d9-e9b8efd96f09",
        "cursor": {
          "ref": "95a40f6e-9c0c-48d2-ac9b-371a0263cfcf",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1d349eaa-8eb9-4299-9489-1557dfc84d8f"
        },
        "item": {
          "id": "9199f22b-3d0f-4d39-97d9-e9b8efd96f09",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "60f2c3b5-f2c2-4407-9ce1-7d0a5fa756f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d90bf347-bb42-42e7-96fc-97fa727fafcb",
        "cursor": {
          "ref": "9b46cd86-aeee-4e82-950a-3656f9075f7d",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0b74bdac-c61b-4b7f-ab82-33025b9833f0"
        },
        "item": {
          "id": "d90bf347-bb42-42e7-96fc-97fa727fafcb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a122b5ff-843c-4e12-b1f3-7b9cdb3f2897",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "d90bf347-bb42-42e7-96fc-97fa727fafcb",
        "cursor": {
          "ref": "9b46cd86-aeee-4e82-950a-3656f9075f7d",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0b74bdac-c61b-4b7f-ab82-33025b9833f0"
        },
        "item": {
          "id": "d90bf347-bb42-42e7-96fc-97fa727fafcb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a122b5ff-843c-4e12-b1f3-7b9cdb3f2897",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "8d55b4cb-560a-44ab-b3cd-5d16e7e63af8",
        "cursor": {
          "ref": "255536d6-c792-4ecc-bf0d-551640ccbdc8",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1193f5d4-6637-4535-88be-93d9ec9a7b30"
        },
        "item": {
          "id": "8d55b4cb-560a-44ab-b3cd-5d16e7e63af8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7aa4e2e0-7268-4572-a3fa-a4d4bc850e3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "8d55b4cb-560a-44ab-b3cd-5d16e7e63af8",
        "cursor": {
          "ref": "255536d6-c792-4ecc-bf0d-551640ccbdc8",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1193f5d4-6637-4535-88be-93d9ec9a7b30"
        },
        "item": {
          "id": "8d55b4cb-560a-44ab-b3cd-5d16e7e63af8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7aa4e2e0-7268-4572-a3fa-a4d4bc850e3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "ffb3d64c-4aa6-4ba4-b81e-bf987df67b70",
        "cursor": {
          "ref": "0659b2de-b2ce-452c-b14b-5165c347eead",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ca8d3d8b-0b89-42b0-b694-f55ad008cb51"
        },
        "item": {
          "id": "ffb3d64c-4aa6-4ba4-b81e-bf987df67b70",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b76f606b-8c6a-489b-b97b-336f0951e30b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ffb3d64c-4aa6-4ba4-b81e-bf987df67b70",
        "cursor": {
          "ref": "0659b2de-b2ce-452c-b14b-5165c347eead",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ca8d3d8b-0b89-42b0-b694-f55ad008cb51"
        },
        "item": {
          "id": "ffb3d64c-4aa6-4ba4-b81e-bf987df67b70",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b76f606b-8c6a-489b-b97b-336f0951e30b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "2051a321-1c1a-47df-b582-c1f65a7052ae",
        "cursor": {
          "ref": "0c84171b-abb6-4720-bb5e-fe47f77d1842",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "65e7fb57-6b08-4136-8569-f72e8be51ee2"
        },
        "item": {
          "id": "2051a321-1c1a-47df-b582-c1f65a7052ae",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fe2344d6-5259-49c6-86b5-a6650c061461",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "2051a321-1c1a-47df-b582-c1f65a7052ae",
        "cursor": {
          "ref": "0c84171b-abb6-4720-bb5e-fe47f77d1842",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "65e7fb57-6b08-4136-8569-f72e8be51ee2"
        },
        "item": {
          "id": "2051a321-1c1a-47df-b582-c1f65a7052ae",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fe2344d6-5259-49c6-86b5-a6650c061461",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "a08bf4cb-4141-4852-99cb-bac6a0491656",
        "cursor": {
          "ref": "2fad50fa-866c-4e85-a5d1-66543201c07d",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "acdb542c-7572-4e2e-8629-4032d38ee03a"
        },
        "item": {
          "id": "a08bf4cb-4141-4852-99cb-bac6a0491656",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "20e37f56-ed5b-4be8-a652-07be09e0a291",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "a08bf4cb-4141-4852-99cb-bac6a0491656",
        "cursor": {
          "ref": "2fad50fa-866c-4e85-a5d1-66543201c07d",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "acdb542c-7572-4e2e-8629-4032d38ee03a"
        },
        "item": {
          "id": "a08bf4cb-4141-4852-99cb-bac6a0491656",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "20e37f56-ed5b-4be8-a652-07be09e0a291",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "423ccfa4-3f70-4d55-bd41-5bc43b8025e8",
        "cursor": {
          "ref": "79d940c4-9ce5-45a1-938a-3715a1b5e235",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f9bb7789-84cb-4613-bca4-b0a3f0a75b2a"
        },
        "item": {
          "id": "423ccfa4-3f70-4d55-bd41-5bc43b8025e8",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "423ccfa4-3f70-4d55-bd41-5bc43b8025e8",
        "cursor": {
          "ref": "79d940c4-9ce5-45a1-938a-3715a1b5e235",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f9bb7789-84cb-4613-bca4-b0a3f0a75b2a"
        },
        "item": {
          "id": "423ccfa4-3f70-4d55-bd41-5bc43b8025e8",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "423ccfa4-3f70-4d55-bd41-5bc43b8025e8",
        "cursor": {
          "ref": "79d940c4-9ce5-45a1-938a-3715a1b5e235",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f9bb7789-84cb-4613-bca4-b0a3f0a75b2a"
        },
        "item": {
          "id": "423ccfa4-3f70-4d55-bd41-5bc43b8025e8",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "72ee09b9-bafb-4998-a03d-edff85bd6191",
        "cursor": {
          "ref": "c59293f6-8261-4f2e-a4e3-563b458b7a41",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "47412706-1aa3-4de2-ac95-c2f25d5e33f4"
        },
        "item": {
          "id": "72ee09b9-bafb-4998-a03d-edff85bd6191",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "72ee09b9-bafb-4998-a03d-edff85bd6191",
        "cursor": {
          "ref": "c59293f6-8261-4f2e-a4e3-563b458b7a41",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "47412706-1aa3-4de2-ac95-c2f25d5e33f4"
        },
        "item": {
          "id": "72ee09b9-bafb-4998-a03d-edff85bd6191",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "72ee09b9-bafb-4998-a03d-edff85bd6191",
        "cursor": {
          "ref": "c59293f6-8261-4f2e-a4e3-563b458b7a41",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "47412706-1aa3-4de2-ac95-c2f25d5e33f4"
        },
        "item": {
          "id": "72ee09b9-bafb-4998-a03d-edff85bd6191",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e9233555-bd32-403b-a14d-cafbc30f8340",
        "cursor": {
          "ref": "f285937e-43b7-42d8-ad72-b9970d35d56d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "306294c0-5d6d-47ad-b55c-04615e583e79"
        },
        "item": {
          "id": "e9233555-bd32-403b-a14d-cafbc30f8340",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e9233555-bd32-403b-a14d-cafbc30f8340",
        "cursor": {
          "ref": "f285937e-43b7-42d8-ad72-b9970d35d56d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "306294c0-5d6d-47ad-b55c-04615e583e79"
        },
        "item": {
          "id": "e9233555-bd32-403b-a14d-cafbc30f8340",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e9233555-bd32-403b-a14d-cafbc30f8340",
        "cursor": {
          "ref": "f285937e-43b7-42d8-ad72-b9970d35d56d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "306294c0-5d6d-47ad-b55c-04615e583e79"
        },
        "item": {
          "id": "e9233555-bd32-403b-a14d-cafbc30f8340",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d2f54889-9dcb-4bc7-8efc-8463e099013d",
        "cursor": {
          "ref": "08033c13-f805-46d5-8555-5f14542f6a12",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "06ca455d-a388-4aa7-ab29-ba7194166621"
        },
        "item": {
          "id": "d2f54889-9dcb-4bc7-8efc-8463e099013d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "d2f54889-9dcb-4bc7-8efc-8463e099013d",
        "cursor": {
          "ref": "08033c13-f805-46d5-8555-5f14542f6a12",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "06ca455d-a388-4aa7-ab29-ba7194166621"
        },
        "item": {
          "id": "d2f54889-9dcb-4bc7-8efc-8463e099013d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "d2f54889-9dcb-4bc7-8efc-8463e099013d",
        "cursor": {
          "ref": "08033c13-f805-46d5-8555-5f14542f6a12",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "06ca455d-a388-4aa7-ab29-ba7194166621"
        },
        "item": {
          "id": "d2f54889-9dcb-4bc7-8efc-8463e099013d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "00b2f2f9-00cd-45ef-a446-12501cfbd2cb",
        "cursor": {
          "ref": "44212311-191a-4eae-9738-821fce9c9678",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e1f8a604-4b2f-49af-8ad3-4f4ecbf72ccc"
        },
        "item": {
          "id": "00b2f2f9-00cd-45ef-a446-12501cfbd2cb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "00b2f2f9-00cd-45ef-a446-12501cfbd2cb",
        "cursor": {
          "ref": "44212311-191a-4eae-9738-821fce9c9678",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e1f8a604-4b2f-49af-8ad3-4f4ecbf72ccc"
        },
        "item": {
          "id": "00b2f2f9-00cd-45ef-a446-12501cfbd2cb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "00b2f2f9-00cd-45ef-a446-12501cfbd2cb",
        "cursor": {
          "ref": "44212311-191a-4eae-9738-821fce9c9678",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e1f8a604-4b2f-49af-8ad3-4f4ecbf72ccc"
        },
        "item": {
          "id": "00b2f2f9-00cd-45ef-a446-12501cfbd2cb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "e30dc99e-0f03-44e4-903c-3fe8cee6a002",
        "cursor": {
          "ref": "5841f0cf-ce25-476e-a377-9f6905fca23b",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4cab1cd6-bfbc-4ef7-9133-d1ed68879269"
        },
        "item": {
          "id": "e30dc99e-0f03-44e4-903c-3fe8cee6a002",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "e30dc99e-0f03-44e4-903c-3fe8cee6a002",
        "cursor": {
          "ref": "5841f0cf-ce25-476e-a377-9f6905fca23b",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4cab1cd6-bfbc-4ef7-9133-d1ed68879269"
        },
        "item": {
          "id": "e30dc99e-0f03-44e4-903c-3fe8cee6a002",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "e30dc99e-0f03-44e4-903c-3fe8cee6a002",
        "cursor": {
          "ref": "5841f0cf-ce25-476e-a377-9f6905fca23b",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4cab1cd6-bfbc-4ef7-9133-d1ed68879269"
        },
        "item": {
          "id": "e30dc99e-0f03-44e4-903c-3fe8cee6a002",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}